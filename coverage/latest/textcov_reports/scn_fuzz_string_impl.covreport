_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  97.2k|{
 4068|  97.2k|    if constexpr (sizeof(U) == 1) {
 4069|  97.2k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  97.2k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  97.2k|{
 4032|  97.2k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  97.2k|    SCN_GCC_COMPAT_PUSH
 4035|  97.2k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  97.2k|    constexpr char lengths[] =
 4037|  97.2k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  97.2k|        "\1\1\1\1\1\1\1\1"
 4039|  97.2k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  97.2k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  97.2k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  97.2k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  97.2k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  97.2k|    SCN_GCC_COMPAT_POP
 4046|  97.2k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  21.8k|{
 4274|  21.8k|    if constexpr (sizeof(CharT) == 1) {
 4275|  21.8k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  21.8k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  21.8k|{
 4087|  21.8k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  21.8k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  21.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  21.8k|    };
 4092|       |
 4093|  21.8k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 14.5k, False: 7.30k]
  ------------------
 4094|  14.5k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 0, False: 14.5k]
  ------------------
 4095|      0|            SCN_UNLIKELY_ATTR
 4096|      0|            return invalid_code_point;
 4097|      0|        }
 4098|  14.5k|        return static_cast<char32_t>(input[0]);
 4099|  14.5k|    }
 4100|       |
 4101|  7.30k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 1.98k, False: 5.31k]
  ------------------
 4102|  1.98k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 0, False: 1.98k]
  ------------------
 4103|      0|            SCN_UNLIKELY_ATTR
 4104|      0|            return invalid_code_point;
 4105|      0|        }
 4106|  1.98k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 1.16k, False: 820]
  ------------------
 4107|  1.16k|            SCN_UNLIKELY_ATTR
 4108|  1.16k|            return invalid_code_point;
 4109|  1.16k|        }
 4110|       |
 4111|    820|        char32_t cp{};
 4112|    820|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|    820|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|    820|        return cp;
 4115|  1.98k|    }
 4116|       |
 4117|  5.31k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 2.76k, False: 2.55k]
  ------------------
 4118|  2.76k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 0, False: 2.76k]
  ------------------
 4119|      0|            SCN_UNLIKELY_ATTR
 4120|      0|            return invalid_code_point;
 4121|      0|        }
 4122|  2.76k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 377, False: 2.38k]
  ------------------
 4123|  2.76k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 267, False: 2.11k]
  ------------------
 4124|    644|            SCN_UNLIKELY_ATTR
 4125|    644|            return invalid_code_point;
 4126|    644|        }
 4127|       |
 4128|  2.11k|        char32_t cp{};
 4129|  2.11k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  2.11k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  2.11k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  2.11k|        return cp;
 4133|  2.76k|    }
 4134|       |
 4135|  2.55k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 2.55k, False: 0]
  ------------------
 4136|  2.55k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 2.55k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  2.55k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 226, False: 2.33k]
  ------------------
 4141|    226|            SCN_UNLIKELY_ATTR
 4142|    226|            return invalid_code_point;
 4143|    226|        }
 4144|  2.33k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 498, False: 1.83k]
  ------------------
 4145|  2.33k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 246, False: 1.58k]
  ------------------
 4146|  2.33k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 195, False: 1.39k]
  ------------------
 4147|    939|            SCN_UNLIKELY_ATTR
 4148|    939|            return invalid_code_point;
 4149|    939|        }
 4150|       |
 4151|  1.39k|        char32_t cp{};
 4152|  1.39k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  1.39k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  1.39k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  1.39k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  1.39k|        return cp;
 4157|  2.33k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  12.8k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  12.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  12.8k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  52.3k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  52.3k|    else {
 3966|  52.3k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  52.3k|                                       to_address(first), to_address(last)))};
 3968|  52.3k|    }
 3969|  52.3k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   165k|{
  316|   165k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   165k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   165k|{
  294|   165k|    return p;
  295|   165k|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  29.0k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  29.0k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  29.0k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  29.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  29.0k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  29.0k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  21.0k|{
 4308|       |    // Pattern_White_Space property
 4309|  21.0k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 19.2k, False: 1.76k]
  |  Branch (4309:27): [True: 1.06k, False: 18.2k]
  ------------------
 4310|  21.0k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 1.67k, False: 18.3k]
  ------------------
 4311|  21.0k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 398, False: 17.9k]
  ------------------
 4312|  21.0k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 400, False: 17.5k]
  ------------------
 4313|  21.0k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 430, False: 17.0k]
  ------------------
 4314|  21.0k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 502, False: 16.5k]
  ------------------
 4315|  21.0k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 16.5k]
  ------------------
 4316|  21.0k|}

_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  4.46k|{
  207|  4.46k|    return find_classic_impl(
  208|  4.46k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  4.46k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  4.46k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  12.4k|{
  215|  12.4k|    return find_classic_impl(
  216|  12.4k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  12.4k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  12.4k|}
_ZN3scn2v44impl33find_nondecimal_digit_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  222|  17.8k|{
  223|  17.8k|    return find_nondecimal_digit_simple_impl(source);
  224|  17.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEE:
  198|  17.8k|{
  199|  17.8k|    return std::find_if(source.begin(), source.end(),
  200|  17.8k|                        [](char ch) noexcept { return !is_decimal_digit(ch); });
  201|  17.8k|}
impl.cpp:_ZZN3scn2v44impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEENK3$_0clEc:
  200|  18.3k|                        [](char ch) noexcept { return !is_decimal_digit(ch); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116is_decimal_digitEc:
  164|  18.3k|{
  165|  18.3k|    static constexpr std::array<bool, 256> lookup = {
  166|  18.3k|        {false, false, false, false, false, false, false, false, false, false,
  167|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  168|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  169|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  170|  18.3k|         false, false, false, false, false, false, false, false, true,  true,
  171|  18.3k|         true,  true,  true,  true,  true,  true,  true,  true,  false, false,
  172|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  173|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  174|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  175|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  176|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  177|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  178|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  179|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  180|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  181|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  182|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  183|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  184|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  185|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  186|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  187|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  188|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  189|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  190|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  191|  18.3k|         false, false, false, false, false, false}};
  192|       |
  193|  18.3k|    return lookup[static_cast<size_t>(static_cast<unsigned char>(ch))];
  194|  18.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  4.46k|{
  131|  4.46k|    auto it = source.begin();
  132|       |
  133|  6.54k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 6.30k, False: 241]
  ------------------
  134|  6.30k|        auto sv =
  135|  6.30k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  6.30k|                .substr(0, 8);
  137|       |
  138|  6.30k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.25k, False: 4.04k]
  ------------------
  139|  2.25k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.25k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.25k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 1.97k, False: 280]
  ------------------
  142|  1.97k|                break;
  143|  1.97k|            }
  144|    280|            continue;
  145|  2.25k|        }
  146|       |
  147|  10.2k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 8.49k, False: 1.80k]
  ------------------
  148|  8.49k|            auto tmp =
  149|  8.49k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  8.49k|            auto res = get_next_code_point(tmp);
  151|  8.49k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 2.24k, False: 6.24k]
  ------------------
  152|  2.24k|                return it;
  153|  2.24k|            }
  154|  6.24k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  6.24k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  6.24k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  6.24k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  6.24k|        }
  158|  4.04k|    }
  159|       |
  160|  2.21k|    return detail::make_string_view_iterator(source, it);
  161|  4.46k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  19.6k|{
  118|  19.6k|    static_assert(sizeof(*source.data()) == 1);
  119|  19.6k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  19.6k|    uint64_t word{};
  121|  19.6k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  19.6k|    return has_byte_greater(word, 127) != 0;
  124|  19.6k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  3.97k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  8.49k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  12.4k|{
  131|  12.4k|    auto it = source.begin();
  132|       |
  133|  13.4k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 13.3k, False: 106]
  ------------------
  134|  13.3k|        auto sv =
  135|  13.3k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  13.3k|                .substr(0, 8);
  137|       |
  138|  13.3k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.35k, False: 11.0k]
  ------------------
  139|  2.35k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.35k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.35k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 2.02k, False: 328]
  ------------------
  142|  2.02k|                break;
  143|  2.02k|            }
  144|    328|            continue;
  145|  2.35k|        }
  146|       |
  147|  13.2k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 12.5k, False: 672]
  ------------------
  148|  12.5k|            auto tmp =
  149|  12.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  12.5k|            auto res = get_next_code_point(tmp);
  151|  12.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 10.3k, False: 2.23k]
  ------------------
  152|  10.3k|                return it;
  153|  10.3k|            }
  154|  2.23k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  2.23k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  2.23k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  2.23k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  2.23k|        }
  158|  11.0k|    }
  159|       |
  160|  2.13k|    return detail::make_string_view_iterator(source, it);
  161|  12.4k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  4.23k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  12.5k|        [](char32_t cp) { return !detail::is_cp_space(cp); });

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    310|{
 1462|    310|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    310|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    310|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    310|            return transcode_to_string_impl_to32(src, dest);
 1473|    310|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    310|    SCN_EXPECT(false);
  ------------------
  |  |  930|    310|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    310|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    310|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    310|{
 1355|    310|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    310|    auto it = src.begin();
 1358|  11.9k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 11.6k, False: 310]
  ------------------
 1359|  11.6k|        auto res = get_next_code_point(
 1360|  11.6k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|  11.6k|                                                                 src.end()));
 1362|  11.6k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.72k, False: 8.87k]
  |  |  ------------------
  ------------------
 1363|  2.72k|            dest.push_back(DestCharT{0xfffd});
 1364|  2.72k|        }
 1365|  8.87k|        else {
 1366|  8.87k|            dest.push_back(res.value);
 1367|  8.87k|        }
 1368|  11.6k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|  11.6k|    }
 1370|    310|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  32.6k|{
 1279|  32.6k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  32.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  32.6k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  32.6k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 21.9k]
  |  |  ------------------
  ------------------
 1283|  10.6k|        return {get_start_for_next_code_point(input),
 1284|  10.6k|                detail::invalid_code_point};
 1285|  10.6k|    }
 1286|  21.9k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 155, False: 21.8k]
  |  |  ------------------
  ------------------
 1287|    155|        return {input.end(), detail::invalid_code_point};
 1288|    155|    }
 1289|       |
 1290|  21.8k|    return {input.begin() + len,
 1291|  21.8k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  21.9k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  10.6k|{
 1265|  10.6k|    auto it = input.begin();
 1266|  65.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 64.5k, False: 730]
  ------------------
 1267|  64.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 9.96k, False: 54.5k]
  ------------------
 1268|  9.96k|            break;
 1269|  9.96k|        }
 1270|  64.5k|    }
 1271|  10.6k|    return it;
 1272|  10.6k|}
_ZN3scn2v44impl19transcode_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    310|{
 1462|    310|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1472|       |            return transcode_to_string_impl_to32(src, dest);
 1473|       |        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|    310|    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|    310|        if constexpr (sizeof(DestCharT) == 1) {
 1488|    310|            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|    310|    }
 1494|       |
 1495|    310|    SCN_EXPECT(false);
  ------------------
  |  |  930|    310|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    310|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    310|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb0EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|    310|{
 1393|    310|    static_assert(sizeof(SourceCharT) == 4);
 1394|    310|    static_assert(sizeof(DestCharT) == 1);
 1395|       |
 1396|  11.6k|    for (auto cp : src) {
  ------------------
  |  Branch (1396:18): [True: 11.6k, False: 310]
  ------------------
 1397|  11.6k|        const auto u32cp = static_cast<uint32_t>(cp);
 1398|  11.6k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  865|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 194, False: 11.4k]
  |  |  |  Branch (865:45): [Folded - Ignored]
  |  |  |  Branch (865:45): [True: 194, False: 11.4k]
  |  |  ------------------
  ------------------
 1399|       |            // Replacement character
 1400|    194|            dest.push_back(static_cast<char>(0xef));
 1401|    194|            dest.push_back(static_cast<char>(0xbf));
 1402|    194|            dest.push_back(static_cast<char>(0xbd));
 1403|    194|        }
 1404|  11.4k|        else if (cp < 128) {
  ------------------
  |  Branch (1404:18): [True: 7.46k, False: 3.94k]
  ------------------
 1405|  7.46k|            dest.push_back(static_cast<char>(cp));
 1406|  7.46k|        }
 1407|  3.94k|        else if (cp < 2048) {
  ------------------
  |  Branch (1407:18): [True: 249, False: 3.69k]
  ------------------
 1408|    249|            dest.push_back(
 1409|    249|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1410|    249|            dest.push_back(
 1411|    249|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1412|    249|        }
 1413|  3.69k|        else if (cp < 65536) {
  ------------------
  |  Branch (1413:18): [True: 3.42k, False: 269]
  ------------------
 1414|  3.42k|            dest.push_back(
 1415|  3.42k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1416|  3.42k|            dest.push_back(static_cast<char>(
 1417|  3.42k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1418|  3.42k|            dest.push_back(
 1419|  3.42k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1420|  3.42k|        }
 1421|    269|        else {
 1422|    269|            dest.push_back(
 1423|    269|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1424|    269|            dest.push_back(static_cast<char>(
 1425|    269|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1426|    269|            dest.push_back(static_cast<char>(
 1427|    269|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1428|    269|            dest.push_back(
 1429|    269|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1430|    269|        }
 1431|  11.6k|    }
 1432|    310|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  8.21k|{
  458|  8.21k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  8.21k|        static_cast<unsigned char>(ch))];
  460|  8.21k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  19.6k|{
  539|  19.6k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  19.6k|}
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.47k|    {
  108|  8.47k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.47k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.47k|    {
   87|  8.47k|        return s - i;
   88|  8.47k|    }

LLVMFuzzerTestOneInput:
   41|    310|{
   42|    310|    auto sv = std::string_view{reinterpret_cast<const char*>(data), size};
   43|    310|    do_find(sv, scn::impl::find_classic_space_narrow_fast);
   44|    310|    do_find(sv, scn::impl::find_classic_nonspace_narrow_fast);
   45|    310|    do_find(sv, scn::impl::find_nondecimal_digit_narrow_fast);
   46|       |
   47|    310|    std::wstring widened{};
   48|    310|    scn::impl::transcode_to_string(sv, widened);
   49|       |
   50|    310|    std::string narrowed{};
   51|    310|    scn::impl::transcode_to_string(std::wstring_view{widened}, narrowed);
   52|       |
   53|    310|    return 0;
   54|    310|}
string_impl_fuzz.cpp:_ZN12_GLOBAL__N_17do_findIPFPKcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvS7_T_:
   25|    930|{
   26|    930|    auto it = sv.begin();
   27|  35.6k|    while (it != sv.end()) {
  ------------------
  |  Branch (27:12): [True: 34.7k, False: 930]
  ------------------
   28|  34.7k|        SCN_EXPECT(it < sv.end());
  ------------------
  |  |  930|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   29|  34.7k|        auto in = std::string_view{&*it, static_cast<size_t>(sv.end() - it)};
   30|  34.7k|        SCN_EXPECT(!in.empty());
  ------------------
  |  |  930|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   31|  34.7k|        it = cb(in);
   32|  34.7k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  |  931|  34.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|  34.7k|        if (it != sv.end())
  ------------------
  |  Branch (33:13): [True: 34.4k, False: 357]
  ------------------
   34|  34.4k|            ++it;
   35|  34.7k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  |  931|  34.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   36|  34.7k|    }
   37|    930|}

