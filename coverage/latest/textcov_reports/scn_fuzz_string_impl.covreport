_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4123|   101k|{
 4124|   101k|    if constexpr (sizeof(U) == 1) {
 4125|   101k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|       |    else {
 4131|       |        // utf-32
 4132|       |        static_assert(sizeof(U) == 4);
 4133|       |        SCN_UNUSED(ch);
 4134|       |        return 1;
 4135|       |    }
 4136|   101k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4087|   101k|{
 4088|   101k|    static_assert(sizeof(U8) == 1);
 4089|       |
 4090|   101k|    SCN_GCC_COMPAT_PUSH
 4091|   101k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4092|   101k|    constexpr char lengths[] =
 4093|   101k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4094|   101k|        "\1\1\1\1\1\1\1\1"
 4095|   101k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4096|       |                            // byte
 4097|   101k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4098|   101k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4099|   101k|        "\4";               // highest bits 11110 -> 4-byte cp
 4100|   101k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4101|   101k|    SCN_GCC_COMPAT_POP
 4102|   101k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|  20.9k|{
 4330|  20.9k|    if constexpr (sizeof(CharT) == 1) {
 4331|  20.9k|        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|       |    else {
 4337|       |        SCN_EXPECT(input.size() == 1);
 4338|       |        auto cp = static_cast<char32_t>(input.front());
 4339|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4340|       |            return invalid_code_point;
 4341|       |        }
 4342|       |        return cp;
 4343|       |    }
 4344|  20.9k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4142|  20.9k|{
 4143|  20.9k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1079|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4144|       |
 4145|  20.9k|    const auto is_trailing_code_unit = [](char ch) {
 4146|  20.9k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  20.9k|    };
 4148|       |
 4149|  20.9k|    if (input.size() == 1) {
  ------------------
  |  Branch (4149:9): [True: 14.2k, False: 6.67k]
  ------------------
 4150|  14.2k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4150:13): [True: 0, False: 14.2k]
  ------------------
 4151|      0|            SCN_UNLIKELY_ATTR
 4152|      0|            return invalid_code_point;
 4153|      0|        }
 4154|  14.2k|        return static_cast<char32_t>(input[0]);
 4155|  14.2k|    }
 4156|       |
 4157|  6.67k|    if (input.size() == 2) {
  ------------------
  |  Branch (4157:9): [True: 1.48k, False: 5.19k]
  ------------------
 4158|  1.48k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4158:13): [True: 0, False: 1.48k]
  ------------------
 4159|      0|            SCN_UNLIKELY_ATTR
 4160|      0|            return invalid_code_point;
 4161|      0|        }
 4162|  1.48k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4162:13): [True: 698, False: 782]
  ------------------
 4163|    698|            SCN_UNLIKELY_ATTR
 4164|    698|            return invalid_code_point;
 4165|    698|        }
 4166|       |
 4167|    782|        char32_t cp{};
 4168|    782|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4169|    782|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4170|    782|        return cp;
 4171|  1.48k|    }
 4172|       |
 4173|  5.19k|    if (input.size() == 3) {
  ------------------
  |  Branch (4173:9): [True: 2.68k, False: 2.51k]
  ------------------
 4174|  2.68k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4174:13): [True: 0, False: 2.68k]
  ------------------
 4175|      0|            SCN_UNLIKELY_ATTR
 4176|      0|            return invalid_code_point;
 4177|      0|        }
 4178|  2.68k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4178:13): [True: 368, False: 2.31k]
  ------------------
 4179|  2.68k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4179:13): [True: 194, False: 2.12k]
  ------------------
 4180|    562|            SCN_UNLIKELY_ATTR
 4181|    562|            return invalid_code_point;
 4182|    562|        }
 4183|       |
 4184|  2.12k|        char32_t cp{};
 4185|  2.12k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4186|  2.12k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4187|  2.12k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4188|  2.12k|        return cp;
 4189|  2.68k|    }
 4190|       |
 4191|  2.51k|    if (input.size() == 4) {
  ------------------
  |  Branch (4191:9): [True: 2.51k, False: 0]
  ------------------
 4192|  2.51k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4192:13): [True: 0, False: 2.51k]
  ------------------
 4193|      0|            SCN_UNLIKELY_ATTR
 4194|      0|            return invalid_code_point;
 4195|      0|        }
 4196|  2.51k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4196:13): [True: 232, False: 2.28k]
  ------------------
 4197|    232|            SCN_UNLIKELY_ATTR
 4198|    232|            return invalid_code_point;
 4199|    232|        }
 4200|  2.28k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4200:13): [True: 488, False: 1.79k]
  ------------------
 4201|  2.28k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4201:13): [True: 205, False: 1.58k]
  ------------------
 4202|  2.28k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4202:13): [True: 195, False: 1.39k]
  ------------------
 4203|    888|            SCN_UNLIKELY_ATTR
 4204|    888|            return invalid_code_point;
 4205|    888|        }
 4206|       |
 4207|  1.39k|        char32_t cp{};
 4208|  1.39k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4209|  1.39k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4210|  1.39k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4211|  1.39k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4212|  1.39k|        return cp;
 4213|  2.28k|    }
 4214|       |
 4215|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4216|       |    // gcc 7 thinks we'll get here, even when we won't
 4217|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4218|      0|#endif
 4219|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4220|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4145|  12.1k|    const auto is_trailing_code_unit = [](char ch) {
 4146|  12.1k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  12.1k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|  49.7k|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|  49.7k|    else {
 4022|  49.7k|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|  49.7k|                                       to_address(first), to_address(last)))};
 4024|  49.7k|    }
 4025|  49.7k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|   157k|{
  341|   157k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|   157k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  318|   157k|{
  319|   157k|    return p;
  320|   157k|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4046|  28.1k|{
 4047|       |    if constexpr (std::is_constructible_v<
 4048|       |                      typename std::basic_string_view<CharT>::iterator,
 4049|       |                      decltype(it)> &&
 4050|  28.1k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4051|  28.1k|        SCN_UNUSED(sv);
  ------------------
  |  | 1064|  28.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4052|  28.1k|        return it;
 4053|       |    }
 4054|       |    else {
 4055|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4056|       |    }
 4057|  28.1k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4363|  19.8k|{
 4364|       |    // Pattern_White_Space property
 4365|  19.8k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4365:13): [True: 18.2k, False: 1.61k]
  |  Branch (4365:27): [True: 1.07k, False: 17.2k]
  ------------------
 4366|  19.8k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4366:12): [True: 1.63k, False: 17.1k]
  ------------------
 4367|  19.8k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4367:12): [True: 398, False: 16.7k]
  ------------------
 4368|  19.8k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4368:12): [True: 400, False: 16.3k]
  ------------------
 4369|  19.8k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4369:12): [True: 430, False: 15.9k]
  ------------------
 4370|  19.8k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4370:12): [True: 506, False: 15.4k]
  ------------------
 4371|  19.8k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4371:12): [True: 0, False: 15.4k]
  ------------------
 4372|  19.8k|}

_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  4.41k|{
  207|  4.41k|    return find_classic_impl(
  208|  4.41k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  4.41k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  4.41k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  11.7k|{
  215|  11.7k|    return find_classic_impl(
  216|  11.7k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  11.7k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  11.7k|}
_ZN3scn2v44impl33find_nondecimal_digit_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  222|  17.0k|{
  223|  17.0k|    return find_nondecimal_digit_simple_impl(source);
  224|  17.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEE:
  198|  17.0k|{
  199|  17.0k|    return std::find_if(source.begin(), source.end(),
  200|  17.0k|                        [](char ch) noexcept { return !is_decimal_digit(ch); });
  201|  17.0k|}
impl.cpp:_ZZN3scn2v44impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEENK3$_0clEc:
  200|  17.5k|                        [](char ch) noexcept { return !is_decimal_digit(ch); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116is_decimal_digitEc:
  164|  17.5k|{
  165|  17.5k|    static constexpr std::array<bool, 256> lookup = {
  166|  17.5k|        {false, false, false, false, false, false, false, false, false, false,
  167|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  168|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  169|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  170|  17.5k|         false, false, false, false, false, false, false, false, true,  true,
  171|  17.5k|         true,  true,  true,  true,  true,  true,  true,  true,  false, false,
  172|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  173|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  174|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  175|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  176|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  177|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  178|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  179|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  180|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  181|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  182|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  183|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  184|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  185|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  186|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  187|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  188|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  189|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  190|  17.5k|         false, false, false, false, false, false, false, false, false, false,
  191|  17.5k|         false, false, false, false, false, false}};
  192|       |
  193|  17.5k|    return lookup[static_cast<size_t>(static_cast<unsigned char>(ch))];
  194|  17.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|  4.41k|{
  130|  4.41k|    auto it = source.begin();
  131|       |
  132|  6.35k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 6.11k, False: 245]
  ------------------
  133|  6.11k|        auto sv =
  134|  6.11k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  6.11k|                .substr(0, 8);
  136|       |
  137|  6.11k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 2.23k, False: 3.87k]
  ------------------
  138|  2.23k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  2.23k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  2.23k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 1.94k, False: 291]
  ------------------
  141|  1.94k|                break;
  142|  1.94k|            }
  143|    291|            continue;
  144|  2.23k|        }
  145|       |
  146|  9.74k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 8.08k, False: 1.65k]
  ------------------
  147|  8.08k|            auto tmp =
  148|  8.08k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|  8.08k|            auto res = get_next_code_point(tmp);
  150|  8.08k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 2.22k, False: 5.86k]
  ------------------
  151|  2.22k|                return it;
  152|  2.22k|            }
  153|  5.86k|            i += static_cast<std::size_t>(
  154|  5.86k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|  5.86k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  5.86k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|  5.86k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  5.86k|        }
  158|  3.87k|    }
  159|       |
  160|  2.19k|    return detail::make_string_view_iterator(source, it);
  161|  4.41k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|  18.7k|{
  117|  18.7k|    static_assert(sizeof(*source.data()) == 1);
  118|  18.7k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1079|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|  18.7k|    uint64_t word{};
  120|  18.7k|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|  18.7k|    return has_byte_greater(word, 127) != 0;
  123|  18.7k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  3.95k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  8.08k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|  11.7k|{
  130|  11.7k|    auto it = source.begin();
  131|       |
  132|  12.6k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 12.5k, False: 76]
  ------------------
  133|  12.5k|        auto sv =
  134|  12.5k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  12.5k|                .substr(0, 8);
  136|       |
  137|  12.5k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 2.33k, False: 10.2k]
  ------------------
  138|  2.33k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  2.33k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  2.33k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 2.03k, False: 296]
  ------------------
  141|  2.03k|                break;
  142|  2.03k|            }
  143|    296|            continue;
  144|  2.33k|        }
  145|       |
  146|  12.4k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 11.8k, False: 669]
  ------------------
  147|  11.8k|            auto tmp =
  148|  11.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|  11.8k|            auto res = get_next_code_point(tmp);
  150|  11.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 9.59k, False: 2.21k]
  ------------------
  151|  9.59k|                return it;
  152|  9.59k|            }
  153|  2.21k|            i += static_cast<std::size_t>(
  154|  2.21k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|  2.21k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  2.21k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|  2.21k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  2.21k|        }
  158|  10.2k|    }
  159|       |
  160|  2.11k|    return detail::make_string_view_iterator(source, it);
  161|  11.7k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  4.19k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  11.8k|        [](char32_t cp) { return !detail::is_cp_space(cp); });

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1486|    284|{
 1487|    284|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1488|       |
 1489|    284|    if constexpr (sizeof(SourceCharT) == 1) {
 1490|       |        if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            std::u32string tmp;
 1492|       |            transcode_to_string_impl_to32(src, tmp);
 1493|       |            return transcode_to_string_impl_32to16<false>(
 1494|       |                std::u32string_view{tmp}, dest);
 1495|       |        }
 1496|    284|        else if constexpr (sizeof(DestCharT) == 4) {
 1497|    284|            return transcode_to_string_impl_to32(src, dest);
 1498|    284|        }
 1499|       |    }
 1500|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1501|       |        if constexpr (sizeof(DestCharT) == 1) {
 1502|       |            std::u32string tmp;
 1503|       |            transcode_to_string_impl_to32(src, tmp);
 1504|       |            return transcode_to_string_impl_32to8<false>(
 1505|       |                std::u32string_view{tmp}, dest);
 1506|       |        }
 1507|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1508|       |            return trasncode_to_string_impl_to32(src, dest);
 1509|       |        }
 1510|       |    }
 1511|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1512|       |        if constexpr (sizeof(DestCharT) == 1) {
 1513|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1514|       |        }
 1515|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1516|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1517|       |        }
 1518|       |    }
 1519|       |
 1520|    284|    SCN_EXPECT(false);
  ------------------
  |  | 1079|    284|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    284|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1521|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1522|    284|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1378|    284|{
 1379|    284|    static_assert(sizeof(DestCharT) == 4);
 1380|       |
 1381|    284|    auto it = src.begin();
 1382|  11.4k|    while (it != src.end()) {
  ------------------
  |  Branch (1382:12): [True: 11.1k, False: 284]
  ------------------
 1383|  11.1k|        auto res = get_next_code_point(
 1384|  11.1k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1385|  11.1k|                                                                 src.end()));
 1386|  11.1k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1014|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.38k, False: 8.79k]
  |  |  ------------------
  ------------------
 1387|  2.38k|            dest.push_back(DestCharT{0xfffd});
 1388|  2.38k|        }
 1389|  8.79k|        else {
 1390|  8.79k|            dest.push_back(static_cast<DestCharT>(res.value));
 1391|  8.79k|        }
 1392|  11.1k|        it = detail::make_string_view_iterator(src, res.iterator);
 1393|  11.1k|    }
 1394|    284|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1302|  31.0k|{
 1303|  31.0k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1079|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1304|       |
 1305|  31.0k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1306|  31.0k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 9.95k, False: 21.1k]
  |  |  ------------------
  ------------------
 1307|  9.95k|        return {get_start_for_next_code_point(input),
 1308|  9.95k|                detail::invalid_code_point};
 1309|  9.95k|    }
 1310|  21.1k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1014|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 155, False: 20.9k]
  |  |  ------------------
  ------------------
 1311|    155|        return {input.end(), detail::invalid_code_point};
 1312|    155|    }
 1313|       |
 1314|  20.9k|    return {input.begin() + len,
 1315|  20.9k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1316|  21.1k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1288|  9.95k|{
 1289|  9.95k|    auto it = input.begin();
 1290|  71.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 70.3k, False: 822]
  ------------------
 1291|  70.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 9.12k, False: 61.2k]
  ------------------
 1292|  9.12k|            break;
 1293|  9.12k|        }
 1294|  70.3k|    }
 1295|  9.95k|    return it;
 1296|  9.95k|}
_ZN3scn2v44impl19transcode_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1486|    284|{
 1487|    284|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1488|       |
 1489|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1490|       |        if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            std::u32string tmp;
 1492|       |            transcode_to_string_impl_to32(src, tmp);
 1493|       |            return transcode_to_string_impl_32to16<false>(
 1494|       |                std::u32string_view{tmp}, dest);
 1495|       |        }
 1496|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1497|       |            return transcode_to_string_impl_to32(src, dest);
 1498|       |        }
 1499|       |    }
 1500|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1501|       |        if constexpr (sizeof(DestCharT) == 1) {
 1502|       |            std::u32string tmp;
 1503|       |            transcode_to_string_impl_to32(src, tmp);
 1504|       |            return transcode_to_string_impl_32to8<false>(
 1505|       |                std::u32string_view{tmp}, dest);
 1506|       |        }
 1507|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1508|       |            return trasncode_to_string_impl_to32(src, dest);
 1509|       |        }
 1510|       |    }
 1511|    284|    else if constexpr (sizeof(SourceCharT) == 4) {
 1512|    284|        if constexpr (sizeof(DestCharT) == 1) {
 1513|    284|            return transcode_to_string_impl_32to8<false>(src, dest);
 1514|       |        }
 1515|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1516|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1517|       |        }
 1518|    284|    }
 1519|       |
 1520|    284|    SCN_EXPECT(false);
  ------------------
  |  | 1079|    284|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    284|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1521|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1522|    284|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb0EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1416|    284|{
 1417|    284|    static_assert(sizeof(SourceCharT) == 4);
 1418|    284|    static_assert(sizeof(DestCharT) == 1);
 1419|       |
 1420|  11.1k|    for (auto cp : src) {
  ------------------
  |  Branch (1420:18): [True: 11.1k, False: 284]
  ------------------
 1421|  11.1k|        const auto u32cp = static_cast<uint32_t>(cp);
 1422|  11.1k|        if (SCN_UNLIKELY(!VerifiedValid && static_cast<char32_t>(cp) >=
  ------------------
  |  | 1014|  22.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 194, False: 10.9k]
  |  |  |  Branch (1014:45): [Folded - Ignored]
  |  |  |  Branch (1014:45): [True: 194, False: 10.9k]
  |  |  ------------------
  ------------------
 1423|  11.1k|                                               detail::invalid_code_point)) {
 1424|       |            // Replacement character
 1425|    194|            dest.push_back(static_cast<char>(0xef));
 1426|    194|            dest.push_back(static_cast<char>(0xbf));
 1427|    194|            dest.push_back(static_cast<char>(0xbd));
 1428|    194|        }
 1429|  10.9k|        else if (cp < 128) {
  ------------------
  |  Branch (1429:18): [True: 7.38k, False: 3.60k]
  ------------------
 1430|  7.38k|            dest.push_back(static_cast<char>(cp));
 1431|  7.38k|        }
 1432|  3.60k|        else if (cp < 2048) {
  ------------------
  |  Branch (1432:18): [True: 249, False: 3.35k]
  ------------------
 1433|    249|            dest.push_back(
 1434|    249|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1435|    249|            dest.push_back(
 1436|    249|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1437|    249|        }
 1438|  3.35k|        else if (cp < 65536) {
  ------------------
  |  Branch (1438:18): [True: 3.08k, False: 269]
  ------------------
 1439|  3.08k|            dest.push_back(
 1440|  3.08k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1441|  3.08k|            dest.push_back(static_cast<char>(
 1442|  3.08k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1443|  3.08k|            dest.push_back(
 1444|  3.08k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1445|  3.08k|        }
 1446|    269|        else {
 1447|    269|            dest.push_back(
 1448|    269|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1449|    269|            dest.push_back(static_cast<char>(
 1450|    269|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1451|    269|            dest.push_back(static_cast<char>(
 1452|    269|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1453|    269|            dest.push_back(
 1454|    269|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1455|    269|        }
 1456|  11.1k|    }
 1457|    284|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  8.15k|{
  458|  8.15k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  8.15k|        static_cast<unsigned char>(ch))];
  460|  8.15k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  537|  18.7k|{
  538|  18.7k|    SCN_GCC_PUSH
  539|  18.7k|    SCN_GCC_IGNORE("-Wsign-conversion")
  540|  18.7k|    return ((word + ~0ull / 255 * (127 - n)) | word) & ~0ull / 255 * 128;
  541|  18.7k|    SCN_GCC_POP
  542|  18.7k|}
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.08k|    {
  108|  8.08k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.08k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.08k|    {
   87|  8.08k|        return s - i;
   88|  8.08k|    }

LLVMFuzzerTestOneInput:
   41|    284|{
   42|    284|    auto sv = std::string_view{reinterpret_cast<const char*>(data), size};
   43|    284|    do_find(sv, scn::impl::find_classic_space_narrow_fast);
   44|    284|    do_find(sv, scn::impl::find_classic_nonspace_narrow_fast);
   45|    284|    do_find(sv, scn::impl::find_nondecimal_digit_narrow_fast);
   46|       |
   47|    284|    std::wstring widened{};
   48|    284|    scn::impl::transcode_to_string(sv, widened);
   49|       |
   50|    284|    std::string narrowed{};
   51|    284|    scn::impl::transcode_to_string(std::wstring_view{widened}, narrowed);
   52|       |
   53|    284|    return 0;
   54|    284|}
string_impl_fuzz.cpp:_ZN12_GLOBAL__N_17do_findIPFPKcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvS7_T_:
   25|    852|{
   26|    852|    auto it = sv.begin();
   27|  34.0k|    while (it != sv.end()) {
  ------------------
  |  Branch (27:12): [True: 33.1k, False: 852]
  ------------------
   28|  33.1k|        SCN_EXPECT(it < sv.end());
  ------------------
  |  | 1079|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   29|  33.1k|        auto in = std::string_view{&*it, static_cast<size_t>(sv.end() - it)};
   30|  33.1k|        SCN_EXPECT(!in.empty());
  ------------------
  |  | 1079|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   31|  33.1k|        it = cb(in);
   32|  33.1k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  | 1080|  33.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|  33.1k|        if (it != sv.end())
  ------------------
  |  Branch (33:13): [True: 32.8k, False: 331]
  ------------------
   34|  32.8k|            ++it;
   35|  33.1k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  | 1080|  33.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   36|  33.1k|    }
   37|    852|}

