_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|   105k|{
 3803|   105k|    if constexpr (sizeof(U) == 1) {
 3804|   105k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|   105k|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|   105k|{
 3767|   105k|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|   105k|    SCN_GCC_COMPAT_PUSH
 3770|   105k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|   105k|    constexpr char lengths[] =
 3772|   105k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|   105k|        "\1\1\1\1\1\1\1\1"
 3774|   105k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|   105k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|   105k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|   105k|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|   105k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|   105k|    SCN_GCC_COMPAT_POP
 3781|   105k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  21.1k|{
 4009|  21.1k|    if constexpr (sizeof(CharT) == 1) {
 4010|  21.1k|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  21.1k|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  21.1k|{
 3822|  21.1k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  21.1k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  21.1k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  21.1k|    };
 3827|       |
 3828|  21.1k|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 14.5k, False: 6.69k]
  ------------------
 3829|  14.5k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 0, False: 14.5k]
  ------------------
 3830|      0|            SCN_UNLIKELY_ATTR
 3831|      0|            return invalid_code_point;
 3832|      0|        }
 3833|  14.5k|        return static_cast<char32_t>(input[0]);
 3834|  14.5k|    }
 3835|       |
 3836|  6.69k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 1.35k, False: 5.33k]
  ------------------
 3837|  1.35k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 0, False: 1.35k]
  ------------------
 3838|      0|            SCN_UNLIKELY_ATTR
 3839|      0|            return invalid_code_point;
 3840|      0|        }
 3841|  1.35k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 555, False: 800]
  ------------------
 3842|    555|            SCN_UNLIKELY_ATTR
 3843|    555|            return invalid_code_point;
 3844|    555|        }
 3845|       |
 3846|    800|        char32_t cp{};
 3847|    800|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|    800|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|    800|        return cp;
 3850|  1.35k|    }
 3851|       |
 3852|  5.33k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 2.68k, False: 2.64k]
  ------------------
 3853|  2.68k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 0, False: 2.68k]
  ------------------
 3854|      0|            SCN_UNLIKELY_ATTR
 3855|      0|            return invalid_code_point;
 3856|      0|        }
 3857|  2.68k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 377, False: 2.31k]
  ------------------
 3858|  2.68k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 194, False: 2.11k]
  ------------------
 3859|    571|            SCN_UNLIKELY_ATTR
 3860|    571|            return invalid_code_point;
 3861|    571|        }
 3862|       |
 3863|  2.11k|        char32_t cp{};
 3864|  2.11k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  2.11k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  2.11k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  2.11k|        return cp;
 3868|  2.68k|    }
 3869|       |
 3870|  2.64k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 2.64k, False: 0]
  ------------------
 3871|  2.64k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 2.64k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  2.64k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 223, False: 2.42k]
  ------------------
 3876|    223|            SCN_UNLIKELY_ATTR
 3877|    223|            return invalid_code_point;
 3878|    223|        }
 3879|  2.42k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 593, False: 1.83k]
  ------------------
 3880|  2.42k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 205, False: 1.62k]
  ------------------
 3881|  2.42k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 213, False: 1.41k]
  ------------------
 3882|  1.01k|            SCN_UNLIKELY_ATTR
 3883|  1.01k|            return invalid_code_point;
 3884|  1.01k|        }
 3885|       |
 3886|  1.41k|        char32_t cp{};
 3887|  1.41k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  1.41k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  1.41k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  1.41k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  1.41k|        return cp;
 3892|  2.42k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  12.2k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  12.2k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  12.2k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  51.1k|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  51.1k|    else {
 3701|  51.1k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  51.1k|                                       to_address(first), to_address(last)))};
 3703|  51.1k|    }
 3704|  51.1k|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   161k|{
  326|   161k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   161k|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   161k|{
  304|   161k|    return p;
  305|   161k|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  28.4k|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  28.4k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  28.4k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  28.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  28.4k|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  28.4k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  20.5k|{
 4043|       |    // Pattern_White_Space property
 4044|  20.5k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 18.9k, False: 1.56k]
  |  Branch (4044:27): [True: 1.37k, False: 17.5k]
  ------------------
 4045|  20.5k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 1.63k, False: 17.5k]
  ------------------
 4046|  20.5k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 398, False: 17.1k]
  ------------------
 4047|  20.5k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 400, False: 16.7k]
  ------------------
 4048|  20.5k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 430, False: 16.3k]
  ------------------
 4049|  20.5k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 502, False: 15.8k]
  ------------------
 4050|  20.5k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 0, False: 15.8k]
  ------------------
 4051|  20.5k|}

_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  194|  4.56k|{
  195|  4.56k|    return find_classic_impl(
  196|  4.56k|        source, [](char ch) { return is_ascii_space(ch); },
  197|  4.56k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  198|  4.56k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  202|  12.0k|{
  203|  12.0k|    return find_classic_impl(
  204|  12.0k|        source, [](char ch) { return !is_ascii_space(ch); },
  205|  12.0k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  206|  12.0k|}
_ZN3scn2v34impl33find_nondecimal_digit_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  210|  17.5k|{
  211|  17.5k|    return find_nondecimal_digit_simple_impl(source);
  212|  17.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEE:
  186|  17.5k|{
  187|  17.5k|    return std::find_if(source.begin(), source.end(),
  188|  17.5k|                        [](char ch) noexcept { return !is_decimal_digit(ch); });
  189|  17.5k|}
impl.cpp:_ZZN3scn2v34impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEENK3$_0clEc:
  188|  18.0k|                        [](char ch) noexcept { return !is_decimal_digit(ch); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116is_decimal_digitEc:
  152|  18.0k|{
  153|  18.0k|    static constexpr std::array<bool, 256> lookup = {
  154|  18.0k|        {false, false, false, false, false, false, false, false, false, false,
  155|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  156|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  157|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  158|  18.0k|         false, false, false, false, false, false, false, false, true,  true,
  159|  18.0k|         true,  true,  true,  true,  true,  true,  true,  true,  false, false,
  160|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  161|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  162|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  163|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  164|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  165|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  166|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  167|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  168|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  169|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  170|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  171|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  172|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  173|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  174|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  175|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  176|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  177|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  178|  18.0k|         false, false, false, false, false, false, false, false, false, false,
  179|  18.0k|         false, false, false, false, false, false}};
  180|       |
  181|  18.0k|    return lookup[static_cast<size_t>(static_cast<unsigned char>(ch))];
  182|  18.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|  4.56k|{
  119|  4.56k|    auto it = source.begin();
  120|       |
  121|  6.49k|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 6.26k, False: 227]
  ------------------
  122|  6.26k|        auto sv =
  123|  6.26k|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|  6.26k|                .substr(0, 8);
  125|       |
  126|  6.26k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 2.24k, False: 4.01k]
  ------------------
  127|  2.24k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|  2.24k|            it = detail::make_string_view_iterator(source, tmp_it);
  129|  2.24k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 1.96k, False: 280]
  ------------------
  130|  1.96k|                break;
  131|  1.96k|            }
  132|    280|            continue;
  133|  2.24k|        }
  134|       |
  135|  9.87k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 8.22k, False: 1.64k]
  ------------------
  136|  8.22k|            auto tmp =
  137|  8.22k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|  8.22k|            auto res = get_next_code_point(tmp);
  139|  8.22k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 2.37k, False: 5.85k]
  ------------------
  140|  2.37k|                return it;
  141|  2.37k|            }
  142|  5.85k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|  5.85k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|  5.85k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  5.85k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|  5.85k|        }
  146|  4.01k|    }
  147|       |
  148|  2.19k|    return detail::make_string_view_iterator(source, it);
  149|  4.56k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  105|  19.2k|{
  106|  19.2k|    static_assert(sizeof(*source.data()) == 1);
  107|  19.2k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|  19.2k|    uint64_t word{};
  109|  19.2k|    std::memcpy(&word, source.data(), source.size());
  110|       |
  111|  19.2k|    return has_byte_greater(word, 127) != 0;
  112|  19.2k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  196|  3.96k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  197|  8.22k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|  12.0k|{
  119|  12.0k|    auto it = source.begin();
  120|       |
  121|  13.0k|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 12.9k, False: 97]
  ------------------
  122|  12.9k|        auto sv =
  123|  12.9k|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|  12.9k|                .substr(0, 8);
  125|       |
  126|  12.9k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 2.34k, False: 10.6k]
  ------------------
  127|  2.34k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|  2.34k|            it = detail::make_string_view_iterator(source, tmp_it);
  129|  2.34k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 2.02k, False: 317]
  ------------------
  130|  2.02k|                break;
  131|  2.02k|            }
  132|    317|            continue;
  133|  2.34k|        }
  134|       |
  135|  12.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 12.3k, False: 669]
  ------------------
  136|  12.3k|            auto tmp =
  137|  12.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|  12.3k|            auto res = get_next_code_point(tmp);
  139|  12.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 9.94k, False: 2.37k]
  ------------------
  140|  9.94k|                return it;
  141|  9.94k|            }
  142|  2.37k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|  2.37k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|  2.37k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  2.37k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|  2.37k|        }
  146|  10.6k|    }
  147|       |
  148|  2.12k|    return detail::make_string_view_iterator(source, it);
  149|  12.0k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  204|  4.20k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  205|  12.3k|        [](char32_t cp) { return !detail::is_cp_space(cp); });

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|    287|{
 1351|    287|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|    287|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|    287|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|    287|            return transcode_to_string_impl_to32(src, dest);
 1362|    287|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|    287|    SCN_EXPECT(false);
  ------------------
  |  |  924|    287|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    287|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|    287|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|    287|{
 1244|    287|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|    287|    auto it = src.begin();
 1247|  11.6k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 11.3k, False: 287]
  ------------------
 1248|  11.3k|        auto res = get_next_code_point(
 1249|  11.3k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|  11.3k|                                                                 src.end()));
 1251|  11.3k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.45k, False: 8.87k]
  |  |  ------------------
  ------------------
 1252|  2.45k|            dest.push_back(DestCharT{0xfffd});
 1253|  2.45k|        }
 1254|  8.87k|        else {
 1255|  8.87k|            dest.push_back(res.value);
 1256|  8.87k|        }
 1257|  11.3k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|  11.3k|    }
 1259|    287|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  31.8k|{
 1169|  31.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  31.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  31.8k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  31.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 21.3k]
  |  |  ------------------
  ------------------
 1173|  10.5k|        return {get_start_for_next_code_point(input),
 1174|  10.5k|                detail::invalid_code_point};
 1175|  10.5k|    }
 1176|  21.3k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 155, False: 21.1k]
  |  |  ------------------
  ------------------
 1177|    155|        return {input.end(), detail::invalid_code_point};
 1178|    155|    }
 1179|       |
 1180|  21.1k|    return {input.begin() + len,
 1181|  21.1k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  21.3k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  10.5k|{
 1155|  10.5k|    auto it = input.begin();
 1156|  74.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 73.5k, False: 767]
  ------------------
 1157|  73.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.76k, False: 63.7k]
  ------------------
 1158|  9.76k|            break;
 1159|  9.76k|        }
 1160|  73.5k|    }
 1161|  10.5k|    return it;
 1162|  10.5k|}
_ZN3scn2v34impl19transcode_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|    287|{
 1351|    287|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1361|       |            return transcode_to_string_impl_to32(src, dest);
 1362|       |        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|    287|    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|    287|        if constexpr (sizeof(DestCharT) == 1) {
 1377|    287|            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|    287|    }
 1383|       |
 1384|    287|    SCN_EXPECT(false);
  ------------------
  |  |  924|    287|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    287|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|    287|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb0EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1281|    287|{
 1282|    287|    static_assert(sizeof(SourceCharT) == 4);
 1283|    287|    static_assert(sizeof(DestCharT) == 1);
 1284|       |
 1285|  11.3k|    for (auto cp : src) {
  ------------------
  |  Branch (1285:18): [True: 11.3k, False: 287]
  ------------------
 1286|  11.3k|        const auto u32cp = static_cast<uint32_t>(cp);
 1287|  11.3k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 194, False: 11.1k]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 194, False: 11.1k]
  |  |  ------------------
  ------------------
 1288|       |            // Replacement character
 1289|    194|            dest.push_back(static_cast<char>(0xef));
 1290|    194|            dest.push_back(static_cast<char>(0xbf));
 1291|    194|            dest.push_back(static_cast<char>(0xbd));
 1292|    194|        }
 1293|  11.1k|        else if (cp < 128) {
  ------------------
  |  Branch (1293:18): [True: 7.45k, False: 3.68k]
  ------------------
 1294|  7.45k|            dest.push_back(static_cast<char>(cp));
 1295|  7.45k|        }
 1296|  3.68k|        else if (cp < 2048) {
  ------------------
  |  Branch (1296:18): [True: 255, False: 3.42k]
  ------------------
 1297|    255|            dest.push_back(
 1298|    255|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1299|    255|            dest.push_back(
 1300|    255|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1301|    255|        }
 1302|  3.42k|        else if (cp < 65536) {
  ------------------
  |  Branch (1302:18): [True: 3.15k, False: 276]
  ------------------
 1303|  3.15k|            dest.push_back(
 1304|  3.15k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1305|  3.15k|            dest.push_back(static_cast<char>(
 1306|  3.15k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1307|  3.15k|            dest.push_back(
 1308|  3.15k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1309|  3.15k|        }
 1310|    276|        else {
 1311|    276|            dest.push_back(
 1312|    276|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1313|    276|            dest.push_back(static_cast<char>(
 1314|    276|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1315|    276|            dest.push_back(static_cast<char>(
 1316|    276|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1317|    276|            dest.push_back(
 1318|    276|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1319|    276|        }
 1320|  11.3k|    }
 1321|    287|}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  8.17k|{
  458|  8.17k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  8.17k|        static_cast<unsigned char>(ch))];
  460|  8.17k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  19.2k|{
  539|  19.2k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  19.2k|}
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.22k|    {
  108|  8.22k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.22k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.22k|    {
   87|  8.22k|        return s - i;
   88|  8.22k|    }

LLVMFuzzerTestOneInput:
   41|    287|{
   42|    287|    auto sv = std::string_view{reinterpret_cast<const char*>(data), size};
   43|    287|    do_find(sv, scn::impl::find_classic_space_narrow_fast);
   44|    287|    do_find(sv, scn::impl::find_classic_nonspace_narrow_fast);
   45|    287|    do_find(sv, scn::impl::find_nondecimal_digit_narrow_fast);
   46|       |
   47|    287|    std::wstring widened{};
   48|    287|    scn::impl::transcode_to_string(sv, widened);
   49|       |
   50|    287|    std::string narrowed{};
   51|    287|    scn::impl::transcode_to_string(std::wstring_view{widened}, narrowed);
   52|       |
   53|    287|    return 0;
   54|    287|}
string_impl_fuzz.cpp:_ZN12_GLOBAL__N_17do_findIPFPKcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvS7_T_:
   25|    861|{
   26|    861|    auto it = sv.begin();
   27|  35.0k|    while (it != sv.end()) {
  ------------------
  |  Branch (27:12): [True: 34.1k, False: 861]
  ------------------
   28|  34.1k|        SCN_EXPECT(it < sv.end());
  ------------------
  |  |  924|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   29|  34.1k|        auto in = std::string_view{&*it, static_cast<size_t>(sv.end() - it)};
   30|  34.1k|        SCN_EXPECT(!in.empty());
  ------------------
  |  |  924|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   31|  34.1k|        it = cb(in);
   32|  34.1k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  |  925|  34.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|  34.1k|        if (it != sv.end())
  ------------------
  |  Branch (33:13): [True: 33.8k, False: 334]
  ------------------
   34|  33.8k|            ++it;
   35|  34.1k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  |  925|  34.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   36|  34.1k|    }
   37|    861|}

