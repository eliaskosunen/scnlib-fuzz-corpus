_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   103k|{
 4068|   103k|    if constexpr (sizeof(U) == 1) {
 4069|   103k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   103k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   103k|{
 4032|   103k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   103k|    SCN_GCC_COMPAT_PUSH
 4035|   103k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   103k|    constexpr char lengths[] =
 4037|   103k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   103k|        "\1\1\1\1\1\1\1\1"
 4039|   103k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   103k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   103k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   103k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   103k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   103k|    SCN_GCC_COMPAT_POP
 4046|   103k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  20.3k|{
 4274|  20.3k|    if constexpr (sizeof(CharT) == 1) {
 4275|  20.3k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  20.3k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  20.3k|{
 4087|  20.3k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  20.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  20.3k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  20.3k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  20.3k|    };
 4092|       |
 4093|  20.3k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 13.4k, False: 6.86k]
  ------------------
 4094|  13.4k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 0, False: 13.4k]
  ------------------
 4095|      0|            SCN_UNLIKELY_ATTR
 4096|      0|            return invalid_code_point;
 4097|      0|        }
 4098|  13.4k|        return static_cast<char32_t>(input[0]);
 4099|  13.4k|    }
 4100|       |
 4101|  6.86k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 1.45k, False: 5.41k]
  ------------------
 4102|  1.45k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 0, False: 1.45k]
  ------------------
 4103|      0|            SCN_UNLIKELY_ATTR
 4104|      0|            return invalid_code_point;
 4105|      0|        }
 4106|  1.45k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 575, False: 881]
  ------------------
 4107|    575|            SCN_UNLIKELY_ATTR
 4108|    575|            return invalid_code_point;
 4109|    575|        }
 4110|       |
 4111|    881|        char32_t cp{};
 4112|    881|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|    881|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|    881|        return cp;
 4115|  1.45k|    }
 4116|       |
 4117|  5.41k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 2.77k, False: 2.63k]
  ------------------
 4118|  2.77k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 0, False: 2.77k]
  ------------------
 4119|      0|            SCN_UNLIKELY_ATTR
 4120|      0|            return invalid_code_point;
 4121|      0|        }
 4122|  2.77k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 425, False: 2.35k]
  ------------------
 4123|  2.77k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 200, False: 2.15k]
  ------------------
 4124|    625|            SCN_UNLIKELY_ATTR
 4125|    625|            return invalid_code_point;
 4126|    625|        }
 4127|       |
 4128|  2.15k|        char32_t cp{};
 4129|  2.15k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  2.15k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  2.15k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  2.15k|        return cp;
 4133|  2.77k|    }
 4134|       |
 4135|  2.63k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 2.63k, False: 0]
  ------------------
 4136|  2.63k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 2.63k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  2.63k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 226, False: 2.40k]
  ------------------
 4141|    226|            SCN_UNLIKELY_ATTR
 4142|    226|            return invalid_code_point;
 4143|    226|        }
 4144|  2.40k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 488, False: 1.91k]
  ------------------
 4145|  2.40k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 205, False: 1.71k]
  ------------------
 4146|  2.40k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 195, False: 1.51k]
  ------------------
 4147|    888|            SCN_UNLIKELY_ATTR
 4148|    888|            return invalid_code_point;
 4149|    888|        }
 4150|       |
 4151|  1.51k|        char32_t cp{};
 4152|  1.51k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  1.51k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  1.51k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  1.51k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  1.51k|        return cp;
 4157|  2.40k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  12.6k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  12.6k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  12.6k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  47.9k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  47.9k|    else {
 3966|  47.9k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  47.9k|                                       to_address(first), to_address(last)))};
 3968|  47.9k|    }
 3969|  47.9k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   151k|{
  316|   151k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   151k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   151k|{
  294|   151k|    return p;
  295|   151k|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  27.2k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  27.2k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  27.2k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  27.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  27.2k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  27.2k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  19.0k|{
 4308|       |    // Pattern_White_Space property
 4309|  19.0k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 17.4k, False: 1.57k]
  |  Branch (4309:27): [True: 1.00k, False: 16.4k]
  ------------------
 4310|  19.0k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 1.63k, False: 16.3k]
  ------------------
 4311|  19.0k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 398, False: 15.9k]
  ------------------
 4312|  19.0k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 400, False: 15.5k]
  ------------------
 4313|  19.0k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 430, False: 15.1k]
  ------------------
 4314|  19.0k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 506, False: 14.6k]
  ------------------
 4315|  19.0k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 14.6k]
  ------------------
 4316|  19.0k|}

_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  4.37k|{
  207|  4.37k|    return find_classic_impl(
  208|  4.37k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  4.37k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  4.37k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  11.3k|{
  215|  11.3k|    return find_classic_impl(
  216|  11.3k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  11.3k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  11.3k|}
_ZN3scn2v44impl33find_nondecimal_digit_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  222|  16.6k|{
  223|  16.6k|    return find_nondecimal_digit_simple_impl(source);
  224|  16.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEE:
  198|  16.6k|{
  199|  16.6k|    return std::find_if(source.begin(), source.end(),
  200|  16.6k|                        [](char ch) noexcept { return !is_decimal_digit(ch); });
  201|  16.6k|}
impl.cpp:_ZZN3scn2v44impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEENK3$_0clEc:
  200|  17.1k|                        [](char ch) noexcept { return !is_decimal_digit(ch); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116is_decimal_digitEc:
  164|  17.1k|{
  165|  17.1k|    static constexpr std::array<bool, 256> lookup = {
  166|  17.1k|        {false, false, false, false, false, false, false, false, false, false,
  167|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  168|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  169|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  170|  17.1k|         false, false, false, false, false, false, false, false, true,  true,
  171|  17.1k|         true,  true,  true,  true,  true,  true,  true,  true,  false, false,
  172|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  173|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  174|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  175|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  176|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  177|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  178|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  179|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  180|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  181|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  182|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  183|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  184|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  185|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  186|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  187|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  188|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  189|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  190|  17.1k|         false, false, false, false, false, false, false, false, false, false,
  191|  17.1k|         false, false, false, false, false, false}};
  192|       |
  193|  17.1k|    return lookup[static_cast<size_t>(static_cast<unsigned char>(ch))];
  194|  17.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  4.37k|{
  131|  4.37k|    auto it = source.begin();
  132|       |
  133|  6.22k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 5.98k, False: 237]
  ------------------
  134|  5.98k|        auto sv =
  135|  5.98k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  5.98k|                .substr(0, 8);
  137|       |
  138|  5.98k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.23k, False: 3.74k]
  ------------------
  139|  2.23k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.23k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.23k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 1.94k, False: 289]
  ------------------
  142|  1.94k|                break;
  143|  1.94k|            }
  144|    289|            continue;
  145|  2.23k|        }
  146|       |
  147|  9.19k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 7.63k, False: 1.55k]
  ------------------
  148|  7.63k|            auto tmp =
  149|  7.63k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  7.63k|            auto res = get_next_code_point(tmp);
  151|  7.63k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 2.18k, False: 5.44k]
  ------------------
  152|  2.18k|                return it;
  153|  2.18k|            }
  154|  5.44k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  5.44k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  5.44k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  5.44k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  5.44k|        }
  158|  3.74k|    }
  159|       |
  160|  2.18k|    return detail::make_string_view_iterator(source, it);
  161|  4.37k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  18.2k|{
  118|  18.2k|    static_assert(sizeof(*source.data()) == 1);
  119|  18.2k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  18.2k|    uint64_t word{};
  121|  18.2k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  18.2k|    return has_byte_greater(word, 127) != 0;
  124|  18.2k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  3.95k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  7.63k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  11.3k|{
  131|  11.3k|    auto it = source.begin();
  132|       |
  133|  12.2k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 12.2k, False: 78]
  ------------------
  134|  12.2k|        auto sv =
  135|  12.2k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  12.2k|                .substr(0, 8);
  137|       |
  138|  12.2k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.33k, False: 9.88k]
  ------------------
  139|  2.33k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.33k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.33k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 2.03k, False: 298]
  ------------------
  142|  2.03k|                break;
  143|  2.03k|            }
  144|    298|            continue;
  145|  2.33k|        }
  146|       |
  147|  12.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 11.4k, False: 669]
  ------------------
  148|  11.4k|            auto tmp =
  149|  11.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  11.4k|            auto res = get_next_code_point(tmp);
  151|  11.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 9.21k, False: 2.18k]
  ------------------
  152|  9.21k|                return it;
  153|  9.21k|            }
  154|  2.18k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  2.18k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  2.18k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  2.18k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  2.18k|        }
  158|  9.88k|    }
  159|       |
  160|  2.11k|    return detail::make_string_view_iterator(source, it);
  161|  11.3k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  4.19k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  11.4k|        [](char32_t cp) { return !detail::is_cp_space(cp); });

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    278|{
 1462|    278|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    278|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    278|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    278|            return transcode_to_string_impl_to32(src, dest);
 1473|    278|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    278|    SCN_EXPECT(false);
  ------------------
  |  |  930|    278|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    278|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    278|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    278|{
 1355|    278|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    278|    auto it = src.begin();
 1358|  11.0k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 10.7k, False: 278]
  ------------------
 1359|  10.7k|        auto res = get_next_code_point(
 1360|  10.7k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|  10.7k|                                                                 src.end()));
 1362|  10.7k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.12k, False: 8.60k]
  |  |  ------------------
  ------------------
 1363|  2.12k|            dest.push_back(DestCharT{0xfffd});
 1364|  2.12k|        }
 1365|  8.60k|        else {
 1366|  8.60k|            dest.push_back(res.value);
 1367|  8.60k|        }
 1368|  10.7k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|  10.7k|    }
 1370|    278|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  29.7k|{
 1279|  29.7k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  29.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  29.7k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  29.7k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.27k, False: 20.4k]
  |  |  ------------------
  ------------------
 1283|  9.27k|        return {get_start_for_next_code_point(input),
 1284|  9.27k|                detail::invalid_code_point};
 1285|  9.27k|    }
 1286|  20.4k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 158, False: 20.3k]
  |  |  ------------------
  ------------------
 1287|    158|        return {input.end(), detail::invalid_code_point};
 1288|    158|    }
 1289|       |
 1290|  20.3k|    return {input.begin() + len,
 1291|  20.3k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  20.4k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  9.27k|{
 1265|  9.27k|    auto it = input.begin();
 1266|  74.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 74.0k, False: 771]
  ------------------
 1267|  74.0k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 8.50k, False: 65.5k]
  ------------------
 1268|  8.50k|            break;
 1269|  8.50k|        }
 1270|  74.0k|    }
 1271|  9.27k|    return it;
 1272|  9.27k|}
_ZN3scn2v44impl19transcode_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    278|{
 1462|    278|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1472|       |            return transcode_to_string_impl_to32(src, dest);
 1473|       |        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|    278|    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|    278|        if constexpr (sizeof(DestCharT) == 1) {
 1488|    278|            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|    278|    }
 1494|       |
 1495|    278|    SCN_EXPECT(false);
  ------------------
  |  |  930|    278|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    278|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    278|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb0EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|    278|{
 1393|    278|    static_assert(sizeof(SourceCharT) == 4);
 1394|    278|    static_assert(sizeof(DestCharT) == 1);
 1395|       |
 1396|  10.7k|    for (auto cp : src) {
  ------------------
  |  Branch (1396:18): [True: 10.7k, False: 278]
  ------------------
 1397|  10.7k|        const auto u32cp = static_cast<uint32_t>(cp);
 1398|  10.7k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  865|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 194, False: 10.5k]
  |  |  |  Branch (865:45): [Folded - Ignored]
  |  |  |  Branch (865:45): [True: 194, False: 10.5k]
  |  |  ------------------
  ------------------
 1399|       |            // Replacement character
 1400|    194|            dest.push_back(static_cast<char>(0xef));
 1401|    194|            dest.push_back(static_cast<char>(0xbf));
 1402|    194|            dest.push_back(static_cast<char>(0xbd));
 1403|    194|        }
 1404|  10.5k|        else if (cp < 128) {
  ------------------
  |  Branch (1404:18): [True: 7.10k, False: 3.42k]
  ------------------
 1405|  7.10k|            dest.push_back(static_cast<char>(cp));
 1406|  7.10k|        }
 1407|  3.42k|        else if (cp < 2048) {
  ------------------
  |  Branch (1407:18): [True: 282, False: 3.14k]
  ------------------
 1408|    282|            dest.push_back(
 1409|    282|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1410|    282|            dest.push_back(
 1411|    282|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1412|    282|        }
 1413|  3.14k|        else if (cp < 65536) {
  ------------------
  |  Branch (1413:18): [True: 2.83k, False: 311]
  ------------------
 1414|  2.83k|            dest.push_back(
 1415|  2.83k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1416|  2.83k|            dest.push_back(static_cast<char>(
 1417|  2.83k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1418|  2.83k|            dest.push_back(
 1419|  2.83k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1420|  2.83k|        }
 1421|    311|        else {
 1422|    311|            dest.push_back(
 1423|    311|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1424|    311|            dest.push_back(static_cast<char>(
 1425|    311|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1426|    311|            dest.push_back(static_cast<char>(
 1427|    311|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1428|    311|            dest.push_back(
 1429|    311|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1430|    311|        }
 1431|  10.7k|    }
 1432|    278|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  8.15k|{
  458|  8.15k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  8.15k|        static_cast<unsigned char>(ch))];
  460|  8.15k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  18.2k|{
  539|  18.2k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  18.2k|}
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  7.62k|    {
  108|  7.62k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  7.62k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  7.62k|    {
   87|  7.62k|        return s - i;
   88|  7.62k|    }

LLVMFuzzerTestOneInput:
   41|    278|{
   42|    278|    auto sv = std::string_view{reinterpret_cast<const char*>(data), size};
   43|    278|    do_find(sv, scn::impl::find_classic_space_narrow_fast);
   44|    278|    do_find(sv, scn::impl::find_classic_nonspace_narrow_fast);
   45|    278|    do_find(sv, scn::impl::find_nondecimal_digit_narrow_fast);
   46|       |
   47|    278|    std::wstring widened{};
   48|    278|    scn::impl::transcode_to_string(sv, widened);
   49|       |
   50|    278|    std::string narrowed{};
   51|    278|    scn::impl::transcode_to_string(std::wstring_view{widened}, narrowed);
   52|       |
   53|    278|    return 0;
   54|    278|}
string_impl_fuzz.cpp:_ZN12_GLOBAL__N_17do_findIPFPKcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvS7_T_:
   25|    834|{
   26|    834|    auto it = sv.begin();
   27|  33.1k|    while (it != sv.end()) {
  ------------------
  |  Branch (27:12): [True: 32.3k, False: 834]
  ------------------
   28|  32.3k|        SCN_EXPECT(it < sv.end());
  ------------------
  |  |  930|  32.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   29|  32.3k|        auto in = std::string_view{&*it, static_cast<size_t>(sv.end() - it)};
   30|  32.3k|        SCN_EXPECT(!in.empty());
  ------------------
  |  |  930|  32.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   31|  32.3k|        it = cb(in);
   32|  32.3k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  |  931|  32.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|  32.3k|        if (it != sv.end())
  ------------------
  |  Branch (33:13): [True: 32.0k, False: 325]
  ------------------
   34|  32.0k|            ++it;
   35|  32.3k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  |  931|  32.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   36|  32.3k|    }
   37|    834|}

