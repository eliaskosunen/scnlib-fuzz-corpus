_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|   189k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

_ZN7simdutf6resultC2ENS_10error_codeEm:
    5|  46.2k|  simdutf_really_inline result::result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  34.6k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  34.6k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  34.6k|  return idx < lenminusstep;
   70|  34.6k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  34.6k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  34.6k|  idx += STEP_SIZE;
   88|  34.6k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  34.6k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  34.6k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 34.6k]
  ------------------
   80|  34.6k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  34.6k|  std::memcpy(dst, buf + idx, len - idx);
   82|  34.6k|  return len - idx;
   83|  34.6k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  13.7k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  13.7k|    size_t pos = 0;
   12|  13.7k|    size_t count = 0;
   13|  13.7k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 0, False: 13.7k]
  ------------------
   14|      0|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|      0|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|      0|      count += count_ones(utf8_continuation_mask);
   17|      0|    }
   18|  13.7k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  13.7k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   137k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   121k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   121k|      size_t pos = 0;
  131|   121k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|   121k|      size_t leading_byte = 0;
  139|   121k|      size_t margin = size;
  140|   343k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 221k, False: 121k]
  |  Branch (140:27): [True: 221k, False: 0]
  ------------------
  141|   221k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   221k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   121k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   121k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 121k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   121k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 121k]
  ------------------
  195|   121k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 121k, False: 0]
  ------------------
  196|   121k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   121k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 20.6k, False: 100k]
  ------------------
  198|   100k|        utf32_output += howmany;
  199|   100k|      }
  200|   100k|      return utf32_output - start;
  201|   121k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   137k|    simdutf_really_inline bool errors() const {
  291|   137k|      return this->error.any_bits_set_anywhere();
  292|   137k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|  15.9k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|  15.9k|      size_t pos = 0;
  205|  15.9k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  211|       |      // to give us a good margin.
  212|  15.9k|      size_t leading_byte = 0;
  213|  15.9k|      size_t margin = size;
  214|   115k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (214:13): [True: 114k, False: 702]
  |  Branch (214:27): [True: 99.5k, False: 15.2k]
  ------------------
  215|  99.5k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|  99.5k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|  15.9k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|  15.9k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 0, False: 15.9k]
  ------------------
  220|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 0]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|      0|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|      0|              "We support either two or four chunks per 64-byte block.");
  229|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  232|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|      0|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 0, False: 0]
  ------------------
  240|      0|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|      0|            res.count += pos;
  242|      0|            return res;
  243|      0|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|      0|      }
  273|  15.9k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 15.9k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|  15.9k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 15.9k, False: 0]
  ------------------
  279|  15.9k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|  15.9k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 14.1k, False: 1.75k]
  ------------------
  281|  14.1k|          res.count += pos;
  282|  14.1k|          return res;
  283|  14.1k|        } else {    // In case of success, we want the number of word written
  284|  1.75k|          utf32_output += res.count;
  285|  1.75k|        }
  286|  15.9k|      }
  287|  1.75k|      return result(error_code::SUCCESS, utf32_output - start);
  288|  15.9k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  34.6k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  34.6k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  34.6k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 21.2k, False: 13.3k]
  |  |  ------------------
  ------------------
  154|  21.2k|        this->error |= this->prev_incomplete;
  155|  21.2k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  13.3k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  13.3k|            "We support either two or four chunks per 64-byte block.");
  159|  13.3k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  13.3k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  13.3k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  13.3k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  13.3k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  13.3k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  13.3k|      }
  172|  34.6k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  26.7k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  26.7k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  26.7k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  26.7k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  26.7k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  26.7k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  26.7k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  26.7k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  26.7k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  26.7k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  26.7k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  26.7k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  26.7k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  26.7k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  26.7k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  26.7k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  26.7k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  26.7k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  26.7k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  26.7k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  26.7k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  26.7k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  26.7k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  26.7k|    );
   51|  26.7k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  26.7k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  26.7k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  26.7k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  26.7k|      CARRY,
   59|  26.7k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  26.7k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  26.7k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  26.7k|    );
   80|  26.7k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  26.7k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  26.7k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  26.7k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  26.7k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  26.7k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  26.7k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  26.7k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  26.7k|    );
   96|  26.7k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  26.7k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  26.7k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  26.7k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  26.7k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  26.7k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  26.7k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  26.7k|    return must23_80 ^ sc;
  105|  26.7k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  13.3k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  13.3k|    static const uint8_t max_array[32] = {
  115|  13.3k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  13.3k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  13.3k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  13.3k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  13.3k|    };
  120|  13.3k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  13.3k|    return input.gt_bits(max_value);
  122|  13.3k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  34.6k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  34.6k|      this->error |= this->prev_incomplete;
  150|  34.6k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  34.6k|    simdutf_really_inline bool errors() const {
  176|  34.6k|      return this->error.any_bits_set_anywhere();
  177|  34.6k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  13.7k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  13.7k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  13.7k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  13.7k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  13.7k|    checker c{};
   12|  13.7k|    buf_block_reader<64> reader(input, length);
   13|  13.7k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 0, False: 13.7k]
  ------------------
   14|      0|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|      0|      c.check_next_input(in);
   16|      0|      reader.advance();
   17|      0|    }
   18|  13.7k|    uint8_t block[64]{};
   19|  13.7k|    reader.get_remainder(block);
   20|  13.7k|    simd::simd8x64<uint8_t> in(block);
   21|  13.7k|    c.check_next_input(in);
   22|  13.7k|    reader.advance();
   23|  13.7k|    c.check_eof();
   24|  13.7k|    return !c.errors();
   25|  13.7k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation33generic_validate_utf8_with_errorsEPKcm:
   67|  20.9k|result generic_validate_utf8_with_errors(const char * input, size_t length) {
   68|  20.9k|  return generic_validate_utf8_with_errors<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   69|  20.9k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation33generic_validate_utf8_with_errorsINS2_12utf8_checkerEEENS_6resultEPKhm:
   35|  20.9k|result generic_validate_utf8_with_errors(const uint8_t * input, size_t length) {
   36|  20.9k|    checker c{};
   37|  20.9k|    buf_block_reader<64> reader(input, length);
   38|  20.9k|    size_t count{0};
   39|  20.9k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (39:12): [True: 0, False: 20.9k]
  ------------------
   40|      0|      simd::simd8x64<uint8_t> in(reader.full_block());
   41|      0|      c.check_next_input(in);
   42|      0|      if(c.errors()) {
  ------------------
  |  Branch (42:10): [True: 0, False: 0]
  ------------------
   43|      0|        if (count != 0) { count--; } // Sometimes the error is only detected in the next chunk
  ------------------
  |  Branch (43:13): [True: 0, False: 0]
  ------------------
   44|      0|        result res = scalar::utf8::rewind_and_validate_with_errors(reinterpret_cast<const char*>(input), reinterpret_cast<const char*>(input + count), length - count);
   45|      0|        res.count += count;
   46|      0|        return res;
   47|      0|      }
   48|      0|      reader.advance();
   49|      0|      count += 64;
   50|      0|    }
   51|  20.9k|    uint8_t block[64]{};
   52|  20.9k|    reader.get_remainder(block);
   53|  20.9k|    simd::simd8x64<uint8_t> in(block);
   54|  20.9k|    c.check_next_input(in);
   55|  20.9k|    reader.advance();
   56|  20.9k|    c.check_eof();
   57|  20.9k|    if (c.errors()) {
  ------------------
  |  Branch (57:9): [True: 7.10k, False: 13.8k]
  ------------------
   58|  7.10k|      if (count != 0) { count--; } // Sometimes the error is only detected in the next chunk
  ------------------
  |  Branch (58:11): [True: 0, False: 7.10k]
  ------------------
   59|  7.10k|      result res = scalar::utf8::rewind_and_validate_with_errors(reinterpret_cast<const char*>(input), reinterpret_cast<const char*>(input) + count, length - count);
   60|  7.10k|      res.count += count;
   61|  7.10k|      return res;
   62|  13.8k|    } else {
   63|  13.8k|      return result(error_code::SUCCESS, length);
   64|  13.8k|    }
   65|  20.9k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_138avx2_convert_utf32_to_utf8_with_errorsEPKDimPc:
  241|  3.79k|std::pair<result, char*> avx2_convert_utf32_to_utf8_with_errors(const char32_t* buf, size_t len, char* utf8_output) {
  242|  3.79k|  const char32_t* end = buf + len;
  243|  3.79k|  const char32_t* start = buf;
  244|       |
  245|  3.79k|  const __m256i v_0000 = _mm256_setzero_si256();
  246|  3.79k|  const __m256i v_ffff0000 = _mm256_set1_epi32((uint32_t)0xffff0000);
  247|  3.79k|  const __m256i v_ff80 = _mm256_set1_epi16((uint16_t)0xff80);
  248|  3.79k|  const __m256i v_f800 = _mm256_set1_epi16((uint16_t)0xf800);
  249|  3.79k|  const __m256i v_c080 = _mm256_set1_epi16((uint16_t)0xc080);
  250|  3.79k|  const __m256i v_7fffffff = _mm256_set1_epi32((uint32_t)0x7fffffff);
  251|  3.79k|  const __m256i v_10ffff = _mm256_set1_epi32((uint32_t)0x10ffff);
  252|       |
  253|  3.79k|  const size_t safety_margin = 12; // to avoid overruns, see issue https://github.com/simdutf/simdutf/issues/92
  254|       |
  255|  7.16k|  while (buf + 16 + safety_margin <= end) {
  ------------------
  |  Branch (255:10): [True: 3.37k, False: 3.79k]
  ------------------
  256|  3.37k|    __m256i in = _mm256_loadu_si256((__m256i*)buf);
  257|  3.37k|    __m256i nextin = _mm256_loadu_si256((__m256i*)buf+1);
  258|       |    // Check for too large input
  259|  3.37k|    const __m256i max_input = _mm256_max_epu32(_mm256_max_epu32(in, nextin), v_10ffff);
  260|  3.37k|    if(static_cast<uint32_t>(_mm256_movemask_epi8(_mm256_cmpeq_epi32(max_input, v_10ffff))) != 0xffffffff) {
  ------------------
  |  Branch (260:8): [True: 0, False: 3.37k]
  ------------------
  261|      0|      return std::make_pair(result(error_code::TOO_LARGE, buf - start), utf8_output);
  262|      0|    }
  263|       |
  264|       |    // Pack 32-bit UTF-32 code units to 16-bit UTF-16 code units with unsigned saturation
  265|  3.37k|    __m256i in_16 = _mm256_packus_epi32(_mm256_and_si256(in, v_7fffffff), _mm256_and_si256(nextin, v_7fffffff));
  266|  3.37k|    in_16 = _mm256_permute4x64_epi64(in_16, 0b11011000);
  267|       |
  268|       |    // Try to apply UTF-16 => UTF-8 routine on 256 bits (haswell/avx2_convert_utf16_to_utf8.cpp)
  269|       |
  270|  3.37k|    if(_mm256_testz_si256(in_16, v_ff80)) { // ASCII fast path!!!!
  ------------------
  |  Branch (270:8): [True: 1.13k, False: 2.23k]
  ------------------
  271|       |      // 1. pack the bytes
  272|  1.13k|      const __m128i utf8_packed = _mm_packus_epi16(_mm256_castsi256_si128(in_16),_mm256_extractf128_si256(in_16,1));
  273|       |      // 2. store (16 bytes)
  274|  1.13k|      _mm_storeu_si128((__m128i*)utf8_output, utf8_packed);
  275|       |      // 3. adjust pointers
  276|  1.13k|      buf += 16;
  277|  1.13k|      utf8_output += 16;
  278|  1.13k|      continue; // we are done for this round!
  279|  1.13k|    }
  280|       |    // no bits set above 7th bit
  281|  2.23k|    const __m256i one_byte_bytemask = _mm256_cmpeq_epi16(_mm256_and_si256(in_16, v_ff80), v_0000);
  282|  2.23k|    const uint32_t one_byte_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(one_byte_bytemask));
  283|       |
  284|       |    // no bits set above 11th bit
  285|  2.23k|    const __m256i one_or_two_bytes_bytemask = _mm256_cmpeq_epi16(_mm256_and_si256(in_16, v_f800), v_0000);
  286|  2.23k|    const uint32_t one_or_two_bytes_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(one_or_two_bytes_bytemask));
  287|  2.23k|    if (one_or_two_bytes_bitmask == 0xffffffff) {
  ------------------
  |  Branch (287:9): [True: 257, False: 1.97k]
  ------------------
  288|       |      // 1. prepare 2-byte values
  289|       |      // input 16-bit word : [0000|0aaa|aabb|bbbb] x 8
  290|       |      // expected output   : [110a|aaaa|10bb|bbbb] x 8
  291|    257|      const __m256i v_1f00 = _mm256_set1_epi16((int16_t)0x1f00);
  292|    257|      const __m256i v_003f = _mm256_set1_epi16((int16_t)0x003f);
  293|       |
  294|       |      // t0 = [000a|aaaa|bbbb|bb00]
  295|    257|      const __m256i t0 = _mm256_slli_epi16(in_16, 2);
  296|       |      // t1 = [000a|aaaa|0000|0000]
  297|    257|      const __m256i t1 = _mm256_and_si256(t0, v_1f00);
  298|       |      // t2 = [0000|0000|00bb|bbbb]
  299|    257|      const __m256i t2 = _mm256_and_si256(in_16, v_003f);
  300|       |      // t3 = [000a|aaaa|00bb|bbbb]
  301|    257|      const __m256i t3 = _mm256_or_si256(t1, t2);
  302|       |      // t4 = [110a|aaaa|10bb|bbbb]
  303|    257|      const __m256i t4 = _mm256_or_si256(t3, v_c080);
  304|       |
  305|       |      // 2. merge ASCII and 2-byte codewords
  306|    257|      const __m256i utf8_unpacked = _mm256_blendv_epi8(t4, in_16, one_byte_bytemask);
  307|       |
  308|       |      // 3. prepare bitmask for 8-bit lookup
  309|    257|      const uint32_t M0 = one_byte_bitmask & 0x55555555;
  310|    257|      const uint32_t M1 = M0 >> 7;
  311|    257|      const uint32_t M2 = (M1 | M0)  & 0x00ff00ff;
  312|       |      // 4. pack the bytes
  313|       |
  314|    257|      const uint8_t* row = &simdutf::tables::utf16_to_utf8::pack_1_2_utf8_bytes[uint8_t(M2)][0];
  315|    257|      const uint8_t* row_2 = &simdutf::tables::utf16_to_utf8::pack_1_2_utf8_bytes[uint8_t(M2>>16)][0];
  316|       |
  317|    257|      const __m128i shuffle = _mm_loadu_si128((__m128i*)(row + 1));
  318|    257|      const __m128i shuffle_2 = _mm_loadu_si128((__m128i*)(row_2 + 1));
  319|       |
  320|    257|      const __m256i utf8_packed = _mm256_shuffle_epi8(utf8_unpacked, _mm256_setr_m128i(shuffle,shuffle_2));
  ------------------
  |  |    4|    257|#define _mm256_setr_m128i(xmm2, xmm1)  _mm256_permute2f128_si256(_mm256_castsi128_si256(xmm1), _mm256_castsi128_si256(xmm2), 2)
  ------------------
  321|       |      // 5. store bytes
  322|    257|      _mm_storeu_si128((__m128i*)utf8_output, _mm256_castsi256_si128(utf8_packed));
  323|    257|      utf8_output += row[0];
  324|    257|      _mm_storeu_si128((__m128i*)utf8_output, _mm256_extractf128_si256(utf8_packed,1));
  325|    257|      utf8_output += row_2[0];
  326|       |
  327|       |      // 6. adjust pointers
  328|    257|      buf += 16;
  329|    257|      continue;
  330|    257|    }
  331|       |    // Must check for overflow in packing
  332|  1.97k|    const __m256i saturation_bytemask = _mm256_cmpeq_epi32(_mm256_and_si256(_mm256_or_si256(in, nextin), v_ffff0000), v_0000);
  333|  1.97k|    const uint32_t saturation_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(saturation_bytemask));
  334|  1.97k|    if (saturation_bitmask == 0xffffffff) {
  ------------------
  |  Branch (334:9): [True: 1.11k, False: 865]
  ------------------
  335|       |      // case: code units from register produce either 1, 2 or 3 UTF-8 bytes
  336|       |
  337|       |      // Check for illegal surrogate code units
  338|  1.11k|      const __m256i v_d800 = _mm256_set1_epi16((uint16_t)0xd800);
  339|  1.11k|      const __m256i forbidden_bytemask = _mm256_cmpeq_epi16(_mm256_and_si256(in_16, v_f800), v_d800);
  340|  1.11k|      if (static_cast<uint32_t>(_mm256_movemask_epi8(forbidden_bytemask)) != 0x0) {
  ------------------
  |  Branch (340:11): [True: 0, False: 1.11k]
  ------------------
  341|      0|        return std::make_pair(result(error_code::SURROGATE, buf - start), utf8_output);
  342|      0|      }
  343|       |
  344|  1.11k|      const __m256i dup_even = _mm256_setr_epi16(0x0000, 0x0202, 0x0404, 0x0606,
  345|  1.11k|                                              0x0808, 0x0a0a, 0x0c0c, 0x0e0e,
  346|  1.11k|                                              0x0000, 0x0202, 0x0404, 0x0606,
  347|  1.11k|                                              0x0808, 0x0a0a, 0x0c0c, 0x0e0e);
  348|       |
  349|       |      /* In this branch we handle three cases:
  350|       |        1. [0000|0000|0ccc|cccc] => [0ccc|cccc]                           - single UFT-8 byte
  351|       |        2. [0000|0bbb|bbcc|cccc] => [110b|bbbb], [10cc|cccc]              - two UTF-8 bytes
  352|       |        3. [aaaa|bbbb|bbcc|cccc] => [1110|aaaa], [10bb|bbbb], [10cc|cccc] - three UTF-8 bytes
  353|       |
  354|       |        We expand the input word (16-bit) into two code units (32-bit), thus
  355|       |        we have room for four bytes. However, we need five distinct bit
  356|       |        layouts. Note that the last byte in cases #2 and #3 is the same.
  357|       |
  358|       |        We precompute byte 1 for case #1 and the common byte for cases #2 & #3
  359|       |        in register t2.
  360|       |
  361|       |        We precompute byte 1 for case #3 and -- **conditionally** -- precompute
  362|       |        either byte 1 for case #2 or byte 2 for case #3. Note that they
  363|       |        differ by exactly one bit.
  364|       |
  365|       |        Finally from these two code units we build proper UTF-8 sequence, taking
  366|       |        into account the case (i.e, the number of bytes to write).
  367|       |      */
  368|       |      /**
  369|       |       * Given [aaaa|bbbb|bbcc|cccc] our goal is to produce:
  370|       |       * t2 => [0ccc|cccc] [10cc|cccc]
  371|       |       * s4 => [1110|aaaa] ([110b|bbbb] OR [10bb|bbbb])
  372|       |       */
  373|  1.11k|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  374|       |      // [aaaa|bbbb|bbcc|cccc] => [bbcc|cccc|bbcc|cccc]
  375|  1.11k|      const __m256i t0 = _mm256_shuffle_epi8(in_16, dup_even);
  376|       |      // [bbcc|cccc|bbcc|cccc] => [00cc|cccc|0bcc|cccc]
  377|  1.11k|      const __m256i t1 = _mm256_and_si256(t0, simdutf_vec(0b0011111101111111));
  ------------------
  |  |  373|  1.11k|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  378|       |      // [00cc|cccc|0bcc|cccc] => [10cc|cccc|0bcc|cccc]
  379|  1.11k|      const __m256i t2 = _mm256_or_si256 (t1, simdutf_vec(0b1000000000000000));
  ------------------
  |  |  373|  1.11k|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  380|       |
  381|       |      // [aaaa|bbbb|bbcc|cccc] =>  [0000|aaaa|bbbb|bbcc]
  382|  1.11k|      const __m256i s0 = _mm256_srli_epi16(in_16, 4);
  383|       |      // [0000|aaaa|bbbb|bbcc] => [0000|aaaa|bbbb|bb00]
  384|  1.11k|      const __m256i s1 = _mm256_and_si256(s0, simdutf_vec(0b0000111111111100));
  ------------------
  |  |  373|  1.11k|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  385|       |      // [0000|aaaa|bbbb|bb00] => [00bb|bbbb|0000|aaaa]
  386|  1.11k|      const __m256i s2 = _mm256_maddubs_epi16(s1, simdutf_vec(0x0140));
  ------------------
  |  |  373|  1.11k|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  387|       |      // [00bb|bbbb|0000|aaaa] => [11bb|bbbb|1110|aaaa]
  388|  1.11k|      const __m256i s3 = _mm256_or_si256(s2, simdutf_vec(0b1100000011100000));
  ------------------
  |  |  373|  1.11k|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  389|  1.11k|      const __m256i m0 = _mm256_andnot_si256(one_or_two_bytes_bytemask, simdutf_vec(0b0100000000000000));
  ------------------
  |  |  373|  1.11k|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  390|  1.11k|      const __m256i s4 = _mm256_xor_si256(s3, m0);
  391|  1.11k|#undef simdutf_vec
  392|       |
  393|       |      // 4. expand code units 16-bit => 32-bit
  394|  1.11k|      const __m256i out0 = _mm256_unpacklo_epi16(t2, s4);
  395|  1.11k|      const __m256i out1 = _mm256_unpackhi_epi16(t2, s4);
  396|       |
  397|       |      // 5. compress 32-bit code units into 1, 2 or 3 bytes -- 2 x shuffle
  398|  1.11k|      const uint32_t mask = (one_byte_bitmask & 0x55555555) |
  399|  1.11k|                            (one_or_two_bytes_bitmask & 0xaaaaaaaa);
  400|       |      // Due to the wider registers, the following path is less likely to be useful.
  401|       |      /*if(mask == 0) {
  402|       |        // We only have three-byte code units. Use fast path.
  403|       |        const __m256i shuffle = _mm256_setr_epi8(2,3,1,6,7,5,10,11,9,14,15,13,-1,-1,-1,-1, 2,3,1,6,7,5,10,11,9,14,15,13,-1,-1,-1,-1);
  404|       |        const __m256i utf8_0 = _mm256_shuffle_epi8(out0, shuffle);
  405|       |        const __m256i utf8_1 = _mm256_shuffle_epi8(out1, shuffle);
  406|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_castsi256_si128(utf8_0));
  407|       |        utf8_output += 12;
  408|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_castsi256_si128(utf8_1));
  409|       |        utf8_output += 12;
  410|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_extractf128_si256(utf8_0,1));
  411|       |        utf8_output += 12;
  412|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_extractf128_si256(utf8_1,1));
  413|       |        utf8_output += 12;
  414|       |        buf += 16;
  415|       |        continue;
  416|       |      }*/
  417|  1.11k|      const uint8_t mask0 = uint8_t(mask);
  418|  1.11k|      const uint8_t* row0 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask0][0];
  419|  1.11k|      const __m128i shuffle0 = _mm_loadu_si128((__m128i*)(row0 + 1));
  420|  1.11k|      const __m128i utf8_0 = _mm_shuffle_epi8(_mm256_castsi256_si128(out0), shuffle0);
  421|       |
  422|  1.11k|      const uint8_t mask1 = static_cast<uint8_t>(mask >> 8);
  423|  1.11k|      const uint8_t* row1 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask1][0];
  424|  1.11k|      const __m128i shuffle1 = _mm_loadu_si128((__m128i*)(row1 + 1));
  425|  1.11k|      const __m128i utf8_1 = _mm_shuffle_epi8(_mm256_castsi256_si128(out1), shuffle1);
  426|       |
  427|  1.11k|      const uint8_t mask2 = static_cast<uint8_t>(mask >> 16);
  428|  1.11k|      const uint8_t* row2 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask2][0];
  429|  1.11k|      const __m128i shuffle2 = _mm_loadu_si128((__m128i*)(row2 + 1));
  430|  1.11k|      const __m128i utf8_2 = _mm_shuffle_epi8(_mm256_extractf128_si256(out0,1), shuffle2);
  431|       |
  432|       |
  433|  1.11k|      const uint8_t mask3 = static_cast<uint8_t>(mask >> 24);
  434|  1.11k|      const uint8_t* row3 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask3][0];
  435|  1.11k|      const __m128i shuffle3 = _mm_loadu_si128((__m128i*)(row3 + 1));
  436|  1.11k|      const __m128i utf8_3 = _mm_shuffle_epi8(_mm256_extractf128_si256(out1,1), shuffle3);
  437|       |
  438|  1.11k|      _mm_storeu_si128((__m128i*)utf8_output, utf8_0);
  439|  1.11k|      utf8_output += row0[0];
  440|  1.11k|      _mm_storeu_si128((__m128i*)utf8_output, utf8_1);
  441|  1.11k|      utf8_output += row1[0];
  442|  1.11k|      _mm_storeu_si128((__m128i*)utf8_output, utf8_2);
  443|  1.11k|      utf8_output += row2[0];
  444|  1.11k|      _mm_storeu_si128((__m128i*)utf8_output, utf8_3);
  445|  1.11k|      utf8_output += row3[0];
  446|  1.11k|      buf += 16;
  447|  1.11k|    } else {
  448|       |      // case: at least one 32-bit word is larger than 0xFFFF <=> it will produce four UTF-8 bytes.
  449|       |      // Let us do a scalar fallback.
  450|       |      // It may seem wasteful to use scalar code, but being efficient with SIMD
  451|       |      // may require large, non-trivial tables?
  452|    865|      size_t forward = 15;
  453|    865|      size_t k = 0;
  454|    865|      if(size_t(end - buf) < forward + 1) { forward = size_t(end - buf - 1);}
  ------------------
  |  Branch (454:10): [True: 0, False: 865]
  ------------------
  455|  13.8k|      for(; k < forward; k++) {
  ------------------
  |  Branch (455:13): [True: 12.9k, False: 865]
  ------------------
  456|  12.9k|        uint32_t word = buf[k];
  457|  12.9k|        if((word & 0xFFFFFF80)==0) {  // 1-byte (ASCII)
  ------------------
  |  Branch (457:12): [True: 9.15k, False: 3.81k]
  ------------------
  458|  9.15k|          *utf8_output++ = char(word);
  459|  9.15k|        } else if((word & 0xFFFFF800)==0) { // 2-byte
  ------------------
  |  Branch (459:19): [True: 364, False: 3.45k]
  ------------------
  460|    364|          *utf8_output++ = char((word>>6) | 0b11000000);
  461|    364|          *utf8_output++ = char((word & 0b111111) | 0b10000000);
  462|  3.45k|        } else if((word & 0xFFFF0000 )==0) {  // 3-byte
  ------------------
  |  Branch (462:19): [True: 2.40k, False: 1.05k]
  ------------------
  463|  2.40k|          if (word >= 0xD800 && word <= 0xDFFF) { return std::make_pair(result(error_code::SURROGATE, buf - start + k), utf8_output); }
  ------------------
  |  Branch (463:15): [True: 1.92k, False: 478]
  |  Branch (463:33): [True: 0, False: 1.92k]
  ------------------
  464|  2.40k|          *utf8_output++ = char((word>>12) | 0b11100000);
  465|  2.40k|          *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
  466|  2.40k|          *utf8_output++ = char((word & 0b111111) | 0b10000000);
  467|  2.40k|        } else {  // 4-byte
  468|  1.05k|          if (word > 0x10FFFF) { return std::make_pair(result(error_code::TOO_LARGE, buf - start + k), utf8_output); }
  ------------------
  |  Branch (468:15): [True: 0, False: 1.05k]
  ------------------
  469|  1.05k|          *utf8_output++ = char((word>>18) | 0b11110000);
  470|  1.05k|          *utf8_output++ = char(((word>>12) & 0b111111) | 0b10000000);
  471|  1.05k|          *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
  472|  1.05k|          *utf8_output++ = char((word & 0b111111) | 0b10000000);
  473|  1.05k|        }
  474|  12.9k|      }
  475|    865|      buf += k;
  476|    865|    }
  477|  1.97k|  } // while
  478|       |
  479|  3.79k|  return std::make_pair(result(error_code::SUCCESS, buf - start), utf8_output);
  480|  3.79k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|  13.7k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|  13.7k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|  13.7k|}
_ZNK7simdutf7haswell14implementation25validate_utf8_with_errorsEPKcm:
  108|  20.9k|simdutf_warn_unused result implementation::validate_utf8_with_errors(const char *buf, size_t len) const noexcept {
  109|  20.9k|  return haswell::utf8_validation::generic_validate_utf8_with_errors(buf,len);
  110|  20.9k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|   121k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|   121k|  utf8_to_utf32::validating_transcoder converter;
  276|   121k|  return converter.convert(buf, len, utf32_output);
  277|   121k|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  279|  15.9k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  280|  15.9k|  utf8_to_utf32::validating_transcoder converter;
  281|  15.9k|  return converter.convert_with_errors(buf, len, utf32_output);
  282|  15.9k|}
_ZNK7simdutf7haswell14implementation33convert_utf32_to_utf8_with_errorsEPKDimPc:
  477|  3.79k|simdutf_warn_unused result implementation::convert_utf32_to_utf8_with_errors(const char32_t* buf, size_t len, char* utf8_output) const noexcept {
  478|       |  // ret.first.count is always the position in the buffer, not the number of code units written even if finished
  479|  3.79k|  std::pair<result, char*> ret = haswell::avx2_convert_utf32_to_utf8_with_errors(buf, len, utf8_output);
  480|  3.79k|  if (ret.first.count != len) {
  ------------------
  |  Branch (480:7): [True: 3.79k, False: 0]
  ------------------
  481|  3.79k|    result scalar_res = scalar::utf32_to_utf8::convert_with_errors(
  482|  3.79k|                                        buf + ret.first.count, len - ret.first.count, ret.second);
  483|  3.79k|    if (scalar_res.error) {
  ------------------
  |  Branch (483:9): [True: 0, False: 3.79k]
  ------------------
  484|      0|      scalar_res.count += ret.first.count;
  485|      0|      return scalar_res;
  486|  3.79k|    } else {
  487|  3.79k|      ret.second += scalar_res.count;
  488|  3.79k|    }
  489|  3.79k|  }
  490|  3.79k|  ret.first.count = ret.second - utf8_output;   // Set count to the number of 8-bit code units written
  491|  3.79k|  return ret.first;
  492|  3.79k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|  13.7k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|  13.7k|  return utf8::count_code_points(input, length);
  778|  13.7k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  34.6k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  34.6k|  return input.reduce_or().is_ascii();
   25|  34.6k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  26.7k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  26.7k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  26.7k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  26.7k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  26.7k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|   189k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|   189k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|   189k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|   189k|    return active_implementation;
  815|   189k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|  13.7k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|  13.7k|  return get_active_implementation()->validate_utf8(buf, len);
  819|  13.7k|}
_ZN7simdutf25validate_utf8_with_errorsEPKcm:
  820|  20.9k|simdutf_warn_unused result validate_utf8_with_errors(const char *buf, size_t len) noexcept {
  821|  20.9k|  return get_active_implementation()->validate_utf8_with_errors(buf, len);
  822|  20.9k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|   121k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|   121k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|   121k|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  879|  15.9k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  880|  15.9k|  return get_active_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  881|  15.9k|}
_ZN7simdutf33convert_utf32_to_utf8_with_errorsEPKDimPc:
 1018|  3.79k|simdutf_warn_unused result convert_utf32_to_utf8_with_errors(const char32_t * buf, size_t len, char* utf8_buffer) noexcept {
 1019|  3.79k|  return get_active_implementation()->convert_utf32_to_utf8_with_errors(buf, len, utf8_buffer);
 1020|  3.79k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|  13.7k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|  13.7k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|  13.7k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  217|      1|  simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * buf, size_t len, char32_t* utf32_output) const noexcept final override {
  218|      1|    return set_best()->convert_utf8_to_utf32_with_errors(buf, len, utf32_output);
  219|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf32_to_utf819convert_with_errorsEPKDimPc:
   58|  3.79k|inline result convert_with_errors(const char32_t* buf, size_t len, char* utf8_output) {
   59|  3.79k|  const uint32_t *data = reinterpret_cast<const uint32_t *>(buf);
   60|  3.79k|  size_t pos = 0;
   61|  3.79k|  char* start{utf8_output};
   62|  44.0k|  while (pos < len) {
  ------------------
  |  Branch (62:10): [True: 40.2k, False: 3.79k]
  ------------------
   63|       |    // try to convert the next block of 2 ASCII characters
   64|  40.2k|    if (pos + 2 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (64:9): [True: 38.0k, False: 2.18k]
  ------------------
   65|  38.0k|      uint64_t v;
   66|  38.0k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   67|  38.0k|      if ((v & 0xFFFFFF80FFFFFF80) == 0) {
  ------------------
  |  Branch (67:11): [True: 17.2k, False: 20.7k]
  ------------------
   68|  17.2k|        *utf8_output++ = char(buf[pos]);
   69|  17.2k|				*utf8_output++ = char(buf[pos+1]);
   70|  17.2k|        pos += 2;
   71|  17.2k|        continue;
   72|  17.2k|      }
   73|  38.0k|    }
   74|  22.9k|    uint32_t word = data[pos];
   75|  22.9k|    if((word & 0xFFFFFF80)==0) {
  ------------------
  |  Branch (75:8): [True: 6.70k, False: 16.2k]
  ------------------
   76|       |      // will generate one UTF-8 bytes
   77|  6.70k|      *utf8_output++ = char(word);
   78|  6.70k|      pos++;
   79|  16.2k|    } else if((word & 0xFFFFF800)==0) {
  ------------------
  |  Branch (79:15): [True: 4.21k, False: 12.0k]
  ------------------
   80|       |      // will generate two UTF-8 bytes
   81|       |      // we have 0b110XXXXX 0b10XXXXXX
   82|  4.21k|      *utf8_output++ = char((word>>6) | 0b11000000);
   83|  4.21k|      *utf8_output++ = char((word & 0b111111) | 0b10000000);
   84|  4.21k|      pos++;
   85|  12.0k|    } else if((word & 0xFFFF0000)==0) {
  ------------------
  |  Branch (85:15): [True: 11.1k, False: 952]
  ------------------
   86|       |      // will generate three UTF-8 bytes
   87|       |      // we have 0b1110XXXX 0b10XXXXXX 0b10XXXXXX
   88|  11.1k|			if (word >= 0xD800 && word <= 0xDFFF) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (88:8): [True: 7.85k, False: 3.24k]
  |  Branch (88:26): [True: 0, False: 7.85k]
  ------------------
   89|  11.1k|      *utf8_output++ = char((word>>12) | 0b11100000);
   90|  11.1k|      *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
   91|  11.1k|      *utf8_output++ = char((word & 0b111111) | 0b10000000);
   92|  11.1k|      pos++;
   93|  11.1k|    } else {
   94|       |      // will generate four UTF-8 bytes
   95|       |      // we have 0b11110XXX 0b10XXXXXX 0b10XXXXXX 0b10XXXXXX
   96|    952|			if (word > 0x10FFFF) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (96:8): [True: 0, False: 952]
  ------------------
   97|    952|      *utf8_output++ = char((word>>18) | 0b11110000);
   98|    952|      *utf8_output++ = char(((word>>12) & 0b111111) | 0b10000000);
   99|    952|      *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
  100|    952|      *utf8_output++ = char((word & 0b111111) | 0b10000000);
  101|    952|      pos ++;
  102|    952|    }
  103|  22.9k|  }
  104|  3.79k|  return result(error_code::SUCCESS, utf8_output - start);
  105|  3.79k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf820validate_with_errorsEPKcm:
   77|  7.10k|inline simdutf_warn_unused result validate_with_errors(const char *buf, size_t len) noexcept {
   78|  7.10k|  const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   79|  7.10k|  size_t pos = 0;
   80|  7.10k|  uint32_t code_point = 0;
   81|  7.10k|  while (pos < len) {
  ------------------
  |  Branch (81:10): [True: 7.10k, False: 0]
  ------------------
   82|       |    // check of the next 16 bytes are ascii.
   83|  7.10k|    size_t next_pos = pos + 16;
   84|  7.10k|    if (next_pos <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (84:9): [True: 0, False: 7.10k]
  ------------------
   85|      0|      uint64_t v1;
   86|      0|      std::memcpy(&v1, data + pos, sizeof(uint64_t));
   87|      0|      uint64_t v2;
   88|      0|      std::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   89|      0|      uint64_t v{v1 | v2};
   90|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (90:11): [True: 0, False: 0]
  ------------------
   91|      0|        pos = next_pos;
   92|      0|        continue;
   93|      0|      }
   94|      0|    }
   95|  7.10k|    unsigned char byte = data[pos];
   96|       |
   97|  7.10k|    while (byte < 0b10000000) {
  ------------------
  |  Branch (97:12): [True: 0, False: 7.10k]
  ------------------
   98|      0|      if (++pos == len) { return result(error_code::SUCCESS, len); }
  ------------------
  |  Branch (98:11): [True: 0, False: 0]
  ------------------
   99|      0|      byte = data[pos];
  100|      0|    }
  101|       |
  102|  7.10k|    if ((byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (102:9): [True: 1.41k, False: 5.69k]
  ------------------
  103|  1.41k|      next_pos = pos + 2;
  104|  1.41k|      if (next_pos > len) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (104:11): [True: 0, False: 1.41k]
  ------------------
  105|  1.41k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (105:11): [True: 1.12k, False: 284]
  ------------------
  106|       |      // range check
  107|    284|      code_point = (byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  108|    284|      if ((code_point < 0x80) || (0x7ff < code_point)) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (108:11): [True: 284, False: 0]
  |  Branch (108:34): [True: 0, False: 0]
  ------------------
  109|  5.69k|    } else if ((byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (109:16): [True: 3.48k, False: 2.20k]
  ------------------
  110|  3.48k|      next_pos = pos + 3;
  111|  3.48k|      if (next_pos > len) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (111:11): [True: 0, False: 3.48k]
  ------------------
  112|  3.48k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (112:11): [True: 707, False: 2.78k]
  ------------------
  113|  2.78k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (113:11): [True: 1.08k, False: 1.69k]
  ------------------
  114|       |      // range check
  115|  1.69k|      code_point = (byte & 0b00001111) << 12 |
  116|  1.69k|                   (data[pos + 1] & 0b00111111) << 6 |
  117|  1.69k|                   (data[pos + 2] & 0b00111111);
  118|  1.69k|      if ((code_point < 0x800) || (0xffff < code_point)) { return result(error_code::OVERLONG, pos);}
  ------------------
  |  Branch (118:11): [True: 1.07k, False: 624]
  |  Branch (118:35): [True: 0, False: 624]
  ------------------
  119|    624|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (119:11): [True: 624, False: 0]
  |  Branch (119:34): [True: 624, False: 0]
  ------------------
  120|  2.20k|    } else if ((byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (120:16): [True: 2.20k, False: 0]
  ------------------
  121|  2.20k|      next_pos = pos + 4;
  122|  2.20k|      if (next_pos > len) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (122:11): [True: 0, False: 2.20k]
  ------------------
  123|  2.20k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (123:11): [True: 1.02k, False: 1.18k]
  ------------------
  124|  1.18k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (124:11): [True: 335, False: 850]
  ------------------
  125|    850|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (125:11): [True: 322, False: 528]
  ------------------
  126|       |      // range check
  127|    528|      code_point =
  128|    528|          (byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  129|    528|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  130|    528|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (130:11): [True: 261, False: 267]
  ------------------
  131|    267|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (131:11): [True: 267, False: 0]
  ------------------
  132|    267|    } else {
  133|       |      // we either have too many continuation bytes or an invalid leading byte
  134|      0|      if ((byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (134:11): [True: 0, False: 0]
  ------------------
  135|      0|      else { return result(error_code::HEADER_BITS, pos); }
  136|      0|    }
  137|      0|    pos = next_pos;
  138|      0|  }
  139|      0|  return result(error_code::SUCCESS, len);
  140|  7.10k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  13.7k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  13.7k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  13.7k|    size_t counter{0};
  171|  86.7k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 73.0k, False: 13.7k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  73.0k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 50.6k, False: 22.3k]
  ------------------
  174|  73.0k|    }
  175|  13.7k|    return counter;
  176|  13.7k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf831rewind_and_validate_with_errorsEPKcS4_m:
  146|  7.10k|inline simdutf_warn_unused result rewind_and_validate_with_errors(const char *start, const char *buf, size_t len) noexcept {
  147|       |    // First check that we start with a leading byte
  148|  7.10k|  if ((*start & 0b11000000) == 0b10000000) {
  ------------------
  |  Branch (148:7): [True: 0, False: 7.10k]
  ------------------
  149|      0|    return result(error_code::TOO_LONG, 0);
  150|      0|  }
  151|  7.10k|  size_t extra_len{0};
  152|       |  // A leading byte cannot be further than 4 bytes away
  153|  7.10k|  for(int i = 0; i < 5; i++) {
  ------------------
  |  Branch (153:18): [True: 7.10k, False: 0]
  ------------------
  154|  7.10k|    unsigned char byte = *buf;
  155|  7.10k|    if ((byte & 0b11000000) != 0b10000000) {
  ------------------
  |  Branch (155:9): [True: 7.10k, False: 0]
  ------------------
  156|  7.10k|      break;
  157|  7.10k|    } else {
  158|      0|      buf--;
  159|      0|      extra_len++;
  160|      0|    }
  161|  7.10k|  }
  162|       |
  163|  7.10k|  result res = validate_with_errors(buf, len + extra_len);
  164|  7.10k|  res.count -= extra_len;
  165|  7.10k|  return res;
  166|  7.10k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   121k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   121k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   121k|  size_t pos = 0;
   12|   121k|  char32_t* start{utf32_output};
   13|   222k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 121k, False: 100k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   121k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 121k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   121k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   121k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 66.6k, False: 54.9k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  66.6k|      *utf32_output++ = char32_t(leading_byte);
   34|  66.6k|      pos++;
   35|  66.6k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 21.6k, False: 33.2k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  21.6k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 21.6k]
  ------------------
   38|  21.6k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 3.69k, False: 17.9k]
  ------------------
   39|       |      // range check
   40|  17.9k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  17.9k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 572, False: 17.3k]
  |  Branch (41:32): [True: 0, False: 17.3k]
  ------------------
   42|  17.3k|      *utf32_output++ = char32_t(code_point);
   43|  17.3k|      pos += 2;
   44|  33.2k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 21.3k, False: 11.8k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  21.3k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 21.3k]
  ------------------
   47|       |
   48|  21.3k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 2.84k, False: 18.5k]
  ------------------
   49|  18.5k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 2.27k, False: 16.2k]
  ------------------
   50|       |      // range check
   51|  16.2k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  16.2k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  16.2k|                   (data[pos + 2] & 0b00111111);
   54|  16.2k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 2.16k, False: 14.0k]
  |  Branch (54:33): [True: 0, False: 14.0k]
  ------------------
   55|  16.2k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 1.81k, False: 12.2k]
  |  Branch (55:35): [True: 1.25k, False: 560]
  ------------------
   56|  3.41k|        return 0;
   57|  3.41k|      }
   58|  12.8k|      *utf32_output++ = char32_t(code_point);
   59|  12.8k|      pos += 3;
   60|  12.8k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 11.8k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  11.8k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 11.8k]
  ------------------
   63|  11.8k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 5.21k, False: 6.65k]
  ------------------
   64|  6.65k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 856, False: 5.80k]
  ------------------
   65|  5.80k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 718, False: 5.08k]
  ------------------
   66|       |
   67|       |      // range check
   68|  5.08k|      uint32_t code_point =
   69|  5.08k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  5.08k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  5.08k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 522, False: 4.56k]
  |  Branch (71:35): [True: 534, False: 4.02k]
  ------------------
   72|  4.02k|      *utf32_output++ = char32_t(code_point);
   73|  4.02k|      pos += 4;
   74|  4.02k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   121k|  }
   78|   100k|  return utf32_output - start;
   79|   121k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|  15.6k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|  15.6k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|  15.6k|  size_t pos = 0;
   84|  15.6k|  char32_t* start{utf32_output};
   85|  70.9k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 69.2k, False: 1.75k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|  69.2k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 51.7k, False: 17.5k]
  ------------------
   88|  51.7k|      uint64_t v1;
   89|  51.7k|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|  51.7k|      uint64_t v2;
   91|  51.7k|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|  51.7k|      uint64_t v{v1 | v2};
   93|  51.7k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 2.73k, False: 48.9k]
  ------------------
   94|  2.73k|        size_t final_pos = pos + 16;
   95|  46.5k|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 43.7k, False: 2.73k]
  ------------------
   96|  43.7k|          *utf32_output++ = char32_t(buf[pos]);
   97|  43.7k|          pos++;
   98|  43.7k|        }
   99|  2.73k|        continue;
  100|  2.73k|      }
  101|  51.7k|    }
  102|  66.4k|    uint8_t leading_byte = data[pos]; // leading byte
  103|  66.4k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 35.5k, False: 30.8k]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|  35.5k|      *utf32_output++ = char32_t(leading_byte);
  106|  35.5k|      pos++;
  107|  35.5k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 9.76k, False: 21.1k]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|  9.76k|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 327, False: 9.43k]
  ------------------
  110|  9.43k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 638, False: 8.79k]
  ------------------
  111|       |      // range check
  112|  8.79k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|  8.79k|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 239, False: 8.56k]
  |  Branch (113:32): [True: 0, False: 8.56k]
  ------------------
  114|  8.56k|      *utf32_output++ = char32_t(code_point);
  115|  8.56k|      pos += 2;
  116|  21.1k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 9.36k, False: 11.7k]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|  9.36k|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 450, False: 8.91k]
  ------------------
  119|       |
  120|  8.91k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 405, False: 8.51k]
  ------------------
  121|  8.51k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 882, False: 7.63k]
  ------------------
  122|       |      // range check
  123|  7.63k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|  7.63k|                   (data[pos + 1] & 0b00111111) << 6 |
  125|  7.63k|                   (data[pos + 2] & 0b00111111);
  126|  7.63k|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 844, False: 6.78k]
  |  Branch (126:33): [True: 0, False: 6.78k]
  ------------------
  127|  6.78k|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 654, False: 6.13k]
  |  Branch (127:34): [True: 374, False: 280]
  ------------------
  128|  6.41k|      *utf32_output++ = char32_t(code_point);
  129|  6.41k|      pos += 3;
  130|  11.7k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 3.66k, False: 8.08k]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|  3.66k|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 406, False: 3.26k]
  ------------------
  133|  3.26k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 346, False: 2.91k]
  ------------------
  134|  2.91k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 238, False: 2.67k]
  ------------------
  135|  2.67k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 276, False: 2.40k]
  ------------------
  136|       |
  137|       |      // range check
  138|  2.40k|      uint32_t code_point =
  139|  2.40k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|  2.40k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|  2.40k|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 196, False: 2.20k]
  ------------------
  142|  2.20k|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 204, False: 2.00k]
  ------------------
  143|  2.00k|      *utf32_output++ = char32_t(code_point);
  144|  2.00k|      pos += 4;
  145|  8.08k|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|  8.08k|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 3.61k, False: 4.47k]
  ------------------
  148|  4.47k|      else { return result(error_code::HEADER_BITS, pos); }
  149|  8.08k|    }
  150|  66.4k|  }
  151|  1.75k|  return result(error_code::SUCCESS, utf32_output - start);
  152|  15.6k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|  15.9k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|  15.9k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|  15.9k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|  15.9k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 15.9k, False: 0]
  ------------------
  172|  15.9k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|  16.1k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 15.9k, False: 246]
  ------------------
  175|  15.9k|    unsigned char byte = buf[0-i];
  176|  15.9k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|  15.9k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 15.6k, False: 246]
  ------------------
  178|  15.6k|      buf -= i;
  179|  15.6k|      extra_len = i;
  180|  15.6k|      break;
  181|  15.6k|    }
  182|  15.9k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|  15.9k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 246, False: 15.6k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|    246|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|    246|  }
  196|       |
  197|  15.6k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|  15.6k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 13.9k, False: 1.75k]
  ------------------
  199|  13.9k|    res.count -= extra_len;
  200|  13.9k|  }
  201|  15.6k|  return res;
  202|  15.9k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|   103k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|   103k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|   103k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|   103k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  34.6k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  82.6k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  82.6k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  82.6k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  1.10M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  1.10M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  1.10M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  1.10M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  34.6k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  34.6k|      return this->chunks[0] | this->chunks[1];
  297|  34.6k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|   144k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  1.55M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  34.6k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  82.6k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  26.7k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  26.7k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  26.7k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  53.5k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  80.3k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  80.3k|      return lookup_16(simd8<L>::repeat_16(
  140|  80.3k|        replace0,  replace1,  replace2,  replace3,
  141|  80.3k|        replace4,  replace5,  replace6,  replace7,
  142|  80.3k|        replace8,  replace9,  replace10, replace11,
  143|  80.3k|        replace12, replace13, replace14, replace15
  144|  80.3k|      ));
  145|  80.3k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  80.3k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  80.3k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  80.3k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|   107k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  80.3k|    ) {
  218|  80.3k|      return simd8<uint8_t>(
  219|  80.3k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  80.3k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  80.3k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  80.3k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  80.3k|      );
  224|  80.3k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  80.3k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|   160k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   298k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   298k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  26.7k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  26.7k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  26.7k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  26.7k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  26.7k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  26.7k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  66.9k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  53.5k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  53.5k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  53.5k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  53.5k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  26.7k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  53.5k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  26.7k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  26.7k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  26.7k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  26.7k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  26.7k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  26.7k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  26.7k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  13.3k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  13.3k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   172k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   172k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   422k|{
   72|   422k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   422k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   422k|    }
   75|   422k|    else if constexpr (sizeof(U) == 2) {
   76|   422k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   422k|    }
   78|   422k|    else {
   79|       |        // utf-32
   80|   422k|        static_assert(sizeof(U) == 4);
   81|   422k|        SCN_UNUSED(ch);
   82|   422k|        return 1;
   83|   422k|    }
   84|   422k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   422k|{
   36|   422k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   422k|    SCN_GCC_COMPAT_PUSH
   39|   422k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   422k|    constexpr char lengths[] =
   41|   422k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   422k|        "\1\1\1\1\1\1\1\1"
   43|   422k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   422k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   422k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   422k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   422k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   422k|    SCN_GCC_COMPAT_POP
   50|   422k|}

_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  90.3k|            {
 3756|  90.3k|                return fn::impl(std::move(first), std::move(last));
 3757|  90.3k|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  90.3k|            {
 3716|  90.3k|                return s - i;
 3717|  90.3k|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl12_GLOBAL__N_133find_nondecimal_digit_simple_implES8_E3$_0EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEENS1_16projected_helperISP_SK_vEEEEEENSJ_IX14borrowed_rangeISH_EEE4typeISP_NS0_8danglingEEEE4typeEOSH_SI_SK_:
 6792|   156k|        {
 6793|   156k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   156k|                                    proj);
 6795|   156k|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEE3$_0NS0_8identityEEET_SH_T0_RT1_RT2_:
 6760|   156k|        {
 6761|   159k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 159k, False: 24]
  ------------------
 6762|   159k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 156k, False: 2.73k]
  ------------------
 6763|   156k|                    return first;
 6764|   156k|                }
 6765|  2.73k|                ++first;
 6766|  2.73k|            }
 6767|     24|            return first;
 6768|   156k|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_0JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSI_DpOSJ_:
 1299|   159k|            {
 1300|   159k|                return fn::impl(std::forward<F>(f),
 1301|   159k|                                std::forward<Args>(args)...);
 1302|   159k|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_0JRKcEEENS9_9enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISK_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSK_DpOSN_:
 1288|   159k|            {
 1289|   159k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   159k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|   258k|            {
 1300|   258k|                return fn::impl(std::forward<F>(f),
 1301|   258k|                                std::forward<Args>(args)...);
 1302|   258k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|   258k|            {
 1289|   258k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   258k|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|   258k|    {
 1142|   258k|        return std::forward<T>(t);
 1143|   258k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   208k|            {
 2693|   208k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   208k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   208k|            {
 2672|   208k|                return decay_copy(t.begin());
 2673|   208k|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   416k|    {
 2606|   416k|        return std::forward<T>(t);
 2607|   416k|    }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|   208k|            {
 2759|   208k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   208k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|   208k|            {
 2739|   208k|                return decay_copy(std::forward<T>(t).end());
 2740|   208k|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl30find_classic_space_narrow_fastES8_E3$_1EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  11.1k|        {
 6793|  11.1k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  11.1k|                                    proj);
 6795|  11.1k|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_1NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  11.1k|        {
 6761|  54.1k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 51.0k, False: 3.05k]
  ------------------
 6762|  51.0k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 8.08k, False: 42.9k]
  ------------------
 6763|  8.08k|                    return first;
 6764|  8.08k|                }
 6765|  42.9k|                ++first;
 6766|  42.9k|            }
 6767|  3.05k|            return first;
 6768|  11.1k|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  51.0k|            {
 1300|  51.0k|                return fn::impl(std::forward<F>(f),
 1301|  51.0k|                                std::forward<Args>(args)...);
 1302|  51.0k|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  51.0k|            {
 1289|  51.0k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  51.0k|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  40.4k|        {
 6793|  40.4k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  40.4k|                                    proj);
 6795|  40.4k|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  40.4k|        {
 6761|  48.5k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 48.1k, False: 419]
  ------------------
 6762|  48.1k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 40.0k, False: 8.11k]
  ------------------
 6763|  40.0k|                    return first;
 6764|  40.0k|                }
 6765|  8.11k|                ++first;
 6766|  8.11k|            }
 6767|    419|            return first;
 6768|  40.4k|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  48.1k|            {
 1300|  48.1k|                return fn::impl(std::forward<F>(f),
 1301|  48.1k|                                std::forward<Args>(args)...);
 1302|  48.1k|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  48.1k|            {
 1289|  48.1k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  48.1k|            }

_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.25M|{
  200|  1.25M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.25M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  1.25M|{
  180|  1.25M|    return p;
  181|  1.25M|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  11.3k|{
  200|  11.3k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  11.3k|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  11.3k|{
  180|  11.3k|    return p;
  181|  11.3k|}

_ZN3scn2v24spanIwEC2IwLm32ELPv0EEERNSt3__15arrayIT_XT0_EEE:
  148|  15.9k|    {
  149|  15.9k|    }
_ZNK3scn2v24spanIwE4dataEv:
  237|  15.9k|    {
  238|  15.9k|        return m_ptr;
  239|  15.9k|    }
_ZN3scn2v24spanIcEC2IcLm128ELPv0EEERNSt3__15arrayIT_XT0_EEE:
  148|  3.79k|    {
  149|  3.79k|    }
_ZNK3scn2v24spanIcE4dataEv:
  237|  3.79k|    {
  238|  3.79k|        return m_ptr;
  239|  3.79k|    }

_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|   388k|{
   44|   388k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|   388k|                                          decltype(first), decltype(last)> &&
   46|   388k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|   388k|        return {first, last};
   48|   388k|    }
   49|   388k|    else {
   50|   388k|        return {to_address(first), static_cast<size_t>(std::distance(
   51|   388k|                                       to_address(first), to_address(last)))};
   52|   388k|    }
   53|   388k|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|   185k|{
   75|   185k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|   185k|                      typename std::basic_string_view<CharT>::iterator,
   77|   185k|                      decltype(it)> &&
   78|   185k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|   185k|        SCN_UNUSED(sv);
  ------------------
  |  |  227|   185k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|   185k|        return it;
   81|   185k|    }
   82|   185k|    else {
   83|   185k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|   185k|    }
   85|   185k|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  3.79k|{
   44|  3.79k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  3.79k|                                          decltype(first), decltype(last)> &&
   46|  3.79k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  3.79k|        return {first, last};
   48|  3.79k|    }
   49|  3.79k|    else {
   50|  3.79k|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  3.79k|                                       to_address(first), to_address(last)))};
   52|  3.79k|    }
   53|  3.79k|}
_ZN3scn2v26detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  3.79k|{
   75|  3.79k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  3.79k|                      typename std::basic_string_view<CharT>::iterator,
   77|  3.79k|                      decltype(it)> &&
   78|  3.79k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  3.79k|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  3.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  3.79k|        return it;
   81|  3.79k|    }
   82|  3.79k|    else {
   83|  3.79k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  3.79k|    }
   85|  3.79k|}

_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  119|  17.0k|{
  120|  17.0k|    return find_classic_impl(
  121|  17.0k|        source, [](char ch) { return is_ascii_space(ch); },
  122|  17.0k|        [](char32_t cp) { return is_cp_space(cp); });
  123|  17.0k|}
_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|   141k|{
  128|   141k|    return find_classic_impl(
  129|   141k|        source, [](char ch) { return !is_ascii_space(ch); },
  130|   141k|        [](char32_t cp) { return !is_cp_space(cp); });
  131|   141k|}
_ZN3scn2v24impl33find_nondecimal_digit_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  135|   156k|{
  136|   156k|    return find_nondecimal_digit_simple_impl(source);
  137|   156k|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEE:
  111|   156k|{
  112|   156k|    return ranges::find_if(
  113|   156k|        source, [](char ch) SCN_NOEXCEPT { return !is_decimal_digit(ch); });
  114|   156k|}
find_whitespace.cpp:_ZZN3scn2v24impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEENK3$_0clEc:
  113|   159k|        source, [](char ch) SCN_NOEXCEPT { return !is_decimal_digit(ch); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_116is_decimal_digitEc:
   77|   159k|{
   78|   159k|    static constexpr std::array<bool, 256> lookup = {
   79|   159k|        {false, false, false, false, false, false, false, false, false, false,
   80|   159k|         false, false, false, false, false, false, false, false, false, false,
   81|   159k|         false, false, false, false, false, false, false, false, false, false,
   82|   159k|         false, false, false, false, false, false, false, false, false, false,
   83|   159k|         false, false, false, false, false, false, false, false, true,  true,
   84|   159k|         true,  true,  true,  true,  true,  true,  true,  true,  false, false,
   85|   159k|         false, false, false, false, false, false, false, false, false, false,
   86|   159k|         false, false, false, false, false, false, false, false, false, false,
   87|   159k|         false, false, false, false, false, false, false, false, false, false,
   88|   159k|         false, false, false, false, false, false, false, false, false, false,
   89|   159k|         false, false, false, false, false, false, false, false, false, false,
   90|   159k|         false, false, false, false, false, false, false, false, false, false,
   91|   159k|         false, false, false, false, false, false, false, false, false, false,
   92|   159k|         false, false, false, false, false, false, false, false, false, false,
   93|   159k|         false, false, false, false, false, false, false, false, false, false,
   94|   159k|         false, false, false, false, false, false, false, false, false, false,
   95|   159k|         false, false, false, false, false, false, false, false, false, false,
   96|   159k|         false, false, false, false, false, false, false, false, false, false,
   97|   159k|         false, false, false, false, false, false, false, false, false, false,
   98|   159k|         false, false, false, false, false, false, false, false, false, false,
   99|   159k|         false, false, false, false, false, false, false, false, false, false,
  100|   159k|         false, false, false, false, false, false, false, false, false, false,
  101|   159k|         false, false, false, false, false, false, false, false, false, false,
  102|   159k|         false, false, false, false, false, false, false, false, false, false,
  103|   159k|         false, false, false, false, false, false, false, false, false, false,
  104|   159k|         false, false, false, false, false, false}};
  105|       |
  106|   159k|    return lookup[static_cast<size_t>(static_cast<unsigned char>(ch))];
  107|   159k|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_1ZNS1_30find_classic_space_narrow_fastES8_E3$_2EEPKcS8_T_T0_:
   43|  17.0k|{
   44|  17.0k|    auto it = source.begin();
   45|       |
   46|  37.0k|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 36.6k, False: 450]
  ------------------
   47|  36.6k|        auto sv =
   48|  36.6k|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  36.6k|                .substr(0, 8);
   50|       |
   51|  36.6k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 11.1k, False: 25.4k]
  ------------------
   52|  11.1k|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  11.1k|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  11.1k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 8.08k, False: 3.05k]
  ------------------
   55|  8.08k|                break;
   56|  8.08k|            }
   57|  3.05k|            continue;
   58|  11.1k|        }
   59|       |
   60|  86.2k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 69.3k, False: 16.9k]
  ------------------
   61|  69.3k|            auto tmp =
   62|  69.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  69.3k|            auto res = get_next_code_point(tmp);
   64|  69.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 8.55k, False: 60.7k]
  ------------------
   65|  8.55k|                return it;
   66|  8.55k|            }
   67|  60.7k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  60.7k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  60.7k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  60.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  60.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  60.7k|        }
   71|  25.4k|    }
   72|       |
   73|  8.53k|    return detail::make_string_view_iterator(source, it);
   74|  17.0k|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|   179k|{
   31|   179k|    static_assert(sizeof(*source.data()) == 1);
   32|   179k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|   179k|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|   179k|    return has_byte_greater(word, 127) != 0;
   37|   179k|}
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEc:
  121|  51.0k|        source, [](char ch) { return is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_2clEDi:
  122|  69.3k|        [](char32_t cp) { return is_cp_space(cp); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|   141k|{
   44|   141k|    auto it = source.begin();
   45|       |
   46|   142k|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 142k, False: 143]
  ------------------
   47|   142k|        auto sv =
   48|   142k|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|   142k|                .substr(0, 8);
   50|       |
   51|   142k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 40.4k, False: 102k]
  ------------------
   52|  40.4k|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  40.4k|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  40.4k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 40.0k, False: 419]
  ------------------
   55|  40.0k|                break;
   56|  40.0k|            }
   57|    419|            continue;
   58|  40.4k|        }
   59|       |
   60|   110k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 109k, False: 919]
  ------------------
   61|   109k|            auto tmp =
   62|   109k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   109k|            auto res = get_next_code_point(tmp);
   64|   109k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 101k, False: 8.53k]
  ------------------
   65|   101k|                return it;
   66|   101k|            }
   67|  8.53k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  8.53k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  8.53k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  8.53k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  8.53k|        }
   71|   102k|    }
   72|       |
   73|  40.2k|    return detail::make_string_view_iterator(source, it);
   74|   141k|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  48.1k|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   109k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
  585|    557|{
  586|    557|    static_assert(!std::is_same_v<SourceCharT, DestCharT>);
  587|       |
  588|    557|    auto do_transcode = [&](std::basic_string_view<SourceCharT> src,
  589|    557|                            span<DestCharT> dst) {
  590|    557|        if constexpr (sizeof(SourceCharT) == 1 && sizeof(DestCharT) == 2) {
  591|    557|            return simdutf::convert_utf8_to_utf16_with_errors(
  592|    557|                src.data(), src.size(),
  593|    557|                reinterpret_cast<char16_t*>(dst.data()));
  594|    557|        }
  595|    557|        else if constexpr (sizeof(SourceCharT) == 1 && sizeof(DestCharT) == 4) {
  596|    557|            return simdutf::convert_utf8_to_utf32_with_errors(
  597|    557|                src.data(), src.size(),
  598|    557|                reinterpret_cast<char32_t*>(dst.data()));
  599|    557|        }
  600|    557|        else if constexpr (sizeof(SourceCharT) == 2 && sizeof(DestCharT) == 1) {
  601|    557|            return simdutf::convert_utf16_to_utf8_with_errors(
  602|    557|                reinterpret_cast<const char16_t*>(src.data()), src.size(),
  603|    557|                dst.data());
  604|    557|        }
  605|    557|        else if constexpr (sizeof(SourceCharT) == 2 && sizeof(DestCharT) == 4) {
  606|    557|            return simdutf::convert_utf16_to_utf32_with_errors(
  607|    557|                reinterpret_cast<const char16_t*>(src.data()), src.size(),
  608|    557|                reinterpret_cast<char32_t*>(dst.data()));
  609|    557|        }
  610|    557|        else if constexpr (sizeof(SourceCharT) == 4 && sizeof(DestCharT) == 1) {
  611|    557|            return simdutf::convert_utf32_to_utf8_with_errors(
  612|    557|                reinterpret_cast<const char32_t*>(src.data()), src.size(),
  613|    557|                dst.data());
  614|    557|        }
  615|    557|        else if constexpr (sizeof(SourceCharT) == 4 && sizeof(DestCharT) == 2) {
  616|    557|            return simdutf::convert_utf32_to_utf16_with_errors(
  617|    557|                reinterpret_cast<const char32_t*>(src.data()), src.size(),
  618|    557|                reinterpret_cast<char16_t*>(dst.data()));
  619|    557|        }
  620|    557|    };
  621|       |
  622|    557|    auto it = source.begin();
  623|    557|    std::array<DestCharT, 32 * std::max(sizeof(SourceCharT) / sizeof(DestCharT),
  624|    557|                                        size_t{1})>
  625|    557|        tmp{};
  626|  16.4k|    while (it != source.end()) {
  ------------------
  |  Branch (626:12): [True: 15.9k, False: 557]
  ------------------
  627|  15.9k|        auto sv = detail::make_string_view_from_iterators<SourceCharT>(
  628|  15.9k|                      it, source.end())
  629|  15.9k|                      .substr(0, 32);
  630|       |
  631|  15.9k|        auto tmp_view = span{tmp};
  632|  15.9k|        auto res = do_transcode(sv, tmp_view);
  633|  15.9k|        if (SCN_LIKELY(res.error == simdutf::SUCCESS)) {
  ------------------
  |  |  152|  15.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.75k, False: 14.1k]
  |  |  ------------------
  ------------------
  634|  1.75k|            dest.append(tmp.data(), std::min(res.count, tmp.size()));
  635|  1.75k|            it = detail::make_string_view_iterator(source, sv.end());
  636|  1.75k|            continue;
  637|  1.75k|        }
  638|       |
  639|  14.1k|        {
  640|  14.1k|            auto valid_sv = sv.substr(0, res.count);
  641|  14.1k|            auto n = count_valid_transcoded_code_units<DestCharT>(valid_sv);
  642|  14.1k|            dest.append(tmp.data(), n);
  643|  14.1k|            it += res.count;
  644|  14.1k|        }
  645|       |
  646|       |        // Replacement character U+fffd
  647|  14.1k|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (647:23): [Folded - Ignored]
  ------------------
  648|  14.1k|            tmp[0] = static_cast<DestCharT>(0xef);
  649|  14.1k|            tmp[1] = static_cast<DestCharT>(0xbf);
  650|  14.1k|            tmp[2] = static_cast<DestCharT>(0xbd);
  651|  14.1k|            dest.append(tmp.data(), 3);
  652|  14.1k|        }
  653|  14.1k|        else {
  654|  14.1k|            dest.push_back(DestCharT{0xfffd});
  655|  14.1k|        }
  656|       |
  657|  14.1k|        auto tmp_it = find_start_of_next_valid_code_point(
  658|  14.1k|            detail::make_string_view_from_iterators<SourceCharT>(it,
  659|  14.1k|                                                                 source.end()));
  660|  14.1k|        it = detail::make_string_view_iterator(source, tmp_it);
  661|  14.1k|    }
  662|    557|}
_ZZN3scn2v24impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEEENKUlNS4_IcNS6_IcEEEENS0_4spanIwEEE_clESH_SJ_:
  589|  15.9k|                            span<DestCharT> dst) {
  590|  15.9k|        if constexpr (sizeof(SourceCharT) == 1 && sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (590:23): [Folded - Ignored]
  |  Branch (590:23): [Folded - Ignored]
  |  Branch (590:51): [Folded - Ignored]
  ------------------
  591|  15.9k|            return simdutf::convert_utf8_to_utf16_with_errors(
  592|  15.9k|                src.data(), src.size(),
  593|  15.9k|                reinterpret_cast<char16_t*>(dst.data()));
  594|  15.9k|        }
  595|  15.9k|        else if constexpr (sizeof(SourceCharT) == 1 && sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (595:28): [Folded - Ignored]
  |  Branch (595:28): [Folded - Ignored]
  |  Branch (595:56): [Folded - Ignored]
  ------------------
  596|  15.9k|            return simdutf::convert_utf8_to_utf32_with_errors(
  597|  15.9k|                src.data(), src.size(),
  598|  15.9k|                reinterpret_cast<char32_t*>(dst.data()));
  599|  15.9k|        }
  600|  15.9k|        else if constexpr (sizeof(SourceCharT) == 2 && sizeof(DestCharT) == 1) {
  601|  15.9k|            return simdutf::convert_utf16_to_utf8_with_errors(
  602|  15.9k|                reinterpret_cast<const char16_t*>(src.data()), src.size(),
  603|  15.9k|                dst.data());
  604|  15.9k|        }
  605|  15.9k|        else if constexpr (sizeof(SourceCharT) == 2 && sizeof(DestCharT) == 4) {
  606|  15.9k|            return simdutf::convert_utf16_to_utf32_with_errors(
  607|  15.9k|                reinterpret_cast<const char16_t*>(src.data()), src.size(),
  608|  15.9k|                reinterpret_cast<char32_t*>(dst.data()));
  609|  15.9k|        }
  610|  15.9k|        else if constexpr (sizeof(SourceCharT) == 4 && sizeof(DestCharT) == 1) {
  611|  15.9k|            return simdutf::convert_utf32_to_utf8_with_errors(
  612|  15.9k|                reinterpret_cast<const char32_t*>(src.data()), src.size(),
  613|  15.9k|                dst.data());
  614|  15.9k|        }
  615|  15.9k|        else if constexpr (sizeof(SourceCharT) == 4 && sizeof(DestCharT) == 2) {
  616|  15.9k|            return simdutf::convert_utf32_to_utf16_with_errors(
  617|  15.9k|                reinterpret_cast<const char32_t*>(src.data()), src.size(),
  618|  15.9k|                reinterpret_cast<char16_t*>(dst.data()));
  619|  15.9k|        }
  620|  15.9k|    };
_ZN3scn2v24impl33count_valid_transcoded_code_unitsIwcEEmNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEE:
  367|  14.1k|{
  368|  14.1k|    if (input.empty()) {
  ------------------
  |  Branch (368:9): [True: 456, False: 13.7k]
  ------------------
  369|    456|        return 0;
  370|    456|    }
  371|       |
  372|  13.7k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  373|       |
  374|      0|    constexpr auto src_enc = get_encoding<SourceCharT>();
  375|  13.7k|    constexpr auto dest_enc = get_encoding<DestCharT>();
  376|       |
  377|  13.7k|    if constexpr (src_enc == dest_enc) {
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|  13.7k|        return input.size();
  379|  13.7k|    }
  380|       |
  381|  13.7k|    if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (381:19): [Folded - Ignored]
  ------------------
  382|  13.7k|        if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (382:23): [Folded - Ignored]
  ------------------
  383|  13.7k|            return simdutf::utf16_length_from_utf8(input.data(), input.size());
  384|  13.7k|        }
  385|  13.7k|        else {
  386|  13.7k|            return simdutf::utf32_length_from_utf8(input.data(), input.size());
  387|  13.7k|        }
  388|  13.7k|    }
  389|  13.7k|    else if constexpr (src_enc == encoding::utf16) {
  390|  13.7k|        if constexpr (dest_enc == encoding::utf8) {
  391|  13.7k|            return simdutf::utf8_length_from_utf16(
  392|  13.7k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  393|  13.7k|        }
  394|  13.7k|        else {
  395|  13.7k|            return simdutf::utf32_length_from_utf16(
  396|  13.7k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  397|  13.7k|        }
  398|  13.7k|    }
  399|  13.7k|    else if constexpr (src_enc == encoding::utf32) {
  400|  13.7k|        if constexpr (dest_enc == encoding::utf8) {
  401|  13.7k|            return simdutf::utf8_length_from_utf32(
  402|  13.7k|                reinterpret_cast<const char32_t*>(input.data()), input.size());
  403|  13.7k|        }
  404|  13.7k|        else {
  405|  13.7k|            return simdutf::utf16_length_from_utf32(
  406|  13.7k|                reinterpret_cast<const char32_t*>(input.data()), input.size());
  407|  13.7k|        }
  408|  13.7k|    }
  409|  13.7k|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|  13.7k|{
   89|  13.7k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 13.7k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|  13.7k|    constexpr auto enc = get_encoding<CharT>();
   94|  13.7k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|  13.7k|        return simdutf::validate_utf8(input.data(), input.size());
   96|  13.7k|    }
   97|  13.7k|    else if constexpr (enc == encoding::utf16) {
   98|  13.7k|        return simdutf::validate_utf16(
   99|  13.7k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|  13.7k|    }
  101|  13.7k|    else if constexpr (enc == encoding::utf32) {
  102|  13.7k|        return simdutf::validate_utf32(
  103|  13.7k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|  13.7k|    }
  105|  13.7k|}
_ZN3scn2v24impl35find_start_of_next_valid_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  301|  14.1k|{
  302|  14.1k|    auto it = input.begin();
  303|  34.6k|    while (it != input.end()) {
  ------------------
  |  Branch (303:12): [True: 34.4k, False: 230]
  ------------------
  304|  34.4k|        const auto len = code_point_length_by_starting_code_unit(*it);
  305|  34.4k|        if (len == 0) {
  ------------------
  |  Branch (305:13): [True: 13.4k, False: 21.0k]
  ------------------
  306|  13.4k|            ++it;
  307|  13.4k|            continue;
  308|  13.4k|        }
  309|  21.0k|        if (len > static_cast<size_t>(ranges::distance(it, input.end()))) {
  ------------------
  |  Branch (309:13): [True: 84, False: 20.9k]
  ------------------
  310|     84|            return input.end();
  311|     84|        }
  312|       |
  313|  20.9k|        bool is_valid_cp =
  314|  20.9k|            [&]() {
  315|  20.9k|                constexpr auto enc = get_encoding<CharT>();
  316|  20.9k|                if constexpr (enc == encoding::utf8) {
  317|  20.9k|                    return simdutf::validate_utf8_with_errors(
  318|  20.9k|                        detail::to_address(it), len);
  319|  20.9k|                }
  320|  20.9k|                else if (enc == encoding::utf16) {
  321|  20.9k|                    return simdutf::validate_utf16_with_errors(
  322|  20.9k|                        reinterpret_cast<const char16_t*>(
  323|  20.9k|                            detail::to_address(it)),
  324|  20.9k|                        len);
  325|  20.9k|                }
  326|  20.9k|                else if (enc == encoding::utf32) {
  327|  20.9k|                    return simdutf::validate_utf32_with_errors(
  328|  20.9k|                        reinterpret_cast<const char32_t*>(
  329|  20.9k|                            detail::to_address(it)),
  330|  20.9k|                        len);
  331|  20.9k|                }
  332|  20.9k|            }()
  333|  20.9k|                .error == simdutf::SUCCESS;
  334|  20.9k|        if (is_valid_cp) {
  ------------------
  |  Branch (334:13): [True: 13.8k, False: 7.10k]
  ------------------
  335|  13.8k|            return it;
  336|  13.8k|        }
  337|  7.10k|        it += len;
  338|  7.10k|    }
  339|    230|    return input.end();
  340|  14.1k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   422k|{
  110|   422k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   422k|}
_ZZN3scn2v24impl35find_start_of_next_valid_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_ENKUlvE_clEv:
  314|  20.9k|            [&]() {
  315|  20.9k|                constexpr auto enc = get_encoding<CharT>();
  316|  20.9k|                if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (316:31): [Folded - Ignored]
  ------------------
  317|  20.9k|                    return simdutf::validate_utf8_with_errors(
  318|  20.9k|                        detail::to_address(it), len);
  319|  20.9k|                }
  320|  20.9k|                else if (enc == encoding::utf16) {
  321|  20.9k|                    return simdutf::validate_utf16_with_errors(
  322|  20.9k|                        reinterpret_cast<const char16_t*>(
  323|  20.9k|                            detail::to_address(it)),
  324|  20.9k|                        len);
  325|  20.9k|                }
  326|  20.9k|                else if (enc == encoding::utf32) {
  327|  20.9k|                    return simdutf::validate_utf32_with_errors(
  328|  20.9k|                        reinterpret_cast<const char32_t*>(
  329|  20.9k|                            detail::to_address(it)),
  330|  20.9k|                        len);
  331|  20.9k|                }
  332|  20.9k|            }()
_ZN3scn2v24impl19transcode_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
  585|    557|{
  586|    557|    static_assert(!std::is_same_v<SourceCharT, DestCharT>);
  587|       |
  588|    557|    auto do_transcode = [&](std::basic_string_view<SourceCharT> src,
  589|    557|                            span<DestCharT> dst) {
  590|    557|        if constexpr (sizeof(SourceCharT) == 1 && sizeof(DestCharT) == 2) {
  591|    557|            return simdutf::convert_utf8_to_utf16_with_errors(
  592|    557|                src.data(), src.size(),
  593|    557|                reinterpret_cast<char16_t*>(dst.data()));
  594|    557|        }
  595|    557|        else if constexpr (sizeof(SourceCharT) == 1 && sizeof(DestCharT) == 4) {
  596|    557|            return simdutf::convert_utf8_to_utf32_with_errors(
  597|    557|                src.data(), src.size(),
  598|    557|                reinterpret_cast<char32_t*>(dst.data()));
  599|    557|        }
  600|    557|        else if constexpr (sizeof(SourceCharT) == 2 && sizeof(DestCharT) == 1) {
  601|    557|            return simdutf::convert_utf16_to_utf8_with_errors(
  602|    557|                reinterpret_cast<const char16_t*>(src.data()), src.size(),
  603|    557|                dst.data());
  604|    557|        }
  605|    557|        else if constexpr (sizeof(SourceCharT) == 2 && sizeof(DestCharT) == 4) {
  606|    557|            return simdutf::convert_utf16_to_utf32_with_errors(
  607|    557|                reinterpret_cast<const char16_t*>(src.data()), src.size(),
  608|    557|                reinterpret_cast<char32_t*>(dst.data()));
  609|    557|        }
  610|    557|        else if constexpr (sizeof(SourceCharT) == 4 && sizeof(DestCharT) == 1) {
  611|    557|            return simdutf::convert_utf32_to_utf8_with_errors(
  612|    557|                reinterpret_cast<const char32_t*>(src.data()), src.size(),
  613|    557|                dst.data());
  614|    557|        }
  615|    557|        else if constexpr (sizeof(SourceCharT) == 4 && sizeof(DestCharT) == 2) {
  616|    557|            return simdutf::convert_utf32_to_utf16_with_errors(
  617|    557|                reinterpret_cast<const char32_t*>(src.data()), src.size(),
  618|    557|                reinterpret_cast<char16_t*>(dst.data()));
  619|    557|        }
  620|    557|    };
  621|       |
  622|    557|    auto it = source.begin();
  623|    557|    std::array<DestCharT, 32 * std::max(sizeof(SourceCharT) / sizeof(DestCharT),
  624|    557|                                        size_t{1})>
  625|    557|        tmp{};
  626|  4.35k|    while (it != source.end()) {
  ------------------
  |  Branch (626:12): [True: 3.79k, False: 557]
  ------------------
  627|  3.79k|        auto sv = detail::make_string_view_from_iterators<SourceCharT>(
  628|  3.79k|                      it, source.end())
  629|  3.79k|                      .substr(0, 32);
  630|       |
  631|  3.79k|        auto tmp_view = span{tmp};
  632|  3.79k|        auto res = do_transcode(sv, tmp_view);
  633|  3.79k|        if (SCN_LIKELY(res.error == simdutf::SUCCESS)) {
  ------------------
  |  |  152|  3.79k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.79k, False: 0]
  |  |  ------------------
  ------------------
  634|  3.79k|            dest.append(tmp.data(), std::min(res.count, tmp.size()));
  635|  3.79k|            it = detail::make_string_view_iterator(source, sv.end());
  636|  3.79k|            continue;
  637|  3.79k|        }
  638|       |
  639|      0|        {
  640|      0|            auto valid_sv = sv.substr(0, res.count);
  641|      0|            auto n = count_valid_transcoded_code_units<DestCharT>(valid_sv);
  642|      0|            dest.append(tmp.data(), n);
  643|      0|            it += res.count;
  644|      0|        }
  645|       |
  646|       |        // Replacement character U+fffd
  647|      0|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (647:23): [Folded - Ignored]
  ------------------
  648|      0|            tmp[0] = static_cast<DestCharT>(0xef);
  649|      0|            tmp[1] = static_cast<DestCharT>(0xbf);
  650|      0|            tmp[2] = static_cast<DestCharT>(0xbd);
  651|      0|            dest.append(tmp.data(), 3);
  652|      0|        }
  653|      0|        else {
  654|      0|            dest.push_back(DestCharT{0xfffd});
  655|      0|        }
  656|       |
  657|      0|        auto tmp_it = find_start_of_next_valid_code_point(
  658|      0|            detail::make_string_view_from_iterators<SourceCharT>(it,
  659|      0|                                                                 source.end()));
  660|      0|        it = detail::make_string_view_iterator(source, tmp_it);
  661|      0|    }
  662|    557|}
_ZZN3scn2v24impl19transcode_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEEENKUlNS4_IwNS6_IwEEEENS0_4spanIcEEE_clESH_SJ_:
  589|  3.79k|                            span<DestCharT> dst) {
  590|  3.79k|        if constexpr (sizeof(SourceCharT) == 1 && sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (590:23): [Folded - Ignored]
  |  Branch (590:23): [Folded - Ignored]
  |  Branch (590:51): [Folded - Ignored]
  ------------------
  591|  3.79k|            return simdutf::convert_utf8_to_utf16_with_errors(
  592|  3.79k|                src.data(), src.size(),
  593|  3.79k|                reinterpret_cast<char16_t*>(dst.data()));
  594|  3.79k|        }
  595|  3.79k|        else if constexpr (sizeof(SourceCharT) == 1 && sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (595:28): [Folded - Ignored]
  |  Branch (595:28): [Folded - Ignored]
  |  Branch (595:56): [Folded - Ignored]
  ------------------
  596|  3.79k|            return simdutf::convert_utf8_to_utf32_with_errors(
  597|  3.79k|                src.data(), src.size(),
  598|  3.79k|                reinterpret_cast<char32_t*>(dst.data()));
  599|  3.79k|        }
  600|  3.79k|        else if constexpr (sizeof(SourceCharT) == 2 && sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (600:28): [Folded - Ignored]
  |  Branch (600:28): [Folded - Ignored]
  |  Branch (600:56): [Folded - Ignored]
  ------------------
  601|  3.79k|            return simdutf::convert_utf16_to_utf8_with_errors(
  602|  3.79k|                reinterpret_cast<const char16_t*>(src.data()), src.size(),
  603|  3.79k|                dst.data());
  604|  3.79k|        }
  605|  3.79k|        else if constexpr (sizeof(SourceCharT) == 2 && sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (605:28): [Folded - Ignored]
  |  Branch (605:28): [Folded - Ignored]
  |  Branch (605:56): [Folded - Ignored]
  ------------------
  606|  3.79k|            return simdutf::convert_utf16_to_utf32_with_errors(
  607|  3.79k|                reinterpret_cast<const char16_t*>(src.data()), src.size(),
  608|  3.79k|                reinterpret_cast<char32_t*>(dst.data()));
  609|  3.79k|        }
  610|  3.79k|        else if constexpr (sizeof(SourceCharT) == 4 && sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (610:28): [Folded - Ignored]
  |  Branch (610:28): [Folded - Ignored]
  |  Branch (610:56): [Folded - Ignored]
  ------------------
  611|  3.79k|            return simdutf::convert_utf32_to_utf8_with_errors(
  612|  3.79k|                reinterpret_cast<const char32_t*>(src.data()), src.size(),
  613|  3.79k|                dst.data());
  614|  3.79k|        }
  615|  3.79k|        else if constexpr (sizeof(SourceCharT) == 4 && sizeof(DestCharT) == 2) {
  616|  3.79k|            return simdutf::convert_utf32_to_utf16_with_errors(
  617|  3.79k|                reinterpret_cast<const char32_t*>(src.data()), src.size(),
  618|  3.79k|                reinterpret_cast<char16_t*>(dst.data()));
  619|  3.79k|        }
  620|  3.79k|    };
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   179k|{
  263|   179k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   179k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 57.1k, False: 121k]
  |  |  ------------------
  ------------------
  267|  57.1k|        return {get_start_of_next_code_point(input),
  268|  57.1k|                detail::invalid_code_point};
  269|  57.1k|    }
  270|   121k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 266, False: 121k]
  |  |  ------------------
  ------------------
  271|    266|        return {input.end(), detail::invalid_code_point};
  272|    266|    }
  273|       |
  274|   121k|    constexpr auto enc = get_encoding<CharT>();
  275|   121k|    std::size_t result{1};
  276|   121k|    char32_t output{};
  277|   121k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   121k|        result = simdutf::convert_utf8_to_utf32(
  279|   121k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   121k|    }
  281|   121k|    else if constexpr (enc == encoding::utf16) {
  282|   121k|        result = simdutf::convert_utf16_to_utf32(
  283|   121k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   121k|    }
  285|   121k|    else if constexpr (enc == encoding::utf32) {
  286|   121k|        SCN_EXPECT(len == 1);
  287|   121k|        output = static_cast<char32_t>(input[0]);
  288|   121k|    }
  289|       |
  290|   121k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 20.6k, False: 100k]
  |  |  ------------------
  ------------------
  291|  20.6k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  20.6k|                detail::invalid_code_point};
  293|  20.6k|    }
  294|       |
  295|   100k|    return {input.begin() + len, output};
  296|   121k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  77.7k|{
  248|  77.7k|    auto it = input.begin();
  249|   210k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 209k, False: 817]
  ------------------
  250|   209k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 76.9k, False: 132k]
  ------------------
  251|  76.9k|            break;
  252|  76.9k|        }
  253|   209k|    }
  254|       |
  255|  77.7k|    return it;
  256|  77.7k|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|   179k|{
   29|       |    // Pattern_White_Space property
   30|   179k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 159k, False: 19.0k]
  |  Branch (30:27): [True: 4.78k, False: 155k]
  ------------------
   31|   179k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 10.5k, False: 163k]
  ------------------
   32|   179k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 466, False: 163k]
  ------------------
   33|   179k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 400, False: 162k]
  ------------------
   34|   179k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 392, False: 162k]
  ------------------
   35|   179k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 494, False: 161k]
  ------------------
   36|   179k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 161k]
  ------------------
   37|   179k|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  99.2k|{
   58|  99.2k|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  99.2k|        static_cast<unsigned char>(ch))];
   60|  99.2k|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|   179k|{
   92|   179k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|   179k|}

LLVMFuzzerTestOneInput:
   42|    557|{
   43|    557|    auto sv = std::string_view{reinterpret_cast<const char*>(data), size};
   44|    557|    do_find(sv, scn::impl::find_classic_space_narrow_fast);
   45|    557|    do_find(sv, scn::impl::find_classic_nonspace_narrow_fast);
   46|    557|    do_find(sv, scn::impl::find_nondecimal_digit_narrow_fast);
   47|       |
   48|    557|    std::wstring widened{};
   49|    557|    scn::impl::transcode_to_string(sv, widened);
   50|       |
   51|    557|    std::string narrowed{};
   52|    557|    scn::impl::transcode_to_string(std::wstring_view{widened}, narrowed);
   53|       |
   54|    557|    return 0;
   55|    557|}
string_impl_fuzz.cpp:_ZN12_GLOBAL__N_17do_findIPFPKcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvS7_T_:
   26|  1.67k|{
   27|  1.67k|    auto it = sv.begin();
   28|   316k|    while (it != sv.end()) {
  ------------------
  |  Branch (28:12): [True: 315k, False: 1.67k]
  ------------------
   29|   315k|        SCN_EXPECT(it < sv.end());
  ------------------
  |  |  242|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   30|      0|        auto in = std::string_view{&*it, static_cast<size_t>(sv.end() - it)};
   31|   315k|        SCN_EXPECT(!in.empty());
  ------------------
  |  |  242|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   32|      0|        it = cb(in);
   33|   315k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  |  243|   315k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   34|   315k|        if (it != sv.end())
  ------------------
  |  Branch (34:13): [True: 314k, False: 617]
  ------------------
   35|   314k|            ++it;
   36|   315k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  |  243|   315k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   37|   315k|    }
   38|  1.67k|}

