_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|   117k|{
 3803|   117k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|   117k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|   117k|    }
 3806|   117k|    else if constexpr (sizeof(U) == 2) {
 3807|   117k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|   117k|    }
 3809|   117k|    else {
 3810|       |        // utf-32
 3811|   117k|        static_assert(sizeof(U) == 4);
 3812|   117k|        SCN_UNUSED(ch);
 3813|   117k|        return 1;
 3814|   117k|    }
 3815|   117k|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|   117k|{
 3767|   117k|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|   117k|    SCN_GCC_COMPAT_PUSH
 3770|   117k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|   117k|    constexpr char lengths[] =
 3772|   117k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|   117k|        "\1\1\1\1\1\1\1\1"
 3774|   117k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|   117k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|   117k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|   117k|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|   117k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|   117k|    SCN_GCC_COMPAT_POP
 3781|   117k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  21.8k|{
 4009|  21.8k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  21.8k|        return decode_utf8_code_point_exhaustive(input);
 4011|  21.8k|    }
 4012|  21.8k|    else if constexpr (sizeof(CharT) == 2) {
 4013|  21.8k|        return decode_utf16_code_point_exhaustive(input);
 4014|  21.8k|    }
 4015|  21.8k|    else {
 4016|  21.8k|        SCN_EXPECT(input.size() == 1);
 4017|  21.8k|        auto cp = static_cast<char32_t>(input.front());
 4018|  21.8k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|  21.8k|            return invalid_code_point;
 4020|  21.8k|        }
 4021|  21.8k|        return cp;
 4022|  21.8k|    }
 4023|  21.8k|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  21.8k|{
 3822|  21.8k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  21.8k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  21.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  21.8k|    };
 3827|       |
 3828|  21.8k|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 14.6k, False: 7.12k]
  ------------------
 3829|  14.6k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 0, False: 14.6k]
  ------------------
 3830|      0|            SCN_UNLIKELY_ATTR
 3831|      0|            return invalid_code_point;
 3832|      0|        }
 3833|  14.6k|        return static_cast<char32_t>(input[0]);
 3834|  14.6k|    }
 3835|       |
 3836|  7.12k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 1.75k, False: 5.36k]
  ------------------
 3837|  1.75k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 0, False: 1.75k]
  ------------------
 3838|      0|            SCN_UNLIKELY_ATTR
 3839|      0|            return invalid_code_point;
 3840|      0|        }
 3841|  1.75k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 922, False: 836]
  ------------------
 3842|    922|            SCN_UNLIKELY_ATTR
 3843|    922|            return invalid_code_point;
 3844|    922|        }
 3845|       |
 3846|    836|        char32_t cp{};
 3847|    836|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|    836|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|    836|        return cp;
 3850|  1.75k|    }
 3851|       |
 3852|  5.36k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 2.78k, False: 2.58k]
  ------------------
 3853|  2.78k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 0, False: 2.78k]
  ------------------
 3854|      0|            SCN_UNLIKELY_ATTR
 3855|      0|            return invalid_code_point;
 3856|      0|        }
 3857|  2.78k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 428, False: 2.35k]
  ------------------
 3858|  2.78k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 260, False: 2.09k]
  ------------------
 3859|    688|            SCN_UNLIKELY_ATTR
 3860|    688|            return invalid_code_point;
 3861|    688|        }
 3862|       |
 3863|  2.09k|        char32_t cp{};
 3864|  2.09k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  2.09k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  2.09k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  2.09k|        return cp;
 3868|  2.78k|    }
 3869|       |
 3870|  2.58k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 2.58k, False: 0]
  ------------------
 3871|  2.58k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 2.58k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  2.58k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 235, False: 2.35k]
  ------------------
 3876|    235|            SCN_UNLIKELY_ATTR
 3877|    235|            return invalid_code_point;
 3878|    235|        }
 3879|  2.35k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 498, False: 1.85k]
  ------------------
 3880|  2.35k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 266, False: 1.58k]
  ------------------
 3881|  2.35k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 195, False: 1.39k]
  ------------------
 3882|    959|            SCN_UNLIKELY_ATTR
 3883|    959|            return invalid_code_point;
 3884|    959|        }
 3885|       |
 3886|  1.39k|        char32_t cp{};
 3887|  1.39k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  1.39k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  1.39k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  1.39k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  1.39k|        return cp;
 3892|  2.35k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  12.6k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  12.6k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  12.6k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  52.1k|{
 3695|  52.1k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  52.1k|                                          decltype(first), decltype(last)> &&
 3697|  52.1k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  52.1k|        return {first, last};
 3699|  52.1k|    }
 3700|  52.1k|    else {
 3701|  52.1k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  52.1k|                                       to_address(first), to_address(last)))};
 3703|  52.1k|    }
 3704|  52.1k|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   165k|{
  322|   165k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   165k|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|   165k|{
  302|   165k|    return p;
  303|   165k|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  29.1k|{
 3726|  29.1k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  29.1k|                      typename std::basic_string_view<CharT>::iterator,
 3728|  29.1k|                      decltype(it)> &&
 3729|  29.1k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  29.1k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  29.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  29.1k|        return it;
 3732|  29.1k|    }
 3733|  29.1k|    else {
 3734|  29.1k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  29.1k|    }
 3736|  29.1k|}

_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  4.69k|{
  194|  4.69k|    return find_classic_impl(
  195|  4.69k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  4.69k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  4.69k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  12.1k|{
  202|  12.1k|    return find_classic_impl(
  203|  12.1k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  12.1k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  12.1k|}
_ZN3scn2v34impl33find_nondecimal_digit_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  209|  17.8k|{
  210|  17.8k|    return find_nondecimal_digit_simple_impl(source);
  211|  17.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEE:
  185|  17.8k|{
  186|  17.8k|    return std::find_if(source.begin(), source.end(),
  187|  17.8k|                        [](char ch) noexcept { return !is_decimal_digit(ch); });
  188|  17.8k|}
impl.cpp:_ZZN3scn2v34impl12_GLOBAL__N_133find_nondecimal_digit_simple_implENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEENK3$_0clEc:
  187|  18.3k|                        [](char ch) noexcept { return !is_decimal_digit(ch); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116is_decimal_digitEc:
  151|  18.3k|{
  152|  18.3k|    static constexpr std::array<bool, 256> lookup = {
  153|  18.3k|        {false, false, false, false, false, false, false, false, false, false,
  154|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  155|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  156|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  157|  18.3k|         false, false, false, false, false, false, false, false, true,  true,
  158|  18.3k|         true,  true,  true,  true,  true,  true,  true,  true,  false, false,
  159|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  160|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  161|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  162|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  163|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  164|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  165|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  166|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  167|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  168|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  169|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  170|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  171|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  172|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  173|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  174|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  175|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  176|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  177|  18.3k|         false, false, false, false, false, false, false, false, false, false,
  178|  18.3k|         false, false, false, false, false, false}};
  179|       |
  180|  18.3k|    return lookup[static_cast<size_t>(static_cast<unsigned char>(ch))];
  181|  18.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.69k|{
  118|  4.69k|    auto it = source.begin();
  119|       |
  120|  6.61k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 6.38k, False: 233]
  ------------------
  121|  6.38k|        auto sv =
  122|  6.38k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  6.38k|                .substr(0, 8);
  124|       |
  125|  6.38k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.24k, False: 4.13k]
  ------------------
  126|  2.24k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.24k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.24k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.96k, False: 285]
  ------------------
  129|  1.96k|                break;
  130|  1.96k|            }
  131|    285|            continue;
  132|  2.24k|        }
  133|       |
  134|  10.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 8.50k, False: 1.63k]
  ------------------
  135|  8.50k|            auto tmp =
  136|  8.50k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  8.50k|            auto res = get_next_code_point(tmp);
  138|  8.50k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 2.50k, False: 6.00k]
  ------------------
  139|  2.50k|                return it;
  140|  2.50k|            }
  141|  6.00k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  6.00k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  6.00k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  6.00k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  6.00k|        }
  145|  4.13k|    }
  146|       |
  147|  2.19k|    return detail::make_string_view_iterator(source, it);
  148|  4.69k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  19.4k|{
  105|  19.4k|    static_assert(sizeof(*source.data()) == 1);
  106|  19.4k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  19.4k|    uint64_t word{};
  108|  19.4k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  19.4k|    return has_byte_greater(word, 127) != 0;
  111|  19.4k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  3.96k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  8.50k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  12.1k|{
  118|  12.1k|    auto it = source.begin();
  119|       |
  120|  13.1k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 13.0k, False: 94]
  ------------------
  121|  13.0k|        auto sv =
  122|  13.0k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  13.0k|                .substr(0, 8);
  124|       |
  125|  13.0k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.34k, False: 10.7k]
  ------------------
  126|  2.34k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.34k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.34k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.03k, False: 311]
  ------------------
  129|  2.03k|                break;
  130|  2.03k|            }
  131|    311|            continue;
  132|  2.34k|        }
  133|       |
  134|  13.3k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 12.6k, False: 688]
  ------------------
  135|  12.6k|            auto tmp =
  136|  12.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  12.6k|            auto res = get_next_code_point(tmp);
  138|  12.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 10.0k, False: 2.57k]
  ------------------
  139|  10.0k|                return it;
  140|  10.0k|            }
  141|  2.57k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  2.57k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  2.57k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  2.57k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  2.57k|        }
  145|  10.7k|    }
  146|       |
  147|  2.12k|    return detail::make_string_view_iterator(source, it);
  148|  12.1k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  4.18k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  12.6k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|    290|{
 1363|    290|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|    290|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|    290|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|    290|            std::u32string tmp;
 1368|    290|            transcode_to_string_impl_to32(src, tmp);
 1369|    290|            return transcode_to_string_impl_32to16<false>(
 1370|    290|                std::u32string_view{tmp}, dest);
 1371|    290|        }
 1372|    290|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|    290|            return transcode_to_string_impl_to32(src, dest);
 1374|    290|        }
 1375|    290|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|    290|{
 1256|    290|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|    290|    auto it = src.begin();
 1259|  11.8k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 11.6k, False: 290]
  ------------------
 1260|  11.6k|        auto res = get_next_code_point(
 1261|  11.6k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  11.6k|                                                                 src.end()));
 1263|  11.6k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.72k, False: 8.88k]
  |  |  ------------------
  ------------------
 1264|  2.72k|            dest.push_back(DestCharT{0xfffd});
 1265|  2.72k|        }
 1266|  8.88k|        else {
 1267|  8.88k|            dest.push_back(res.value);
 1268|  8.88k|        }
 1269|  11.6k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  11.6k|    }
 1271|    290|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  32.7k|{
 1169|  32.7k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  32.7k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  32.7k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.7k, False: 21.9k]
  |  |  ------------------
  ------------------
 1173|  10.7k|        return {get_start_for_next_code_point(input),
 1174|  10.7k|                detail::invalid_code_point};
 1175|  10.7k|    }
 1176|  21.9k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164, False: 21.8k]
  |  |  ------------------
  ------------------
 1177|    164|        return {input.end(), detail::invalid_code_point};
 1178|    164|    }
 1179|       |
 1180|  21.8k|    return {input.begin() + len,
 1181|  21.8k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  21.9k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  10.7k|{
 1155|  10.7k|    auto it = input.begin();
 1156|  85.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 84.6k, False: 665]
  ------------------
 1157|  84.6k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 10.0k, False: 74.5k]
  ------------------
 1158|  10.0k|            break;
 1159|  10.0k|        }
 1160|  84.6k|    }
 1161|  10.7k|    return it;
 1162|  10.7k|}
_ZN3scn2v34impl19transcode_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|    290|{
 1363|    290|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|    290|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|    290|        if constexpr (sizeof(DestCharT) == 2) {
 1367|    290|            std::u32string tmp;
 1368|    290|            transcode_to_string_impl_to32(src, tmp);
 1369|    290|            return transcode_to_string_impl_32to16<false>(
 1370|    290|                std::u32string_view{tmp}, dest);
 1371|    290|        }
 1372|    290|        else if constexpr (sizeof(DestCharT) == 4) {
 1373|    290|            return transcode_to_string_impl_to32(src, dest);
 1374|    290|        }
 1375|    290|    }
 1376|    290|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1376:24): [Folded - Ignored]
  ------------------
 1377|    290|        if constexpr (sizeof(DestCharT) == 1) {
 1378|    290|            std::u32string tmp;
 1379|    290|            transcode_to_string_impl_to32(src, tmp);
 1380|    290|            return transcode_to_string_impl_32to8<false>(
 1381|    290|                std::u32string_view{tmp}, dest);
 1382|    290|        }
 1383|    290|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|    290|            return trasncode_to_string_impl_to32(src, dest);
 1385|    290|        }
 1386|    290|    }
 1387|    290|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1387:24): [Folded - Ignored]
  ------------------
 1388|    290|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1388:23): [Folded - Ignored]
  ------------------
 1389|    290|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|    290|        }
 1391|    290|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|    290|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|    290|        }
 1394|    290|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb0EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|    290|{
 1294|    290|    static_assert(sizeof(SourceCharT) == 4);
 1295|    290|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  11.6k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 11.6k, False: 290]
  ------------------
 1298|  11.6k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  11.6k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 194, False: 11.4k]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 194, False: 11.4k]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|    194|            dest.push_back(static_cast<char>(0xef));
 1302|    194|            dest.push_back(static_cast<char>(0xbf));
 1303|    194|            dest.push_back(static_cast<char>(0xbd));
 1304|    194|        }
 1305|  11.4k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 7.47k, False: 3.94k]
  ------------------
 1306|  7.47k|            dest.push_back(static_cast<char>(cp));
 1307|  7.47k|        }
 1308|  3.94k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 260, False: 3.68k]
  ------------------
 1309|    260|            dest.push_back(
 1310|    260|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    260|            dest.push_back(
 1312|    260|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    260|        }
 1314|  3.68k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 3.41k, False: 269]
  ------------------
 1315|  3.41k|            dest.push_back(
 1316|  3.41k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|  3.41k|            dest.push_back(static_cast<char>(
 1318|  3.41k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|  3.41k|            dest.push_back(
 1320|  3.41k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|  3.41k|        }
 1322|    269|        else {
 1323|    269|            dest.push_back(
 1324|    269|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    269|            dest.push_back(static_cast<char>(
 1326|    269|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    269|            dest.push_back(static_cast<char>(
 1328|    269|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    269|            dest.push_back(
 1330|    269|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    269|        }
 1332|  11.6k|    }
 1333|    290|}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  8.15k|{
  458|  8.15k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  8.15k|        static_cast<unsigned char>(ch))];
  460|  8.15k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  19.4k|{
  539|  19.4k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  19.4k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  21.1k|{
 1200|       |    // Pattern_White_Space property
 1201|  21.1k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 19.6k, False: 1.51k]
  |  Branch (1201:27): [True: 1.14k, False: 18.4k]
  ------------------
 1202|  21.1k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 2.19k, False: 17.7k]
  ------------------
 1203|  21.1k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 420, False: 17.3k]
  ------------------
 1204|  21.1k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 400, False: 16.9k]
  ------------------
 1205|  21.1k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 430, False: 16.5k]
  ------------------
 1206|  21.1k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 486, False: 16.0k]
  ------------------
 1207|  21.1k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 16.0k]
  ------------------
 1208|  21.1k|}
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.57k|    {
  108|  8.57k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.57k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.57k|    {
   87|  8.57k|        return s - i;
   88|  8.57k|    }

LLVMFuzzerTestOneInput:
   41|    290|{
   42|    290|    auto sv = std::string_view{reinterpret_cast<const char*>(data), size};
   43|    290|    do_find(sv, scn::impl::find_classic_space_narrow_fast);
   44|    290|    do_find(sv, scn::impl::find_classic_nonspace_narrow_fast);
   45|    290|    do_find(sv, scn::impl::find_nondecimal_digit_narrow_fast);
   46|       |
   47|    290|    std::wstring widened{};
   48|    290|    scn::impl::transcode_to_string(sv, widened);
   49|       |
   50|    290|    std::string narrowed{};
   51|    290|    scn::impl::transcode_to_string(std::wstring_view{widened}, narrowed);
   52|       |
   53|    290|    return 0;
   54|    290|}
string_impl_fuzz.cpp:_ZN12_GLOBAL__N_17do_findIPFPKcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvS7_T_:
   25|    870|{
   26|    870|    auto it = sv.begin();
   27|  35.6k|    while (it != sv.end()) {
  ------------------
  |  Branch (27:12): [True: 34.7k, False: 870]
  ------------------
   28|  34.7k|        SCN_EXPECT(it < sv.end());
  ------------------
  |  |  924|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   29|  34.7k|        auto in = std::string_view{&*it, static_cast<size_t>(sv.end() - it)};
   30|  34.7k|        SCN_EXPECT(!in.empty());
  ------------------
  |  |  924|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   31|  34.7k|        it = cb(in);
   32|  34.7k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  |  925|  34.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|  34.7k|        if (it != sv.end())
  ------------------
  |  Branch (33:13): [True: 34.4k, False: 337]
  ------------------
   34|  34.4k|            ++it;
   35|  34.7k|        SCN_ENSURE(it <= sv.end());
  ------------------
  |  |  925|  34.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   36|  34.7k|    }
   37|    870|}

