_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.79M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.79M|  chars_format const fmt = options.format;
  277|  2.79M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.79M|  parsed_number_string_t<UC> answer;
  280|  2.79M|  answer.valid = false;
  281|  2.79M|  answer.too_many_digits = false;
  282|  2.79M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.79M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.79M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.79M|  UC const * const start_digits = p;
  303|       |
  304|  2.79M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  16.3M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 14.9M, False: 1.37M]
  |  Branch (306:25): [True: 13.5M, False: 1.42M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  13.5M|    i = 10 * i +
  310|  13.5M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  13.5M|    ++p;
  312|  13.5M|  }
  313|  2.79M|  UC const * const end_of_integer_part = p;
  314|  2.79M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.79M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.79M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.79M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.79M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.79M|  int64_t exponent = 0;
  324|  2.79M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.42M, False: 1.37M]
  |  Branch (324:49): [True: 510k, False: 915k]
  ------------------
  325|  2.79M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 510k, False: 2.28M]
  ------------------
  326|   510k|    ++p;
  327|   510k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   510k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  2.05M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.75M, False: 308k]
  |  Branch (332:27): [True: 1.54M, False: 202k]
  ------------------
  333|  1.54M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.54M|      ++p;
  335|  1.54M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.54M|    }
  337|   510k|    exponent = before - p;
  338|   510k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   510k|    digit_count -= exponent;
  340|   510k|  }
  341|  2.79M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.79M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.79M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.79M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.79M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.79M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.79M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 2.43M, False: 357k]
  ------------------
  352|  2.79M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 1.11M, False: 1.32M]
  ------------------
  353|  2.79M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 273k, False: 843k]
  |  Branch (353:29): [True: 102k, False: 741k]
  ------------------
  354|  2.79M|       ||
  355|  2.79M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  2.42M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 2.42M]
  ------------------
  356|  2.42M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  2.42M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   376k|    UC const * location_of_e = p;
  359|   376k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 273k, False: 102k]
  |  Branch (359:28): [True: 102k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   376k|      ++p;
  361|   376k|    }
  362|   376k|    bool neg_exp = false;
  363|   376k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 375k, False: 225]
  |  Branch (363:24): [True: 26.2k, False: 349k]
  ------------------
  364|  26.2k|      neg_exp = true;
  365|  26.2k|      ++p;
  366|   349k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 349k, False: 225]
  |  Branch (366:31): [True: 64.4k, False: 285k]
  ------------------
  367|  64.4k|      ++p;
  368|  64.4k|    }
  369|   376k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 265, False: 375k]
  |  Branch (369:24): [True: 1.18k, False: 374k]
  ------------------
  370|  1.44k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.44k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.44k|      p = location_of_e;
  376|   374k|    } else {
  377|  1.21M|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 956k, False: 257k]
  |  Branch (377:29): [True: 839k, False: 117k]
  ------------------
  378|   839k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   839k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 786k, False: 52.6k]
  ------------------
  380|   786k|          exp_number = 10 * exp_number + digit;
  381|   786k|        }
  382|   839k|        ++p;
  383|   839k|      }
  384|   374k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 26.0k, False: 348k]
  ------------------
  385|   374k|      exponent += exp_number;
  386|   374k|    }
  387|  2.42M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  2.42M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 2.06M, False: 357k]
  |  Branch (389:44): [True: 0, False: 2.06M]
  ------------------
  390|  2.42M|  }
  391|  2.79M|  answer.lastmatch = p;
  392|  2.79M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.79M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 466k, False: 2.33M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   466k|    UC const * start = start_digits;
  405|  3.67M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.66M, False: 15.5k]
  |  Branch (405:32): [True: 3.14M, False: 519k]
  |  Branch (405:53): [True: 67.8k, False: 451k]
  ------------------
  406|  3.20M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 3.14M, False: 67.8k]
  ------------------
  407|  3.20M|      start++;
  408|  3.20M|    }
  409|       |
  410|   466k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 409k, False: 57.0k]
  ------------------
  411|   409k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   409k|      i = 0;
  416|   409k|      p = answer.integer.ptr;
  417|   409k|      UC const* int_end = p + answer.integer.len();
  418|   409k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  5.24M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 5.13M, False: 117k]
  |  Branch (419:54): [True: 4.83M, False: 292k]
  ------------------
  420|  4.83M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  4.83M|        ++p;
  422|  4.83M|      }
  423|   409k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 117k, False: 292k]
  ------------------
  424|   117k|        exponent = end_of_integer_part - p + exp_number;
  425|   117k|      }
  426|   292k|      else { // We have a value with a fractional component.
  427|   292k|        p = answer.fraction.ptr;
  428|   292k|        UC const* frac_end = p + answer.fraction.len();
  429|  5.21M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 4.92M, False: 292k]
  |  Branch (429:56): [True: 4.92M, False: 0]
  ------------------
  430|  4.92M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  4.92M|          ++p;
  432|  4.92M|        }
  433|   292k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   292k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   409k|    }
  437|   466k|  }
  438|  2.79M|  answer.exponent = exponent;
  439|  2.79M|  answer.mantissa = i;
  440|  2.79M|  return answer;
  441|  2.79M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  18.0M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  18.0M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 425k, False: 17.6M]
  |  Branch (36:27): [True: 1.32M, False: 16.3M]
  ------------------
   37|  18.0M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   510k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  2.02M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.68M, False: 337k]
  |  Branch (249:43): [True: 1.51M, False: 173k]
  ------------------
  250|  1.51M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.51M|    p += 8;
  252|  1.51M|  }
  253|   510k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.68M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.68M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.68M|     0x8080808080808080));
  172|  1.68M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  3.78M|uint64_t read8_to_u64(const UC *chars) {
   54|  3.78M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  3.78M|  uint64_t val;
   63|  3.78M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  3.78M|  return val;
   69|  3.78M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  2.10M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  2.10M|  const uint64_t mask = 0x000000FF000000FF;
  148|  2.10M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  2.10M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  2.10M|  val -= 0x3030303030303030;
  151|  2.10M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  2.10M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  2.10M|  return uint32_t(val);
  154|  2.10M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   593k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   593k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   593k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   593k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   593k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   189k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   189k|  chars_format const fmt = options.format;
  277|   189k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   189k|  parsed_number_string_t<UC> answer;
  280|   189k|  answer.valid = false;
  281|   189k|  answer.too_many_digits = false;
  282|   189k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   189k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 189k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   189k|  UC const * const start_digits = p;
  303|       |
  304|   189k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   392k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 259k, False: 132k]
  |  Branch (306:25): [True: 202k, False: 56.8k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   202k|    i = 10 * i +
  310|   202k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   202k|    ++p;
  312|   202k|  }
  313|   189k|  UC const * const end_of_integer_part = p;
  314|   189k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   189k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   189k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   189k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 189k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   189k|  int64_t exponent = 0;
  324|   189k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 56.8k, False: 132k]
  |  Branch (324:49): [True: 432, False: 56.4k]
  ------------------
  325|   189k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 432, False: 189k]
  ------------------
  326|    432|    ++p;
  327|    432|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|    432|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|    468|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 136, False: 332]
  |  Branch (332:27): [True: 36, False: 100]
  ------------------
  333|     36|      uint8_t digit = uint8_t(*p - UC('0'));
  334|     36|      ++p;
  335|     36|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|     36|    }
  337|    432|    exponent = before - p;
  338|    432|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|    432|    digit_count -= exponent;
  340|    432|  }
  341|   189k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   189k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 189k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   189k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 189k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   189k|  int64_t exp_number = 0;            // explicit exponential part
  351|   189k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 147k, False: 41.8k]
  ------------------
  352|   189k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 56.5k, False: 91.2k]
  ------------------
  353|   189k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 120, False: 56.3k]
  |  Branch (353:29): [True: 6.68k, False: 49.7k]
  ------------------
  354|   189k|       ||
  355|   189k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   182k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 182k]
  ------------------
  356|   182k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   182k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  6.80k|    UC const * location_of_e = p;
  359|  6.80k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 120, False: 6.68k]
  |  Branch (359:28): [True: 6.68k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  6.80k|      ++p;
  361|  6.80k|    }
  362|  6.80k|    bool neg_exp = false;
  363|  6.80k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 6.78k, False: 20]
  |  Branch (363:24): [True: 1.04k, False: 5.73k]
  ------------------
  364|  1.04k|      neg_exp = true;
  365|  1.04k|      ++p;
  366|  5.75k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 5.73k, False: 20]
  |  Branch (366:31): [True: 234, False: 5.50k]
  ------------------
  367|    234|      ++p;
  368|    234|    }
  369|  6.80k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 20, False: 6.78k]
  |  Branch (369:24): [True: 630, False: 6.15k]
  ------------------
  370|    650|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 650]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    650|      p = location_of_e;
  376|  6.15k|    } else {
  377|  20.2k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 15.8k, False: 4.40k]
  |  Branch (377:29): [True: 14.0k, False: 1.75k]
  ------------------
  378|  14.0k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  14.0k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 14.0k, False: 0]
  ------------------
  380|  14.0k|          exp_number = 10 * exp_number + digit;
  381|  14.0k|        }
  382|  14.0k|        ++p;
  383|  14.0k|      }
  384|  6.15k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 1.02k, False: 5.12k]
  ------------------
  385|  6.15k|      exponent += exp_number;
  386|  6.15k|    }
  387|   182k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   182k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 140k, False: 41.8k]
  |  Branch (389:44): [True: 0, False: 140k]
  ------------------
  390|   182k|  }
  391|   189k|  answer.lastmatch = p;
  392|   189k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   189k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 189k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|   189k|  answer.exponent = exponent;
  439|   189k|  answer.mantissa = i;
  440|   189k|  return answer;
  441|   189k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   282k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   282k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 58.1k, False: 224k]
  |  Branch (36:27): [True: 1.20k, False: 222k]
  ------------------
   37|   282k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|    432|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|    432|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|    432|    return;
  240|    432|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|   140k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   303k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   480k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   480k|    return small_mul(vec, y);
  565|   480k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   726k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   726k|  limb carry = 0;
  284|  3.12M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 2.40M, False: 726k]
  ------------------
  285|  2.40M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  2.40M|  }
  287|   726k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 445k, False: 280k]
  ------------------
  288|   445k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   445k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
  289|   445k|  }
  290|   726k|  return true;
  291|   726k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  5.83M|  constexpr size_t len() const noexcept {
   77|  5.83M|    return length;
   78|  5.83M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  2.40M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  2.40M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  2.40M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  2.40M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  2.40M|  carry = limb(z >> limb_bits);
  235|  2.40M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  2.40M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  6.50M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  6.50M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  6.50M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  6.50M|    return data[index];
   60|  6.50M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   622k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   622k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 622k, False: 0]
  ------------------
   93|   622k|      push_unchecked(value);
   94|   622k|      return true;
   95|   622k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   622k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   736k|  constexpr size_t capacity() const noexcept {
   83|   736k|    return size;
   84|   736k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   747k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   747k|    data[length] = value;
   88|   747k|    length++;
   89|   747k|  }
_ZN10fast_float6bigint3addEm:
  567|   480k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   480k|    return small_add(vec, y);
  569|   480k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   480k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   480k|  return small_add_from(vec, y, 0);
  277|   480k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   480k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   480k|  size_t index = start;
  259|   480k|  limb carry = y;
  260|   480k|  bool overflow;
  261|   723k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 384k, False: 339k]
  |  Branch (261:24): [True: 243k, False: 140k]
  ------------------
  262|   243k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   243k|    carry = limb(overflow);
  264|   243k|    index += 1;
  265|   243k|  }
  266|   480k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 140k, False: 339k]
  ------------------
  267|   140k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   140k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
  268|   140k|  }
  269|   480k|  return true;
  270|   480k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   669k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   669k|  limb z;
  211|       |// gcc and clang
  212|   669k|#if defined(__has_builtin)
  213|   669k|  #if __has_builtin(__builtin_add_overflow)
  214|   669k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   669k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   669k|      return z;
  217|   669k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   669k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  16.2k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  16.2k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  16.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
  611|  16.2k|    return pow2(exp);
  612|  16.2k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|   140k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|   140k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|   140k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|   150k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 9.69k, False: 140k]
  ------------------
  582|  9.69k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  9.69k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.69k]
  |  |  ------------------
  ------------------
  583|  9.69k|      exp -= large_step;
  584|  9.69k|    }
  585|   140k|#ifdef FASTFLOAT_64BIT_LIMB
  586|   140k|    uint32_t small_step = 27;
  587|   140k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   220k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 79.9k, False: 140k]
  ------------------
  593|  79.9k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  79.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 79.9k]
  |  |  ------------------
  ------------------
  594|  79.9k|      exp -= small_step;
  595|  79.9k|    }
  596|   140k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 117k, False: 22.8k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|   117k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|   117k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 117k]
  |  |  ------------------
  ------------------
  601|   117k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|   117k|      );
  603|   117k|    }
  604|       |
  605|   140k|    return true;
  606|   140k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  9.69k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  9.69k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 9.69k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  9.69k|  } else {
  368|  9.69k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  9.69k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.69k]
  |  |  ------------------
  ------------------
  369|  9.69k|  }
  370|  9.69k|  return true;
  371|  9.69k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  9.69k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  9.69k|  limb_span xs = limb_span(x.data, x.len());
  337|  9.69k|  stackvec<size> z(xs);
  338|  9.69k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  9.69k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 9.69k, False: 0]
  ------------------
  341|  9.69k|    limb y0 = y[0];
  342|  9.69k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  9.69k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.69k]
  |  |  ------------------
  ------------------
  343|  48.4k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 38.7k, False: 9.69k]
  ------------------
  344|  38.7k|      limb yi = y[index];
  345|  38.7k|      stackvec<size> zi;
  346|  38.7k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 38.7k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  38.7k|        zi.set_len(0);
  349|  38.7k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  38.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 38.7k]
  |  |  ------------------
  ------------------
  350|  38.7k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  38.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 38.7k]
  |  |  ------------------
  ------------------
  351|  38.7k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  38.7k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  38.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 38.7k]
  |  |  ------------------
  ------------------
  353|  38.7k|      }
  354|  38.7k|    }
  355|  9.69k|  }
  356|       |
  357|  9.69k|  x.normalize();
  358|  9.69k|  return true;
  359|  9.69k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  9.69k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  9.69k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  9.69k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  9.69k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   152k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   152k|    length = uint16_t(len);
   75|   152k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  48.4k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  48.4k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 48.4k, False: 0]
  ------------------
  108|  48.4k|      extend_unchecked(s);
  109|  48.4k|      return true;
  110|  48.4k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  48.4k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  48.4k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  48.4k|    limb* ptr = data + length;
  102|  48.4k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  48.4k|    set_len(len() + s.len());
  104|  48.4k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  38.7k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  38.7k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 38.7k]
  |  Branch (300:26): [True: 38.3k, False: 398]
  ------------------
  301|  38.3k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  38.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 38.3k]
  |  |  ------------------
  ------------------
  302|  38.3k|  }
  303|       |
  304|  38.7k|  bool carry = false;
  305|   349k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 310k, False: 38.7k]
  ------------------
  306|   310k|    limb xi = x[index + start];
  307|   310k|    limb yi = y[index];
  308|   310k|    bool c1 = false;
  309|   310k|    bool c2 = false;
  310|   310k|    xi = scalar_add(xi, yi, c1);
  311|   310k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 115k, False: 194k]
  ------------------
  312|   115k|      xi = scalar_add(xi, 1, c2);
  313|   115k|    }
  314|   310k|    x[index + start] = xi;
  315|   310k|    carry = c1 | c2;
  316|   310k|  }
  317|       |
  318|       |  // handle overflow
  319|  38.7k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 38.7k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  38.7k|  return true;
  323|  38.7k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  38.3k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  38.3k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 38.3k]
  ------------------
  132|      0|      return false;
  133|  38.3k|    } else {
  134|  38.3k|      resize_unchecked(new_len, value);
  135|  38.3k|      return true;
  136|  38.3k|    }
  137|  38.3k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  38.3k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  38.3k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 38.3k, False: 0]
  ------------------
  120|  38.3k|      size_t count = new_len - len();
  121|  38.3k|      limb* first = data + len();
  122|  38.3k|      limb* last = first + count;
  123|  38.3k|      ::std::fill(first, last, value);
  124|  38.3k|      set_len(new_len);
  125|  38.3k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  38.3k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|   134k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|   134k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 134k, False: 0]
  |  Branch (152:25): [True: 0, False: 134k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|   134k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   181k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   181k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   181k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   181k|    size_t rindex = length - index - 1;
   69|   181k|    return data[rindex];
   70|   181k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|   140k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|   140k|    return shl(exp);
  574|   140k|  }
_ZN10fast_float6bigint3shlEm:
  530|   140k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|   140k|    size_t rem = n % limb_bits;
  532|   140k|    size_t div = n / limb_bits;
  533|   140k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 123k, False: 16.5k]
  ------------------
  534|   123k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|   123k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
  535|   123k|    }
  536|   140k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 27.0k, False: 113k]
  ------------------
  537|  27.0k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  27.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 27.0k]
  |  |  ------------------
  ------------------
  538|  27.0k|    }
  539|   140k|    return true;
  540|   140k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|   123k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|   123k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|   123k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|   123k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|   123k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|   123k|    size_t shl = n;
  493|   123k|    size_t shr = limb_bits - shl;
  494|   123k|    limb prev = 0;
  495|   421k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 297k, False: 123k]
  ------------------
  496|   297k|      limb xi = vec[index];
  497|   297k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   297k|      prev = xi;
  499|   297k|    }
  500|       |
  501|   123k|    limb carry = prev >> shr;
  502|   123k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 36.7k, False: 87.1k]
  ------------------
  503|  36.7k|      return vec.try_push(carry);
  504|  36.7k|    }
  505|  87.1k|    return true;
  506|   123k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  27.0k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  27.0k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  27.0k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  27.0k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 27.0k]
  ------------------
  512|      0|      return false;
  513|  27.0k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 27.0k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  27.0k|      limb* dst = vec.data + n;
  516|  27.0k|      const limb* src = vec.data;
  517|  27.0k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  27.0k|      limb* first = vec.data;
  520|  27.0k|      limb* last = first + n;
  521|  27.0k|      ::std::fill(first, last, 0);
  522|  27.0k|      vec.set_len(n + vec.len());
  523|  27.0k|      return true;
  524|  27.0k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  27.0k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  43.3k|  constexpr bool is_empty() const noexcept {
   80|  43.3k|    return length == 0;
   81|  43.3k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  16.2k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  16.2k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  16.2k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 16.2k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  16.2k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 2.35k, False: 13.9k]
  ------------------
  435|  2.35k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  13.9k|    } else {
  437|  13.9k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  13.9k|      truncated |= vec.nonzero(2);
  439|  13.9k|      return result;
  440|  13.9k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  16.2k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  2.35k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  2.35k|  truncated = false;
  167|  2.35k|  int shl = leading_zeroes(r0);
  168|  2.35k|  return r0 << shl;
  169|  2.35k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  13.9k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  13.9k|  int shl = leading_zeroes(r0);
  174|  13.9k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 13.8k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  13.8k|  } else {
  178|  13.8k|    int shr = 64 - shl;
  179|  13.8k|    truncated = (r1 << shl) != 0;
  180|  13.8k|    return (r0 << shl) | (r1 >> shr);
  181|  13.8k|  }
  182|  13.9k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  13.9k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  14.0k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 871, False: 13.1k]
  ------------------
  143|    871|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 817, False: 54]
  ------------------
  144|    817|        return true;
  145|    817|      }
  146|     54|      index++;
  147|     54|    }
  148|  13.1k|    return false;
  149|  13.9k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  16.2k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  16.2k|    int lz = ctlz();
  560|  16.2k|    return int(limb_bits * vec.len()) - lz;
  561|  16.2k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  16.2k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  16.2k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 16.2k]
  ------------------
  545|      0|      return 0;
  546|  16.2k|    } else {
  547|  16.2k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  16.2k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  16.2k|    }
  555|  16.2k|  }
_ZN10fast_float6bigintC2Em:
  418|   124k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|   124k|#ifdef FASTFLOAT_64BIT_LIMB
  420|   124k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|   124k|    vec.normalize();
  426|   124k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|   124k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|   124k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 124k]
  ------------------
  464|      0|      return 1;
  465|   124k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 124k]
  ------------------
  466|      0|      return -1;
  467|   124k|    } else {
  468|   243k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 231k, False: 11.7k]
  ------------------
  469|   231k|        limb xi = vec[index - 1];
  470|   231k|        limb yi = other.vec[index - 1];
  471|   231k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 17.8k, False: 213k]
  ------------------
  472|  17.8k|          return 1;
  473|   213k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 94.7k, False: 119k]
  ------------------
  474|  94.7k|          return -1;
  475|  94.7k|        }
  476|   231k|      }
  477|  11.7k|      return 0;
  478|   124k|    }
  479|   124k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   463k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   463k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   463k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   463k|    return data[index];
   64|   463k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   586k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   586k|  adjusted_mantissa answer;
   96|   586k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 14.3k, False: 572k]
  |  Branch (96:19): [True: 2.50k, False: 569k]
  ------------------
   97|  16.8k|    answer.power2 = 0;
   98|  16.8k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  16.8k|    return answer;
  101|  16.8k|  }
  102|   569k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 11.9k, False: 557k]
  ------------------
  103|       |    // we want to get infinity:
  104|  11.9k|    answer.power2 = binary::infinite_power();
  105|  11.9k|    answer.mantissa = 0;
  106|  11.9k|    return answer;
  107|  11.9k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   557k|  int lz = leading_zeroes(w);
  112|   557k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   557k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   557k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   557k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   557k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   557k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.21k, False: 556k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.21k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 92, False: 1.12k]
  ------------------
  137|     92|      answer.power2 = 0;
  138|     92|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     92|      return answer;
  141|     92|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  1.12k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  1.12k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  1.12k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  1.12k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 1.12k, False: 0]
  ------------------
  156|  1.12k|    return answer;
  157|  1.21k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   556k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 206k, False: 349k]
  |  Branch (162:30): [True: 204k, False: 1.99k]
  |  Branch (162:77): [True: 186k, False: 18.4k]
  ------------------
  163|   556k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 31.0k, False: 155k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  31.0k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 14.6k, False: 16.3k]
  ------------------
  168|  14.6k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  14.6k|    }
  170|  31.0k|  }
  171|       |
  172|   556k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   556k|  answer.mantissa >>= 1;
  174|   556k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 22.3k, False: 534k]
  ------------------
  175|  22.3k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  22.3k|    answer.power2++; // undo previous addition
  177|  22.3k|  }
  178|       |
  179|   556k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   556k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 3.27k, False: 553k]
  ------------------
  181|  3.27k|    answer.power2 = binary::infinite_power();
  182|  3.27k|    answer.mantissa = 0;
  183|  3.27k|  }
  184|   556k|  return answer;
  185|   557k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   628k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   628k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   628k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   628k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   628k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   628k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   628k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 115k, False: 513k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   115k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   115k|    firstproduct.low += secondproduct.high;
   35|   115k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 92.7k, False: 22.7k]
  ------------------
   36|  92.7k|      firstproduct.high++;
   37|  92.7k|    }
   38|   115k|  }
   39|   628k|  return firstproduct;
   40|   628k|}
_ZN10fast_float6detail5powerEi:
   58|  1.23M|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|  1.23M|    return (((152170 + 65536) * q) >> 16) + 63;
   60|  1.23M|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  71.0k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  71.0k|  int lz = leading_zeroes(w);
   82|  71.0k|  w <<= lz;
   83|  71.0k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  71.0k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  71.0k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  71.0k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  71.0k|  int hilz = int(w >> 63) ^ 1;
   69|  71.0k|  adjusted_mantissa answer;
   70|  71.0k|  answer.mantissa = w << hilz;
   71|  71.0k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  71.0k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  71.0k|  return answer;
   74|  71.0k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   551k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   551k|  adjusted_mantissa answer;
   96|   551k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 8.86k, False: 542k]
  |  Branch (96:19): [True: 524, False: 542k]
  ------------------
   97|  9.39k|    answer.power2 = 0;
   98|  9.39k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  9.39k|    return answer;
  101|  9.39k|  }
  102|   542k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 5.70k, False: 536k]
  ------------------
  103|       |    // we want to get infinity:
  104|  5.70k|    answer.power2 = binary::infinite_power();
  105|  5.70k|    answer.mantissa = 0;
  106|  5.70k|    return answer;
  107|  5.70k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   536k|  int lz = leading_zeroes(w);
  112|   536k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   536k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   536k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   536k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   536k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   536k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 16.3k, False: 520k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  16.3k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 16.2k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  16.2k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  16.2k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  16.2k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  16.2k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 16.2k, False: 0]
  ------------------
  156|  16.2k|    return answer;
  157|  16.3k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   520k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 165k, False: 354k]
  |  Branch (162:30): [True: 85.7k, False: 79.8k]
  |  Branch (162:77): [True: 76.4k, False: 9.32k]
  ------------------
  163|   520k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 25.3k, False: 51.1k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  25.3k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 16.2k, False: 9.12k]
  ------------------
  168|  16.2k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  16.2k|    }
  170|  25.3k|  }
  171|       |
  172|   520k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   520k|  answer.mantissa >>= 1;
  174|   520k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 19.5k, False: 500k]
  ------------------
  175|  19.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  19.5k|    answer.power2++; // undo previous addition
  177|  19.5k|  }
  178|       |
  179|   520k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   520k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 298, False: 519k]
  ------------------
  181|    298|    answer.power2 = binary::infinite_power();
  182|    298|    answer.mantissa = 0;
  183|    298|  }
  184|   520k|  return answer;
  185|   536k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   606k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   606k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   606k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   606k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   606k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   606k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   606k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 181k, False: 424k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   181k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   181k|    firstproduct.low += secondproduct.high;
   35|   181k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 87.9k, False: 93.7k]
  ------------------
   36|  87.9k|      firstproduct.high++;
   37|  87.9k|    }
   38|   181k|  }
   39|   606k|  return firstproduct;
   40|   606k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  69.6k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  69.6k|  int lz = leading_zeroes(w);
   82|  69.6k|  w <<= lz;
   83|  69.6k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  69.6k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  69.6k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  69.6k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  69.6k|  int hilz = int(w >> 63) ^ 1;
   69|  69.6k|  adjusted_mantissa answer;
   70|  69.6k|  answer.mantissa = w << hilz;
   71|  69.6k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  69.6k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  69.6k|  return answer;
   74|  69.6k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  71.0k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  71.0k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  71.0k|  int32_t sci_exp = scientific_exponent(num);
  411|  71.0k|  size_t max_digits = binary_format<T>::max_digits();
  412|  71.0k|  size_t digits = 0;
  413|  71.0k|  bigint bigmant;
  414|  71.0k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  71.0k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  71.0k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 908, False: 70.0k]
  ------------------
  418|    908|    return positive_digit_comp<T>(bigmant, exponent);
  419|  70.0k|  } else {
  420|  70.0k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  70.0k|  }
  422|  71.0k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|   140k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|   140k|  uint64_t mantissa = num.mantissa;
   30|   140k|  int32_t exponent = int32_t(num.exponent);
   31|   703k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 562k, False: 140k]
  ------------------
   32|   562k|    mantissa /= 10000;
   33|   562k|    exponent += 4;
   34|   562k|  }
   35|   281k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 140k, False: 140k]
  ------------------
   36|   140k|    mantissa /= 100;
   37|   140k|    exponent += 2;
   38|   140k|  }
   39|   140k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 140k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|   140k|  return exponent;
   44|   140k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|   140k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|   140k|  size_t counter = 0;
  245|   140k|  digits = 0;
  246|   140k|  limb value = 0;
  247|   140k|#ifdef FASTFLOAT_64BIT_LIMB
  248|   140k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|   140k|  UC const * p = num.integer.ptr;
  255|   140k|  UC const * pend = p + num.integer.len();
  256|   140k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   299k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 159k, False: 140k]
  ------------------
  259|   286k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 155k, False: 130k]
  |  Branch (259:45): [True: 126k, False: 28.3k]
  |  Branch (259:70): [True: 126k, False: 438]
  ------------------
  260|   126k|      parse_eight_digits(p, value, counter, digits);
  261|   126k|    }
  262|   555k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 520k, False: 35.5k]
  |  Branch (262:30): [True: 396k, False: 123k]
  |  Branch (262:43): [True: 396k, False: 438]
  ------------------
  263|   396k|      parse_one_digit(p, value, counter, digits);
  264|   396k|    }
  265|   159k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 438, False: 159k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    438|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    438|      bool truncated = is_truncated(p, pend);
  269|    438|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 406, False: 32]
  ------------------
  270|    406|        truncated |= is_truncated(num.fraction);
  271|    406|      }
  272|    438|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 246, False: 192]
  ------------------
  273|    246|        round_up_bigint(result, digits);
  274|    246|      }
  275|    438|      return;
  276|   159k|    } else {
  277|   159k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   159k|      counter = 0;
  279|   159k|      value = 0;
  280|   159k|    }
  281|   159k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|   140k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 125k, False: 14.9k]
  ------------------
  285|   125k|    p = num.fraction.ptr;
  286|   125k|    pend = p + num.fraction.len();
  287|   125k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 16.4k, False: 108k]
  ------------------
  288|  16.4k|      skip_zeros(p, pend);
  289|  16.4k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   429k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 313k, False: 115k]
  ------------------
  292|   780k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 634k, False: 146k]
  |  Branch (292:47): [True: 470k, False: 163k]
  |  Branch (292:72): [True: 466k, False: 3.94k]
  ------------------
  293|   466k|        parse_eight_digits(p, value, counter, digits);
  294|   466k|      }
  295|  1.30M|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 1.10M, False: 194k]
  |  Branch (295:32): [True: 997k, False: 112k]
  |  Branch (295:45): [True: 989k, False: 7.30k]
  ------------------
  296|   989k|        parse_one_digit(p, value, counter, digits);
  297|   989k|      }
  298|   313k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 10.1k, False: 303k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  10.1k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  10.1k|        bool truncated = is_truncated(p, pend);
  302|  10.1k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 6.18k, False: 3.97k]
  ------------------
  303|  6.18k|          round_up_bigint(result, digits);
  304|  6.18k|        }
  305|  10.1k|        return;
  306|   303k|      } else {
  307|   303k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   303k|        counter = 0;
  309|   303k|        value = 0;
  310|   303k|      }
  311|   313k|    }
  312|   125k|  }
  313|       |
  314|   130k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 130k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|   130k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   157k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   157k|  uint64_t val;
  161|   233k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 161k, False: 71.9k]
  ------------------
  162|   161k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   161k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 85.1k, False: 76.5k]
  ------------------
  164|  85.1k|      break;
  165|  85.1k|    }
  166|  76.5k|    first += int_cmp_len<UC>();
  167|  76.5k|  }
  168|   375k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 359k, False: 16.4k]
  ------------------
  169|   359k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 140k, False: 218k]
  ------------------
  170|   140k|      break;
  171|   140k|    }
  172|   218k|    first++;
  173|   218k|  }
  174|   157k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   593k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   593k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   593k|  p += 8;
  210|   593k|  counter += 8;
  211|   593k|  count += 8;
  212|   593k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|  1.38M|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|  1.38M|  value = value * 10 + limb(*p - UC('0'));
  218|  1.38M|  p++;
  219|  1.38M|  counter++;
  220|  1.38M|  count++;
  221|  1.38M|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   480k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   480k|  big.mul(power);
  226|   480k|  big.add(value);
  227|   480k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  11.0k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  11.0k|  uint64_t val;
  183|  22.8k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 14.6k, False: 8.18k]
  ------------------
  184|  14.6k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  14.6k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 2.82k, False: 11.8k]
  ------------------
  186|  2.82k|      return true;
  187|  2.82k|    }
  188|  11.8k|    first += int_cmp_len<UC>();
  189|  11.8k|  }
  190|  13.2k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 8.73k, False: 4.49k]
  ------------------
  191|  8.73k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 3.69k, False: 5.04k]
  ------------------
  192|  3.69k|      return true;
  193|  3.69k|    }
  194|  5.04k|    ++first;
  195|  5.04k|  }
  196|  4.49k|  return false;
  197|  8.18k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    406|bool is_truncated(span<const UC> s) noexcept {
  201|    406|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    406|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  6.43k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  6.43k|  add_native(big, 10, 1);
  234|  6.43k|  count++;
  235|  6.43k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    908|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    908|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    908|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    908|  adjusted_mantissa answer;
  324|    908|  bool truncated;
  325|    908|  answer.mantissa = bigmant.hi64(truncated);
  326|    908|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    908|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    908|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    908|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    908|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    908|    });
  333|    908|  });
  334|       |
  335|    908|  return answer;
  336|    908|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    908|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    908|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    908|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 908]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    908|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    908|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 908]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    908|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    908|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 908]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    908|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    908|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    908|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    908|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    908|    });
  333|    908|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    908|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    908|  const uint64_t mask
  125|    908|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 908]
  ------------------
  126|    908|    ? UINT64_MAX
  127|    908|    : (uint64_t(1) << shift) - 1;
  128|    908|  const uint64_t halfway
  129|    908|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 908]
  ------------------
  130|    908|    ? 0
  131|    908|    : uint64_t(1) << (shift - 1);
  132|    908|  uint64_t truncated_bits = am.mantissa & mask;
  133|    908|  bool is_above = truncated_bits > halfway;
  134|    908|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    908|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 908]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    908|  } else {
  140|    908|    am.mantissa >>= shift;
  141|    908|  }
  142|    908|  am.power2 += shift;
  143|       |
  144|    908|  bool is_odd = (am.mantissa & 1) == 1;
  145|    908|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    908|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    908|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    908|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 96, False: 812]
  |  Branch (331:27): [True: 654, False: 158]
  |  Branch (331:41): [True: 72, False: 582]
  |  Branch (331:56): [True: 104, False: 636]
  |  Branch (331:66): [True: 32, False: 72]
  ------------------
  332|    908|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  70.0k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  70.0k|  bigint& real_digits = bigmant;
  347|  70.0k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  70.0k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  70.0k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  70.0k|  T b;
  354|  70.0k|  to_float(false, am_b, b);
  355|  70.0k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  70.0k|  bigint theor_digits(theor.mantissa);
  357|  70.0k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  70.0k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  70.0k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  70.0k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 70.0k, False: 0]
  ------------------
  363|  70.0k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  70.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  70.0k|  }
  365|  70.0k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 70.0k, False: 0]
  ------------------
  366|  70.0k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  70.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  70.0k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  70.0k|  int ord = real_digits.compare(theor_digits);
  373|  70.0k|  adjusted_mantissa answer = am;
  374|  70.0k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  70.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  70.0k|      (void)_;  // not needed, since we've done our comparison
  377|  70.0k|      (void)__; // not needed, since we've done our comparison
  378|  70.0k|      if (ord > 0) {
  379|  70.0k|        return true;
  380|  70.0k|      } else if (ord < 0) {
  381|  70.0k|        return false;
  382|  70.0k|      } else {
  383|  70.0k|        return is_odd;
  384|  70.0k|      }
  385|  70.0k|    });
  386|  70.0k|  });
  387|       |
  388|  70.0k|  return answer;
  389|  70.0k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  70.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  70.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  70.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 70.0k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  70.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  70.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 70.0k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  70.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  70.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 70.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  70.0k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  70.0k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|   124k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|   124k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 124k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|   124k|  } else {
  153|   124k|    am.mantissa >>= shift;
  154|   124k|  }
  155|   124k|  am.power2 += shift;
  156|   124k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  70.0k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  70.0k|  adjusted_mantissa am = to_extended(value);
   84|  70.0k|  am.mantissa <<= 1;
   85|  70.0k|  am.mantissa += 1;
   86|  70.0k|  am.power2 -= 1;
   87|  70.0k|  return am;
   88|  70.0k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  70.0k|adjusted_mantissa to_extended(T value) noexcept {
   50|  70.0k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  70.0k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  70.0k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  70.0k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  70.0k|  adjusted_mantissa am;
   56|  70.0k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  70.0k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  70.0k|  ::memcpy(&bits, &value, sizeof(T));
   62|  70.0k|#endif
   63|  70.0k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 70.0k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  70.0k|  } else {
   68|       |    // normal
   69|  70.0k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  70.0k|    am.power2 -= bias;
   71|  70.0k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  70.0k|  }
   73|       |
   74|  70.0k|  return am;
   75|  70.0k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  70.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  70.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  70.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 70.0k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  70.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  70.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 70.0k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  70.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  70.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 70.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  70.0k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  70.0k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  70.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  70.0k|      (void)_;  // not needed, since we've done our comparison
  377|  70.0k|      (void)__; // not needed, since we've done our comparison
  378|  70.0k|      if (ord > 0) {
  379|  70.0k|        return true;
  380|  70.0k|      } else if (ord < 0) {
  381|  70.0k|        return false;
  382|  70.0k|      } else {
  383|  70.0k|        return is_odd;
  384|  70.0k|      }
  385|  70.0k|    });
  386|  70.0k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  70.0k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  70.0k|  const uint64_t mask
  125|  70.0k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 70.0k]
  ------------------
  126|  70.0k|    ? UINT64_MAX
  127|  70.0k|    : (uint64_t(1) << shift) - 1;
  128|  70.0k|  const uint64_t halfway
  129|  70.0k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 70.0k]
  ------------------
  130|  70.0k|    ? 0
  131|  70.0k|    : uint64_t(1) << (shift - 1);
  132|  70.0k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  70.0k|  bool is_above = truncated_bits > halfway;
  134|  70.0k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  70.0k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 70.0k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  70.0k|  } else {
  140|  70.0k|    am.mantissa >>= shift;
  141|  70.0k|  }
  142|  70.0k|  am.power2 += shift;
  143|       |
  144|  70.0k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  70.0k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  70.0k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  70.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  70.0k|      (void)_;  // not needed, since we've done our comparison
  377|  70.0k|      (void)__; // not needed, since we've done our comparison
  378|  70.0k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 550, False: 69.5k]
  ------------------
  379|    550|        return true;
  380|  69.5k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 58.8k, False: 10.6k]
  ------------------
  381|  58.8k|        return false;
  382|  58.8k|      } else {
  383|  10.6k|        return is_odd;
  384|  10.6k|      }
  385|  70.0k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  69.6k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  69.6k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  69.6k|  int32_t sci_exp = scientific_exponent(num);
  411|  69.6k|  size_t max_digits = binary_format<T>::max_digits();
  412|  69.6k|  size_t digits = 0;
  413|  69.6k|  bigint bigmant;
  414|  69.6k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  69.6k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  69.6k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 15.3k, False: 54.2k]
  ------------------
  418|  15.3k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  54.2k|  } else {
  420|  54.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  54.2k|  }
  422|  69.6k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  15.3k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  15.3k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  15.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  15.3k|  adjusted_mantissa answer;
  324|  15.3k|  bool truncated;
  325|  15.3k|  answer.mantissa = bigmant.hi64(truncated);
  326|  15.3k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  15.3k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  15.3k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  15.3k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  15.3k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  15.3k|    });
  333|  15.3k|  });
  334|       |
  335|  15.3k|  return answer;
  336|  15.3k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  15.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  15.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  15.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 15.3k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  15.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  15.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.43k, False: 13.9k]
  ------------------
  109|  1.43k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.43k|    am.power2++;
  111|  1.43k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  15.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  15.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 15.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  15.3k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  15.3k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  15.3k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  15.3k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  15.3k|    });
  333|  15.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  15.3k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  15.3k|  const uint64_t mask
  125|  15.3k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 15.3k]
  ------------------
  126|  15.3k|    ? UINT64_MAX
  127|  15.3k|    : (uint64_t(1) << shift) - 1;
  128|  15.3k|  const uint64_t halfway
  129|  15.3k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 15.3k]
  ------------------
  130|  15.3k|    ? 0
  131|  15.3k|    : uint64_t(1) << (shift - 1);
  132|  15.3k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  15.3k|  bool is_above = truncated_bits > halfway;
  134|  15.3k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  15.3k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 15.3k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  15.3k|  } else {
  140|  15.3k|    am.mantissa >>= shift;
  141|  15.3k|  }
  142|  15.3k|  am.power2 += shift;
  143|       |
  144|  15.3k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  15.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  15.3k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  15.3k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  15.3k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.61k, False: 13.7k]
  |  Branch (331:27): [True: 12.7k, False: 1.04k]
  |  Branch (331:41): [True: 4.29k, False: 8.44k]
  |  Branch (331:56): [True: 423, False: 9.06k]
  |  Branch (331:66): [True: 82, False: 341]
  ------------------
  332|  15.3k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  54.2k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  54.2k|  bigint& real_digits = bigmant;
  347|  54.2k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  54.2k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  54.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  54.2k|  T b;
  354|  54.2k|  to_float(false, am_b, b);
  355|  54.2k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  54.2k|  bigint theor_digits(theor.mantissa);
  357|  54.2k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  54.2k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  54.2k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  54.2k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 54.2k, False: 0]
  ------------------
  363|  54.2k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  54.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  54.2k|  }
  365|  54.2k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 6.37k, False: 47.8k]
  ------------------
  366|  6.37k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  6.37k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  47.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 47.6k, False: 186]
  ------------------
  368|  47.6k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  47.6k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  47.6k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  54.2k|  int ord = real_digits.compare(theor_digits);
  373|  54.2k|  adjusted_mantissa answer = am;
  374|  54.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  54.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  54.2k|      (void)_;  // not needed, since we've done our comparison
  377|  54.2k|      (void)__; // not needed, since we've done our comparison
  378|  54.2k|      if (ord > 0) {
  379|  54.2k|        return true;
  380|  54.2k|      } else if (ord < 0) {
  381|  54.2k|        return false;
  382|  54.2k|      } else {
  383|  54.2k|        return is_odd;
  384|  54.2k|      }
  385|  54.2k|    });
  386|  54.2k|  });
  387|       |
  388|  54.2k|  return answer;
  389|  54.2k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  54.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  54.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  54.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 228, False: 54.0k]
  ------------------
   96|       |    // have a denormal float
   97|    228|    int32_t shift = -am.power2 + 1;
   98|    228|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    228|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 228, False: 0]
  ------------------
  101|    228|    return;
  102|    228|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  54.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  54.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 54.0k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  54.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  54.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 54.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  54.0k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  54.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  54.2k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  54.2k|  adjusted_mantissa am = to_extended(value);
   84|  54.2k|  am.mantissa <<= 1;
   85|  54.2k|  am.mantissa += 1;
   86|  54.2k|  am.power2 -= 1;
   87|  54.2k|  return am;
   88|  54.2k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  54.2k|adjusted_mantissa to_extended(T value) noexcept {
   50|  54.2k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  54.2k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  54.2k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  54.2k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  54.2k|  adjusted_mantissa am;
   56|  54.2k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  54.2k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  54.2k|  ::memcpy(&bits, &value, sizeof(T));
   62|  54.2k|#endif
   63|  54.2k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 228, False: 54.0k]
  ------------------
   64|       |    // denormal
   65|    228|    am.power2 = 1 - bias;
   66|    228|    am.mantissa = bits & mantissa_mask;
   67|  54.0k|  } else {
   68|       |    // normal
   69|  54.0k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  54.0k|    am.power2 -= bias;
   71|  54.0k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  54.0k|  }
   73|       |
   74|  54.2k|  return am;
   75|  54.2k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  54.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  54.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  54.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 228, False: 54.0k]
  ------------------
   96|       |    // have a denormal float
   97|    228|    int32_t shift = -am.power2 + 1;
   98|    228|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    228|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 228, False: 0]
  ------------------
  101|    228|    return;
  102|    228|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  54.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  54.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 126, False: 53.8k]
  ------------------
  109|    126|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    126|    am.power2++;
  111|    126|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  54.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  54.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 54.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  54.0k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  54.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  54.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  54.2k|      (void)_;  // not needed, since we've done our comparison
  377|  54.2k|      (void)__; // not needed, since we've done our comparison
  378|  54.2k|      if (ord > 0) {
  379|  54.2k|        return true;
  380|  54.2k|      } else if (ord < 0) {
  381|  54.2k|        return false;
  382|  54.2k|      } else {
  383|  54.2k|        return is_odd;
  384|  54.2k|      }
  385|  54.2k|    });
  386|  54.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  54.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  54.2k|  const uint64_t mask
  125|  54.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 54.2k]
  ------------------
  126|  54.2k|    ? UINT64_MAX
  127|  54.2k|    : (uint64_t(1) << shift) - 1;
  128|  54.2k|  const uint64_t halfway
  129|  54.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 54.2k]
  ------------------
  130|  54.2k|    ? 0
  131|  54.2k|    : uint64_t(1) << (shift - 1);
  132|  54.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  54.2k|  bool is_above = truncated_bits > halfway;
  134|  54.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  54.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 54.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  54.2k|  } else {
  140|  54.2k|    am.mantissa >>= shift;
  141|  54.2k|  }
  142|  54.2k|  am.power2 += shift;
  143|       |
  144|  54.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  54.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  54.2k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  54.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  54.2k|      (void)_;  // not needed, since we've done our comparison
  377|  54.2k|      (void)__; // not needed, since we've done our comparison
  378|  54.2k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 17.2k, False: 36.9k]
  ------------------
  379|  17.2k|        return true;
  380|  36.9k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 35.8k, False: 1.08k]
  ------------------
  381|  35.8k|        return false;
  382|  35.8k|      } else {
  383|  1.08k|        return is_odd;
  384|  1.08k|      }
  385|  54.2k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  5.59M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  3.30M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   968k|  constexpr size_t len() const noexcept {
  238|   968k|    return length;
  239|   968k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.43M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.43M|  return -10;
  469|  1.43M|#endif
  470|  1.43M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|  1.34M|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|  1.34M|  return 10;
  517|  1.34M|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|  1.13M|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|  1.13M|  return uint64_t(2) << mantissa_explicit_bits();
  531|  1.13M|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  3.95M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  3.95M|  return 23;
  477|  3.95M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|  1.04M|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|  1.04M|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|  1.04M|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|  1.41M|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   572k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   572k|  return -65;
  568|   572k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   569k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   569k|  return 38;
  559|   569k|}
_ZN10fast_float14leading_zeroesEm:
  268|  1.26M|int leading_zeroes(uint64_t input_num) {
  269|  1.26M|  assert(input_num > 0);
  270|  1.26M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|  1.26M|  return __builtin_clzll(input_num);
  285|  1.26M|#endif
  286|  1.26M|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.53M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.53M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.53M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.53M|  answer.low = uint64_t(r);
  337|  1.53M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.53M|  return answer;
  342|  1.53M|}
_ZN10fast_float8value128C2Ev:
  251|  1.53M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   699k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   699k|  return -127;
  500|   699k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   206k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   206k|  return -17;
  493|   206k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   204k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   204k|  return 10;
  485|   204k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   409k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   409k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 140k, False: 269k]
  |  Branch (352:38): [True: 0, False: 269k]
  ------------------
  353|   409k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  71.0k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  71.0k|  return 114;
  575|  71.0k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   344k|{
  650|   344k|    return sizeof(uint64_t) / sizeof(UC);
  651|   344k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   176k|{
  644|   176k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   176k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   176k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   198k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   639k|  constexpr size_t len() const noexcept {
  238|   639k|    return length;
  239|   639k|  }
_ZNK10fast_float4spanImEixEm:
  241|   358k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   358k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   358k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   358k|    return ptr[index];
  244|   358k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   460k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   460k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   460k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   460k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   460k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   460k|  ::memcpy(&value, &word, sizeof(T));
  615|   460k|#endif
  616|   460k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   460k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|  1.10M|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|  1.10M|  return 0xFF;
  507|  1.10M|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.79M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   379k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   190k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   189k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.55M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.55M|  return -22;
  461|  1.55M|#endif
  462|  1.55M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.51M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.51M|  return 22;
  514|  1.51M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|  1.23M|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|  1.23M|  return uint64_t(2) << mantissa_explicit_bits();
  521|  1.23M|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  3.83M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  3.83M|  return 52;
  474|  3.83M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|  1.21M|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|  1.21M|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|  1.21M|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   542k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   542k|  return -342;
  564|   542k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   542k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   542k|  return 308;
  555|   542k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   675k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   675k|  return -1023;
  497|   675k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   165k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   165k|  return -4;
  489|   165k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  85.7k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  85.7k|  return 23;
  481|  85.7k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  69.6k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  69.6k|  return 769;
  572|  69.6k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   392k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   392k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   392k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   392k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   392k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   392k|  ::memcpy(&value, &word, sizeof(T));
  615|   392k|#endif
  616|   392k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   392k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   986k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   986k|  return 0x7FF;
  504|   986k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.33M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.33M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.33M|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  1.33M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.33M|    return from_chars_advanced(first, last, value, options);
  143|  1.33M|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.33M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.33M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.33M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.33M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.33M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.33M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.33M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.33M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.33M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.33M|  answer.ec = std::errc(); // be optimistic
  221|  1.33M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.33M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.25M, False: 85.8k]
  |  Branch (227:69): [True: 1.16M, False: 83.4k]
  |  Branch (227:131): [True: 1.03M, False: 130k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  1.03M|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 1.03M, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  1.03M|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 950k, False: 88.3k]
  ------------------
  239|   950k|        value = T(pns.mantissa);
  240|   950k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 16.4k, False: 933k]
  ------------------
  241|   933k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   950k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 950k]
  ------------------
  243|   950k|        return answer;
  244|   950k|      }
  245|  1.03M|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  1.03M|  }
  262|   388k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   388k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 196k, False: 192k]
  |  Branch (263:29): [True: 196k, False: 0]
  ------------------
  264|   196k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 71.0k, False: 125k]
  ------------------
  265|  71.0k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  71.0k|    }
  267|   196k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   388k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 71.0k, False: 317k]
  ------------------
  271|   388k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   388k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 374k, False: 14.2k]
  |  Branch (273:29): [True: 27.4k, False: 346k]
  |  Branch (273:49): [True: 1.98k, False: 25.4k]
  |  Branch (273:68): [True: 9.90k, False: 376k]
  ------------------
  274|  11.8k|    answer.ec = std::errc::result_out_of_range;
  275|  11.8k|  }
  276|   388k|  return answer;
  277|  1.33M|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  2.37M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  2.37M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  2.37M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  2.37M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  2.37M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  2.37M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  94.6k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  94.6k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  94.6k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  94.6k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  94.6k|    return from_chars_advanced(first, last, value, options);
  143|  94.6k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  94.6k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  94.6k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  94.6k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  94.6k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  94.6k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 94.6k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  94.6k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  94.6k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 94.6k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  94.6k|  answer.ec = std::errc(); // be optimistic
  221|  94.6k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  94.6k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 94.2k, False: 422]
  |  Branch (227:69): [True: 92.5k, False: 1.66k]
  |  Branch (227:131): [True: 92.5k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  92.5k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 92.5k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  92.5k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 92.5k, False: 54]
  ------------------
  239|  92.5k|        value = T(pns.mantissa);
  240|  92.5k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 110, False: 92.4k]
  ------------------
  241|  92.4k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  92.5k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 92.5k]
  ------------------
  243|  92.5k|        return answer;
  244|  92.5k|      }
  245|  92.5k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  92.5k|  }
  262|  2.13k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  2.13k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 2.13k]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  2.13k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 2.13k]
  ------------------
  271|  2.13k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  2.13k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 2.01k, False: 122]
  |  Branch (273:29): [True: 1.73k, False: 280]
  |  Branch (273:49): [True: 270, False: 1.46k]
  |  Branch (273:68): [True: 1.46k, False: 402]
  ------------------
  274|  1.73k|    answer.ec = std::errc::result_out_of_range;
  275|  1.73k|  }
  276|  2.13k|  return answer;
  277|  94.6k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.45M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.45M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.45M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.45M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.45M|    return from_chars_advanced(first, last, value, options);
  143|  1.45M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.45M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.45M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.45M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.45M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.45M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.45M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.45M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.45M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.45M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.45M|  answer.ec = std::errc(); // be optimistic
  221|  1.45M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.45M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.41M, False: 40.0k]
  |  Branch (227:69): [True: 1.33M, False: 85.8k]
  |  Branch (227:131): [True: 1.14M, False: 185k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  1.14M|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 1.14M, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  1.14M|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 1.12M, False: 24.3k]
  ------------------
  239|  1.12M|        value = T(pns.mantissa);
  240|  1.12M|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 61.5k, False: 1.06M]
  ------------------
  241|  1.06M|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  1.12M|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 1.12M]
  ------------------
  243|  1.12M|        return answer;
  244|  1.12M|      }
  245|  1.14M|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  1.14M|  }
  262|   336k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   336k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 213k, False: 122k]
  |  Branch (263:29): [True: 213k, False: 0]
  ------------------
  264|   213k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 69.6k, False: 144k]
  ------------------
  265|  69.6k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  69.6k|    }
  267|   213k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   336k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 69.6k, False: 266k]
  ------------------
  271|   336k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   336k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 327k, False: 8.76k]
  |  Branch (273:29): [True: 15.7k, False: 311k]
  |  Branch (273:49): [True: 506, False: 15.2k]
  |  Branch (273:68): [True: 4.55k, False: 330k]
  ------------------
  274|  5.05k|    answer.ec = std::errc::result_out_of_range;
  275|  5.05k|  }
  276|   336k|  return answer;
  277|  1.45M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  94.9k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  94.9k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  94.9k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  94.9k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  94.9k|    return from_chars_advanced(first, last, value, options);
  143|  94.9k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  94.9k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  94.9k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  94.9k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  94.9k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  94.9k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 94.9k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  94.9k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  94.9k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 94.9k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  94.9k|  answer.ec = std::errc(); // be optimistic
  221|  94.9k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  94.9k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 94.6k, False: 352]
  |  Branch (227:69): [True: 93.0k, False: 1.60k]
  |  Branch (227:131): [True: 93.0k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  93.0k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 93.0k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  93.0k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 93.0k, False: 0]
  ------------------
  239|  93.0k|        value = T(pns.mantissa);
  240|  93.0k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 180, False: 92.8k]
  ------------------
  241|  92.8k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  93.0k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 93.0k]
  ------------------
  243|  93.0k|        return answer;
  244|  93.0k|      }
  245|  93.0k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  93.0k|  }
  262|  1.95k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  1.95k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 1.95k]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  1.95k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 1.95k]
  ------------------
  271|  1.95k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  1.95k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 1.85k, False: 108]
  |  Branch (273:29): [True: 780, False: 1.07k]
  |  Branch (273:49): [True: 0, False: 780]
  |  Branch (273:68): [True: 780, False: 1.17k]
  ------------------
  274|    780|    answer.ec = std::errc::result_out_of_range;
  275|    780|  }
  276|  1.95k|  return answer;
  277|  94.9k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  10.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  9.19M|{
 3807|  9.19M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  9.19M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  9.19M|    }
 3810|  9.19M|    else if constexpr (sizeof(U) == 2) {
 3811|  9.19M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  9.19M|    }
 3813|  9.19M|    else {
 3814|       |        // utf-32
 3815|  9.19M|        static_assert(sizeof(U) == 4);
 3816|  9.19M|        SCN_UNUSED(ch);
 3817|  9.19M|        return 1;
 3818|  9.19M|    }
 3819|  9.19M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  9.19M|{
 3771|  9.19M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  9.19M|    SCN_GCC_COMPAT_PUSH
 3774|  9.19M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  9.19M|    constexpr char lengths[] =
 3776|  9.19M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  9.19M|        "\1\1\1\1\1\1\1\1"
 3778|  9.19M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  9.19M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  9.19M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  9.19M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  9.19M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  9.19M|    SCN_GCC_COMPAT_POP
 3785|  9.19M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  8.32M|{
 4013|  8.32M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  8.32M|        return decode_utf8_code_point_exhaustive(input);
 4015|  8.32M|    }
 4016|  8.32M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  8.32M|        return decode_utf16_code_point_exhaustive(input);
 4018|  8.32M|    }
 4019|  8.32M|    else {
 4020|  8.32M|        SCN_EXPECT(input.size() == 1);
 4021|  8.32M|        auto cp = static_cast<char32_t>(input.front());
 4022|  8.32M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  8.32M|            return invalid_code_point;
 4024|  8.32M|        }
 4025|  8.32M|        return cp;
 4026|  8.32M|    }
 4027|  8.32M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  8.32M|{
 3826|  8.32M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  8.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  8.32M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  8.32M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  8.32M|    };
 3831|       |
 3832|  8.32M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 7.96M, False: 365k]
  ------------------
 3833|  7.96M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 1.04k, False: 7.95M]
  ------------------
 3834|  1.04k|            SCN_UNLIKELY_ATTR
 3835|  1.04k|            return invalid_code_point;
 3836|  1.04k|        }
 3837|  7.95M|        return static_cast<char32_t>(input[0]);
 3838|  7.96M|    }
 3839|       |
 3840|   365k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 327k, False: 38.0k]
  ------------------
 3841|   327k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 283, False: 327k]
  ------------------
 3842|    283|            SCN_UNLIKELY_ATTR
 3843|    283|            return invalid_code_point;
 3844|    283|        }
 3845|   327k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 98.2k, False: 229k]
  ------------------
 3846|  98.2k|            SCN_UNLIKELY_ATTR
 3847|  98.2k|            return invalid_code_point;
 3848|  98.2k|        }
 3849|       |
 3850|   229k|        char32_t cp{};
 3851|   229k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   229k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   229k|        return cp;
 3854|   327k|    }
 3855|       |
 3856|  38.0k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 15.9k, False: 22.1k]
  ------------------
 3857|  15.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 221, False: 15.6k]
  ------------------
 3858|    221|            SCN_UNLIKELY_ATTR
 3859|    221|            return invalid_code_point;
 3860|    221|        }
 3861|  15.6k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 7.44k, False: 8.25k]
  ------------------
 3862|  15.6k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.94k, False: 6.31k]
  ------------------
 3863|  9.38k|            SCN_UNLIKELY_ATTR
 3864|  9.38k|            return invalid_code_point;
 3865|  9.38k|        }
 3866|       |
 3867|  6.31k|        char32_t cp{};
 3868|  6.31k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  6.31k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  6.31k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  6.31k|        return cp;
 3872|  15.6k|    }
 3873|       |
 3874|  22.1k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 22.1k, False: 0]
  ------------------
 3875|  22.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 22.1k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  22.1k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 3.48k, False: 18.6k]
  ------------------
 3880|  3.48k|            SCN_UNLIKELY_ATTR
 3881|  3.48k|            return invalid_code_point;
 3882|  3.48k|        }
 3883|  18.6k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 4.75k, False: 13.9k]
  ------------------
 3884|  18.6k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 1.87k, False: 12.0k]
  ------------------
 3885|  18.6k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 1.81k, False: 10.2k]
  ------------------
 3886|  8.44k|            SCN_UNLIKELY_ATTR
 3887|  8.44k|            return invalid_code_point;
 3888|  8.44k|        }
 3889|       |
 3890|  10.2k|        char32_t cp{};
 3891|  10.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  10.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  10.2k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  10.2k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  10.2k|        return cp;
 3896|  18.6k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   395k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   395k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   395k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  16.2M|{
 3699|  16.2M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  16.2M|                                          decltype(first), decltype(last)> &&
 3701|  16.2M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  16.2M|        return {first, last};
 3703|  16.2M|    }
 3704|  16.2M|    else {
 3705|  16.2M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  16.2M|                                       to_address(first), to_address(last)))};
 3707|  16.2M|    }
 3708|  16.2M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  49.5M|{
  326|  49.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  49.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  49.5M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  55.4M|{
  304|  55.4M|    return p;
  305|  55.4M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  24.2M|{
 3730|  24.2M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  24.2M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  24.2M|                      decltype(it)> &&
 3733|  24.2M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  24.2M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  24.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  24.2M|        return it;
 3736|  24.2M|    }
 3737|  24.2M|    else {
 3738|  24.2M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  24.2M|    }
 3740|  24.2M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   172k|    {
 2724|   172k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   172k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   172k|    {
 2705|   172k|        return decay_copy(t.begin());
 2706|   172k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  33.0M|{
 1949|  33.0M|    return SCN_FWD(t);
  ------------------
  |  |  930|  33.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  33.0M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.18M|    {
 2781|  6.18M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.18M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.18M|    {
 2763|  6.18M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.18M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   439k|{
 8867|   439k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   439k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   439k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   439k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   439k|    static_cast<    \
  |  |  929|   439k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   439k|    static_cast<    \
  |  |  929|   439k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   439k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|  1.81M|{
 5396|  1.81M|    detail::check_scan_arg_types<Args...>();
 5397|  1.81M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.81M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  2.34M|{
 5135|  2.34M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.34M|                  "Scan argument types must be default constructible");
 5137|  2.34M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.34M|                  "Scan argument types must be Destructible");
 5139|  2.34M|    static_assert(
 5140|  2.34M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.34M|        "Scan argument types must not be references");
 5142|  2.34M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|  1.81M|    {
 5349|  1.81M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.81M|    {
 5360|  1.81M|        return {detail::make_arg<
 5361|  1.81M|            kind, Context,
 5362|  1.81M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.81M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.81M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|  1.81M|{
 5170|  1.81M|    return make_value<Context>(value).ref_value;
 5171|  1.81M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|  2.00M|{
 5120|  2.00M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  2.00M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  2.00M|                                  needs_context_tag>) {
 5124|  2.00M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  2.00M|    }
 5126|  2.00M|    else {
 5127|  2.00M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  2.00M|            value, context_tag<Context>{}));
 5129|  2.00M|    }
 5130|  2.00M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|  2.00M|    {                                                                        \
 4959|  2.00M|        return val;                                                          \
 4960|  2.00M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  2.34M|{
 5089|  2.34M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.34M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.34M|    constexpr bool scannable_char =
 5093|  2.34M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.34M|    static_assert(scannable_char,
 5095|  2.34M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.34M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.34M|    constexpr bool scannable_const =
 5099|  2.34M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.34M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.34M|    constexpr bool scannable_disabled =
 5103|  2.34M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.34M|    static_assert(scannable_disabled,
 5105|  2.34M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.34M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.34M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.34M|    static_assert(
 5110|  2.34M|        scannable,
 5111|  2.34M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.34M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.34M|    return arg_value{arg};
 5115|  2.34M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|  2.34M|    {
 4902|  2.34M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.39M|{
 8654|  1.39M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.39M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  1.39M|{
 8591|  1.39M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.39M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.39M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.4k, False: 1.31M]
  |  |  ------------------
  ------------------
 8595|  77.4k|        return unexpected(result.error());
 8596|  77.4k|    }
 8597|  1.31M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.39M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  3.09M|{
 4720|  3.09M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  3.09M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  3.09M|                  "\n"
 4724|  3.09M|                  "Unsupported range type given as input to a scanning "
 4725|  3.09M|                  "function.\n"
 4726|  3.09M|                  "A range needs to have a character type (value type) "
 4727|  3.09M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  3.09M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  3.09M|                  "to be included.\n"
 4730|  3.09M|                  "See the scnlib documentation for more details.");
 4731|  3.09M|    static_assert(
 4732|  3.09M|        !std::is_same_v<T, custom_char_traits>,
 4733|  3.09M|        "\n"
 4734|  3.09M|        "Unsupported range type given as input to a scanning "
 4735|  3.09M|        "function.\n"
 4736|  3.09M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  3.09M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  3.09M|        "not supported.");
 4739|  3.09M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  3.09M|                  "\n"
 4741|  3.09M|                  "Unsupported range type given as input to a scanning "
 4742|  3.09M|                  "function.\n"
 4743|  3.09M|                  "file_marker_found cannot be used as an "
 4744|  3.09M|                  "source range type to scn::scan.\n"
 4745|  3.09M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  3.09M|                  "and do not provide an explicit source range, "
 4747|  3.09M|                  "or use scn::scan with a FILE* directly.");
 4748|  3.09M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  3.09M|                  "\n"
 4750|  3.09M|                  "Unsupported range type given as input to a scanning "
 4751|  3.09M|                  "function.\n"
 4752|  3.09M|                  "In order to be scannable, a range needs to satisfy "
 4753|  3.09M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  3.09M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  3.09M|                  "\n"
 4756|  3.09M|                  "Unsupported range type given as input to a scanning "
 4757|  3.09M|                  "function.\n"
 4758|  3.09M|                  "A range needs to model forward_range and have a valid "
 4759|  3.09M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  3.09M|                  "Examples of scannable ranges are std::string, "
 4761|  3.09M|                  "std::string_view, "
 4762|  3.09M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  3.09M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  3.09M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  3.09M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  3.09M|{
 4659|  3.09M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  3.09M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  3.09M|    }
 4662|  3.09M|    else {
 4663|  3.09M|        return invalid_char_type{};
 4664|  3.09M|    }
 4665|  3.09M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  3.09M|    {
 2855|  3.09M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  3.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  3.09M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  3.09M|    {
 2836|  3.09M|        return t.data();
 2837|  3.09M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  3.09M|    {
 3231|  3.09M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 23.1k, False: 3.06M]
  ------------------
 3232|  3.09M|                   ? nullptr
 3233|  3.09M|                   : std::addressof(*ranges::begin(derived()));
 3234|  3.09M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  3.09M|    {
 3005|  3.09M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  3.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  3.09M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  3.09M|    {
 2978|  3.09M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  3.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  3.09M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  17.1M|    {
 3339|  17.1M|        return m_iterator == m_sentinel;
 3340|  17.1M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  6.16M|    {
 3185|  6.16M|        return static_cast<const D&>(*this);
 3186|  6.16M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.99M|    {
 2724|  5.99M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.99M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.99M|    {
 2705|  5.99M|        return decay_copy(t.begin());
 2706|  5.99M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  75.1M|    {
 3330|  75.1M|        return m_iterator;
 3331|  75.1M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  3.09M|    {
 2930|  3.09M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  3.09M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  3.09M|    {
 2896|  3.09M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  3.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  3.09M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  9.98M|{
 1949|  9.98M|    return SCN_FWD(t);
  ------------------
  |  |  930|  9.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  9.98M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  17.2M|    {
 3346|  17.2M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  17.2M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  24.4M|    {
 1598|  24.4M|        return has_value();
 1599|  24.4M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  48.3M|    {
  485|  48.3M|        return m_has_value;
  486|  48.3M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.53M|    {
 1604|  1.53M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.53M|        return this->get_unexpected().error();
 1606|  1.53M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.53M|    {
  468|  1.53M|        return m_unexpected;
  469|  1.53M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  11.8M|    {
  361|  11.8M|        return m_unexpected;
  362|  11.8M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  5.76M|    {
  347|  5.76M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.76M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  5.76M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   167k|    {
 1476|   167k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   167k|    {
  447|   167k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  13.7M|    {
  356|  13.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  13.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  13.7M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.09M|    {
 1177|  3.09M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  2.92M|{
 5923|  2.92M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.92M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.92M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.92M|    }
 5927|  2.92M|    else {
 5928|  2.92M|        auto it = ranges::begin(source);
 5929|  2.92M|        while (n > 0) {
 5930|  2.92M|            --n;
 5931|  2.92M|            ++it;
 5932|  2.92M|        }
 5933|  2.92M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.92M|    }
 5935|  2.92M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  17.8M|    {
 2724|  17.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  17.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  17.8M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  17.8M|    {
 2705|  17.8M|        return decay_copy(t.begin());
 2706|  17.8M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  2.92M|{
 5910|  2.92M|    return ranges::end(source);
 5911|  2.92M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.92M|    {
 2781|  2.92M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.92M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.92M|    {
 2763|  2.92M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.92M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  36.6M|    {
 3334|  36.6M|        return m_sentinel;
 3335|  36.6M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  9.65M|    {
 1653|  9.65M|        return value();
 1654|  9.65M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  22.4M|    {
 1627|  22.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  22.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  22.4M|        return this->get_value();
 1629|  22.4M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  22.4M|    {
  451|  22.4M|        return m_value;
  452|  22.4M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.92M|    {
 1430|  2.92M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  2.92M|    {
  437|  2.92M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   878k|    {
 7975|   878k|        return m_str;
 7976|   878k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.81M|    {
 5426|  1.81M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|  1.81M|    {
 5379|  1.81M|        return m_argptrs;
 5380|  1.81M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  5.75M|    {
 5478|  5.75M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   878k|{
 8820|   878k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.6k, False: 827k]
  |  |  ------------------
  ------------------
 8821|  51.6k|        return unexpected(result.error());
 8822|  51.6k|    }
 8823|   827k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   827k|    static_cast<    \
  |  |  929|   827k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   827k|    static_cast<    \
  |  |  929|   827k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   878k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  3.09M|    {
 1598|  3.09M|        return has_value();
 1599|  3.09M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.18M|    {
  485|  6.18M|        return m_has_value;
  486|  6.18M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   167k|    {
 1604|   167k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   167k|        return this->get_unexpected().error();
 1606|   167k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   167k|    {
  468|   167k|        return m_unexpected;
  469|   167k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  55.9k|    {
 1476|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  55.9k|    {
  447|  55.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   974k|    {
 1177|   974k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  2.62M|    {
 1653|  2.62M|        return value();
 1654|  2.62M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.92M|    {
 1627|  2.92M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.92M|        return this->get_value();
 1629|  2.92M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.92M|    {
  451|  2.92M|        return m_value;
  452|  2.92M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   918k|    {
 5830|   918k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  2.92M|    {
 5681|  2.92M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|  2.00M|    {
 5616|  2.00M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   918k|    {
 1430|   918k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   918k|    {
  437|   918k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|  1.81M|    {
 5374|  1.81M|        return m_args;
 5375|  1.81M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  29.2M|    {
 3316|  29.2M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  5.75M|{
 7691|  5.75M|    return s;
 7692|  5.75M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  5.75M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   878k|    {
 7971|   878k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   974k|    {
 1598|   974k|        return has_value();
 1599|   974k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.89M|    {
  485|  1.89M|        return m_has_value;
  486|  1.89M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   918k|    {
 1673|   918k|        return &value();
 1674|   918k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   918k|    {
 1627|   918k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   918k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   918k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   918k|        return this->get_value();
 1629|   918k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   918k|    {
  451|   918k|        return m_value;
  452|   918k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  2.92M|    {
 5698|  2.92M|        return ranges::begin(m_range);
 5699|  2.92M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   439k|{
 8934|   439k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   439k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   439k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   439k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   439k|    static_cast<    \
  |  |  929|   439k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   439k|    static_cast<    \
  |  |  929|   439k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   439k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.39M|{
 8672|  1.39M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.39M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  1.39M|{
 8607|  1.39M|#if !SCN_DISABLE_LOCALE
 8608|  1.39M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.39M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.39M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.39M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.39M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.4k, False: 1.31M]
  |  |  ------------------
  ------------------
 8615|  77.4k|        return unexpected(result.error());
 8616|  77.4k|    }
 8617|  1.31M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.39M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  95.7k|{
 8973|  95.7k|    T value;
 8974|  95.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  95.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  95.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  95.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  95.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  95.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.30k, False: 91.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.30k|    }                                                  \
  |  |  |  | 3671|  95.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  91.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  91.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  91.4k|    static_cast<    \
  |  |  929|  91.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  91.4k|    static_cast<    \
  |  |  929|  91.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  95.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|   190k|{
 5155|   190k|    check_scan_arg_types<T>();
 5156|       |
 5157|   190k|    basic_scan_arg<Context> arg;
 5158|   190k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   190k|    arg.m_value = make_value<Context>(value);
 5160|   190k|    return arg;
 5161|   190k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  6.36M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  7.38M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   308k|{
 8685|   308k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   308k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   308k|{
 8631|   308k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   308k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   308k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.9k, False: 295k]
  |  |  ------------------
  ------------------
 8635|  12.9k|        return unexpected(result.error());
 8636|  12.9k|    }
 8637|   295k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   308k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   295k|    {
 1663|   295k|        return std::move(value());
 1664|   295k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   473k|{
 8867|   473k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   473k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   473k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   473k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   473k|    static_cast<    \
  |  |  929|   473k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   473k|    static_cast<    \
  |  |  929|   473k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   473k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  1.95M|{
 5396|  1.95M|    detail::check_scan_arg_types<Args...>();
 5397|  1.95M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.95M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  2.50M|{
 5135|  2.50M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.50M|                  "Scan argument types must be default constructible");
 5137|  2.50M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.50M|                  "Scan argument types must be Destructible");
 5139|  2.50M|    static_assert(
 5140|  2.50M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.50M|        "Scan argument types must not be references");
 5142|  2.50M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  1.95M|    {
 5349|  1.95M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.95M|    {
 5360|  1.95M|        return {detail::make_arg<
 5361|  1.95M|            kind, Context,
 5362|  1.95M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.95M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.95M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  1.95M|{
 5170|  1.95M|    return make_value<Context>(value).ref_value;
 5171|  1.95M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  2.16M|{
 5120|  2.16M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  2.16M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  2.16M|                                  needs_context_tag>) {
 5124|  2.16M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  2.16M|    }
 5126|  2.16M|    else {
 5127|  2.16M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  2.16M|            value, context_tag<Context>{}));
 5129|  2.16M|    }
 5130|  2.16M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  2.16M|    {                                                                        \
 4959|  2.16M|        return val;                                                          \
 4960|  2.16M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  2.50M|{
 5089|  2.50M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.50M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.50M|    constexpr bool scannable_char =
 5093|  2.50M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.50M|    static_assert(scannable_char,
 5095|  2.50M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.50M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.50M|    constexpr bool scannable_const =
 5099|  2.50M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.50M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.50M|    constexpr bool scannable_disabled =
 5103|  2.50M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.50M|    static_assert(scannable_disabled,
 5105|  2.50M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.50M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.50M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.50M|    static_assert(
 5110|  2.50M|        scannable,
 5111|  2.50M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.50M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.50M|    return arg_value{arg};
 5115|  2.50M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  2.50M|    {
 4902|  2.50M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   946k|    {
 7975|   946k|        return m_str;
 7976|   946k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.95M|    {
 5426|  1.95M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  1.95M|    {
 5379|  1.95M|        return m_argptrs;
 5380|  1.95M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   946k|{
 8820|   946k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   946k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.6k, False: 895k]
  |  |  ------------------
  ------------------
 8821|  51.6k|        return unexpected(result.error());
 8822|  51.6k|    }
 8823|   895k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   895k|    static_cast<    \
  |  |  929|   895k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   895k|    static_cast<    \
  |  |  929|   895k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   946k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  55.9k|    {
 1476|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  55.9k|    {
  447|  55.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.05M|    {
 1177|  1.05M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   996k|    {
 5830|   996k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|  2.17M|    {
 5616|  2.17M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   996k|    {
 1430|   996k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   996k|    {
  437|   996k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  1.95M|    {
 5374|  1.95M|        return m_args;
 5375|  1.95M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   946k|    {
 7971|   946k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|  1.05M|    {
 1598|  1.05M|        return has_value();
 1599|  1.05M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.04M|    {
  485|  2.04M|        return m_has_value;
  486|  2.04M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   996k|    {
 1673|   996k|        return &value();
 1674|   996k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   996k|    {
 1627|   996k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   996k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   996k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   996k|        return this->get_value();
 1629|   996k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   996k|    {
  451|   996k|        return m_value;
  452|   996k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   473k|{
 8934|   473k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   473k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   473k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   473k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   473k|    static_cast<    \
  |  |  929|   473k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   473k|    static_cast<    \
  |  |  929|   473k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   473k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|   105k|{
 8973|   105k|    T value;
 8974|   105k|    auto arg = detail::make_arg<scan_context>(value);
 8975|   105k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.30k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.30k|    }                                                  \
  |  |  |  | 3671|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|   101k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   101k|    static_cast<    \
  |  |  929|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   101k|    static_cast<    \
  |  |  929|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|   105k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|   209k|{
 5155|   209k|    check_scan_arg_types<T>();
 5156|       |
 5157|   209k|    basic_scan_arg<Context> arg;
 5158|   209k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   209k|    arg.m_value = make_value<Context>(value);
 5160|   209k|    return arg;
 5161|   209k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   478k|{
 8867|   478k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   478k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   478k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   478k|    static_cast<    \
  |  |  929|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   478k|    static_cast<    \
  |  |  929|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   478k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|  1.97M|{
 5396|  1.97M|    detail::check_scan_arg_types<Args...>();
 5397|  1.97M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.97M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  2.53M|{
 5135|  2.53M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.53M|                  "Scan argument types must be default constructible");
 5137|  2.53M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.53M|                  "Scan argument types must be Destructible");
 5139|  2.53M|    static_assert(
 5140|  2.53M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.53M|        "Scan argument types must not be references");
 5142|  2.53M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|  1.97M|    {
 5349|  1.97M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.97M|    {
 5360|  1.97M|        return {detail::make_arg<
 5361|  1.97M|            kind, Context,
 5362|  1.97M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.97M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.97M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|  1.97M|{
 5170|  1.97M|    return make_value<Context>(value).ref_value;
 5171|  1.97M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|  2.19M|{
 5120|  2.19M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  2.19M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  2.19M|                                  needs_context_tag>) {
 5124|  2.19M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  2.19M|    }
 5126|  2.19M|    else {
 5127|  2.19M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  2.19M|            value, context_tag<Context>{}));
 5129|  2.19M|    }
 5130|  2.19M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|  2.19M|    {                                                                        \
 4959|  2.19M|        return val;                                                          \
 4960|  2.19M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  2.53M|{
 5089|  2.53M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.53M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.53M|    constexpr bool scannable_char =
 5093|  2.53M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.53M|    static_assert(scannable_char,
 5095|  2.53M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.53M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.53M|    constexpr bool scannable_const =
 5099|  2.53M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.53M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.53M|    constexpr bool scannable_disabled =
 5103|  2.53M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.53M|    static_assert(scannable_disabled,
 5105|  2.53M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.53M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.53M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.53M|    static_assert(
 5110|  2.53M|        scannable,
 5111|  2.53M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.53M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.53M|    return arg_value{arg};
 5115|  2.53M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  2.53M|    {
 4902|  2.53M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   957k|    {
 7975|   957k|        return m_str;
 7976|   957k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.97M|    {
 5426|  1.97M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|  1.97M|    {
 5379|  1.97M|        return m_argptrs;
 5380|  1.97M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   957k|{
 8820|   957k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   957k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.6k, False: 906k]
  |  |  ------------------
  ------------------
 8821|  51.6k|        return unexpected(result.error());
 8822|  51.6k|    }
 8823|   906k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   906k|    static_cast<    \
  |  |  929|   906k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   906k|    static_cast<    \
  |  |  929|   906k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   957k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  55.9k|    {
 1476|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  55.9k|    {
  447|  55.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.06M|    {
 1177|  1.06M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  1.00M|    {
 5830|  1.00M|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|  2.19M|    {
 5616|  2.19M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.00M|    {
 1430|  1.00M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  1.00M|    {
  437|  1.00M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|  1.97M|    {
 5374|  1.97M|        return m_args;
 5375|  1.97M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   957k|    {
 7971|   957k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|  1.06M|    {
 1598|  1.06M|        return has_value();
 1599|  1.06M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.07M|    {
  485|  2.07M|        return m_has_value;
  486|  2.07M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  1.00M|    {
 1673|  1.00M|        return &value();
 1674|  1.00M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.00M|    {
 1627|  1.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.00M|        return this->get_value();
 1629|  1.00M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.00M|    {
  451|  1.00M|        return m_value;
  452|  1.00M|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   478k|{
 8934|   478k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   478k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   478k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   478k|    static_cast<    \
  |  |  929|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   478k|    static_cast<    \
  |  |  929|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   478k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|   107k|{
 8973|   107k|    T value;
 8974|   107k|    auto arg = detail::make_arg<scan_context>(value);
 8975|   107k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.30k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.30k|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|   103k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|   107k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|   212k|{
 5155|   212k|    check_scan_arg_types<T>();
 5156|       |
 5157|   212k|    basic_scan_arg<Context> arg;
 5158|   212k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   212k|    arg.m_value = make_value<Context>(value);
 5160|   212k|    return arg;
 5161|   212k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   167k|    {
 2724|   167k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   167k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   167k|    {
 2705|   167k|        return decay_copy(t.begin());
 2706|   167k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|   147M|{
 1949|   147M|    return SCN_FWD(t);
  ------------------
  |  |  930|   147M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   147M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.54M|    {
 2781|  6.54M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.54M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.54M|    {
 2763|  6.54M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.54M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   468k|{
 8867|   468k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   468k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   468k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   468k|    static_cast<    \
  |  |  929|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   468k|    static_cast<    \
  |  |  929|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   468k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.48M|{
 8654|  1.48M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.48M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  1.48M|{
 8591|  1.48M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.48M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.48M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.4k, False: 1.40M]
  |  |  ------------------
  ------------------
 8595|  77.4k|        return unexpected(result.error());
 8596|  77.4k|    }
 8597|  1.40M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.48M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  3.27M|{
 4720|  3.27M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  3.27M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  3.27M|                  "\n"
 4724|  3.27M|                  "Unsupported range type given as input to a scanning "
 4725|  3.27M|                  "function.\n"
 4726|  3.27M|                  "A range needs to have a character type (value type) "
 4727|  3.27M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  3.27M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  3.27M|                  "to be included.\n"
 4730|  3.27M|                  "See the scnlib documentation for more details.");
 4731|  3.27M|    static_assert(
 4732|  3.27M|        !std::is_same_v<T, custom_char_traits>,
 4733|  3.27M|        "\n"
 4734|  3.27M|        "Unsupported range type given as input to a scanning "
 4735|  3.27M|        "function.\n"
 4736|  3.27M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  3.27M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  3.27M|        "not supported.");
 4739|  3.27M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  3.27M|                  "\n"
 4741|  3.27M|                  "Unsupported range type given as input to a scanning "
 4742|  3.27M|                  "function.\n"
 4743|  3.27M|                  "file_marker_found cannot be used as an "
 4744|  3.27M|                  "source range type to scn::scan.\n"
 4745|  3.27M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  3.27M|                  "and do not provide an explicit source range, "
 4747|  3.27M|                  "or use scn::scan with a FILE* directly.");
 4748|  3.27M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  3.27M|                  "\n"
 4750|  3.27M|                  "Unsupported range type given as input to a scanning "
 4751|  3.27M|                  "function.\n"
 4752|  3.27M|                  "In order to be scannable, a range needs to satisfy "
 4753|  3.27M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  3.27M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  3.27M|                  "\n"
 4756|  3.27M|                  "Unsupported range type given as input to a scanning "
 4757|  3.27M|                  "function.\n"
 4758|  3.27M|                  "A range needs to model forward_range and have a valid "
 4759|  3.27M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  3.27M|                  "Examples of scannable ranges are std::string, "
 4761|  3.27M|                  "std::string_view, "
 4762|  3.27M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  3.27M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  3.27M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  3.27M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  3.27M|{
 4690|  3.27M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  3.27M|        return file_marker_found{};
 4692|  3.27M|    }
 4693|  3.27M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  3.27M|        if constexpr (ranges::range<Range>) {
 4695|  3.27M|            return insufficient_range{};
 4696|  3.27M|        }
 4697|  3.27M|        else {
 4698|  3.27M|            return invalid_input_range{};
 4699|  3.27M|        }
 4700|  3.27M|    }
 4701|  3.27M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  3.27M|        return invalid_char_type{};
 4703|  3.27M|    }
 4704|  3.27M|    else {
 4705|  3.27M|        return make_forward_scan_buffer(r);
 4706|  3.27M|    }
 4707|  3.27M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  3.27M|{
 4524|  3.27M|    return basic_scan_forward_buffer_impl(range);
 4525|  3.27M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  3.27M|    {
 4411|  3.27M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  3.27M|    {
 4382|  3.27M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  3.27M|    {
 4151|  3.27M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  3.27M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  6.37M|    {
 2724|  6.37M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  6.37M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  6.37M|    {
 2705|  6.37M|        return decay_copy(t.begin());
 2706|  6.37M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  9.48M|    {
 3330|  9.48M|        return m_iterator;
 3331|  9.48M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  42.9M|    {
 4415|  42.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 473k, False: 42.4M]
  ------------------
 4416|   473k|            return false;
 4417|   473k|        }
 4418|  42.4M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  42.4M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  42.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  42.4M|        }
 4421|  42.4M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 39.1M, False: 3.24M]
  ------------------
 4422|  39.1M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  39.1M|                                          this->m_current_view.begin(),
 4424|  39.1M|                                          this->m_current_view.end());
 4425|  39.1M|        }
 4426|  42.4M|        m_latest = *m_cursor;
 4427|  42.4M|        ++m_cursor;
 4428|  42.4M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  42.4M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  42.4M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  42.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  42.4M|        }
 4432|  42.4M|        return true;
 4433|  42.4M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   127M|    {
 2781|   127M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   127M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   127M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   127M|    {
 2763|   127M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   127M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   127M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|   130M|    {
 3334|   130M|        return m_sentinel;
 3335|   130M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  3.27M|    {
 4071|  3.27M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  3.27M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  3.27M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   167k|    {
 1476|   167k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   167k|    {
  447|   167k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.27M|    {
 1177|  3.27M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  3.10M|{
 5923|  3.10M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  3.10M|                      ranges::iterator_t<SourceRange>>) {
 5925|  3.10M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  3.10M|    }
 5927|  3.10M|    else {
 5928|  3.10M|        auto it = ranges::begin(source);
 5929|  3.10M|        while (n > 0) {
 5930|  3.10M|            --n;
 5931|  3.10M|            ++it;
 5932|  3.10M|        }
 5933|  3.10M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  3.10M|    }
 5935|  3.10M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.10M|    {
 2724|  3.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.10M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.10M|    {
 2705|  3.10M|        return decay_copy(t.begin());
 2706|  3.10M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  3.10M|{
 5910|  3.10M|    return ranges::end(source);
 5911|  3.10M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.10M|    {
 2781|  3.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.10M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.10M|    {
 2763|  3.10M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.10M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  3.10M|    {
 1430|  3.10M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  3.10M|    {
  437|  3.10M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   937k|    {
 7975|   937k|        return m_str;
 7976|   937k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   937k|{
 8820|   937k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.6k, False: 885k]
  |  |  ------------------
  ------------------
 8821|  51.6k|        return unexpected(result.error());
 8822|  51.6k|    }
 8823|   885k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   885k|    static_cast<    \
  |  |  929|   885k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   885k|    static_cast<    \
  |  |  929|   885k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   937k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  3.27M|    {
 1598|  3.27M|        return has_value();
 1599|  3.27M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.54M|    {
  485|  6.54M|        return m_has_value;
  486|  6.54M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   167k|    {
 1604|   167k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   167k|        return this->get_unexpected().error();
 1606|   167k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   167k|    {
  468|   167k|        return m_unexpected;
  469|   167k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  55.9k|    {
 1476|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  55.9k|    {
  447|  55.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.03M|    {
 1177|  1.03M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  2.81M|    {
 1653|  2.81M|        return value();
 1654|  2.81M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  3.10M|    {
 1627|  3.10M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.10M|        return this->get_value();
 1629|  3.10M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.10M|    {
  451|  3.10M|        return m_value;
  452|  3.10M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   976k|    {
 5830|   976k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  3.10M|    {
 5681|  3.10M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   976k|    {
 1430|   976k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   976k|    {
  437|   976k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  6.37M|    {
 3316|  6.37M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   937k|    {
 7971|   937k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|  1.03M|    {
 1598|  1.03M|        return has_value();
 1599|  1.03M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.00M|    {
  485|  2.00M|        return m_has_value;
  486|  2.00M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   976k|    {
 1673|   976k|        return &value();
 1674|   976k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   976k|    {
 1627|   976k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   976k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   976k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   976k|        return this->get_value();
 1629|   976k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   976k|    {
  451|   976k|        return m_value;
  452|   976k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  3.10M|    {
 5698|  3.10M|        return ranges::begin(m_range);
 5699|  3.10M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   468k|{
 8934|   468k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   468k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   468k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   468k|    static_cast<    \
  |  |  929|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   468k|    static_cast<    \
  |  |  929|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   468k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.48M|{
 8672|  1.48M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.48M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  1.48M|{
 8607|  1.48M|#if !SCN_DISABLE_LOCALE
 8608|  1.48M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.48M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.48M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.48M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.48M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.4k, False: 1.40M]
  |  |  ------------------
  ------------------
 8615|  77.4k|        return unexpected(result.error());
 8616|  77.4k|    }
 8617|  1.40M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.48M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  94.6k|{
 8973|  94.6k|    T value;
 8974|  94.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  94.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  94.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  94.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  94.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.30k, False: 90.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.30k|    }                                                  \
  |  |  |  | 3671|  94.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  90.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  90.3k|    static_cast<    \
  |  |  929|  90.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  90.3k|    static_cast<    \
  |  |  929|  90.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  94.6k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   303k|{
 8685|   303k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   303k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   303k|{
 8631|   303k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   303k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   303k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.9k, False: 291k]
  |  |  ------------------
  ------------------
 8635|  12.9k|        return unexpected(result.error());
 8636|  12.9k|    }
 8637|   291k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   303k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   291k|    {
 1663|   291k|        return std::move(value());
 1664|   291k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   505k|{
 8867|   505k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   505k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   505k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   505k|    static_cast<    \
  |  |  929|   505k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   505k|    static_cast<    \
  |  |  929|   505k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   505k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|  1.01M|    {
 7975|  1.01M|        return m_str;
 7976|  1.01M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|  1.01M|{
 8820|  1.01M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.6k, False: 958k]
  |  |  ------------------
  ------------------
 8821|  51.6k|        return unexpected(result.error());
 8822|  51.6k|    }
 8823|   958k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   958k|    static_cast<    \
  |  |  929|   958k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   958k|    static_cast<    \
  |  |  929|   958k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  1.01M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  55.9k|    {
 1476|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  55.9k|    {
  447|  55.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.11M|    {
 1177|  1.11M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  1.05M|    {
 5830|  1.05M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  1.05M|    {
 1430|  1.05M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  1.05M|    {
  437|  1.05M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  1.01M|    {
 7971|  1.01M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|  1.11M|    {
 1598|  1.11M|        return has_value();
 1599|  1.11M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.17M|    {
  485|  2.17M|        return m_has_value;
  486|  2.17M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  1.05M|    {
 1673|  1.05M|        return &value();
 1674|  1.05M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  1.05M|    {
 1627|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.05M|        return this->get_value();
 1629|  1.05M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.05M|    {
  451|  1.05M|        return m_value;
  452|  1.05M|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   505k|{
 8934|   505k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   505k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   505k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   505k|    static_cast<    \
  |  |  929|   505k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   505k|    static_cast<    \
  |  |  929|   505k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   505k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|   104k|{
 8973|   104k|    T value;
 8974|   104k|    auto arg = detail::make_arg<scan_context>(value);
 8975|   104k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.30k, False: 99.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.30k|    }                                                  \
  |  |  |  | 3671|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  99.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  99.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  99.8k|    static_cast<    \
  |  |  929|  99.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  99.8k|    static_cast<    \
  |  |  929|  99.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|   104k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   510k|{
 8867|   510k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   510k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   510k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   510k|    static_cast<    \
  |  |  929|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   510k|    static_cast<    \
  |  |  929|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   510k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|  1.02M|    {
 7975|  1.02M|        return m_str;
 7976|  1.02M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|  1.02M|{
 8820|  1.02M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.6k, False: 969k]
  |  |  ------------------
  ------------------
 8821|  51.6k|        return unexpected(result.error());
 8822|  51.6k|    }
 8823|   969k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   969k|    static_cast<    \
  |  |  929|   969k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   969k|    static_cast<    \
  |  |  929|   969k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  1.02M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  55.9k|    {
 1476|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  55.9k|    {
  447|  55.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.12M|    {
 1177|  1.12M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  1.07M|    {
 5830|  1.07M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  1.07M|    {
 1430|  1.07M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  1.07M|    {
  437|  1.07M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  1.02M|    {
 7971|  1.02M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|  1.12M|    {
 1598|  1.12M|        return has_value();
 1599|  1.12M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.19M|    {
  485|  2.19M|        return m_has_value;
  486|  2.19M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  1.07M|    {
 1673|  1.07M|        return &value();
 1674|  1.07M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  1.07M|    {
 1627|  1.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.07M|        return this->get_value();
 1629|  1.07M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.07M|    {
  451|  1.07M|        return m_value;
  452|  1.07M|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   510k|{
 8934|   510k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   510k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   510k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   510k|    static_cast<    \
  |  |  929|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   510k|    static_cast<    \
  |  |  929|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   510k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|   105k|{
 8973|   105k|    T value;
 8974|   105k|    auto arg = detail::make_arg<scan_context>(value);
 8975|   105k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.30k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.30k|    }                                                  \
  |  |  |  | 3671|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|   100k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|   105k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   344k|    {
 2724|   344k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   344k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   344k|    {
 2705|   344k|        return decay_copy(t.begin());
 2706|   344k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  2.97M|{
 1949|  2.97M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.97M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.02M|    {
 2781|  1.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.02M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.02M|    {
 2763|  1.02M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.02M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   310k|{
 5396|   310k|    detail::check_scan_arg_types<Args...>();
 5397|   310k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   310k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   310k|    {
 5349|   310k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   310k|    {
 5360|   310k|        return {detail::make_arg<
 5361|   310k|            kind, Context,
 5362|   310k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   310k|                                 typename Context::char_type>::value>(args)...};
 5364|   310k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   310k|{
 5170|   310k|    return make_value<Context>(value).ref_value;
 5171|   310k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   338k|{
 5120|   338k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   338k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   338k|                                  needs_context_tag>) {
 5124|   338k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   338k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   338k|    }
 5126|   338k|    else {
 5127|   338k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   338k|            value, context_tag<Context>{}));
 5129|   338k|    }
 5130|   338k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   338k|    {                                                                        \
 4959|   338k|        return val;                                                          \
 4960|   338k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   234k|{
 8591|   234k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   234k|    auto result = vscan_impl(buffer, format, args);
 8594|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 154k, False: 79.4k]
  |  |  ------------------
  ------------------
 8595|   154k|        return unexpected(result.error());
 8596|   154k|    }
 8597|  79.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  79.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   234k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   510k|{
 4720|   510k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   510k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   510k|                  "\n"
 4724|   510k|                  "Unsupported range type given as input to a scanning "
 4725|   510k|                  "function.\n"
 4726|   510k|                  "A range needs to have a character type (value type) "
 4727|   510k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   510k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   510k|                  "to be included.\n"
 4730|   510k|                  "See the scnlib documentation for more details.");
 4731|   510k|    static_assert(
 4732|   510k|        !std::is_same_v<T, custom_char_traits>,
 4733|   510k|        "\n"
 4734|   510k|        "Unsupported range type given as input to a scanning "
 4735|   510k|        "function.\n"
 4736|   510k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   510k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   510k|        "not supported.");
 4739|   510k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   510k|                  "\n"
 4741|   510k|                  "Unsupported range type given as input to a scanning "
 4742|   510k|                  "function.\n"
 4743|   510k|                  "file_marker_found cannot be used as an "
 4744|   510k|                  "source range type to scn::scan.\n"
 4745|   510k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   510k|                  "and do not provide an explicit source range, "
 4747|   510k|                  "or use scn::scan with a FILE* directly.");
 4748|   510k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   510k|                  "\n"
 4750|   510k|                  "Unsupported range type given as input to a scanning "
 4751|   510k|                  "function.\n"
 4752|   510k|                  "In order to be scannable, a range needs to satisfy "
 4753|   510k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   510k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   510k|                  "\n"
 4756|   510k|                  "Unsupported range type given as input to a scanning "
 4757|   510k|                  "function.\n"
 4758|   510k|                  "A range needs to model forward_range and have a valid "
 4759|   510k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   510k|                  "Examples of scannable ranges are std::string, "
 4761|   510k|                  "std::string_view, "
 4762|   510k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   510k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   510k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   510k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   510k|{
 4659|   510k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   510k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   510k|    }
 4662|   510k|    else {
 4663|   510k|        return invalid_char_type{};
 4664|   510k|    }
 4665|   510k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   510k|    {
 2855|   510k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   510k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   510k|    {
 2836|   510k|        return t.data();
 2837|   510k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   510k|    {
 3231|   510k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 912, False: 509k]
  ------------------
 3232|   510k|                   ? nullptr
 3233|   510k|                   : std::addressof(*ranges::begin(derived()));
 3234|   510k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   510k|    {
 3005|   510k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   510k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   510k|    {
 2978|   510k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   510k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   863k|    {
 3339|   863k|        return m_iterator == m_sentinel;
 3340|   863k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.01M|    {
 3185|  1.01M|        return static_cast<const D&>(*this);
 3186|  1.01M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   683k|    {
 2724|   683k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   683k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   683k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   683k|    {
 2705|   683k|        return decay_copy(t.begin());
 2706|   683k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  15.0M|    {
 3330|  15.0M|        return m_iterator;
 3331|  15.0M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   510k|    {
 2930|   510k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   510k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   510k|    {
 2896|   510k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   510k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  2.16M|    {
 3346|  2.16M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  2.16M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   335k|    {
 1476|   335k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   335k|    {
  447|   335k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   510k|    {
 1177|   510k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   174k|{
 5923|   174k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   174k|                      ranges::iterator_t<SourceRange>>) {
 5925|   174k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   174k|    }
 5927|   174k|    else {
 5928|   174k|        auto it = ranges::begin(source);
 5929|   174k|        while (n > 0) {
 5930|   174k|            --n;
 5931|   174k|            ++it;
 5932|   174k|        }
 5933|   174k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   174k|    }
 5935|   174k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   745k|    {
 2724|   745k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   745k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   745k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   745k|    {
 2705|   745k|        return decay_copy(t.begin());
 2706|   745k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   174k|{
 5910|   174k|    return ranges::end(source);
 5911|   174k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   174k|    {
 2781|   174k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   174k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   174k|    {
 2763|   174k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   174k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  7.88M|    {
 3334|  7.88M|        return m_sentinel;
 3335|  7.88M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   174k|    {
 1430|   174k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   174k|    {
  437|   174k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   155k|    {
 7975|   155k|        return m_str;
 7976|   155k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   310k|    {
 5426|   310k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   310k|    {
 5379|   310k|        return m_argptrs;
 5380|   310k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   936k|    {
 5478|   936k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   155k|{
 8820|   155k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 52.3k]
  |  |  ------------------
  ------------------
 8821|   103k|        return unexpected(result.error());
 8822|   103k|    }
 8823|  52.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.3k|    static_cast<    \
  |  |  929|  52.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.3k|    static_cast<    \
  |  |  929|  52.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   155k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   510k|    {
 1598|   510k|        return has_value();
 1599|   510k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.02M|    {
  485|  1.02M|        return m_has_value;
  486|  1.02M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   335k|    {
 1604|   335k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   335k|        return this->get_unexpected().error();
 1606|   335k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   335k|    {
  468|   335k|        return m_unexpected;
  469|   335k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|   111k|    {
 1476|   111k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|   111k|    {
  447|   111k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   169k|    {
 1177|   169k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   158k|    {
 1653|   158k|        return value();
 1654|   158k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   174k|    {
 1627|   174k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   174k|        return this->get_value();
 1629|   174k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   174k|    {
  451|   174k|        return m_value;
  452|   174k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|  57.4k|    {
 5830|  57.4k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|   174k|    {
 5681|   174k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  57.4k|    {
 1430|  57.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  57.4k|    {
  437|  57.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   310k|    {
 5374|   310k|        return m_args;
 5375|   310k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  5.22M|    {
 3316|  5.22M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   936k|{
 7696|   936k|    return s;
 7697|   936k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   936k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   155k|    {
 7971|   155k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   169k|    {
 1598|   169k|        return has_value();
 1599|   169k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   226k|    {
  485|   226k|        return m_has_value;
  486|   226k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|  57.4k|    {
 1673|  57.4k|        return &value();
 1674|  57.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  57.4k|    {
 1627|  57.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  57.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  57.4k|        return this->get_value();
 1629|  57.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  57.4k|    {
  451|  57.4k|        return m_value;
  452|  57.4k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   174k|    {
 5698|   174k|        return ranges::begin(m_range);
 5699|   174k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   234k|{
 8607|   234k|#if !SCN_DISABLE_LOCALE
 8608|   234k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   234k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   234k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   234k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 154k, False: 79.4k]
  |  |  ------------------
  ------------------
 8615|   154k|        return unexpected(result.error());
 8616|   154k|    }
 8617|  79.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  79.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   234k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  27.4k|{
 5155|  27.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  27.4k|    basic_scan_arg<Context> arg;
 5158|  27.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  27.4k|    arg.m_value = make_value<Context>(value);
 5160|  27.4k|    return arg;
 5161|  27.4k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  1.01M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  41.5k|{
 8631|  41.5k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  41.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  41.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.8k, False: 15.7k]
  |  |  ------------------
  ------------------
 8635|  25.8k|        return unexpected(result.error());
 8636|  25.8k|    }
 8637|  15.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  41.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  15.7k|    {
 1663|  15.7k|        return std::move(value());
 1664|  15.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   312k|{
 5396|   312k|    detail::check_scan_arg_types<Args...>();
 5397|   312k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   312k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   312k|    {
 5349|   312k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   312k|    {
 5360|   312k|        return {detail::make_arg<
 5361|   312k|            kind, Context,
 5362|   312k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   312k|                                 typename Context::char_type>::value>(args)...};
 5364|   312k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   312k|{
 5170|   312k|    return make_value<Context>(value).ref_value;
 5171|   312k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   339k|{
 5120|   339k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   339k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   339k|                                  needs_context_tag>) {
 5124|   339k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   339k|    }
 5126|   339k|    else {
 5127|   339k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   339k|            value, context_tag<Context>{}));
 5129|   339k|    }
 5130|   339k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   339k|    {                                                                        \
 4959|   339k|        return val;                                                          \
 4960|   339k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   156k|    {
 7975|   156k|        return m_str;
 7976|   156k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   312k|    {
 5426|   312k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   312k|    {
 5379|   312k|        return m_argptrs;
 5380|   312k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   156k|{
 8820|   156k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 52.8k]
  |  |  ------------------
  ------------------
 8821|   103k|        return unexpected(result.error());
 8822|   103k|    }
 8823|  52.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.8k|    static_cast<    \
  |  |  929|  52.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.8k|    static_cast<    \
  |  |  929|  52.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   156k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|   111k|    {
 1476|   111k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|   111k|    {
  447|   111k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   169k|    {
 1177|   169k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|  58.1k|    {
 5830|  58.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  58.1k|    {
 1430|  58.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  58.1k|    {
  437|  58.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   312k|    {
 5374|   312k|        return m_args;
 5375|   312k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   156k|    {
 7971|   156k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   169k|    {
 1598|   169k|        return has_value();
 1599|   169k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   228k|    {
  485|   228k|        return m_has_value;
  486|   228k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|  58.1k|    {
 1673|  58.1k|        return &value();
 1674|  58.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  58.1k|    {
 1627|  58.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  58.1k|        return this->get_value();
 1629|  58.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  58.1k|    {
  451|  58.1k|        return m_value;
  452|  58.1k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  27.6k|{
 5155|  27.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  27.6k|    basic_scan_arg<Context> arg;
 5158|  27.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  27.6k|    arg.m_value = make_value<Context>(value);
 5160|  27.6k|    return arg;
 5161|  27.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   313k|{
 5396|   313k|    detail::check_scan_arg_types<Args...>();
 5397|   313k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   313k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   313k|    {
 5349|   313k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   313k|    {
 5360|   313k|        return {detail::make_arg<
 5361|   313k|            kind, Context,
 5362|   313k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   313k|                                 typename Context::char_type>::value>(args)...};
 5364|   313k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   313k|{
 5170|   313k|    return make_value<Context>(value).ref_value;
 5171|   313k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   341k|{
 5120|   341k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   341k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   341k|                                  needs_context_tag>) {
 5124|   341k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   341k|    }
 5126|   341k|    else {
 5127|   341k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   341k|            value, context_tag<Context>{}));
 5129|   341k|    }
 5130|   341k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   341k|    {                                                                        \
 4959|   341k|        return val;                                                          \
 4960|   341k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   156k|    {
 7975|   156k|        return m_str;
 7976|   156k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   313k|    {
 5426|   313k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   313k|    {
 5379|   313k|        return m_argptrs;
 5380|   313k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   156k|{
 8820|   156k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 53.7k]
  |  |  ------------------
  ------------------
 8821|   103k|        return unexpected(result.error());
 8822|   103k|    }
 8823|  53.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  53.7k|    static_cast<    \
  |  |  929|  53.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  53.7k|    static_cast<    \
  |  |  929|  53.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   156k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|   111k|    {
 1476|   111k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|   111k|    {
  447|   111k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   170k|    {
 1177|   170k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  59.0k|    {
 5830|  59.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  59.0k|    {
 1430|  59.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  59.0k|    {
  437|  59.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   313k|    {
 5374|   313k|        return m_args;
 5375|   313k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   156k|    {
 7971|   156k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   170k|    {
 1598|   170k|        return has_value();
 1599|   170k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   229k|    {
  485|   229k|        return m_has_value;
  486|   229k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  59.0k|    {
 1673|  59.0k|        return &value();
 1674|  59.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  59.0k|    {
 1627|  59.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.0k|        return this->get_value();
 1629|  59.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  59.0k|    {
  451|  59.0k|        return m_value;
  452|  59.0k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  27.8k|{
 5155|  27.8k|    check_scan_arg_types<T>();
 5156|       |
 5157|  27.8k|    basic_scan_arg<Context> arg;
 5158|  27.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  27.8k|    arg.m_value = make_value<Context>(value);
 5160|  27.8k|    return arg;
 5161|  27.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   335k|    {
 2724|   335k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   335k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   335k|    {
 2705|   335k|        return decay_copy(t.begin());
 2706|   335k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  8.98M|{
 1949|  8.98M|    return SCN_FWD(t);
  ------------------
  |  |  930|  8.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  8.98M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.01M|    {
 2781|  1.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.01M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.01M|    {
 2763|  1.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.01M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   234k|{
 8591|   234k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   234k|    auto result = vscan_impl(buffer, format, args);
 8594|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 154k, False: 79.2k]
  |  |  ------------------
  ------------------
 8595|   154k|        return unexpected(result.error());
 8596|   154k|    }
 8597|  79.2k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  79.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   234k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   509k|{
 4720|   509k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   509k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   509k|                  "\n"
 4724|   509k|                  "Unsupported range type given as input to a scanning "
 4725|   509k|                  "function.\n"
 4726|   509k|                  "A range needs to have a character type (value type) "
 4727|   509k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   509k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   509k|                  "to be included.\n"
 4730|   509k|                  "See the scnlib documentation for more details.");
 4731|   509k|    static_assert(
 4732|   509k|        !std::is_same_v<T, custom_char_traits>,
 4733|   509k|        "\n"
 4734|   509k|        "Unsupported range type given as input to a scanning "
 4735|   509k|        "function.\n"
 4736|   509k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   509k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   509k|        "not supported.");
 4739|   509k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   509k|                  "\n"
 4741|   509k|                  "Unsupported range type given as input to a scanning "
 4742|   509k|                  "function.\n"
 4743|   509k|                  "file_marker_found cannot be used as an "
 4744|   509k|                  "source range type to scn::scan.\n"
 4745|   509k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   509k|                  "and do not provide an explicit source range, "
 4747|   509k|                  "or use scn::scan with a FILE* directly.");
 4748|   509k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   509k|                  "\n"
 4750|   509k|                  "Unsupported range type given as input to a scanning "
 4751|   509k|                  "function.\n"
 4752|   509k|                  "In order to be scannable, a range needs to satisfy "
 4753|   509k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   509k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   509k|                  "\n"
 4756|   509k|                  "Unsupported range type given as input to a scanning "
 4757|   509k|                  "function.\n"
 4758|   509k|                  "A range needs to model forward_range and have a valid "
 4759|   509k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   509k|                  "Examples of scannable ranges are std::string, "
 4761|   509k|                  "std::string_view, "
 4762|   509k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   509k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   509k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   509k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   509k|{
 4690|   509k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   509k|        return file_marker_found{};
 4692|   509k|    }
 4693|   509k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   509k|        if constexpr (ranges::range<Range>) {
 4695|   509k|            return insufficient_range{};
 4696|   509k|        }
 4697|   509k|        else {
 4698|   509k|            return invalid_input_range{};
 4699|   509k|        }
 4700|   509k|    }
 4701|   509k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   509k|        return invalid_char_type{};
 4703|   509k|    }
 4704|   509k|    else {
 4705|   509k|        return make_forward_scan_buffer(r);
 4706|   509k|    }
 4707|   509k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   509k|{
 4524|   509k|    return basic_scan_forward_buffer_impl(range);
 4525|   509k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   509k|    {
 4411|   509k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   509k|    {
 4382|   509k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   509k|    {
 4151|   509k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   509k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   683k|    {
 2724|   683k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   683k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   683k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   683k|    {
 2705|   683k|        return decay_copy(t.begin());
 2706|   683k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|   858k|    {
 3330|   858k|        return m_iterator;
 3331|   858k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  2.32M|    {
 4415|  2.32M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 183k, False: 2.13M]
  ------------------
 4416|   183k|            return false;
 4417|   183k|        }
 4418|  2.13M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  2.13M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  2.13M|        }
 4421|  2.13M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.62M, False: 508k]
  ------------------
 4422|  1.62M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.62M|                                          this->m_current_view.begin(),
 4424|  1.62M|                                          this->m_current_view.end());
 4425|  1.62M|        }
 4426|  2.13M|        m_latest = *m_cursor;
 4427|  2.13M|        ++m_cursor;
 4428|  2.13M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  2.13M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  2.13M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  2.13M|        }
 4432|  2.13M|        return true;
 4433|  2.13M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.59M|    {
 2781|  6.59M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.59M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.59M|    {
 2763|  6.59M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.59M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  6.76M|    {
 3334|  6.76M|        return m_sentinel;
 3335|  6.76M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   509k|    {
 4071|   509k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   509k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   509k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   335k|    {
 1476|   335k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   335k|    {
  447|   335k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   509k|    {
 1177|   509k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   174k|{
 5923|   174k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   174k|                      ranges::iterator_t<SourceRange>>) {
 5925|   174k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   174k|    }
 5927|   174k|    else {
 5928|   174k|        auto it = ranges::begin(source);
 5929|   174k|        while (n > 0) {
 5930|   174k|            --n;
 5931|   174k|            ++it;
 5932|   174k|        }
 5933|   174k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   174k|    }
 5935|   174k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   174k|    {
 2724|   174k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   174k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   174k|    {
 2705|   174k|        return decay_copy(t.begin());
 2706|   174k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   174k|{
 5910|   174k|    return ranges::end(source);
 5911|   174k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   174k|    {
 2781|   174k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   174k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   174k|    {
 2763|   174k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   174k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   174k|    {
 1430|   174k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   174k|    {
  437|   174k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   155k|    {
 7975|   155k|        return m_str;
 7976|   155k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   155k|{
 8820|   155k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 52.2k]
  |  |  ------------------
  ------------------
 8821|   103k|        return unexpected(result.error());
 8822|   103k|    }
 8823|  52.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.2k|    static_cast<    \
  |  |  929|  52.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.2k|    static_cast<    \
  |  |  929|  52.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   155k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   509k|    {
 1598|   509k|        return has_value();
 1599|   509k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.01M|    {
  485|  1.01M|        return m_has_value;
  486|  1.01M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   335k|    {
 1604|   335k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   335k|        return this->get_unexpected().error();
 1606|   335k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   335k|    {
  468|   335k|        return m_unexpected;
  469|   335k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|   111k|    {
 1476|   111k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|   111k|    {
  447|   111k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   169k|    {
 1177|   169k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   158k|    {
 1653|   158k|        return value();
 1654|   158k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   174k|    {
 1627|   174k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   174k|        return this->get_value();
 1629|   174k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   174k|    {
  451|   174k|        return m_value;
  452|   174k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|  57.3k|    {
 5830|  57.3k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   174k|    {
 5681|   174k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  57.3k|    {
 1430|  57.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  57.3k|    {
  437|  57.3k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   683k|    {
 3316|   683k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   155k|    {
 7971|   155k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   169k|    {
 1598|   169k|        return has_value();
 1599|   169k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   226k|    {
  485|   226k|        return m_has_value;
  486|   226k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|  57.3k|    {
 1673|  57.3k|        return &value();
 1674|  57.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  57.3k|    {
 1627|  57.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  57.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  57.3k|        return this->get_value();
 1629|  57.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  57.3k|    {
  451|  57.3k|        return m_value;
  452|  57.3k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   174k|    {
 5698|   174k|        return ranges::begin(m_range);
 5699|   174k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   234k|{
 8607|   234k|#if !SCN_DISABLE_LOCALE
 8608|   234k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   234k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   234k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   234k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 154k, False: 79.2k]
  |  |  ------------------
  ------------------
 8615|   154k|        return unexpected(result.error());
 8616|   154k|    }
 8617|  79.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  79.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   234k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  41.4k|{
 8631|  41.4k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  41.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  41.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  41.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.8k, False: 15.6k]
  |  |  ------------------
  ------------------
 8635|  25.8k|        return unexpected(result.error());
 8636|  25.8k|    }
 8637|  15.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  41.4k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  15.6k|    {
 1663|  15.6k|        return std::move(value());
 1664|  15.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   155k|    {
 7975|   155k|        return m_str;
 7976|   155k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   155k|{
 8820|   155k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 52.7k]
  |  |  ------------------
  ------------------
 8821|   103k|        return unexpected(result.error());
 8822|   103k|    }
 8823|  52.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.7k|    static_cast<    \
  |  |  929|  52.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.7k|    static_cast<    \
  |  |  929|  52.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   155k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|   111k|    {
 1476|   111k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|   111k|    {
  447|   111k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   169k|    {
 1177|   169k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  57.9k|    {
 5830|  57.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  57.9k|    {
 1430|  57.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  57.9k|    {
  437|  57.9k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   155k|    {
 7971|   155k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   169k|    {
 1598|   169k|        return has_value();
 1599|   169k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   227k|    {
  485|   227k|        return m_has_value;
  486|   227k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  57.9k|    {
 1673|  57.9k|        return &value();
 1674|  57.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  57.9k|    {
 1627|  57.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  57.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  57.9k|        return this->get_value();
 1629|  57.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  57.9k|    {
  451|  57.9k|        return m_value;
  452|  57.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   156k|    {
 7975|   156k|        return m_str;
 7976|   156k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   156k|{
 8820|   156k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 53.5k]
  |  |  ------------------
  ------------------
 8821|   103k|        return unexpected(result.error());
 8822|   103k|    }
 8823|  53.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  53.5k|    static_cast<    \
  |  |  929|  53.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  53.5k|    static_cast<    \
  |  |  929|  53.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   156k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|   111k|    {
 1476|   111k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|   111k|    {
  447|   111k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   170k|    {
 1177|   170k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  58.9k|    {
 5830|  58.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  58.9k|    {
 1430|  58.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  58.9k|    {
  437|  58.9k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   156k|    {
 7971|   156k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   170k|    {
 1598|   170k|        return has_value();
 1599|   170k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   229k|    {
  485|   229k|        return m_has_value;
  486|   229k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  58.9k|    {
 1673|  58.9k|        return &value();
 1674|  58.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  58.9k|    {
 1627|  58.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  58.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  58.9k|        return this->get_value();
 1629|  58.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  58.9k|    {
  451|  58.9k|        return m_value;
  452|  58.9k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  8.01M|    {
 3568|  8.01M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  8.01M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  8.01M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  34.1M|    {
 3574|  34.1M|        return m_code == good;
 3575|  34.1M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   774k|    {
 3585|   774k|        return m_code;
 3586|   774k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|   149M|    {
 3330|   149M|        return m_iterator;
 3331|   149M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  18.5M|    {
 3330|  18.5M|        return m_iterator;
 3331|  18.5M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  5.29M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|  1.46M|    {
 6272|  1.46M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.46M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|  1.46M|            m_specs.localized = true;
 6274|  1.46M|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|  1.46M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  3.83M|    {
 6303|  3.83M|        m_specs.type = type;
 6304|  3.83M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  5.29M|    {
 6376|  5.29M|        return static_cast<bool>(m_error);
 6377|  5.29M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   774k|{
 3609|   774k|    return a.code() == b;
 3610|   774k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   774k|{
 3613|   774k|    return !(a == b);
 3614|   774k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.46M|{
 7063|  1.46M|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 1.46M]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.46M]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.46M]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 1.46M]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.46M]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.46M]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.46M]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.46M]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 1.46M]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.46M]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.46M]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.46M]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 1.46M]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 1.46M]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 1.46M]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.46M]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   456k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 456k, False: 1.00M]
  ------------------
 7091|   954k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 498k, False: 962k]
  ------------------
 7092|  1.46M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 505k, False: 954k]
  ------------------
 7093|  1.46M|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 1.46M]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 1.46M]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.46M]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 1.46M]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.46M]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.46M]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.46M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.46M|            SCN_CLANG_POP
 7110|  1.46M|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.46M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  6.37M|    {
 2896|  6.37M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  6.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  6.37M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  6.37M|    {
 2930|  6.37M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  6.37M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  6.37M|    {
 2953|  6.37M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  6.37M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  6.37M|    {
 2962|  6.37M|        return fn::impl(std::forward<T>(t));
 2963|  6.37M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|  1.44k|{
 3654|  1.44k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.44k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.65k|{
 3654|  2.65k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.65k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  51.4k|{
 3654|  51.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  51.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  51.4k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  5.29M|{
 7193|  5.29M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 3.83M, False: 1.46M]
  ------------------
 7194|  5.29M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 3.83M]
  ------------------
 7195|  3.83M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 3.83M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  5.29M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   966M|    {
 4195|   966M|        return m_end == nullptr;
 4196|   966M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  2.57M|{
 3715|  2.57M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  2.57M|                                          const CharT*, const CharT*>) {
 3717|  2.57M|        return {first, last};
 3718|  2.57M|    }
 3719|  2.57M|    else {
 3720|  2.57M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  2.57M|    }
 3722|  2.57M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  12.4M|    {
 4211|  12.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 12.4M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  12.4M|        return parent()->get_segment_starting_at(position());
 4217|  12.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   538M|    {
 4205|   538M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   538M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   538M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   538M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   538M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  12.4M|    {
 4101|  12.4M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  12.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53M, False: 6.93M]
  |  |  ------------------
  ------------------
 4102|  12.4M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  5.53M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  5.53M|        }
 4105|  6.93M|        const auto start = pos - m_putback_buffer.size();
 4106|  6.93M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  6.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  6.93M|        return m_current_view.substr(start);
 4108|  6.93M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  8.68M|    {
 4200|  8.68M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  8.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  8.68M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  8.68M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  22.8M|    {
 4190|  22.8M|        return m_position;
 4191|  22.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  9.81M|    {
 4123|  9.81M|        return m_is_contiguous;
 4124|  9.81M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  54.5M|    {
 4195|  54.5M|        return m_end == nullptr;
 4196|  54.5M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   168k|{
 3715|   168k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   168k|                                          const CharT*, const CharT*>) {
 3717|   168k|        return {first, last};
 3718|   168k|    }
 3719|   168k|    else {
 3720|   168k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   168k|    }
 3722|   168k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|   861k|    {
 4211|   861k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 861k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   861k|        return parent()->get_segment_starting_at(position());
 4217|   861k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  29.3M|    {
 4205|  29.3M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  29.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  29.3M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  29.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|   861k|    {
 4101|   861k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   861k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 343k, False: 517k]
  |  |  ------------------
  ------------------
 4102|   861k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   343k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   343k|        }
 4105|   517k|        const auto start = pos - m_putback_buffer.size();
 4106|   517k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   517k|        return m_current_view.substr(start);
 4108|   517k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  1.30M|    {
 4200|  1.30M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.30M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.30M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  2.22M|    {
 4190|  2.22M|        return m_position;
 4191|  2.22M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.52M|    {
 4123|  1.52M|        return m_is_contiguous;
 4124|  1.52M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  28.1M|    {
 3180|  28.1M|        return static_cast<D&>(*this);
 3181|  28.1M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  14.0M|    {
 2978|  14.0M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  14.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  14.0M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  14.0M|    {
 3005|  14.0M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  14.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  14.0M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  14.0M|    {
 3221|  14.0M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 19.5k, False: 14.0M]
  ------------------
 3222|  14.0M|                   ? nullptr
 3223|  14.0M|                   : std::addressof(*ranges::begin(derived()));
 3224|  14.0M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   707k|    {
 3180|   707k|        return static_cast<D&>(*this);
 3181|   707k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   353k|    {
 2978|   353k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   353k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   353k|    {
 3005|   353k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   353k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   353k|    {
 3221|   353k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 353k]
  ------------------
 3222|   353k|                   ? nullptr
 3223|   353k|                   : std::addressof(*ranges::begin(derived()));
 3224|   353k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  2.36M|    {
 8169|  2.36M|        return ranges::subrange{begin(), end()};
 8170|  2.36M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  6.95M|    {
 8153|  6.95M|        return m_current;
 8154|  6.95M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  2.36M|    {
 8161|  2.36M|        return ranges::default_sentinel;
 8162|  2.36M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  36.5M|    {
 3316|  36.5M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  11.3M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.27M|    {
 1837|  3.27M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.27M|                                            std::forward<F>(f));
 1839|  3.27M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  3.27M|{
 1323|  3.27M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.27M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.27M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.27M|            return result(*std::forward<Exp>(exp));
 1327|  3.27M|        }
 1328|       |
 1329|  3.27M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.27M|        return result(unexpect, monostate{});
 1331|  3.27M|    }
 1332|  3.27M|    else {
 1333|  3.27M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.27M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.27M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.24M, False: 32.4k]
  |  |  ------------------
  ------------------
 1335|  3.27M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.27M|                   : result(unexpect,
 1337|  32.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  32.4k|                                           std::forward<Exp>(exp).error()));
 1339|  3.27M|    }
 1340|  3.27M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  35.0M|    {
  485|  35.0M|        return m_has_value;
  486|  35.0M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  11.8M|    {
 1663|  11.8M|        return std::move(value());
 1664|  11.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  13.6M|    {
 1627|  13.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  13.6M|        return this->get_value();
 1629|  13.6M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  13.6M|    {
  451|  13.6M|        return m_value;
  452|  13.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  14.7M|    {
 1430|  14.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  14.7M|    {
  437|  14.7M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.5M|    {
 1177|  18.5M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  66.0k|{
 1211|  66.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  66.0k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  90.8k|    {
 1614|  90.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  90.8k|        return std::move(this->get_unexpected().error());
 1616|  90.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|   123k|    {
  468|   123k|        return m_unexpected;
  469|   123k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   565k|    {
  361|   565k|        return m_unexpected;
  362|   565k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  3.21M|    {
 1486|  3.21M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  3.63M|    {
  447|  3.63M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   385k|    {
 8169|   385k|        return ranges::subrange{begin(), end()};
 8170|   385k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   897k|    {
 8153|   897k|        return m_current;
 8154|   897k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   385k|    {
 8161|   385k|        return ranges::default_sentinel;
 8162|   385k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  4.32M|    {
 3316|  4.32M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   509k|    {
 1837|   509k|        return detail::transform_error_impl(std::move(*this),
 1838|   509k|                                            std::forward<F>(f));
 1839|   509k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   509k|{
 1323|   509k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   509k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   509k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   509k|            return result(*std::forward<Exp>(exp));
 1327|   509k|        }
 1328|       |
 1329|   509k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   509k|        return result(unexpect, monostate{});
 1331|   509k|    }
 1332|   509k|    else {
 1333|   509k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   509k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   509k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 506k, False: 2.96k]
  |  |  ------------------
  ------------------
 1335|   509k|                   ? result(*std::forward<Exp>(exp))
 1336|   509k|                   : result(unexpect,
 1337|  2.96k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.96k|                                           std::forward<Exp>(exp).error()));
 1339|   509k|    }
 1340|   509k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.47M|    {
  485|  4.47M|        return m_has_value;
  486|  4.47M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.75M|    {
 1663|  1.75M|        return std::move(value());
 1664|  1.75M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.76M|    {
 1627|  1.76M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.76M|        return this->get_value();
 1629|  1.76M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.76M|    {
  451|  1.76M|        return m_value;
  452|  1.76M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  1.15M|    {
 1430|  1.15M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.15M|    {
  437|  1.15M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.92M|    {
 1177|  2.92M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  60.7k|    {
 1614|  60.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  60.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  60.7k|        return std::move(this->get_unexpected().error());
 1616|  60.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  62.0k|    {
  468|  62.0k|        return m_unexpected;
  469|  62.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   837k|    {
 1486|   837k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.76M|    {
  447|  1.76M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   294k|    {
  347|   294k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   294k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   294k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   371k|    {
 1476|   371k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  3.35M|    {
  447|  3.35M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.4M|    {
 1177|  17.4M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  13.9M|    {
 1430|  13.9M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  13.9M|    {
  437|  13.9M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  20.4M|    {
 1598|  20.4M|        return has_value();
 1599|  20.4M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  32.0M|    {
  485|  32.0M|        return m_has_value;
  486|  32.0M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   443k|    {
 1604|   443k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   443k|        return this->get_unexpected().error();
 1606|   443k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   443k|    {
  468|   443k|        return m_unexpected;
  469|   443k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  8.98M|    {
 1663|  8.98M|        return std::move(value());
 1664|  8.98M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  11.1M|    {
 1627|  11.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  11.1M|        return this->get_value();
 1629|  11.1M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  11.1M|    {
  451|  11.1M|        return m_value;
  452|  11.1M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   747k|    {
 1476|   747k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.40M|    {
  447|  1.40M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.92M|    {
 1177|  2.92M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.51M|    {
 1430|  1.51M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.51M|    {
  437|  1.51M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  3.43M|    {
 1598|  3.43M|        return has_value();
 1599|  3.43M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  5.49M|    {
  485|  5.49M|        return m_has_value;
  486|  5.49M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   900k|    {
 1604|   900k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   900k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   900k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   900k|        return this->get_unexpected().error();
 1606|   900k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   900k|    {
  468|   900k|        return m_unexpected;
  469|   900k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.03M|    {
 1663|  1.03M|        return std::move(value());
 1664|  1.03M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.16M|    {
 1627|  1.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.16M|        return this->get_value();
 1629|  1.16M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.16M|    {
  451|  1.16M|        return m_value;
  452|  1.16M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  3.09M|    {
 1837|  3.09M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.09M|                                            std::forward<F>(f));
 1839|  3.09M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  3.09M|{
 1323|  3.09M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.09M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.09M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.09M|            return result(*std::forward<Exp>(exp));
 1327|  3.09M|        }
 1328|       |
 1329|  3.09M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.09M|        return result(unexpect, monostate{});
 1331|  3.09M|    }
 1332|  3.09M|    else {
 1333|  3.09M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.09M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.06M, False: 27.6k]
  |  |  ------------------
  ------------------
 1335|  3.09M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.09M|                   : result(unexpect,
 1337|  27.6k|                            trivial_invoke(std::forward<F>(f),
 1338|  27.6k|                                           std::forward<Exp>(exp).error()));
 1339|  3.09M|    }
 1340|  3.09M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  11.8M|    {
  485|  11.8M|        return m_has_value;
  486|  11.8M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  3.06M|    {
 1663|  3.06M|        return std::move(value());
 1664|  3.06M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  4.14M|    {
 1627|  4.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.14M|        return this->get_value();
 1629|  4.14M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  4.14M|    {
  451|  4.14M|        return m_value;
  452|  4.14M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  27.6k|    {
 1614|  27.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  27.6k|        return std::move(this->get_unexpected().error());
 1616|  27.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  35.0k|    {
  468|  35.0k|        return m_unexpected;
  469|  35.0k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.98M|    {
 1486|  2.98M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  23.5M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   421k|    {
 1476|   421k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  29.1M|    {
 4280|  29.1M|        return x.is_at_end();
 4281|  29.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  73.2M|    {
 4324|  73.2M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 73.2M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  73.2M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 73.2M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  73.2M|        return !read_at_position();
 4331|  73.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   316M|    {
 4304|   316M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   316M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   316M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   316M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 316M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   316M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   316M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 273M, False: 42.9M]
  |  |  ------------------
  ------------------
 4311|   273M|            return true;
 4312|   273M|        }
 4313|       |
 4314|  85.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 42.9M, False: 42.4M]
  ------------------
 4315|  42.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 473k, False: 42.4M]
  ------------------
 4316|   473k|                return false;
 4317|   473k|            }
 4318|  42.9M|        }
 4319|  42.4M|        return true;
 4320|  42.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   410M|    {
 4081|   410M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   410M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  81.0M|    {
 4239|  81.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  81.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  81.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 81.0M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  81.0M|        auto res = read_at_position();
 4248|  81.0M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  81.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  81.0M|        return parent()->get_character_at(m_position);
 4250|  81.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  81.0M|    {
 4112|  81.0M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  81.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.0M, False: 30.9M]
  |  |  ------------------
  ------------------
 4113|  81.0M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  50.0M|            return m_putback_buffer[pos];
 4115|  50.0M|        }
 4116|  30.9M|        const auto start = pos - m_putback_buffer.size();
 4117|  30.9M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  30.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  30.9M|        return m_current_view[start];
 4119|  30.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  21.1M|    {
 1430|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  21.1M|    {
  437|  21.1M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3M|    {
 1177|  21.3M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   174k|    {
  347|   174k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   174k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   174k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   123k|    {
 1476|   123k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   123k|    {
  447|   123k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   282k|    {
  356|   282k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   282k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   282k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  9.35M|    {
 1598|  9.35M|        return has_value();
 1599|  9.35M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  1.73M|    {
 1653|  1.73M|        return value();
 1654|  1.73M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  77.5M|    {
 4274|  77.5M|        return !(lhs == rhs);
 4275|  77.5M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  86.1M|    {
 4269|  86.1M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 86.1M, False: 0]
  |  Branch (4269:46): [True: 11.0M, False: 75.1M]
  ------------------
 4270|  86.1M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|   162M|    {
 4225|   162M|        ++m_position;
 4226|   162M|        (void)read_at_position();
 4227|   162M|        return *this;
 4228|   162M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|   108k|    {
  347|   108k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   108k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   108k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  24.5k|    {
 1476|  24.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  24.5k|    {
  447|  24.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.57M|    {
 1177|  4.57M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  4.54M|    {
 1430|  4.54M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  4.54M|    {
  437|  4.54M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  4.57M|    {
 1598|  4.57M|        return has_value();
 1599|  4.57M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.14M|    {
  485|  9.14M|        return m_has_value;
  486|  9.14M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  24.5k|    {
 1604|  24.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  24.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  24.5k|        return this->get_unexpected().error();
 1606|  24.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  24.5k|    {
  468|  24.5k|        return m_unexpected;
  469|  24.5k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.54M|    {
 1663|  4.54M|        return std::move(value());
 1664|  4.54M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.54M|    {
 1627|  4.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.54M|        return this->get_value();
 1629|  4.54M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.54M|    {
  451|  4.54M|        return m_value;
  452|  4.54M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|   104M|    {
 3334|   104M|        return m_sentinel;
 3335|   104M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|   102k|    {
  347|   102k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   102k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   102k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  28.5M|    {
  361|  28.5M|        return m_unexpected;
  362|  28.5M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  7.67M|    {
  356|  7.67M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  7.67M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  7.67M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  35.2M|    {
  347|  35.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  35.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  35.2M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  35.2M|    {
  361|  35.2M|        return m_unexpected;
  362|  35.2M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  35.2M|    {
  356|  35.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  35.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  35.2M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   174k|{
 1211|   174k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   174k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  7.40M|    {
  347|  7.40M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  7.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  7.40M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  33.0k|    {
 1604|  33.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  33.0k|        return this->get_unexpected().error();
 1606|  33.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  3.28M|    {
 1476|  3.28M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  3.34M|    {
  447|  3.34M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  36.3M|    {
 1177|  36.3M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  1.75M|    {
 1430|  1.75M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.75M|    {
  437|  1.75M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  18.5M|    {
 1476|  18.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  18.5M|    {
  447|  18.5M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  39.5M|    {
 1598|  39.5M|        return has_value();
 1599|  39.5M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  69.7M|    {
  485|  69.7M|        return m_has_value;
  486|  69.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  9.08M|    {
 1604|  9.08M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  9.08M|        return this->get_unexpected().error();
 1606|  9.08M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  9.08M|    {
  468|  9.08M|        return m_unexpected;
  469|  9.08M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  3.54M|    {
 1430|  3.54M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  3.54M|    {
  437|  3.54M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.54M|    {
 1177|  3.54M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    535|    {
 1476|    535|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    535|    {
  447|    535|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  9.26M|    {
 1653|  9.26M|        return value();
 1654|  9.26M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  17.8M|    {
 1627|  17.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  17.8M|        return this->get_value();
 1629|  17.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  17.8M|    {
  451|  17.8M|        return m_value;
  452|  17.8M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   308k|    {
 1598|   308k|        return has_value();
 1599|   308k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  7.09M|    {
  485|  7.09M|        return m_has_value;
  486|  7.09M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  3.24M|    {
 1663|  3.24M|        return std::move(value());
 1664|  3.24M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  3.54M|    {
 1627|  3.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.54M|        return this->get_value();
 1629|  3.54M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  3.54M|    {
  451|  3.54M|        return m_value;
  452|  3.54M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  8.68M|    {
 1837|  8.68M|        return detail::transform_error_impl(std::move(*this),
 1838|  8.68M|                                            std::forward<F>(f));
 1839|  8.68M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  8.68M|{
 1323|  8.68M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  8.68M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  8.68M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  8.68M|            return result(*std::forward<Exp>(exp));
 1327|  8.68M|        }
 1328|       |
 1329|  8.68M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  8.68M|        return result(unexpect, monostate{});
 1331|  8.68M|    }
 1332|  8.68M|    else {
 1333|  8.68M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.68M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.68M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.62M, False: 58.4k]
  |  |  ------------------
  ------------------
 1335|  8.68M|                   ? result(*std::forward<Exp>(exp))
 1336|  8.68M|                   : result(unexpect,
 1337|  58.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  58.4k|                                           std::forward<Exp>(exp).error()));
 1339|  8.68M|    }
 1340|  8.68M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  12.6M|    {
 1430|  12.6M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  12.6M|    {
  437|  12.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  58.4k|    {
 1486|  58.4k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  8.62M|    {
 1663|  8.62M|        return std::move(value());
 1664|  8.62M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  3.74M|    {
 3330|  3.74M|        return m_iterator;
 3331|  3.74M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  3.74M|    {
 3334|  3.74M|        return m_sentinel;
 3335|  3.74M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  21.7M|    {
 1598|  21.7M|        return has_value();
 1599|  21.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.1M|    {
  485|  34.1M|        return m_has_value;
  486|  34.1M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   553k|    {
 1604|   553k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   553k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   553k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   553k|        return this->get_unexpected().error();
 1606|   553k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   553k|    {
  468|   553k|        return m_unexpected;
  469|   553k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  9.46M|    {
 1663|  9.46M|        return std::move(value());
 1664|  9.46M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  11.8M|    {
 1627|  11.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  11.8M|        return this->get_value();
 1629|  11.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  11.8M|    {
  451|  11.8M|        return m_value;
  452|  11.8M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  5.93M|{
  326|  5.93M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  5.93M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  2.96M|    {
 3316|  2.96M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  44.1M|    {
 4291|  44.1M|        return !x.is_at_end();
 4292|  44.1M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  35.0k|    {
 1476|  35.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  35.0k|    {
  447|  35.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.64M|    {
 1177|  7.64M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  7.60M|    {
 1430|  7.60M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  7.60M|    {
  437|  7.60M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  4.55M|    {
 1598|  4.55M|        return has_value();
 1599|  4.55M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.07M|    {
 1653|  1.07M|        return value();
 1654|  1.07M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  19.8k|    {
 1476|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  19.8k|    {
  447|  19.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.18M|    {
 1177|  4.18M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  4.16M|    {
 1430|  4.16M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  4.16M|    {
  437|  4.16M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  4.18M|    {
 1598|  4.18M|        return has_value();
 1599|  4.18M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  8.37M|    {
  485|  8.37M|        return m_has_value;
  486|  8.37M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  19.8k|    {
 1604|  19.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.8k|        return this->get_unexpected().error();
 1606|  19.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  19.8k|    {
  468|  19.8k|        return m_unexpected;
  469|  19.8k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  4.16M|    {
 1663|  4.16M|        return std::move(value());
 1664|  4.16M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  4.16M|    {
 1627|  4.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.16M|        return this->get_value();
 1629|  4.16M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.16M|    {
  451|  4.16M|        return m_value;
  452|  4.16M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  7.35k|    {
 1604|  7.35k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.35k|        return this->get_unexpected().error();
 1606|  7.35k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  3.08M|    {
 1476|  3.08M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  3.08M|    {
  447|  3.08M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.5M|    {
 1177|  17.5M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  1.09M|    {
 1430|  1.09M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.09M|    {
  437|  1.09M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  12.0M|    {
 1476|  12.0M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  12.0M|    {
  447|  12.0M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  20.5M|    {
 1598|  20.5M|        return has_value();
 1599|  20.5M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  35.1M|    {
  485|  35.1M|        return m_has_value;
  486|  35.1M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  8.29M|    {
 1604|  8.29M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.29M|        return this->get_unexpected().error();
 1606|  8.29M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  8.29M|    {
  468|  8.29M|        return m_unexpected;
  469|  8.29M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.15M|    {
 1430|  3.15M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.15M|    {
  437|  3.15M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.15M|    {
 1177|  3.15M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    168|    {
 1476|    168|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    168|    {
  447|    168|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.29M|    {
 1653|  3.29M|        return value();
 1654|  3.29M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.29M|    {
 1627|  3.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.29M|        return this->get_value();
 1629|  3.29M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  3.29M|    {
  451|  3.29M|        return m_value;
  452|  3.29M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  91.4k|    {
 1598|  91.4k|        return has_value();
 1599|  91.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  6.31M|    {
  485|  6.31M|        return m_has_value;
  486|  6.31M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.06M|    {
 1663|  3.06M|        return std::move(value());
 1664|  3.06M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.15M|    {
 1627|  3.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.15M|        return this->get_value();
 1629|  3.15M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.15M|    {
  451|  3.15M|        return m_value;
  452|  3.15M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.29M|    {
 1430|  1.29M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.29M|    {
  437|  1.29M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  5.93M|    {
 2855|  5.93M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  5.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  5.93M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  5.93M|    {
 2836|  5.93M|        return t.data();
 2837|  5.93M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|  1.53M|    {
 1476|  1.53M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|  1.53M|    {
  447|  1.53M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.6M|    {
 1177|  20.6M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  18.8M|    {
 1430|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  18.8M|    {
  437|  18.8M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  12.7M|    {
 1663|  12.7M|        return std::move(value());
 1664|  12.7M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  7.63M|{
 1211|  7.63M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  7.63M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  3.24M|    {
 1837|  3.24M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.24M|                                            std::forward<F>(f));
 1839|  3.24M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  3.24M|{
 1323|  3.24M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.24M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.24M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.24M|            return result(*std::forward<Exp>(exp));
 1327|  3.24M|        }
 1328|       |
 1329|  3.24M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.24M|        return result(unexpect, monostate{});
 1331|  3.24M|    }
 1332|  3.24M|    else {
 1333|  3.24M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.24M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.24M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.24M, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.24M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.24M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.24M|    }
 1340|  3.24M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  3.24M|    {
 1430|  3.24M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  3.24M|    {
  437|  3.24M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.24M|    {
 1177|  3.24M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  3.24M|    {
 1598|  3.24M|        return has_value();
 1599|  3.24M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.48M|    {
  485|  6.48M|        return m_has_value;
  486|  6.48M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  3.24M|    {
 1663|  3.24M|        return std::move(value());
 1664|  3.24M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  3.24M|    {
 1627|  3.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.24M|        return this->get_value();
 1629|  3.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.24M|    {
  451|  3.24M|        return m_value;
  452|  3.24M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  3.18M|    {
 1823|  3.18M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  3.18M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  3.18M|{
 1323|  3.18M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.18M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.18M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.18M|            return result(*std::forward<Exp>(exp));
 1327|  3.18M|        }
 1328|       |
 1329|  3.18M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.18M|        return result(unexpect, monostate{});
 1331|  3.18M|    }
 1332|  3.18M|    else {
 1333|  3.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 3.18M]
  |  |  ------------------
  ------------------
 1335|  3.18M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.18M|                   : result(unexpect,
 1337|  3.18M|                            trivial_invoke(std::forward<F>(f),
 1338|  3.18M|                                           std::forward<Exp>(exp).error()));
 1339|  3.18M|    }
 1340|  3.18M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|   156k|    {
 1430|   156k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   156k|    {
  437|   156k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  2.33M|    {
 1653|  2.33M|        return value();
 1654|  2.33M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   783k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   307k|    {
 1673|   307k|        return &value();
 1674|   307k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  2.30M|    {
 2724|  2.30M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.30M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  2.30M|    {
 2705|  2.30M|        return decay_copy(t.begin());
 2706|  2.30M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  2.30M|{
 1949|  2.30M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.30M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|  1.41M|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  3.06M|    {
 1837|  3.06M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.06M|                                            std::forward<F>(f));
 1839|  3.06M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  3.06M|{
 1323|  3.06M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.06M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.06M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.06M|            return result(*std::forward<Exp>(exp));
 1327|  3.06M|        }
 1328|       |
 1329|  3.06M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.06M|        return result(unexpect, monostate{});
 1331|  3.06M|    }
 1332|  3.06M|    else {
 1333|  3.06M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.06M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.06M, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.06M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.06M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.06M|    }
 1340|  3.06M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  3.06M|    {
 1430|  3.06M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.06M|    {
  437|  3.06M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.06M|    {
 1177|  3.06M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  3.06M|    {
 1598|  3.06M|        return has_value();
 1599|  3.06M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.12M|    {
  485|  6.12M|        return m_has_value;
  486|  6.12M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.06M|    {
 1663|  3.06M|        return std::move(value());
 1664|  3.06M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.06M|    {
 1627|  3.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.06M|        return this->get_value();
 1629|  3.06M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.06M|    {
  451|  3.06M|        return m_value;
  452|  3.06M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  2.95M|    {
 1823|  2.95M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  2.95M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  2.95M|{
 1323|  2.95M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.95M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.95M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.95M|            return result(*std::forward<Exp>(exp));
 1327|  2.95M|        }
 1328|       |
 1329|  2.95M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.95M|        return result(unexpect, monostate{});
 1331|  2.95M|    }
 1332|  2.95M|    else {
 1333|  2.95M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.95M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.95M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.95M]
  |  |  ------------------
  ------------------
 1335|  2.95M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.95M|                   : result(unexpect,
 1337|  2.95M|                            trivial_invoke(std::forward<F>(f),
 1338|  2.95M|                                           std::forward<Exp>(exp).error()));
 1339|  2.95M|    }
 1340|  2.95M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|   154k|    {
 1430|   154k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   154k|    {
  437|   154k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  2.95M|    {
 3648|  2.95M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  2.14M|    {
 1653|  2.14M|        return value();
 1654|  2.14M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  91.2k|    {
 1673|  91.2k|        return &value();
 1674|  91.2k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  3.18M|    {
 3648|  3.18M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   925k|    {
 1476|   925k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  3.73M|    {
 4280|  3.73M|        return x.is_at_end();
 4281|  3.73M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  5.43M|    {
 4324|  5.43M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 5.43M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  5.43M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 5.43M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  5.43M|        return !read_at_position();
 4331|  5.43M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  16.5M|    {
 4304|  16.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  16.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  16.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 16.5M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  16.5M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  16.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.2M, False: 2.32M]
  |  |  ------------------
  ------------------
 4311|  14.2M|            return true;
 4312|  14.2M|        }
 4313|       |
 4314|  4.45M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 2.32M, False: 2.13M]
  ------------------
 4315|  2.32M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 183k, False: 2.13M]
  ------------------
 4316|   183k|                return false;
 4317|   183k|            }
 4318|  2.32M|        }
 4319|  2.13M|        return true;
 4320|  2.32M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  22.3M|    {
 4081|  22.3M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  22.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  5.11M|    {
 4239|  5.11M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  5.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  5.11M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 5.11M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  5.11M|        auto res = read_at_position();
 4248|  5.11M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  5.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  5.11M|        return parent()->get_character_at(m_position);
 4250|  5.11M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  5.11M|    {
 4112|  5.11M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  5.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.35M, False: 762k]
  |  |  ------------------
  ------------------
 4113|  5.11M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  4.35M|            return m_putback_buffer[pos];
 4115|  4.35M|        }
 4116|   762k|        const auto start = pos - m_putback_buffer.size();
 4117|   762k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   762k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   762k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   762k|        return m_current_view[start];
 4119|   762k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.68M|{
 3807|  1.68M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.68M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.68M|    }
 3810|  1.68M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.68M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.68M|    }
 3813|  1.68M|    else {
 3814|       |        // utf-32
 3815|  1.68M|        static_assert(sizeof(U) == 4);
 3816|  1.68M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.68M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.68M|        return 1;
 3818|  1.68M|    }
 3819|  1.68M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  2.59M|    {
 1430|  2.59M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  2.59M|    {
  437|  2.59M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.65M|    {
 1177|  2.65M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  62.0k|    {
 1476|  62.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  62.0k|    {
  447|  62.0k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   839k|    {
 1598|   839k|        return has_value();
 1599|   839k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  8.63k|    {
 1653|  8.63k|        return value();
 1654|  8.63k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  2.14M|    {
 4274|  2.14M|        return !(lhs == rhs);
 4275|  2.14M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  2.98M|    {
 4269|  2.98M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 2.98M, False: 0]
  |  Branch (4269:46): [True: 963k, False: 2.02M]
  ------------------
 4270|  2.98M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  6.04M|    {
 4225|  6.04M|        ++m_position;
 4226|  6.04M|        (void)read_at_position();
 4227|  6.04M|        return *this;
 4228|  6.04M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.68M|{
 4013|  1.68M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.68M|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.68M|    }
 4016|  1.68M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.68M|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.68M|    }
 4019|  1.68M|    else {
 4020|  1.68M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.68M|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.68M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 354k, False: 1.32M]
  |  |  ------------------
  ------------------
 4023|   354k|            return invalid_code_point;
 4024|   354k|        }
 4025|  1.32M|        return cp;
 4026|  1.68M|    }
 4027|  1.68M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.21k|    {
 1476|  2.21k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.21k|    {
  447|  2.21k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   511k|    {
 1177|   511k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   509k|    {
 1430|   509k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   509k|    {
  437|   509k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   511k|    {
 1598|   511k|        return has_value();
 1599|   511k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.02M|    {
  485|  1.02M|        return m_has_value;
  486|  1.02M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.21k|    {
 1604|  2.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.21k|        return this->get_unexpected().error();
 1606|  2.21k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.21k|    {
  468|  2.21k|        return m_unexpected;
  469|  2.21k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   509k|    {
 1663|   509k|        return std::move(value());
 1664|   509k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   509k|    {
 1627|   509k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   509k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   509k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   509k|        return this->get_value();
 1629|   509k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   509k|    {
  451|   509k|        return m_value;
  452|   509k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  8.86M|    {
 3334|  8.86M|        return m_sentinel;
 3335|  8.86M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.30k|    {
 1604|  1.30k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.30k|        return this->get_unexpected().error();
 1606|  1.30k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   565k|    {
 1476|   565k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   623k|    {
  447|   623k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.64M|    {
 1177|  4.64M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  8.63k|    {
 1430|  8.63k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  8.63k|    {
  437|  8.63k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.58M|    {
 1476|  2.58M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.58M|    {
  447|  2.58M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  5.15M|    {
 1598|  5.15M|        return has_value();
 1599|  5.15M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  9.51M|    {
  485|  9.51M|        return m_has_value;
  486|  9.51M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.91M|    {
 1604|  1.91M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.91M|        return this->get_unexpected().error();
 1606|  1.91M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.91M|    {
  468|  1.91M|        return m_unexpected;
  469|  1.91M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   513k|    {
 1430|   513k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   513k|    {
  437|   513k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   513k|    {
 1177|   513k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     66|    {
 1476|     66|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     66|    {
  447|     66|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   371k|    {
 1653|   371k|        return value();
 1654|   371k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.61M|    {
 1627|  1.61M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.61M|        return this->get_value();
 1629|  1.61M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.61M|    {
  451|  1.61M|        return m_value;
  452|  1.61M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  6.56k|    {
 1598|  6.56k|        return has_value();
 1599|  6.56k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.02M|    {
  485|  1.02M|        return m_has_value;
  486|  1.02M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   506k|    {
 1663|   506k|        return std::move(value());
 1664|   506k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   513k|    {
 1627|   513k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   513k|        return this->get_value();
 1629|   513k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   513k|    {
  451|   513k|        return m_value;
  452|   513k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.30M|    {
 1837|  1.30M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.30M|                                            std::forward<F>(f));
 1839|  1.30M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.30M|{
 1323|  1.30M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.30M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.30M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.30M|            return result(*std::forward<Exp>(exp));
 1327|  1.30M|        }
 1328|       |
 1329|  1.30M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.30M|        return result(unexpect, monostate{});
 1331|  1.30M|    }
 1332|  1.30M|    else {
 1333|  1.30M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.30M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.30M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.24M, False: 57.7k]
  |  |  ------------------
  ------------------
 1335|  1.30M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.30M|                   : result(unexpect,
 1337|  57.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  57.7k|                                           std::forward<Exp>(exp).error()));
 1339|  1.30M|    }
 1340|  1.30M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  1.42M|    {
 1430|  1.42M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.42M|    {
  437|  1.42M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  57.7k|    {
 1486|  57.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.24M|    {
 1663|  1.24M|        return std::move(value());
 1664|  1.24M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   189k|    {
 3330|   189k|        return m_iterator;
 3331|   189k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   189k|    {
 3334|   189k|        return m_sentinel;
 3335|   189k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  3.42M|    {
 1598|  3.42M|        return has_value();
 1599|  3.42M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.66M|    {
  485|  5.66M|        return m_has_value;
  486|  5.66M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  1.25M|    {
 1604|  1.25M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.25M|        return this->get_unexpected().error();
 1606|  1.25M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.25M|    {
  468|  1.25M|        return m_unexpected;
  469|  1.25M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   856k|    {
 1663|   856k|        return std::move(value());
 1664|   856k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   983k|    {
 1627|   983k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   983k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   983k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   983k|        return this->get_value();
 1629|   983k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   983k|    {
  451|   983k|        return m_value;
  452|   983k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   351k|{
  304|   351k|    return p;
  305|   351k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   351k|{
  326|   351k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   351k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   175k|    {
 3316|   175k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  1.70M|    {
 4291|  1.70M|        return !x.is_at_end();
 4292|  1.70M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  61.1k|    {
 1476|  61.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  61.1k|    {
  447|  61.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.42M|    {
 1177|  2.42M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.36M|    {
 1430|  2.36M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.36M|    {
  437|  2.36M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   612k|    {
 1598|   612k|        return has_value();
 1599|   612k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.24M|    {
  485|  4.24M|        return m_has_value;
  486|  4.24M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.63k|    {
 1653|  3.63k|        return value();
 1654|  3.63k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.75M|    {
 1627|  1.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.75M|        return this->get_value();
 1629|  1.75M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.75M|    {
  451|  1.75M|        return m_value;
  452|  1.75M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.21k|    {
 1476|  2.21k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.21k|    {
  447|  2.21k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   512k|    {
 1177|   512k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   510k|    {
 1430|   510k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   510k|    {
  437|   510k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   510k|    {
 1837|   510k|        return detail::transform_error_impl(std::move(*this),
 1838|   510k|                                            std::forward<F>(f));
 1839|   510k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   510k|{
 1323|   510k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   510k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   510k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   510k|            return result(*std::forward<Exp>(exp));
 1327|   510k|        }
 1328|       |
 1329|   510k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   510k|        return result(unexpect, monostate{});
 1331|   510k|    }
 1332|   510k|    else {
 1333|   510k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   510k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   510k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 507k, False: 2.96k]
  |  |  ------------------
  ------------------
 1335|   510k|                   ? result(*std::forward<Exp>(exp))
 1336|   510k|                   : result(unexpect,
 1337|  2.96k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.96k|                                           std::forward<Exp>(exp).error()));
 1339|   510k|    }
 1340|   510k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.75M|    {
 1663|  1.75M|        return std::move(value());
 1664|  1.75M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  60.8k|    {
 1614|  60.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  60.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  60.8k|        return std::move(this->get_unexpected().error());
 1616|  60.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  61.1k|    {
  468|  61.1k|        return m_unexpected;
  469|  61.1k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   660k|    {
 1486|   660k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   512k|    {
 1598|   512k|        return has_value();
 1599|   512k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.02M|    {
  485|  1.02M|        return m_has_value;
  486|  1.02M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.21k|    {
 1604|  2.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.21k|        return this->get_unexpected().error();
 1606|  2.21k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.21k|    {
  468|  2.21k|        return m_unexpected;
  469|  2.21k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   510k|    {
 1663|   510k|        return std::move(value());
 1664|   510k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   510k|    {
 1627|   510k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   510k|        return this->get_value();
 1629|   510k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   510k|    {
  451|   510k|        return m_value;
  452|   510k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    336|    {
 1604|    336|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    336|        return this->get_unexpected().error();
 1606|    336|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   565k|    {
 1476|   565k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   623k|    {
  447|   623k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.01M|    {
 1177|  4.01M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  3.63k|    {
 1430|  3.63k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  3.63k|    {
  437|  3.63k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  2.07M|    {
 1476|  2.07M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.07M|    {
  447|  2.07M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  4.52M|    {
 1598|  4.52M|        return has_value();
 1599|  4.52M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  8.29M|    {
  485|  8.29M|        return m_has_value;
  486|  8.29M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.73M|    {
 1604|  1.73M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.73M|        return this->get_unexpected().error();
 1606|  1.73M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.73M|    {
  468|  1.73M|        return m_unexpected;
  469|  1.73M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   509k|    {
 1430|   509k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   509k|    {
  437|   509k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   509k|    {
 1177|   509k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     18|    {
 1476|     18|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     18|    {
  447|     18|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|   140k|    {
 1653|   140k|        return value();
 1654|   140k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.38M|    {
 1627|  1.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.38M|        return this->get_value();
 1629|  1.38M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.38M|    {
  451|  1.38M|        return m_value;
  452|  1.38M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.50k|    {
 1598|  2.50k|        return has_value();
 1599|  2.50k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.01M|    {
  485|  1.01M|        return m_has_value;
  486|  1.01M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   507k|    {
 1663|   507k|        return std::move(value());
 1664|   507k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   509k|    {
 1627|   509k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   509k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   509k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   509k|        return this->get_value();
 1629|   509k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   509k|    {
  451|   509k|        return m_value;
  452|   509k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.30M|    {
 1837|  1.30M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.30M|                                            std::forward<F>(f));
 1839|  1.30M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.30M|{
 1323|  1.30M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.30M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.30M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.30M|            return result(*std::forward<Exp>(exp));
 1327|  1.30M|        }
 1328|       |
 1329|  1.30M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.30M|        return result(unexpect, monostate{});
 1331|  1.30M|    }
 1332|  1.30M|    else {
 1333|  1.30M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.30M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.30M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.24M, False: 57.8k]
  |  |  ------------------
  ------------------
 1335|  1.30M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.30M|                   : result(unexpect,
 1337|  57.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  57.8k|                                           std::forward<Exp>(exp).error()));
 1339|  1.30M|    }
 1340|  1.30M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.31M|    {
 1430|  1.31M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.31M|    {
  437|  1.31M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  57.8k|    {
 1486|  57.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.24M|    {
 1663|  1.24M|        return std::move(value());
 1664|  1.24M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   353k|    {
 2855|   353k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   353k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   353k|    {
 2836|   353k|        return t.data();
 2837|   353k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   506k|    {
 1837|   506k|        return detail::transform_error_impl(std::move(*this),
 1838|   506k|                                            std::forward<F>(f));
 1839|   506k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   506k|{
 1323|   506k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   506k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   506k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   506k|            return result(*std::forward<Exp>(exp));
 1327|   506k|        }
 1328|       |
 1329|   506k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   506k|        return result(unexpect, monostate{});
 1331|   506k|    }
 1332|   506k|    else {
 1333|   506k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   506k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   506k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 506k, False: 0]
  |  |  ------------------
  ------------------
 1335|   506k|                   ? result(*std::forward<Exp>(exp))
 1336|   506k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   506k|    }
 1340|   506k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   506k|    {
 1430|   506k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   506k|    {
  437|   506k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   506k|    {
 1177|   506k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   506k|    {
 1598|   506k|        return has_value();
 1599|   506k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.01M|    {
  485|  1.01M|        return m_has_value;
  486|  1.01M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   506k|    {
 1663|   506k|        return std::move(value());
 1664|   506k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   506k|    {
 1627|   506k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   506k|        return this->get_value();
 1629|   506k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   506k|    {
  451|   506k|        return m_value;
  452|   506k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   834k|    {
 1823|   834k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   834k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   834k|{
 1323|   834k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   834k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   834k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   834k|            return result(*std::forward<Exp>(exp));
 1327|   834k|        }
 1328|       |
 1329|   834k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   834k|        return result(unexpect, monostate{});
 1331|   834k|    }
 1332|   834k|    else {
 1333|   834k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   834k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   834k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 834k]
  |  |  ------------------
  ------------------
 1335|   834k|                   ? result(*std::forward<Exp>(exp))
 1336|   834k|                   : result(unexpect,
 1337|   834k|                            trivial_invoke(std::forward<F>(f),
 1338|   834k|                                           std::forward<Exp>(exp).error()));
 1339|   834k|    }
 1340|   834k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   127k|    {
 1653|   127k|        return value();
 1654|   127k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|  83.8k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  6.50k|    {
 1673|  6.50k|        return &value();
 1674|  6.50k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   422k|    {
 2724|   422k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   422k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   422k|    {
 2705|   422k|        return decay_copy(t.begin());
 2706|   422k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   422k|{
 1949|   422k|    return SCN_FWD(t);
  ------------------
  |  |  930|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   422k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   205k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   507k|    {
 1837|   507k|        return detail::transform_error_impl(std::move(*this),
 1838|   507k|                                            std::forward<F>(f));
 1839|   507k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   507k|{
 1323|   507k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   507k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   507k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   507k|            return result(*std::forward<Exp>(exp));
 1327|   507k|        }
 1328|       |
 1329|   507k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   507k|        return result(unexpect, monostate{});
 1331|   507k|    }
 1332|   507k|    else {
 1333|   507k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   507k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   507k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 507k, False: 0]
  |  |  ------------------
  ------------------
 1335|   507k|                   ? result(*std::forward<Exp>(exp))
 1336|   507k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   507k|    }
 1340|   507k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   507k|    {
 1430|   507k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   507k|    {
  437|   507k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   507k|    {
 1177|   507k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   507k|    {
 1598|   507k|        return has_value();
 1599|   507k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.01M|    {
  485|  1.01M|        return m_has_value;
  486|  1.01M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   507k|    {
 1663|   507k|        return std::move(value());
 1664|   507k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   507k|    {
 1627|   507k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   507k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   507k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   507k|        return this->get_value();
 1629|   507k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   507k|    {
  451|   507k|        return m_value;
  452|   507k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   657k|    {
 1823|   657k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   657k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   657k|{
 1323|   657k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   657k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   657k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   657k|            return result(*std::forward<Exp>(exp));
 1327|   657k|        }
 1328|       |
 1329|   657k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   657k|        return result(unexpect, monostate{});
 1331|   657k|    }
 1332|   657k|    else {
 1333|   657k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   657k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   657k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 657k]
  |  |  ------------------
  ------------------
 1335|   657k|                   ? result(*std::forward<Exp>(exp))
 1336|   657k|                   : result(unexpect,
 1337|   657k|                            trivial_invoke(std::forward<F>(f),
 1338|   657k|                                           std::forward<Exp>(exp).error()));
 1339|   657k|    }
 1340|   657k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   657k|    {
 3648|   657k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   127k|    {
 1653|   127k|        return value();
 1654|   127k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  2.48k|    {
 1673|  2.48k|        return &value();
 1674|  2.48k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   834k|    {
 3648|   834k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   300k|    {
 1430|   300k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   300k|    {
  437|   300k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   239k|{
 3654|   239k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   239k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.81M|    {
 2855|  2.81M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.81M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.81M|    {
 2836|  2.81M|        return t.data();
 2837|  2.81M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  5.75M|    {
 5466|  5.75M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  5.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.75M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  5.75M|        return static_cast<std::size_t>(m_desc &
 5471|  5.75M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  5.75M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  11.5M|    {
 5491|  11.5M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  11.5M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  5.75M|    {
 5434|  5.75M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  5.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.75M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  5.75M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  5.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.75M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  5.75M|        const auto t = type(id);
 5446|  5.75M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  5.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.75M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  5.75M|        basic_scan_arg<Context> arg;
 5451|  5.75M|        arg.m_type = t;
 5452|  5.75M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 5.75M, False: 0]
  ------------------
 5453|  5.75M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  5.75M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  5.75M|        return arg;
 5459|  5.75M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  5.75M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  5.75M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  5.75M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  5.75M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  5.75M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  5.75M|    {
 5495|  5.75M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  5.75M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  10.8M|    {
 5247|  10.8M|        return m_type != detail::arg_type::none_type;
 5248|  10.8M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   926k|{
 8417|   926k|#define SCN_VISIT(Type)                                         \
 8418|   926k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   926k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   926k|    }                                                           \
 8421|   926k|    else {                                                      \
 8422|   926k|        return vis(monostate_val);                              \
 8423|   926k|    }
 8424|       |
 8425|   926k|    monostate monostate_val{};
 8426|       |
 8427|   926k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 926k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 926k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 926k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 926k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 926k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 926k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 926k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 926k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 926k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 926k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 926k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 926k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 926k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 926k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 926k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   287k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 287k, False: 639k]
  ------------------
 8459|   287k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   287k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   287k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   287k|    }                                                           \
  |  | 8421|   287k|    else {                                                      \
  |  | 8422|   287k|        return vis(monostate_val);                              \
  |  | 8423|   287k|    }
  ------------------
 8460|   317k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 317k, False: 609k]
  ------------------
 8461|   317k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   317k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   317k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   317k|    }                                                           \
  |  | 8421|   317k|    else {                                                      \
  |  | 8422|   317k|        return vis(monostate_val);                              \
  |  | 8423|   317k|    }
  ------------------
 8462|   322k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 322k, False: 604k]
  ------------------
 8463|   322k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   322k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   322k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   322k|    }                                                           \
  |  | 8421|   322k|    else {                                                      \
  |  | 8422|   322k|        return vis(monostate_val);                              \
  |  | 8423|   322k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 926k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 926k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 926k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 926k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 926k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 926k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 926k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 926k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 926k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   926k|            SCN_CLANG_POP
 8495|   926k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  4.52M|    {
 5545|  4.52M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  2.36M|    {
 8138|  2.36M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  4.52M|    {
 8056|  4.52M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  3.27M|{
 4344|  3.27M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 3.27M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  3.27M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  3.27M|                            ranges::default_sentinel};
 4350|  3.27M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  3.27M|    {
 4177|  3.27M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  3.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  3.27M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  3.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  3.27M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   911k|{
 8417|   911k|#define SCN_VISIT(Type)                                         \
 8418|   911k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   911k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   911k|    }                                                           \
 8421|   911k|    else {                                                      \
 8422|   911k|        return vis(monostate_val);                              \
 8423|   911k|    }
 8424|       |
 8425|   911k|    monostate monostate_val{};
 8426|       |
 8427|   911k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 911k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 911k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 911k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 911k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 911k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 911k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 911k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 911k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 911k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 911k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 911k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 911k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 911k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 911k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 911k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   283k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 283k, False: 628k]
  ------------------
 8459|   283k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   283k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   283k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   283k|    }                                                           \
  |  | 8421|   283k|    else {                                                      \
  |  | 8422|   283k|        return vis(monostate_val);                              \
  |  | 8423|   283k|    }
  ------------------
 8460|   312k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 312k, False: 599k]
  ------------------
 8461|   312k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   312k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   312k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   312k|    }                                                           \
  |  | 8421|   312k|    else {                                                      \
  |  | 8422|   312k|        return vis(monostate_val);                              \
  |  | 8423|   312k|    }
  ------------------
 8462|   315k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 315k, False: 596k]
  ------------------
 8463|   315k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   315k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   315k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   315k|    }                                                           \
  |  | 8421|   315k|    else {                                                      \
  |  | 8422|   315k|        return vis(monostate_val);                              \
  |  | 8423|   315k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 911k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 911k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 911k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 911k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 911k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 911k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 911k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 911k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 911k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   911k|            SCN_CLANG_POP
 8495|   911k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  2.16M|{
 7044|  2.16M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  2.16M|    handler.check_args_exhausted();
 7046|  2.16M|    return handler.get_error();
 7047|  2.16M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  2.16M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  2.16M|    auto begin = format.data();
 7013|  2.16M|    auto it = begin;
 7014|  2.16M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  4.20M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 2.16M, False: 2.03M]
  ------------------
 7017|  2.16M|        const auto ch = *it++;
 7018|  2.16M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 2.16M, False: 0]
  ------------------
 7019|  2.16M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  2.16M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  2.16M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 129k, False: 2.03M]
  ------------------
 7023|   129k|                return;
 7024|   129k|            }
 7025|  2.16M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  2.16M|    }
 7036|       |
 7037|  2.03M|    handler.on_literal_text(begin, end);
 7038|  2.03M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  2.16M|{
 6942|  2.16M|    struct id_adapter {
 6943|  2.16M|        constexpr void operator()()
 6944|  2.16M|        {
 6945|  2.16M|            arg_id = handler.on_arg_id();
 6946|  2.16M|        }
 6947|  2.16M|        constexpr void operator()(std::size_t id)
 6948|  2.16M|        {
 6949|  2.16M|            arg_id = handler.on_arg_id(id);
 6950|  2.16M|        }
 6951|       |
 6952|  2.16M|        constexpr void on_error(const char* msg)
 6953|  2.16M|        {
 6954|  2.16M|            SCN_UNLIKELY_ATTR
 6955|  2.16M|            handler.on_error(msg);
 6956|  2.16M|        }
 6957|       |
 6958|  2.16M|        Handler& handler;
 6959|  2.16M|        std::size_t arg_id;
 6960|  2.16M|    };
 6961|       |
 6962|  2.16M|    ++begin;
 6963|  2.16M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  2.16M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 2.16M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  2.16M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 2.16M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  2.16M|    else {
 6975|  2.16M|        auto adapter = id_adapter{handler, 0};
 6976|  2.16M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  2.16M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  2.16M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 2.16M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  2.16M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 2.16M, False: 0]
  ------------------
 6987|  2.16M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  2.16M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  2.16M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16M]
  |  |  |  Branch (859:45): [True: 0, False: 2.16M]
  |  |  |  Branch (859:45): [True: 0, False: 2.16M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  2.16M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  2.16M|    }
 7003|  2.16M|    return begin + 1;
 7004|  2.16M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  4.52M|    {
 8039|  4.52M|        return m_args.get(id);
 8040|  4.52M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  4.52M|    {
 8049|  4.52M|        return m_locale;
 8050|  4.52M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  4.52M|    {
 5566|  4.52M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  4.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.52M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  4.52M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  4.52M|        do_check_arg_id(id);
 5574|  4.52M|        return id;
 5575|  4.52M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  4.52M|{
 6054|  4.52M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  4.52M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  4.52M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  2.16M|{
 6443|  2.16M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  2.16M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 2.16M, False: 0]
  |  Branch (6444:26): [True: 0, False: 2.16M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  2.16M|    handler();
 6449|  2.16M|    return begin;
 6450|  2.16M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  2.16M|        {
 6945|  2.16M|            arg_id = handler.on_arg_id();
 6946|  2.16M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  9.05M|    {
 5252|  9.05M|        return m_type;
 5253|  9.05M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  4.52M|    {
 5561|  4.52M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  4.52M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  9.05M|    {
 5550|  9.05M|        return m_format.data();
 5551|  9.05M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  2.16M|    {
 7122|  2.16M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  2.16M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  2.16M|{
 6858|  2.16M|    auto do_presentation = [&]() -> const CharT* {
 6859|  2.16M|        if (*begin == CharT{'['}) {
 6860|  2.16M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.16M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  2.16M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  2.16M|                return begin;
 6866|  2.16M|            }
 6867|  2.16M|            handler.on_character_set_string(set);
 6868|  2.16M|            return begin;
 6869|  2.16M|        }
 6870|  2.16M|        if (*begin == CharT{'/'}) {
 6871|  2.16M|            return parse_presentation_regex(begin, end, handler);
 6872|  2.16M|        }
 6873|  2.16M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.16M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  2.16M|            handler.on_error("Invalid type specifier in format string");
 6876|  2.16M|            return begin;
 6877|  2.16M|        }
 6878|  2.16M|        handler.on_type(type);
 6879|  2.16M|        return begin;
 6880|  2.16M|    };
 6881|       |
 6882|  2.16M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 2.16M, False: 0]
  |  Branch (6882:28): [True: 2.16M, False: 0]
  ------------------
 6883|  2.16M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 2.16M, False: 0]
  |  Branch (6883:36): [True: 1.54M, False: 617k]
  ------------------
 6884|  1.54M|        return do_presentation();
 6885|  1.54M|    }
 6886|       |
 6887|   617k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   617k|    begin = parse_align(begin, end, handler);
 6893|   617k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   617k|    begin = parse_width(begin, end, handler);
 6899|   617k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   617k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 617k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   617k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 617k, False: 0]
  ------------------
 6918|   617k|        handler.on_localized();
 6919|   617k|        ++begin;
 6920|   617k|    }
 6921|   617k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   617k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 617k, False: 0]
  |  Branch (6926:25): [True: 0, False: 617k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   617k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   617k|    return begin;
 6935|   617k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  4.52M|{
 6507|  4.52M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 3.23M, False: 1.29M]
  |  Branch (6507:33): [True: 3.23M, False: 0]
  ------------------
 6508|  4.52M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 1.29M, False: 0]
  |  Branch (6508:33): [True: 1.29M, False: 0]
  ------------------
 6509|  4.52M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  1.54M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.54M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.54M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.54M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.54M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.54M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.54M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|  1.54M|        handler.on_type(type);
 6879|  1.54M|        return begin;
 6880|  1.54M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  3.23M|{
 6455|  3.23M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 3.23M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 3.23M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 3.23M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 3.23M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 3.23M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 3.23M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 3.23M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 3.23M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 3.23M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 3.23M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|  1.43M|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 1.43M, False: 1.79M]
  ------------------
 6474|  1.43M|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 3.23M]
  ------------------
 6475|  1.43M|            return presentation_type::float_hex;
 6476|  89.9k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 89.9k, False: 3.14M]
  ------------------
 6477|  89.9k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 3.23M]
  ------------------
 6478|  89.9k|            return presentation_type::float_scientific;
 6479|   606k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 606k, False: 2.62M]
  ------------------
 6480|   606k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 3.23M]
  ------------------
 6481|   606k|            return presentation_type::float_fixed;
 6482|  1.10M|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 1.10M, False: 2.13M]
  ------------------
 6483|  1.10M|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 3.23M]
  ------------------
 6484|  1.10M|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 3.23M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 3.23M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 3.23M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 3.23M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 3.23M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 3.23M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 3.23M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  3.23M|    }
 6502|  3.23M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   617k|{
 6532|   617k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   617k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   617k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   617k|    auto check_align = [](wchar_t ch) {
 6535|   617k|        switch (ch) {
 6536|   617k|            case L'<':
 6537|   617k|                return align_type::left;
 6538|   617k|            case L'>':
 6539|   617k|                return align_type::right;
 6540|   617k|            case L'^':
 6541|   617k|                return align_type::center;
 6542|   617k|            default:
 6543|   617k|                return align_type::none;
 6544|   617k|        }
 6545|   617k|    };
 6546|       |
 6547|   617k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   617k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 617k]
  |  |  |  Branch (859:45): [True: 0, False: 617k]
  |  |  |  Branch (859:45): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 6549|   617k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   617k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   617k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   617k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   617k|    const auto begin_before_fill = begin;
 6559|   617k|    begin += potential_fill_len;
 6560|       |
 6561|   617k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 617k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   617k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   617k|    const auto begin_after_fill = begin;
 6567|   617k|    ++begin;
 6568|       |
 6569|   617k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 617k, False: 0]
  ------------------
 6570|   617k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   617k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 617k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   617k|    }
 6578|       |
 6579|   617k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 617k, False: 0]
  ------------------
 6580|   617k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 617k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   617k|        return begin_before_fill;
 6585|   617k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   617k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  1.29M|{
 6514|  1.29M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  1.29M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  1.29M|        return 1;
 6517|  1.29M|    }
 6518|  1.29M|    else {
 6519|  1.29M|        const auto lengths =
 6520|  1.29M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  1.29M|            "\3\4";
 6522|  1.29M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  1.29M|        return len;
 6524|  1.29M|    }
 6525|  1.29M|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  1.23M|    auto check_align = [](wchar_t ch) {
 6535|  1.23M|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.23M]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 1.23M]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 1.23M]
  ------------------
 6541|      0|                return align_type::center;
 6542|  1.23M|            default:
  ------------------
  |  Branch (6542:13): [True: 1.23M, False: 0]
  ------------------
 6543|  1.23M|                return align_type::none;
 6544|  1.23M|        }
 6545|  1.23M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   617k|{
 6597|   617k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   617k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   617k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   617k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 617k, False: 0]
  |  Branch (6599:33): [True: 0, False: 617k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   617k|    return begin;
 6610|   617k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   617k|    {
 7127|   617k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   617k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 617k, False: 0]
  ------------------
 7129|   617k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 617k, False: 0]
  ------------------
 7130|   617k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 617k]
  ------------------
 7131|   617k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   617k|        Handler::on_localized();
 7139|   617k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  2.16M|{
 8417|  2.16M|#define SCN_VISIT(Type)                                         \
 8418|  2.16M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  2.16M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  2.16M|    }                                                           \
 8421|  2.16M|    else {                                                      \
 8422|  2.16M|        return vis(monostate_val);                              \
 8423|  2.16M|    }
 8424|       |
 8425|  2.16M|    monostate monostate_val{};
 8426|       |
 8427|  2.16M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 2.16M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 2.16M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 2.16M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 2.16M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 2.16M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.16M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 2.16M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 2.16M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 2.16M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 2.16M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 2.16M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.16M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 2.16M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 2.16M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 2.16M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   687k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 687k, False: 1.47M]
  ------------------
 8459|   687k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   687k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   687k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   687k|    }                                                           \
  |  | 8421|   687k|    else {                                                      \
  |  | 8422|   687k|        return vis(monostate_val);                              \
  |  | 8423|   687k|    }
  ------------------
 8460|   735k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 735k, False: 1.43M]
  ------------------
 8461|   735k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   735k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   735k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   735k|    }                                                           \
  |  | 8421|   735k|    else {                                                      \
  |  | 8422|   735k|        return vis(monostate_val);                              \
  |  | 8423|   735k|    }
  ------------------
 8462|   742k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 742k, False: 1.42M]
  ------------------
 8463|   742k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   742k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   742k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   742k|    }                                                           \
  |  | 8421|   742k|    else {                                                      \
  |  | 8422|   742k|        return vis(monostate_val);                              \
  |  | 8423|   742k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 2.16M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 2.16M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 2.16M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 2.16M]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 2.16M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 2.16M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 2.16M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 2.16M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 2.16M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  2.16M|            SCN_CLANG_POP
 8495|  2.16M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  2.36M|{
 7044|  2.36M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  2.36M|    handler.check_args_exhausted();
 7046|  2.36M|    return handler.get_error();
 7047|  2.36M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  2.36M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  2.36M|    auto begin = format.data();
 7013|  2.36M|    auto it = begin;
 7014|  2.36M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  4.59M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 2.36M, False: 2.23M]
  ------------------
 7017|  2.36M|        const auto ch = *it++;
 7018|  2.36M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 2.36M, False: 0]
  ------------------
 7019|  2.36M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  2.36M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  2.36M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 129k, False: 2.23M]
  ------------------
 7023|   129k|                return;
 7024|   129k|            }
 7025|  2.36M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  2.36M|    }
 7036|       |
 7037|  2.23M|    handler.on_literal_text(begin, end);
 7038|  2.23M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  2.23M|    {
 8175|  2.23M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.23M|    static_cast<    \
  |  |  929|  2.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  2.23M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  2.36M|{
 6942|  2.36M|    struct id_adapter {
 6943|  2.36M|        constexpr void operator()()
 6944|  2.36M|        {
 6945|  2.36M|            arg_id = handler.on_arg_id();
 6946|  2.36M|        }
 6947|  2.36M|        constexpr void operator()(std::size_t id)
 6948|  2.36M|        {
 6949|  2.36M|            arg_id = handler.on_arg_id(id);
 6950|  2.36M|        }
 6951|       |
 6952|  2.36M|        constexpr void on_error(const char* msg)
 6953|  2.36M|        {
 6954|  2.36M|            SCN_UNLIKELY_ATTR
 6955|  2.36M|            handler.on_error(msg);
 6956|  2.36M|        }
 6957|       |
 6958|  2.36M|        Handler& handler;
 6959|  2.36M|        std::size_t arg_id;
 6960|  2.36M|    };
 6961|       |
 6962|  2.36M|    ++begin;
 6963|  2.36M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  2.36M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 2.36M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  2.36M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 2.36M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  2.36M|    else {
 6975|  2.36M|        auto adapter = id_adapter{handler, 0};
 6976|  2.36M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  2.36M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  2.36M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 2.36M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  2.36M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 2.36M, False: 0]
  ------------------
 6987|  2.36M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  2.36M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  2.36M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  4.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  |  Branch (859:45): [True: 0, False: 2.36M]
  |  |  |  Branch (859:45): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  2.36M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  2.36M|    }
 7003|  2.36M|    return begin + 1;
 7004|  2.36M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  2.36M|{
 6443|  2.36M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  2.36M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 2.36M, False: 0]
  |  Branch (6444:26): [True: 0, False: 2.36M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  2.36M|    handler();
 6449|  2.36M|    return begin;
 6450|  2.36M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  2.36M|        {
 6945|  2.36M|            arg_id = handler.on_arg_id();
 6946|  2.36M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  2.36M|    {
 7122|  2.36M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  2.36M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  2.36M|{
 6858|  2.36M|    auto do_presentation = [&]() -> const CharT* {
 6859|  2.36M|        if (*begin == CharT{'['}) {
 6860|  2.36M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.36M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  2.36M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  2.36M|                return begin;
 6866|  2.36M|            }
 6867|  2.36M|            handler.on_character_set_string(set);
 6868|  2.36M|            return begin;
 6869|  2.36M|        }
 6870|  2.36M|        if (*begin == CharT{'/'}) {
 6871|  2.36M|            return parse_presentation_regex(begin, end, handler);
 6872|  2.36M|        }
 6873|  2.36M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.36M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  2.36M|            handler.on_error("Invalid type specifier in format string");
 6876|  2.36M|            return begin;
 6877|  2.36M|        }
 6878|  2.36M|        handler.on_type(type);
 6879|  2.36M|        return begin;
 6880|  2.36M|    };
 6881|       |
 6882|  2.36M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 2.36M, False: 0]
  |  Branch (6882:28): [True: 2.36M, False: 0]
  ------------------
 6883|  2.36M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 2.36M, False: 0]
  |  Branch (6883:36): [True: 1.68M, False: 676k]
  ------------------
 6884|  1.68M|        return do_presentation();
 6885|  1.68M|    }
 6886|       |
 6887|   676k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 676k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   676k|    begin = parse_align(begin, end, handler);
 6893|   676k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 676k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   676k|    begin = parse_width(begin, end, handler);
 6899|   676k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 676k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   676k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 676k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   676k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 676k, False: 0]
  ------------------
 6918|   676k|        handler.on_localized();
 6919|   676k|        ++begin;
 6920|   676k|    }
 6921|   676k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 676k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   676k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 676k, False: 0]
  |  Branch (6926:25): [True: 0, False: 676k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   676k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 676k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   676k|    return begin;
 6935|   676k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  1.68M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.68M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.68M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.68M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.68M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.68M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.68M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.68M]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|  1.68M|        handler.on_type(type);
 6879|  1.68M|        return begin;
 6880|  1.68M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   676k|{
 6532|   676k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   676k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   676k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   676k|    auto check_align = [](wchar_t ch) {
 6535|   676k|        switch (ch) {
 6536|   676k|            case L'<':
 6537|   676k|                return align_type::left;
 6538|   676k|            case L'>':
 6539|   676k|                return align_type::right;
 6540|   676k|            case L'^':
 6541|   676k|                return align_type::center;
 6542|   676k|            default:
 6543|   676k|                return align_type::none;
 6544|   676k|        }
 6545|   676k|    };
 6546|       |
 6547|   676k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   676k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 676k]
  |  |  |  Branch (859:45): [True: 0, False: 676k]
  |  |  |  Branch (859:45): [True: 0, False: 676k]
  |  |  ------------------
  ------------------
 6549|   676k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   676k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   676k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   676k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   676k|    const auto begin_before_fill = begin;
 6559|   676k|    begin += potential_fill_len;
 6560|       |
 6561|   676k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 676k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   676k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   676k|    const auto begin_after_fill = begin;
 6567|   676k|    ++begin;
 6568|       |
 6569|   676k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 676k, False: 0]
  ------------------
 6570|   676k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 676k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   676k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 676k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   676k|    }
 6578|       |
 6579|   676k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 676k, False: 0]
  ------------------
 6580|   676k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 676k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   676k|        return begin_before_fill;
 6585|   676k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   676k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  1.35M|    auto check_align = [](wchar_t ch) {
 6535|  1.35M|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.35M]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 1.35M]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 1.35M]
  ------------------
 6541|      0|                return align_type::center;
 6542|  1.35M|            default:
  ------------------
  |  Branch (6542:13): [True: 1.35M, False: 0]
  ------------------
 6543|  1.35M|                return align_type::none;
 6544|  1.35M|        }
 6545|  1.35M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   676k|{
 6597|   676k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   676k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   676k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   676k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 676k, False: 0]
  |  Branch (6599:33): [True: 0, False: 676k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   676k|    return begin;
 6610|   676k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   676k|    {
 7127|   676k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   676k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 676k, False: 0]
  ------------------
 7129|   676k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 676k, False: 0]
  ------------------
 7130|   676k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 676k]
  ------------------
 7131|   676k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   676k|        Handler::on_localized();
 7139|   676k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  2.36M|{
 8417|  2.36M|#define SCN_VISIT(Type)                                         \
 8418|  2.36M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  2.36M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  2.36M|    }                                                           \
 8421|  2.36M|    else {                                                      \
 8422|  2.36M|        return vis(monostate_val);                              \
 8423|  2.36M|    }
 8424|       |
 8425|  2.36M|    monostate monostate_val{};
 8426|       |
 8427|  2.36M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 2.36M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 2.36M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 2.36M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 2.36M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 2.36M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.36M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 2.36M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 2.36M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 2.36M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 2.36M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 2.36M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.36M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 2.36M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 2.36M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 2.36M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   748k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 748k, False: 1.61M]
  ------------------
 8459|   748k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   748k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   748k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   748k|    }                                                           \
  |  | 8421|   748k|    else {                                                      \
  |  | 8422|   748k|        return vis(monostate_val);                              \
  |  | 8423|   748k|    }
  ------------------
 8460|   802k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 802k, False: 1.55M]
  ------------------
 8461|   802k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   802k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   802k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   802k|    }                                                           \
  |  | 8421|   802k|    else {                                                      \
  |  | 8422|   802k|        return vis(monostate_val);                              \
  |  | 8423|   802k|    }
  ------------------
 8462|   810k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 810k, False: 1.55M]
  ------------------
 8463|   810k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   810k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   810k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   810k|    }                                                           \
  |  | 8421|   810k|    else {                                                      \
  |  | 8422|   810k|        return vis(monostate_val);                              \
  |  | 8423|   810k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 2.36M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 2.36M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 2.36M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 2.36M]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 2.36M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 2.36M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 2.36M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 2.36M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 2.36M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  2.36M|            SCN_CLANG_POP
 8495|  2.36M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|   167k|    {
 4076|   167k|        sync(0);
 4077|   167k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   936k|    {
 5466|   936k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   936k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 936k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   936k|        return static_cast<std::size_t>(m_desc &
 5471|   936k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   936k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.87M|    {
 5491|  1.87M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.87M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   936k|    {
 5434|   936k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   936k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 936k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   936k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   936k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 936k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   936k|        const auto t = type(id);
 5446|   936k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   936k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 936k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   936k|        basic_scan_arg<Context> arg;
 5451|   936k|        arg.m_type = t;
 5452|   936k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 936k, False: 0]
  ------------------
 5453|   936k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   936k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   936k|        return arg;
 5459|   936k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   936k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   936k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   936k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   936k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   936k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   936k|    {
 5495|   936k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   936k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.79M|    {
 5247|  1.79M|        return m_type != detail::arg_type::none_type;
 5248|  1.79M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   124k|{
 8417|   124k|#define SCN_VISIT(Type)                                         \
 8418|   124k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   124k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   124k|    }                                                           \
 8421|   124k|    else {                                                      \
 8422|   124k|        return vis(monostate_val);                              \
 8423|   124k|    }
 8424|       |
 8425|   124k|    monostate monostate_val{};
 8426|       |
 8427|   124k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 124k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 124k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 124k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 124k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 124k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 124k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 124k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 124k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 124k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 124k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 124k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 124k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 124k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 124k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 124k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  41.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 41.2k, False: 83.3k]
  ------------------
 8459|  41.2k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  41.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  41.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  41.2k|    }                                                           \
  |  | 8421|  41.2k|    else {                                                      \
  |  | 8422|  41.2k|        return vis(monostate_val);                              \
  |  | 8423|  41.2k|    }
  ------------------
 8460|  41.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 41.4k, False: 83.1k]
  ------------------
 8461|  41.4k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  41.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  41.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  41.4k|    }                                                           \
  |  | 8421|  41.4k|    else {                                                      \
  |  | 8422|  41.4k|        return vis(monostate_val);                              \
  |  | 8423|  41.4k|    }
  ------------------
 8462|  41.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 41.8k, False: 82.7k]
  ------------------
 8463|  41.8k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  41.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  41.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  41.8k|    }                                                           \
  |  | 8421|  41.8k|    else {                                                      \
  |  | 8422|  41.8k|        return vis(monostate_val);                              \
  |  | 8423|  41.8k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 124k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 124k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 124k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 124k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 124k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 124k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 124k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 124k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 124k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   124k|            SCN_CLANG_POP
 8495|   124k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   770k|    {
 5545|   770k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   385k|    {
 8138|   385k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   770k|    {
 8056|   770k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   385k|{
 7044|   385k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   385k|    handler.check_args_exhausted();
 7046|   385k|    return handler.get_error();
 7047|   385k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   385k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   385k|    auto begin = format.data();
 7013|   385k|    auto it = begin;
 7014|   385k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   512k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 385k, False: 127k]
  ------------------
 7017|   385k|        const auto ch = *it++;
 7018|   385k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 385k, False: 0]
  ------------------
 7019|   385k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   385k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   385k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 258k, False: 127k]
  ------------------
 7023|   258k|                return;
 7024|   258k|            }
 7025|   385k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   385k|    }
 7036|       |
 7037|   127k|    handler.on_literal_text(begin, end);
 7038|   127k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   385k|{
 6942|   385k|    struct id_adapter {
 6943|   385k|        constexpr void operator()()
 6944|   385k|        {
 6945|   385k|            arg_id = handler.on_arg_id();
 6946|   385k|        }
 6947|   385k|        constexpr void operator()(std::size_t id)
 6948|   385k|        {
 6949|   385k|            arg_id = handler.on_arg_id(id);
 6950|   385k|        }
 6951|       |
 6952|   385k|        constexpr void on_error(const char* msg)
 6953|   385k|        {
 6954|   385k|            SCN_UNLIKELY_ATTR
 6955|   385k|            handler.on_error(msg);
 6956|   385k|        }
 6957|       |
 6958|   385k|        Handler& handler;
 6959|   385k|        std::size_t arg_id;
 6960|   385k|    };
 6961|       |
 6962|   385k|    ++begin;
 6963|   385k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   385k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 385k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   385k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 385k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   385k|    else {
 6975|   385k|        auto adapter = id_adapter{handler, 0};
 6976|   385k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   385k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   385k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 385k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   385k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 385k, False: 0]
  ------------------
 6987|   385k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   385k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   385k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   770k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  |  Branch (859:45): [True: 0, False: 385k]
  |  |  |  Branch (859:45): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   385k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   385k|    }
 7003|   385k|    return begin + 1;
 7004|   385k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   770k|    {
 8039|   770k|        return m_args.get(id);
 8040|   770k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   770k|    {
 8049|   770k|        return m_locale;
 8050|   770k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   770k|    {
 5566|   770k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   770k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 770k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   770k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   770k|        do_check_arg_id(id);
 5574|   770k|        return id;
 5575|   770k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   770k|{
 6054|   770k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   770k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   770k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   385k|{
 6443|   385k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   385k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 385k, False: 0]
  |  Branch (6444:26): [True: 0, False: 385k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   385k|    handler();
 6449|   385k|    return begin;
 6450|   385k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   385k|        {
 6945|   385k|            arg_id = handler.on_arg_id();
 6946|   385k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.54M|    {
 5252|  1.54M|        return m_type;
 5253|  1.54M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   770k|    {
 5561|   770k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   770k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   509k|{
 4344|   509k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 509k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   509k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   509k|                            ranges::default_sentinel};
 4350|   509k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   509k|    {
 4177|   509k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   509k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   509k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   509k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   509k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   509k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   509k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.54M|    {
 5550|  1.54M|        return m_format.data();
 5551|  1.54M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   385k|    {
 7122|   385k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   385k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   385k|{
 6858|   385k|    auto do_presentation = [&]() -> const CharT* {
 6859|   385k|        if (*begin == CharT{'['}) {
 6860|   385k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   385k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   385k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   385k|                return begin;
 6866|   385k|            }
 6867|   385k|            handler.on_character_set_string(set);
 6868|   385k|            return begin;
 6869|   385k|        }
 6870|   385k|        if (*begin == CharT{'/'}) {
 6871|   385k|            return parse_presentation_regex(begin, end, handler);
 6872|   385k|        }
 6873|   385k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   385k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   385k|            handler.on_error("Invalid type specifier in format string");
 6876|   385k|            return begin;
 6877|   385k|        }
 6878|   385k|        handler.on_type(type);
 6879|   385k|        return begin;
 6880|   385k|    };
 6881|       |
 6882|   385k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 385k, False: 0]
  |  Branch (6882:28): [True: 385k, False: 0]
  ------------------
 6883|   385k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 385k, False: 0]
  |  Branch (6883:36): [True: 302k, False: 83.0k]
  ------------------
 6884|   302k|        return do_presentation();
 6885|   302k|    }
 6886|       |
 6887|  83.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  83.0k|    begin = parse_align(begin, end, handler);
 6893|  83.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  83.0k|    begin = parse_width(begin, end, handler);
 6899|  83.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  83.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 83.0k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  83.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 83.0k, False: 0]
  ------------------
 6918|  83.0k|        handler.on_localized();
 6919|  83.0k|        ++begin;
 6920|  83.0k|    }
 6921|  83.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  83.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 83.0k, False: 0]
  |  Branch (6926:25): [True: 0, False: 83.0k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  83.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  83.0k|    return begin;
 6935|  83.0k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   770k|{
 6507|   770k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 604k, False: 166k]
  |  Branch (6507:33): [True: 604k, False: 0]
  ------------------
 6508|   770k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 166k, False: 0]
  |  Branch (6508:33): [True: 166k, False: 0]
  ------------------
 6509|   770k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   302k|    auto do_presentation = [&]() -> const CharT* {
 6859|   302k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 302k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   302k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 302k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   302k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   302k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   302k|        handler.on_type(type);
 6879|   302k|        return begin;
 6880|   302k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   604k|{
 6455|   604k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 604k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 604k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 604k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 604k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 604k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 604k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 604k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 604k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 604k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 604k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   168k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 168k, False: 436k]
  ------------------
 6474|   168k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 604k]
  ------------------
 6475|   168k|            return presentation_type::float_hex;
 6476|   104k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 104k, False: 500k]
  ------------------
 6477|   104k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 604k]
  ------------------
 6478|   104k|            return presentation_type::float_scientific;
 6479|   166k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 166k, False: 438k]
  ------------------
 6480|   166k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 604k]
  ------------------
 6481|   166k|            return presentation_type::float_fixed;
 6482|   166k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 166k, False: 438k]
  ------------------
 6483|   166k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 604k]
  ------------------
 6484|   166k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 604k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 604k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 604k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 604k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 604k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 604k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 604k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   604k|    }
 6502|   604k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  83.0k|{
 6532|  83.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  83.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  83.0k|    auto check_align = [](wchar_t ch) {
 6535|  83.0k|        switch (ch) {
 6536|  83.0k|            case L'<':
 6537|  83.0k|                return align_type::left;
 6538|  83.0k|            case L'>':
 6539|  83.0k|                return align_type::right;
 6540|  83.0k|            case L'^':
 6541|  83.0k|                return align_type::center;
 6542|  83.0k|            default:
 6543|  83.0k|                return align_type::none;
 6544|  83.0k|        }
 6545|  83.0k|    };
 6546|       |
 6547|  83.0k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  83.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.0k]
  |  |  |  Branch (859:45): [True: 0, False: 83.0k]
  |  |  |  Branch (859:45): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
 6549|  83.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  83.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  83.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  83.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  83.0k|    const auto begin_before_fill = begin;
 6559|  83.0k|    begin += potential_fill_len;
 6560|       |
 6561|  83.0k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 83.0k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  83.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  83.0k|    const auto begin_after_fill = begin;
 6567|  83.0k|    ++begin;
 6568|       |
 6569|  83.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 83.0k, False: 0]
  ------------------
 6570|  83.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  83.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 83.0k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  83.0k|    }
 6578|       |
 6579|  83.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 83.0k, False: 0]
  ------------------
 6580|  83.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 83.0k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  83.0k|        return begin_before_fill;
 6585|  83.0k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  83.0k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   166k|{
 6514|   166k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   166k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   166k|        return 1;
 6517|   166k|    }
 6518|   166k|    else {
 6519|   166k|        const auto lengths =
 6520|   166k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   166k|            "\3\4";
 6522|   166k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   166k|        return len;
 6524|   166k|    }
 6525|   166k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   166k|    auto check_align = [](wchar_t ch) {
 6535|   166k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 166k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 166k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 166k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   166k|            default:
  ------------------
  |  Branch (6542:13): [True: 166k, False: 0]
  ------------------
 6543|   166k|                return align_type::none;
 6544|   166k|        }
 6545|   166k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  83.0k|{
 6597|  83.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  83.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  83.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 83.0k, False: 0]
  |  Branch (6599:33): [True: 0, False: 83.0k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  83.0k|    return begin;
 6610|  83.0k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  83.0k|    {
 7127|  83.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  83.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 83.0k, False: 0]
  ------------------
 7129|  83.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 83.0k, False: 0]
  ------------------
 7130|  83.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 83.0k]
  ------------------
 7131|  83.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  83.0k|        Handler::on_localized();
 7139|  83.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   385k|{
 8417|   385k|#define SCN_VISIT(Type)                                         \
 8418|   385k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   385k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   385k|    }                                                           \
 8421|   385k|    else {                                                      \
 8422|   385k|        return vis(monostate_val);                              \
 8423|   385k|    }
 8424|       |
 8425|   385k|    monostate monostate_val{};
 8426|       |
 8427|   385k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 385k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 385k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 385k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 385k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 385k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 385k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 385k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 385k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 385k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 385k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 385k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 385k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 385k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 385k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 385k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   128k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 128k, False: 257k]
  ------------------
 8459|   128k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   128k|    }                                                           \
  |  | 8421|   128k|    else {                                                      \
  |  | 8422|   128k|        return vis(monostate_val);                              \
  |  | 8423|   128k|    }
  ------------------
 8460|   128k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 128k, False: 257k]
  ------------------
 8461|   128k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   128k|    }                                                           \
  |  | 8421|   128k|    else {                                                      \
  |  | 8422|   128k|        return vis(monostate_val);                              \
  |  | 8423|   128k|    }
  ------------------
 8462|   129k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 129k, False: 256k]
  ------------------
 8463|   129k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   129k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   129k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   129k|    }                                                           \
  |  | 8421|   129k|    else {                                                      \
  |  | 8422|   129k|        return vis(monostate_val);                              \
  |  | 8423|   129k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 385k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 385k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 385k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 385k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 385k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 385k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 385k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 385k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 385k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   385k|            SCN_CLANG_POP
 8495|   385k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   124k|{
 8417|   124k|#define SCN_VISIT(Type)                                         \
 8418|   124k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   124k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   124k|    }                                                           \
 8421|   124k|    else {                                                      \
 8422|   124k|        return vis(monostate_val);                              \
 8423|   124k|    }
 8424|       |
 8425|   124k|    monostate monostate_val{};
 8426|       |
 8427|   124k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 124k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 124k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 124k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 124k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 124k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 124k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 124k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 124k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 124k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 124k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 124k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 124k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 124k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 124k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 124k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  41.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 41.1k, False: 83.2k]
  ------------------
 8459|  41.1k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  41.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  41.1k|    }                                                           \
  |  | 8421|  41.1k|    else {                                                      \
  |  | 8422|  41.1k|        return vis(monostate_val);                              \
  |  | 8423|  41.1k|    }
  ------------------
 8460|  41.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 41.4k, False: 82.9k]
  ------------------
 8461|  41.4k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  41.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  41.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  41.4k|    }                                                           \
  |  | 8421|  41.4k|    else {                                                      \
  |  | 8422|  41.4k|        return vis(monostate_val);                              \
  |  | 8423|  41.4k|    }
  ------------------
 8462|  41.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 41.8k, False: 82.6k]
  ------------------
 8463|  41.8k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  41.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  41.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  41.8k|    }                                                           \
  |  | 8421|  41.8k|    else {                                                      \
  |  | 8422|  41.8k|        return vis(monostate_val);                              \
  |  | 8423|  41.8k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 124k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 124k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 124k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 124k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 124k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 124k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 124k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 124k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 124k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   124k|            SCN_CLANG_POP
 8495|   124k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   385k|{
 7044|   385k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   385k|    handler.check_args_exhausted();
 7046|   385k|    return handler.get_error();
 7047|   385k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   385k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   385k|    auto begin = format.data();
 7013|   385k|    auto it = begin;
 7014|   385k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   512k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 385k, False: 127k]
  ------------------
 7017|   385k|        const auto ch = *it++;
 7018|   385k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 385k, False: 0]
  ------------------
 7019|   385k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   385k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   385k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 258k, False: 127k]
  ------------------
 7023|   258k|                return;
 7024|   258k|            }
 7025|   385k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   385k|    }
 7036|       |
 7037|   127k|    handler.on_literal_text(begin, end);
 7038|   127k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   127k|    {
 8175|   127k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   127k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   385k|{
 6942|   385k|    struct id_adapter {
 6943|   385k|        constexpr void operator()()
 6944|   385k|        {
 6945|   385k|            arg_id = handler.on_arg_id();
 6946|   385k|        }
 6947|   385k|        constexpr void operator()(std::size_t id)
 6948|   385k|        {
 6949|   385k|            arg_id = handler.on_arg_id(id);
 6950|   385k|        }
 6951|       |
 6952|   385k|        constexpr void on_error(const char* msg)
 6953|   385k|        {
 6954|   385k|            SCN_UNLIKELY_ATTR
 6955|   385k|            handler.on_error(msg);
 6956|   385k|        }
 6957|       |
 6958|   385k|        Handler& handler;
 6959|   385k|        std::size_t arg_id;
 6960|   385k|    };
 6961|       |
 6962|   385k|    ++begin;
 6963|   385k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   385k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 385k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   385k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 385k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   385k|    else {
 6975|   385k|        auto adapter = id_adapter{handler, 0};
 6976|   385k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   385k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   385k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 385k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   385k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 385k, False: 0]
  ------------------
 6987|   385k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   385k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   385k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   770k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  |  Branch (859:45): [True: 0, False: 385k]
  |  |  |  Branch (859:45): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   385k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   385k|    }
 7003|   385k|    return begin + 1;
 7004|   385k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   385k|{
 6443|   385k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   385k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 385k, False: 0]
  |  Branch (6444:26): [True: 0, False: 385k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   385k|    handler();
 6449|   385k|    return begin;
 6450|   385k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   385k|        {
 6945|   385k|            arg_id = handler.on_arg_id();
 6946|   385k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   385k|    {
 7122|   385k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   385k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   385k|{
 6858|   385k|    auto do_presentation = [&]() -> const CharT* {
 6859|   385k|        if (*begin == CharT{'['}) {
 6860|   385k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   385k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   385k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   385k|                return begin;
 6866|   385k|            }
 6867|   385k|            handler.on_character_set_string(set);
 6868|   385k|            return begin;
 6869|   385k|        }
 6870|   385k|        if (*begin == CharT{'/'}) {
 6871|   385k|            return parse_presentation_regex(begin, end, handler);
 6872|   385k|        }
 6873|   385k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   385k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   385k|            handler.on_error("Invalid type specifier in format string");
 6876|   385k|            return begin;
 6877|   385k|        }
 6878|   385k|        handler.on_type(type);
 6879|   385k|        return begin;
 6880|   385k|    };
 6881|       |
 6882|   385k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 385k, False: 0]
  |  Branch (6882:28): [True: 385k, False: 0]
  ------------------
 6883|   385k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 385k, False: 0]
  |  Branch (6883:36): [True: 302k, False: 82.9k]
  ------------------
 6884|   302k|        return do_presentation();
 6885|   302k|    }
 6886|       |
 6887|  82.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.9k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  82.9k|    begin = parse_align(begin, end, handler);
 6893|  82.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.9k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  82.9k|    begin = parse_width(begin, end, handler);
 6899|  82.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.9k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  82.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 82.9k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  82.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 82.9k, False: 0]
  ------------------
 6918|  82.9k|        handler.on_localized();
 6919|  82.9k|        ++begin;
 6920|  82.9k|    }
 6921|  82.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.9k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  82.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 82.9k, False: 0]
  |  Branch (6926:25): [True: 0, False: 82.9k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  82.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.9k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  82.9k|    return begin;
 6935|  82.9k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   302k|    auto do_presentation = [&]() -> const CharT* {
 6859|   302k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 302k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   302k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 302k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   302k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   302k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   302k|        handler.on_type(type);
 6879|   302k|        return begin;
 6880|   302k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  82.9k|{
 6532|  82.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  82.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  82.9k|    auto check_align = [](wchar_t ch) {
 6535|  82.9k|        switch (ch) {
 6536|  82.9k|            case L'<':
 6537|  82.9k|                return align_type::left;
 6538|  82.9k|            case L'>':
 6539|  82.9k|                return align_type::right;
 6540|  82.9k|            case L'^':
 6541|  82.9k|                return align_type::center;
 6542|  82.9k|            default:
 6543|  82.9k|                return align_type::none;
 6544|  82.9k|        }
 6545|  82.9k|    };
 6546|       |
 6547|  82.9k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  82.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.9k]
  |  |  |  Branch (859:45): [True: 0, False: 82.9k]
  |  |  |  Branch (859:45): [True: 0, False: 82.9k]
  |  |  ------------------
  ------------------
 6549|  82.9k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  82.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  82.9k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  82.9k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  82.9k|    const auto begin_before_fill = begin;
 6559|  82.9k|    begin += potential_fill_len;
 6560|       |
 6561|  82.9k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 82.9k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  82.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  82.9k|    const auto begin_after_fill = begin;
 6567|  82.9k|    ++begin;
 6568|       |
 6569|  82.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 82.9k, False: 0]
  ------------------
 6570|  82.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.9k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  82.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 82.9k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  82.9k|    }
 6578|       |
 6579|  82.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 82.9k, False: 0]
  ------------------
 6580|  82.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 82.9k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  82.9k|        return begin_before_fill;
 6585|  82.9k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  82.9k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   165k|    auto check_align = [](wchar_t ch) {
 6535|   165k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 165k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 165k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 165k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   165k|            default:
  ------------------
  |  Branch (6542:13): [True: 165k, False: 0]
  ------------------
 6543|   165k|                return align_type::none;
 6544|   165k|        }
 6545|   165k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  82.9k|{
 6597|  82.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  82.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  82.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 82.9k, False: 0]
  |  Branch (6599:33): [True: 0, False: 82.9k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  82.9k|    return begin;
 6610|  82.9k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  82.9k|    {
 7127|  82.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  82.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 82.9k, False: 0]
  ------------------
 7129|  82.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 82.9k, False: 0]
  ------------------
 7130|  82.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 82.9k]
  ------------------
 7131|  82.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  82.9k|        Handler::on_localized();
 7139|  82.9k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   385k|{
 8417|   385k|#define SCN_VISIT(Type)                                         \
 8418|   385k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   385k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   385k|    }                                                           \
 8421|   385k|    else {                                                      \
 8422|   385k|        return vis(monostate_val);                              \
 8423|   385k|    }
 8424|       |
 8425|   385k|    monostate monostate_val{};
 8426|       |
 8427|   385k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 385k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 385k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 385k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 385k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 385k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 385k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 385k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 385k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 385k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 385k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 385k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 385k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 385k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 385k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 385k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   127k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 127k, False: 257k]
  ------------------
 8459|   127k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   127k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   127k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   127k|    }                                                           \
  |  | 8421|   127k|    else {                                                      \
  |  | 8422|   127k|        return vis(monostate_val);                              \
  |  | 8423|   127k|    }
  ------------------
 8460|   128k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 128k, False: 256k]
  ------------------
 8461|   128k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   128k|    }                                                           \
  |  | 8421|   128k|    else {                                                      \
  |  | 8422|   128k|        return vis(monostate_val);                              \
  |  | 8423|   128k|    }
  ------------------
 8462|   128k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 128k, False: 256k]
  ------------------
 8463|   128k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   128k|    }                                                           \
  |  | 8421|   128k|    else {                                                      \
  |  | 8422|   128k|        return vis(monostate_val);                              \
  |  | 8423|   128k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 385k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 385k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 385k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 385k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 385k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 385k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 385k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 385k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 385k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   385k|            SCN_CLANG_POP
 8495|   385k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   335k|    {
 4076|   335k|        sync(0);
 4077|   335k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   612k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  83.0k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  77.7k|{
   89|  77.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  77.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  77.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.7k|    static_cast<    \
  |  |  929|  77.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.7k|    static_cast<    \
  |  |  929|  77.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  77.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   234k|{
   44|   234k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   234k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  77.7k|{
  127|  77.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  77.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  77.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.7k|    static_cast<    \
  |  |  929|  77.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.7k|    static_cast<    \
  |  |  929|  77.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  77.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   234k|{
   60|   234k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   234k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  13.7k|{
  163|  13.7k|    T value;
  164|  13.7k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.60k, False: 5.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.60k|    }                                                  \
  |  |  |  | 3671|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.14k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.14k|    static_cast<    \
  |  |  929|  5.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.14k|    static_cast<    \
  |  |  929|  5.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.7k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  41.5k|{
   72|  41.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  41.5k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  78.0k|{
   89|  78.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  78.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  78.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.0k|    static_cast<    \
  |  |  929|  78.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.0k|    static_cast<    \
  |  |  929|  78.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  78.0k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  78.0k|{
  127|  78.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  78.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  78.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.0k|    static_cast<    \
  |  |  929|  78.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.0k|    static_cast<    \
  |  |  929|  78.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  78.0k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  13.8k|{
  163|  13.8k|    T value;
  164|  13.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.60k, False: 5.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.60k|    }                                                  \
  |  |  |  | 3671|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.22k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.22k|    static_cast<    \
  |  |  929|  5.22k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.22k|    static_cast<    \
  |  |  929|  5.22k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.8k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  78.4k|{
   89|  78.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  78.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  78.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.4k|    static_cast<    \
  |  |  929|  78.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.4k|    static_cast<    \
  |  |  929|  78.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  78.4k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  78.4k|{
  127|  78.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  78.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  78.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.4k|    static_cast<    \
  |  |  929|  78.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.4k|    static_cast<    \
  |  |  929|  78.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  78.4k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  13.9k|{
  163|  13.9k|    T value;
  164|  13.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.60k, False: 5.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.60k|    }                                                  \
  |  |  |  | 3671|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.35k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.35k|    static_cast<    \
  |  |  929|  5.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.35k|    static_cast<    \
  |  |  929|  5.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.9k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  77.7k|{
   89|  77.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  77.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  77.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.7k|    static_cast<    \
  |  |  929|  77.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.7k|    static_cast<    \
  |  |  929|  77.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  77.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   234k|{
   44|   234k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   234k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  77.7k|{
  127|  77.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  77.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  77.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.7k|    static_cast<    \
  |  |  929|  77.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.7k|    static_cast<    \
  |  |  929|  77.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  77.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   234k|{
   60|   234k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   234k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  13.7k|{
  163|  13.7k|    T value;
  164|  13.7k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.60k, False: 5.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.60k|    }                                                  \
  |  |  |  | 3671|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.12k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.12k|    static_cast<    \
  |  |  929|  5.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.12k|    static_cast<    \
  |  |  929|  5.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.7k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  41.4k|{
   72|  41.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  41.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  41.4k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  77.9k|{
   89|  77.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  77.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  77.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  77.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.9k|    static_cast<    \
  |  |  929|  77.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.9k|    static_cast<    \
  |  |  929|  77.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  77.9k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  77.9k|{
  127|  77.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  77.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  77.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  77.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.9k|    static_cast<    \
  |  |  929|  77.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.9k|    static_cast<    \
  |  |  929|  77.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  77.9k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  13.8k|{
  163|  13.8k|    T value;
  164|  13.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.60k, False: 5.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.60k|    }                                                  \
  |  |  |  | 3671|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.20k|    static_cast<    \
  |  |  929|  5.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.20k|    static_cast<    \
  |  |  929|  5.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.8k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  78.3k|{
   89|  78.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  78.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  78.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.3k|    static_cast<    \
  |  |  929|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.3k|    static_cast<    \
  |  |  929|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  78.3k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  78.3k|{
  127|  78.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  78.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  78.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.3k|    static_cast<    \
  |  |  929|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.3k|    static_cast<    \
  |  |  929|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  78.3k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  13.9k|{
  163|  13.9k|    T value;
  164|  13.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.60k, False: 5.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.60k|    }                                                  \
  |  |  |  | 3671|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.33k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.33k|    static_cast<    \
  |  |  929|  5.33k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.33k|    static_cast<    \
  |  |  929|  5.33k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.9k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  3.34M|{
  653|  3.34M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  3.34M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.44M|{
  659|  1.44M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.44M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 723k, False: 723k]
  ------------------
  661|  1.44M|                    : std::locale{};
  662|  1.44M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.92M|{
 1221|  1.92M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.92M|                                  m_nan_payload_buffer, value);
 1223|  1.92M|    value = this->setsign(value);
 1224|  1.92M|    return n;
 1225|  1.92M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   175k|{
 1221|   175k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   175k|                                  m_nan_payload_buffer, value);
 1223|   175k|    value = this->setsign(value);
 1224|   175k|    return n;
 1225|   175k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  2.08M|{
 1221|  2.08M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  2.08M|                                  m_nan_payload_buffer, value);
 1223|  2.08M|    value = this->setsign(value);
 1224|  2.08M|    return n;
 1225|  2.08M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   176k|{
 1221|   176k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   176k|                                  m_nan_payload_buffer, value);
 1223|   176k|    value = this->setsign(value);
 1224|   176k|    return n;
 1225|   176k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  2.10M|{
 1221|  2.10M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  2.10M|                                  m_nan_payload_buffer, value);
 1223|  2.10M|    value = this->setsign(value);
 1224|  2.10M|    return n;
 1225|  2.10M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   177k|{
 1221|   177k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   177k|                                  m_nan_payload_buffer, value);
 1223|   177k|    value = this->setsign(value);
 1224|   177k|    return n;
 1225|   177k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.39M|{
 2184|  1.39M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.39M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  1.48M|{
 2192|  1.48M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  1.48M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.40M, False: 77.4k]
  |  |  ------------------
  ------------------
 2194|  1.40M|        source.sync(*n);
 2195|  1.40M|    }
 2196|  77.4k|    else {
 2197|  77.4k|        source.sync_all();
 2198|  77.4k|    }
 2199|  1.48M|    return n;
 2200|  1.48M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   234k|{
 2208|   234k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   234k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   234k|{
 2216|   234k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   234k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   234k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 79.2k, False: 154k]
  |  |  ------------------
  ------------------
 2218|  79.2k|        source.sync(*n);
 2219|  79.2k|    }
 2220|   154k|    else {
 2221|   154k|        source.sync_all();
 2222|   154k|    }
 2223|   234k|    return n;
 2224|   234k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.81M|{
  194|  2.81M|    return find_classic_impl(
  195|  2.81M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.81M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.81M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  6.35M|{
  202|  6.35M|    return find_classic_impl(
  203|  6.35M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  6.35M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  6.35M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  1.39M|{
 2141|  1.39M|    return vscan_internal(source, format, args);
 2142|  1.39M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  1.48M|{
 2147|  1.48M|    auto n = vscan_internal(source, format, args);
 2148|  1.48M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.40M, False: 77.4k]
  |  |  ------------------
  ------------------
 2149|  1.40M|        source.sync(*n);
 2150|  1.40M|    }
 2151|  77.4k|    else {
 2152|  77.4k|        source.sync_all();
 2153|  77.4k|    }
 2154|  1.48M|    return n;
 2155|  1.48M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   234k|{
 2161|   234k|    return vscan_internal(source, format, args);
 2162|   234k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   234k|{
 2167|   234k|    auto n = vscan_internal(source, format, args);
 2168|   234k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   234k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 79.2k, False: 154k]
  |  |  ------------------
  ------------------
 2169|  79.2k|        source.sync(*n);
 2170|  79.2k|    }
 2171|   154k|    else {
 2172|   154k|        source.sync_all();
 2173|   154k|    }
 2174|   234k|    return n;
 2175|   234k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   308k|{
 2251|   308k|    return vscan_value_internal(source, arg);
 2252|   308k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   303k|{
 2256|   303k|    auto n = vscan_value_internal(source, arg);
 2257|   303k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   303k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 291k, False: 12.9k]
  |  |  ------------------
  ------------------
 2258|   291k|        source.sync(*n);
 2259|   291k|    }
 2260|  12.9k|    else {
 2261|  12.9k|        source.sync_all();
 2262|  12.9k|    }
 2263|   303k|    return n;
 2264|   303k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  41.5k|{
 2270|  41.5k|    return vscan_value_internal(source, arg);
 2271|  41.5k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  41.4k|{
 2276|  41.4k|    auto n = vscan_value_internal(source, arg);
 2277|  41.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  41.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.6k, False: 25.8k]
  |  |  ------------------
  ------------------
 2278|  15.6k|        source.sync(*n);
 2279|  15.6k|    }
 2280|  25.8k|    else {
 2281|  25.8k|        source.sync_all();
 2282|  25.8k|    }
 2283|  41.4k|    return n;
 2284|  41.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.81M|{
  118|  2.81M|    auto it = source.begin();
  119|       |
  120|  11.1M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 9.41M, False: 1.73M]
  ------------------
  121|  9.41M|        auto sv =
  122|  9.41M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  9.41M|                .substr(0, 8);
  124|       |
  125|  9.41M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 9.18M, False: 236k]
  ------------------
  126|  9.18M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  9.18M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  9.18M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 988k, False: 8.19M]
  ------------------
  129|   988k|                break;
  130|   988k|            }
  131|  8.19M|            continue;
  132|  9.18M|        }
  133|       |
  134|   831k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 689k, False: 141k]
  ------------------
  135|   689k|            auto tmp =
  136|   689k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   689k|            auto res = get_next_code_point(tmp);
  138|   689k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 94.7k, False: 594k]
  ------------------
  139|  94.7k|                return it;
  140|  94.7k|            }
  141|   594k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   594k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   594k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   594k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   594k|        }
  145|   236k|    }
  146|       |
  147|  2.72M|    return detail::make_string_view_iterator(source, it);
  148|  2.81M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  13.4M|{
  105|  13.4M|    static_assert(sizeof(*source.data()) == 1);
  106|  13.4M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  13.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  13.4M|    uint64_t word{};
  108|  13.4M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  13.4M|    return has_byte_greater(word, 127) != 0;
  111|  13.4M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  59.9M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   689k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  6.35M|{
  118|  6.35M|    auto it = source.begin();
  119|       |
  120|  6.93M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 4.01M, False: 2.92M]
  ------------------
  121|  4.01M|        auto sv =
  122|  4.01M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  4.01M|                .substr(0, 8);
  124|       |
  125|  4.01M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.75M, False: 258k]
  ------------------
  126|  3.75M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.75M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.75M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 3.18M, False: 563k]
  ------------------
  129|  3.18M|                break;
  130|  3.18M|            }
  131|   563k|            continue;
  132|  3.75M|        }
  133|       |
  134|   487k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 467k, False: 19.3k]
  ------------------
  135|   467k|            auto tmp =
  136|   467k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   467k|            auto res = get_next_code_point(tmp);
  138|   467k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 239k, False: 228k]
  ------------------
  139|   239k|                return it;
  140|   239k|            }
  141|   228k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   228k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   228k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   228k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   228k|        }
  145|   258k|    }
  146|       |
  147|  6.11M|    return detail::make_string_view_iterator(source, it);
  148|  6.35M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  6.02M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   467k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.92M|{
 1138|  1.92M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 16.4k, False: 1.91M]
  ------------------
 1139|  16.4k|        value = std::numeric_limits<T>::infinity();
 1140|  16.4k|        return 3;
 1141|  16.4k|    }
 1142|  1.91M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 11.6k, False: 1.89M]
  ------------------
 1143|  11.6k|        value = std::numeric_limits<T>::infinity();
 1144|  11.6k|        return 8;
 1145|  11.6k|    }
 1146|  1.89M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 68.0k, False: 1.83M]
  ------------------
 1147|  68.0k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  68.0k|        return 3;
 1149|  68.0k|    }
 1150|  1.83M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.82M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.82M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.82M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 411k, False: 1.41M]
  ------------------
 1185|   411k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.19k, False: 406k]
  |  |  ------------------
  ------------------
 1186|  5.19k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  5.19k|                                         "Invalid floating-point digit");
 1188|  5.19k|        }
 1189|   411k|    }
 1190|  1.82M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.5k, False: 1.81M]
  |  |  ------------------
  ------------------
 1191|  13.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  13.5k|                                     "Invalid floating-point digit");
 1193|  13.5k|    }
 1194|       |
 1195|  1.81M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.81M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.81M|            double tmp{};
 1200|  1.81M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.81M|            value = tmp;
 1202|  1.81M|            return ret;
 1203|  1.81M|        }
 1204|  1.81M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.81M|            return fast_float_fallback(data, value);
 1208|  1.81M|        }
 1209|  1.81M|    }
 1210|  1.81M|    else {
 1211|       |        // Default to fast_float
 1212|  1.81M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.81M|    }
 1214|  1.81M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.81M|    {
 1078|  1.81M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  6.73M|    {
  712|  6.73M|        return {kind, options};
  713|  6.73M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.81M|    {
 1082|  1.81M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 405k, False: 1.40M]
  ------------------
 1083|  1.81M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 66.7k, False: 1.33M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   472k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   472k|                                              value);
 1087|   472k|        }
 1088|       |
 1089|  1.33M|        const auto flags = get_flags();
 1090|  1.33M|        const auto view = get_view();
 1091|  1.33M|        const auto result = fast_float::from_chars(
 1092|  1.33M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.33M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.33M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.33M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 1.32M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  11.8k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  11.8k|                                              value);
 1102|  11.8k|        }
 1103|       |
 1104|  1.32M|        return result.ptr - view.data();
 1105|  1.33M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   484k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   484k|    {
 1048|   484k|#if !SCN_DISABLE_STRTOD
 1049|   484k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   484k|    }
 1056|   484k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   484k|    {
  894|   484k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   508k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   484k|    {
  898|   484k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   484k|                           generic_strtod);
  900|   484k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   484k|    {
  732|   484k|        CharT* end{};
  733|   484k|        errno = 0;
  734|   484k|        value = strtod_cb(src, &end);
  735|   484k|        const auto saved_errno = errno;
  736|   484k|        auto chars_read = end - src;
  737|       |
  738|   484k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   484k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 470k]
  |  |  ------------------
  ------------------
  740|  14.2k|            return unexpected(e);
  741|  14.2k|        }
  742|       |
  743|   470k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 403k, False: 66.2k]
  ------------------
  744|   470k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 403k, False: 0]
  ------------------
  745|   403k|            chars_read -= 2;
  746|   403k|        }
  747|       |
  748|   470k|        return chars_read;
  749|   484k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   508k|    {
  778|   508k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 137k, False: 370k]
  |  Branch (778:37): [True: 0, False: 137k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   508k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 66.9k, False: 441k]
  ------------------
  785|   508k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 66.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   508k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 16.6k, False: 491k]
  |  Branch (791:34): [True: 2.49k, False: 14.1k]
  ------------------
  792|  2.49k|            SCN_UNLIKELY_ATTR
  793|  2.49k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  2.49k|        }
  795|       |
  796|   505k|        SCN_GCC_COMPAT_PUSH
  797|   505k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   505k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 505k, False: 0]
  ------------------
  800|   505k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 505k, False: 0]
  ------------------
  801|   505k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 13.5k, False: 492k]
  ------------------
  802|  13.5k|            SCN_UNLIKELY_ATTR
  803|  13.5k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  13.5k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   492k|            return {};
  809|   505k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   524k|{
  687|   524k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 139k, False: 384k]
  |  Branch (687:25): [True: 0, False: 384k]
  ------------------
  688|   524k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   484k|    {
  755|   484k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 476k, False: 8.03k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   476k|            auto first_space = read_until_classic_space(input.view());
  758|   476k|            input.assign(
  759|   476k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   476k|        }
  761|       |
  762|   484k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 405k, False: 78.6k]
  ------------------
  763|   405k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   405k|                input.get_allocated_string().insert(0, "0x");
  765|   405k|            }
  766|   405k|            else {
  767|   405k|                input.get_allocated_string().insert(0, L"0x");
  768|   405k|            }
  769|   405k|        }
  770|       |
  771|   484k|        return input.get_allocated_string().c_str();
  772|   484k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   484k|    {
  905|   484k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   484k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   484k|        }
  908|   484k|        else {
  909|   484k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   484k|        }
  911|   484k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   484k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   484k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   484k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   484k|            return std::strtof(str, str_end);
  839|   484k|        }
  840|   484k|        else if constexpr (std::is_same_v<T, double>) {
  841|   484k|            return std::strtod(str, str_end);
  842|   484k|        }
  843|   484k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   484k|            return std::strtold(str, str_end);
  845|   484k|        }
  846|   484k|#endif
  847|   484k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.98M|    {
 1061|  2.98M|        unsigned format_flags{};
 1062|  2.98M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.96M, False: 24.8k]
  ------------------
 1063|  2.96M|            format_flags |= fast_float::fixed;
 1064|  2.96M|        }
 1065|  2.98M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 2.58M, False: 399k]
  ------------------
 1066|  2.58M|            format_flags |= fast_float::scientific;
 1067|  2.58M|        }
 1068|       |
 1069|  2.98M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.98M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|  1.33M|    {
 1110|  1.33M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.33M|            return m_input.view();
 1112|  1.33M|        }
 1113|  1.33M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.33M|            return std::u16string_view{
 1115|  1.33M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.33M|                m_input.view().size()};
 1117|  1.33M|        }
 1118|  1.33M|        else {
 1119|  1.33M|            return std::u32string_view{
 1120|  1.33M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.33M|                m_input.view().size()};
 1122|  1.33M|        }
 1123|  1.33M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   175k|{
 1138|   175k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 175k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   175k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 175k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   175k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 175k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   175k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 175k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   175k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   175k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 38.6k, False: 136k]
  ------------------
 1185|  38.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 21.7k]
  |  |  ------------------
  ------------------
 1186|  16.8k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  16.8k|                                         "Invalid floating-point digit");
 1188|  16.8k|        }
 1189|  38.6k|    }
 1190|   158k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.1k, False: 116k]
  |  |  ------------------
  ------------------
 1191|  42.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  42.1k|                                     "Invalid floating-point digit");
 1193|  42.1k|    }
 1194|       |
 1195|   116k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   116k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   116k|            double tmp{};
 1200|   116k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   116k|            value = tmp;
 1202|   116k|            return ret;
 1203|   116k|        }
 1204|   116k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   116k|            return fast_float_fallback(data, value);
 1208|   116k|        }
 1209|   116k|    }
 1210|   116k|    else {
 1211|       |        // Default to fast_float
 1212|   116k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   116k|    }
 1214|   116k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|   116k|    {
 1078|   116k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   398k|    {
  712|   398k|        return {kind, options};
  713|   398k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   116k|    {
 1082|   116k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 21.6k, False: 94.9k]
  ------------------
 1083|   116k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 259, False: 94.6k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  21.9k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  21.9k|                                              value);
 1087|  21.9k|        }
 1088|       |
 1089|  94.6k|        const auto flags = get_flags();
 1090|  94.6k|        const auto view = get_view();
 1091|  94.6k|        const auto result = fast_float::from_chars(
 1092|  94.6k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  94.6k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.6k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  94.6k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.73k, False: 92.9k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.73k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.73k|                                              value);
 1102|  1.73k|        }
 1103|       |
 1104|  92.9k|        return result.ptr - view.data();
 1105|  94.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  23.6k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  23.6k|    {
 1048|  23.6k|#if !SCN_DISABLE_STRTOD
 1049|  23.6k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  23.6k|    }
 1056|  23.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  23.6k|    {
  894|  23.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  23.6k|    {
  898|  23.6k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  23.6k|                           generic_strtod);
  900|  23.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  23.6k|    {
  732|  23.6k|        CharT* end{};
  733|  23.6k|        errno = 0;
  734|  23.6k|        value = strtod_cb(src, &end);
  735|  23.6k|        const auto saved_errno = errno;
  736|  23.6k|        auto chars_read = end - src;
  737|       |
  738|  23.6k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  23.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.77k, False: 21.8k]
  |  |  ------------------
  ------------------
  740|  1.77k|            return unexpected(e);
  741|  1.77k|        }
  742|       |
  743|  21.8k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 21.6k, False: 259]
  ------------------
  744|  21.8k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 21.6k, False: 0]
  ------------------
  745|  21.6k|            chars_read -= 2;
  746|  21.6k|        }
  747|       |
  748|  21.8k|        return chars_read;
  749|  23.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  23.6k|    {
  755|  23.6k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 22.5k, False: 1.15k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  22.5k|            auto first_space = read_until_classic_space(input.view());
  758|  22.5k|            input.assign(
  759|  22.5k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  22.5k|        }
  761|       |
  762|  23.6k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 21.6k, False: 1.99k]
  ------------------
  763|  21.6k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  21.6k|                input.get_allocated_string().insert(0, "0x");
  765|  21.6k|            }
  766|  21.6k|            else {
  767|  21.6k|                input.get_allocated_string().insert(0, L"0x");
  768|  21.6k|            }
  769|  21.6k|        }
  770|       |
  771|  23.6k|        return input.get_allocated_string().c_str();
  772|  23.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  23.6k|    {
  905|  23.6k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  23.6k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  23.6k|        }
  908|  23.6k|        else {
  909|  23.6k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  23.6k|        }
  911|  23.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  23.6k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  23.6k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  23.6k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  23.6k|            return std::wcstof(str, str_end);
  877|  23.6k|        }
  878|  23.6k|        else if constexpr (std::is_same_v<T, double>) {
  879|  23.6k|            return std::wcstod(str, str_end);
  880|  23.6k|        }
  881|  23.6k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  23.6k|            return std::wcstold(str, str_end);
  883|  23.6k|        }
  884|  23.6k|#endif
  885|  23.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  94.6k|    {
 1110|  94.6k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  94.6k|            return m_input.view();
 1112|  94.6k|        }
 1113|  94.6k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  94.6k|            return std::u16string_view{
 1115|  94.6k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  94.6k|                m_input.view().size()};
 1117|  94.6k|        }
 1118|  94.6k|        else {
 1119|  94.6k|            return std::u32string_view{
 1120|  94.6k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  94.6k|                m_input.view().size()};
 1122|  94.6k|        }
 1123|  94.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  2.08M|{
 1138|  2.08M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 17.9k, False: 2.06M]
  ------------------
 1139|  17.9k|        value = std::numeric_limits<T>::infinity();
 1140|  17.9k|        return 3;
 1141|  17.9k|    }
 1142|  2.06M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 12.7k, False: 2.05M]
  ------------------
 1143|  12.7k|        value = std::numeric_limits<T>::infinity();
 1144|  12.7k|        return 8;
 1145|  12.7k|    }
 1146|  2.05M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 70.6k, False: 1.98M]
  ------------------
 1147|  70.6k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  70.6k|        return 3;
 1149|  70.6k|    }
 1150|  1.98M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.97M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.97M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.97M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 429k, False: 1.54M]
  ------------------
 1185|   429k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.56k, False: 424k]
  |  |  ------------------
  ------------------
 1186|  5.56k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  5.56k|                                         "Invalid floating-point digit");
 1188|  5.56k|        }
 1189|   429k|    }
 1190|  1.97M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.2k, False: 1.95M]
  |  |  ------------------
  ------------------
 1191|  15.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  15.2k|                                     "Invalid floating-point digit");
 1193|  15.2k|    }
 1194|       |
 1195|  1.95M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.95M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.95M|            double tmp{};
 1200|  1.95M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.95M|            value = tmp;
 1202|  1.95M|            return ret;
 1203|  1.95M|        }
 1204|  1.95M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.95M|            return fast_float_fallback(data, value);
 1208|  1.95M|        }
 1209|  1.95M|    }
 1210|  1.95M|    else {
 1211|       |        // Default to fast_float
 1212|  1.95M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.95M|    }
 1214|  1.95M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.95M|    {
 1078|  1.95M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.95M|    {
 1082|  1.95M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 423k, False: 1.53M]
  ------------------
 1083|  1.95M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 76.0k, False: 1.45M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   499k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   499k|                                              value);
 1087|   499k|        }
 1088|       |
 1089|  1.45M|        const auto flags = get_flags();
 1090|  1.45M|        const auto view = get_view();
 1091|  1.45M|        const auto result = fast_float::from_chars(
 1092|  1.45M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.45M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.45M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.45M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.05k, False: 1.45M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.05k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.05k|                                              value);
 1102|  5.05k|        }
 1103|       |
 1104|  1.45M|        return result.ptr - view.data();
 1105|  1.45M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   504k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   504k|    {
 1048|   504k|#if !SCN_DISABLE_STRTOD
 1049|   504k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   504k|    }
 1056|   504k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   504k|    {
  894|   504k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   527k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   504k|    {
  898|   504k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   504k|                           generic_strtod);
  900|   504k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   504k|    {
  732|   504k|        CharT* end{};
  733|   504k|        errno = 0;
  734|   504k|        value = strtod_cb(src, &end);
  735|   504k|        const auto saved_errno = errno;
  736|   504k|        auto chars_read = end - src;
  737|       |
  738|   504k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   504k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.81k, False: 498k]
  |  |  ------------------
  ------------------
  740|  5.81k|            return unexpected(e);
  741|  5.81k|        }
  742|       |
  743|   498k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 423k, False: 75.9k]
  ------------------
  744|   498k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 423k, False: 0]
  ------------------
  745|   423k|            chars_read -= 2;
  746|   423k|        }
  747|       |
  748|   498k|        return chars_read;
  749|   504k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   527k|    {
  778|   527k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 139k, False: 388k]
  |  Branch (778:37): [True: 0, False: 139k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   527k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 76.2k, False: 451k]
  ------------------
  785|   527k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 76.2k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   527k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 6.63k, False: 520k]
  |  Branch (791:34): [True: 650, False: 5.98k]
  ------------------
  792|    650|            SCN_UNLIKELY_ATTR
  793|    650|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    650|        }
  795|       |
  796|   526k|        SCN_GCC_COMPAT_PUSH
  797|   526k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   526k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 526k, False: 0]
  ------------------
  800|   526k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 526k, False: 0]
  ------------------
  801|   526k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 5.98k, False: 520k]
  ------------------
  802|  5.98k|            SCN_UNLIKELY_ATTR
  803|  5.98k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  5.98k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   520k|            return {};
  809|   526k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   534k|{
  691|   534k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 140k, False: 394k]
  |  Branch (691:24): [True: 0, False: 394k]
  ------------------
  692|   534k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   504k|    {
  755|   504k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 499k, False: 5.72k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   499k|            auto first_space = read_until_classic_space(input.view());
  758|   499k|            input.assign(
  759|   499k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   499k|        }
  761|       |
  762|   504k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 423k, False: 81.0k]
  ------------------
  763|   423k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   423k|                input.get_allocated_string().insert(0, "0x");
  765|   423k|            }
  766|   423k|            else {
  767|   423k|                input.get_allocated_string().insert(0, L"0x");
  768|   423k|            }
  769|   423k|        }
  770|       |
  771|   504k|        return input.get_allocated_string().c_str();
  772|   504k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   504k|    {
  905|   504k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   504k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   504k|        }
  908|   504k|        else {
  909|   504k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   504k|        }
  911|   504k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   504k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   504k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   504k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   504k|            return std::strtof(str, str_end);
  839|   504k|        }
  840|   504k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   504k|            return std::strtod(str, str_end);
  842|   504k|        }
  843|   504k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   504k|            return std::strtold(str, str_end);
  845|   504k|        }
  846|   504k|#endif
  847|   504k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.45M|    {
 1110|  1.45M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.45M|            return m_input.view();
 1112|  1.45M|        }
 1113|  1.45M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.45M|            return std::u16string_view{
 1115|  1.45M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.45M|                m_input.view().size()};
 1117|  1.45M|        }
 1118|  1.45M|        else {
 1119|  1.45M|            return std::u32string_view{
 1120|  1.45M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.45M|                m_input.view().size()};
 1122|  1.45M|        }
 1123|  1.45M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   176k|{
 1138|   176k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 176k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   176k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 176k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   176k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 176k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   176k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 176k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   176k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   176k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 38.6k, False: 137k]
  ------------------
 1185|  38.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 21.7k]
  |  |  ------------------
  ------------------
 1186|  16.8k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  16.8k|                                         "Invalid floating-point digit");
 1188|  16.8k|        }
 1189|  38.6k|    }
 1190|   159k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.3k, False: 116k]
  |  |  ------------------
  ------------------
 1191|  42.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  42.3k|                                     "Invalid floating-point digit");
 1193|  42.3k|    }
 1194|       |
 1195|   116k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   116k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   116k|            double tmp{};
 1200|   116k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   116k|            value = tmp;
 1202|   116k|            return ret;
 1203|   116k|        }
 1204|   116k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   116k|            return fast_float_fallback(data, value);
 1208|   116k|        }
 1209|   116k|    }
 1210|   116k|    else {
 1211|       |        // Default to fast_float
 1212|   116k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   116k|    }
 1214|   116k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|   116k|    {
 1078|   116k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   116k|    {
 1082|   116k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 21.6k, False: 95.2k]
  ------------------
 1083|   116k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 259, False: 94.9k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  21.9k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  21.9k|                                              value);
 1087|  21.9k|        }
 1088|       |
 1089|  94.9k|        const auto flags = get_flags();
 1090|  94.9k|        const auto view = get_view();
 1091|  94.9k|        const auto result = fast_float::from_chars(
 1092|  94.9k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  94.9k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  94.9k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 780, False: 94.1k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    780|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    780|                                              value);
 1102|    780|        }
 1103|       |
 1104|  94.1k|        return result.ptr - view.data();
 1105|  94.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  22.7k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  22.7k|    {
 1048|  22.7k|#if !SCN_DISABLE_STRTOD
 1049|  22.7k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  22.7k|    }
 1056|  22.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  22.7k|    {
  894|  22.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  22.7k|    {
  898|  22.7k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  22.7k|                           generic_strtod);
  900|  22.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  22.7k|    {
  732|  22.7k|        CharT* end{};
  733|  22.7k|        errno = 0;
  734|  22.7k|        value = strtod_cb(src, &end);
  735|  22.7k|        const auto saved_errno = errno;
  736|  22.7k|        auto chars_read = end - src;
  737|       |
  738|  22.7k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  22.7k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 816, False: 21.9k]
  |  |  ------------------
  ------------------
  740|    816|            return unexpected(e);
  741|    816|        }
  742|       |
  743|  21.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 21.6k, False: 259]
  ------------------
  744|  21.9k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 21.6k, False: 0]
  ------------------
  745|  21.6k|            chars_read -= 2;
  746|  21.6k|        }
  747|       |
  748|  21.9k|        return chars_read;
  749|  22.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  22.7k|    {
  755|  22.7k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 22.0k, False: 681]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  22.0k|            auto first_space = read_until_classic_space(input.view());
  758|  22.0k|            input.assign(
  759|  22.0k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  22.0k|        }
  761|       |
  762|  22.7k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 21.6k, False: 1.03k]
  ------------------
  763|  21.6k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  21.6k|                input.get_allocated_string().insert(0, "0x");
  765|  21.6k|            }
  766|  21.6k|            else {
  767|  21.6k|                input.get_allocated_string().insert(0, L"0x");
  768|  21.6k|            }
  769|  21.6k|        }
  770|       |
  771|  22.7k|        return input.get_allocated_string().c_str();
  772|  22.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  22.7k|    {
  905|  22.7k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  22.7k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  22.7k|        }
  908|  22.7k|        else {
  909|  22.7k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  22.7k|        }
  911|  22.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  22.7k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  22.7k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  22.7k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  22.7k|            return std::wcstof(str, str_end);
  877|  22.7k|        }
  878|  22.7k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  22.7k|            return std::wcstod(str, str_end);
  880|  22.7k|        }
  881|  22.7k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  22.7k|            return std::wcstold(str, str_end);
  883|  22.7k|        }
  884|  22.7k|#endif
  885|  22.7k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  94.9k|    {
 1110|  94.9k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  94.9k|            return m_input.view();
 1112|  94.9k|        }
 1113|  94.9k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  94.9k|            return std::u16string_view{
 1115|  94.9k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  94.9k|                m_input.view().size()};
 1117|  94.9k|        }
 1118|  94.9k|        else {
 1119|  94.9k|            return std::u32string_view{
 1120|  94.9k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  94.9k|                m_input.view().size()};
 1122|  94.9k|        }
 1123|  94.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  2.10M|{
 1138|  2.10M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 18.5k, False: 2.08M]
  ------------------
 1139|  18.5k|        value = std::numeric_limits<T>::infinity();
 1140|  18.5k|        return 3;
 1141|  18.5k|    }
 1142|  2.08M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 12.9k, False: 2.07M]
  ------------------
 1143|  12.9k|        value = std::numeric_limits<T>::infinity();
 1144|  12.9k|        return 8;
 1145|  12.9k|    }
 1146|  2.07M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 71.1k, False: 2.00M]
  ------------------
 1147|  71.1k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  71.1k|        return 3;
 1149|  71.1k|    }
 1150|  2.00M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.99M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.99M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.99M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 430k, False: 1.56M]
  ------------------
 1185|   430k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.73k, False: 424k]
  |  |  ------------------
  ------------------
 1186|  5.73k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  5.73k|                                         "Invalid floating-point digit");
 1188|  5.73k|        }
 1189|   430k|    }
 1190|  1.99M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.0k, False: 1.97M]
  |  |  ------------------
  ------------------
 1191|  16.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  16.0k|                                     "Invalid floating-point digit");
 1193|  16.0k|    }
 1194|       |
 1195|  1.97M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.97M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.97M|            double tmp{};
 1200|  1.97M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.97M|            value = tmp;
 1202|  1.97M|            return ret;
 1203|  1.97M|        }
 1204|  1.97M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.97M|            return fast_float_fallback(data, value);
 1208|  1.97M|        }
 1209|  1.97M|    }
 1210|  1.97M|    else {
 1211|       |        // Default to fast_float
 1212|  1.97M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.97M|    }
 1214|  1.97M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.97M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.97M|    {
 1048|  1.97M|#if !SCN_DISABLE_STRTOD
 1049|  1.97M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.97M|    }
 1056|  1.97M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.97M|    {
  894|  1.97M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  2.09M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.97M|    {
  898|  1.97M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.97M|                           generic_strtod);
  900|  1.97M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.97M|    {
  732|  1.97M|        CharT* end{};
  733|  1.97M|        errno = 0;
  734|  1.97M|        value = strtod_cb(src, &end);
  735|  1.97M|        const auto saved_errno = errno;
  736|  1.97M|        auto chars_read = end - src;
  737|       |
  738|  1.97M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.97M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 1.97M]
  |  |  ------------------
  ------------------
  740|  1.58k|            return unexpected(e);
  741|  1.58k|        }
  742|       |
  743|  1.97M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 424k, False: 1.55M]
  ------------------
  744|  1.97M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 424k, False: 0]
  ------------------
  745|   424k|            chars_read -= 2;
  746|   424k|        }
  747|       |
  748|  1.97M|        return chars_read;
  749|  1.97M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  2.09M|    {
  778|  2.09M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 618k, False: 1.47M]
  |  Branch (778:37): [True: 0, False: 618k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  2.09M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 76.2k, False: 2.01M]
  ------------------
  785|  2.09M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 76.2k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  2.09M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.69k, False: 2.09M]
  |  Branch (791:34): [True: 164, False: 1.53k]
  ------------------
  792|    164|            SCN_UNLIKELY_ATTR
  793|    164|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    164|        }
  795|       |
  796|  2.09M|        SCN_GCC_COMPAT_PUSH
  797|  2.09M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  2.09M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 2.09M, False: 0]
  ------------------
  800|  2.09M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 2.09M, False: 0]
  ------------------
  801|  2.09M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.53k, False: 2.09M]
  ------------------
  802|  1.53k|            SCN_UNLIKELY_ATTR
  803|  1.53k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.53k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  2.09M|            return {};
  809|  2.09M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  2.09M|{
  695|  2.09M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 618k, False: 1.47M]
  |  Branch (695:26): [True: 0, False: 1.47M]
  ------------------
  696|  2.09M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.97M|    {
  755|  1.97M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.84M, False: 135k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.84M|            auto first_space = read_until_classic_space(input.view());
  758|  1.84M|            input.assign(
  759|  1.84M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.84M|        }
  761|       |
  762|  1.97M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 424k, False: 1.55M]
  ------------------
  763|   424k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   424k|                input.get_allocated_string().insert(0, "0x");
  765|   424k|            }
  766|   424k|            else {
  767|   424k|                input.get_allocated_string().insert(0, L"0x");
  768|   424k|            }
  769|   424k|        }
  770|       |
  771|  1.97M|        return input.get_allocated_string().c_str();
  772|  1.97M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.97M|    {
  905|  1.97M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.97M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.97M|        }
  908|  1.97M|        else {
  909|  1.97M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.97M|        }
  911|  1.97M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.97M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.97M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.97M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.97M|            return std::strtof(str, str_end);
  839|  1.97M|        }
  840|  1.97M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.97M|            return std::strtod(str, str_end);
  842|  1.97M|        }
  843|  1.97M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.97M|            return std::strtold(str, str_end);
  845|  1.97M|        }
  846|  1.97M|#endif
  847|  1.97M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   177k|{
 1138|   177k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 177k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   177k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 177k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   177k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 177k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   177k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 177k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   177k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   177k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 38.6k, False: 138k]
  ------------------
 1185|  38.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 21.7k]
  |  |  ------------------
  ------------------
 1186|  16.9k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  16.9k|                                         "Invalid floating-point digit");
 1188|  16.9k|        }
 1189|  38.6k|    }
 1190|   160k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.5k, False: 118k]
  |  |  ------------------
  ------------------
 1191|  42.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  42.5k|                                     "Invalid floating-point digit");
 1193|  42.5k|    }
 1194|       |
 1195|   118k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   118k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   118k|            double tmp{};
 1200|   118k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   118k|            value = tmp;
 1202|   118k|            return ret;
 1203|   118k|        }
 1204|   118k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   118k|            return fast_float_fallback(data, value);
 1208|   118k|        }
 1209|   118k|    }
 1210|   118k|    else {
 1211|       |        // Default to fast_float
 1212|   118k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   118k|    }
 1214|   118k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   118k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   118k|    {
 1048|   118k|#if !SCN_DISABLE_STRTOD
 1049|   118k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   118k|    }
 1056|   118k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|   118k|    {
  894|   118k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   118k|    {
  898|   118k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   118k|                           generic_strtod);
  900|   118k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   118k|    {
  732|   118k|        CharT* end{};
  733|   118k|        errno = 0;
  734|   118k|        value = strtod_cb(src, &end);
  735|   118k|        const auto saved_errno = errno;
  736|   118k|        auto chars_read = end - src;
  737|       |
  738|   118k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   118k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 118k]
  |  |  ------------------
  ------------------
  740|    114|            return unexpected(e);
  741|    114|        }
  742|       |
  743|   118k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 21.6k, False: 96.3k]
  ------------------
  744|   118k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 21.6k, False: 0]
  ------------------
  745|  21.6k|            chars_read -= 2;
  746|  21.6k|        }
  747|       |
  748|   118k|        return chars_read;
  749|   118k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   118k|    {
  755|   118k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 115k, False: 2.35k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   115k|            auto first_space = read_until_classic_space(input.view());
  758|   115k|            input.assign(
  759|   115k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   115k|        }
  761|       |
  762|   118k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 21.6k, False: 96.4k]
  ------------------
  763|  21.6k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  21.6k|                input.get_allocated_string().insert(0, "0x");
  765|  21.6k|            }
  766|  21.6k|            else {
  767|  21.6k|                input.get_allocated_string().insert(0, L"0x");
  768|  21.6k|            }
  769|  21.6k|        }
  770|       |
  771|   118k|        return input.get_allocated_string().c_str();
  772|   118k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   118k|    {
  905|   118k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   118k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   118k|        }
  908|   118k|        else {
  909|   118k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   118k|        }
  911|   118k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   118k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   118k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|   118k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|   118k|            return std::wcstof(str, str_end);
  877|   118k|        }
  878|   118k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|   118k|            return std::wcstod(str, str_end);
  880|   118k|        }
  881|   118k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|   118k|            return std::wcstold(str, str_end);
  883|   118k|        }
  884|   118k|#endif
  885|   118k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  2.96M|{
 2073|  2.96M|    const auto argcount = args.size();
 2074|  2.96M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 607k, False: 2.36M]
  |  Branch (2074:60): [True: 607k, False: 0]
  ------------------
 2075|   607k|        auto arg = args.get(0);
 2076|   607k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   607k|    static_cast<    \
  |  |  929|   607k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   607k|    }
 2078|       |
 2079|  2.36M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 2.36M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  2.36M|    SCN_UNLIKELY_ATTR
 2087|  2.36M|    {
 2088|  2.36M|        auto handler = format_handler<false, CharT>{
 2089|  2.36M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.36M|    static_cast<    \
  |  |  929|  2.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.36M|    static_cast<    \
  |  |  929|  2.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  2.36M|        return vscan_parse_format_string(format, handler);
 2091|  2.36M|    }
 2092|  2.36M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  5.75M|{
 1625|  5.75M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 4.52M, False: 1.22M]
  ------------------
 1626|  4.52M|        return false;
 1627|  4.52M|    }
 1628|  1.22M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 1.22M, False: 0]
  |  Branch (1628:39): [True: 1.22M, False: 0]
  ------------------
 1629|  5.75M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   911k|{
 1658|   911k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   911k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 911k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   911k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   911k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 911k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   911k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   911k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   911k|    static_cast<    \
  |  |  929|   911k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   911k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   911k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   911k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   911k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   911k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.7k, False: 873k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  38.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  38.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  38.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  38.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  38.7k|    }                                                  \
  |  |  |  | 3671|   911k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   873k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   873k|    return it.position();
 1675|   911k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  2.16M|    {
 1903|  2.16M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  5.29M|    {
 1722|  5.29M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  5.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.29M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  5.29M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  2.16M|    {
 1853|  2.16M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  2.16M|{
 2038|  2.16M|    const auto beg = handler.get_ctx().begin();
 2039|  2.16M|    detail::parse_format_string<false>(format, handler);
 2040|  2.16M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 129k, False: 2.03M]
  |  |  ------------------
  ------------------
 2041|   129k|        return unexpected(handler.error);
 2042|   129k|    }
 2043|  2.03M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  2.16M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  14.9M|    {
 2022|  14.9M|        return ctx.get();
 2023|  14.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  14.9M|    {
 1857|  14.9M|        return contiguous_ctx;
 1858|  14.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  4.20M|    {
 1907|  4.20M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 4.20M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  4.20M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  2.16M|{
 1681|  2.16M|    auto arg = ctx.arg(id);
 1682|  2.16M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  2.16M|    return arg;
 1686|  2.16M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  5.29M|    {
 1797|  5.29M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  5.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.29M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  5.29M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  5.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.29M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  5.29M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  5.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.29M, False: 0]
  |  |  ------------------
  ------------------
 1807|  5.29M|            visited_args_lower64 |= (1ull << id);
 1808|  5.29M|            return;
 1809|  5.29M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  5.29M|    {
 1782|  5.29M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  5.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.29M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  5.29M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  5.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.29M, False: 0]
  |  |  ------------------
  ------------------
 1788|  5.29M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  5.29M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  5.29M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   774k|    {
 1766|   774k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   774k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 774k, False: 0]
  |  |  ------------------
  ------------------
 1767|   774k|            error = err;
 1768|   774k|        }
 1769|   774k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  2.16M|    {
 1944|  2.16M|        return parse_ctx.next_arg_id();
 1945|  2.16M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  2.16M|    {
 1985|  2.16M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  2.16M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  2.16M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 2.16M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  2.16M|        auto specs = detail::format_specs{};
 1998|  2.16M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  2.16M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  2.16M|            arg.type()};
 2001|       |
 2002|  2.16M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  2.16M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 2.16M]
  |  Branch (2003:29): [True: 0, False: 2.16M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  2.16M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  2.16M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  2.16M|        on_visit_scan_arg(
 2014|  2.16M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  2.16M|                                           get_ctx().locale()},
 2016|  2.16M|            arg);
 2017|  2.16M|        return parse_ctx.begin();
 2018|  2.16M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  2.16M|    {
 1701|  2.16M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  2.16M|    {
 1956|  2.16M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 2.16M]
  |  Branch (1956:23): [True: 0, False: 2.16M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  2.16M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  2.16M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 129k, False: 2.03M]
  |  |  ------------------
  ------------------
 1963|   129k|            on_error(r.error());
 1964|   129k|        }
 1965|  2.03M|        else {
 1966|  2.03M|            get_ctx().advance_to(*r);
 1967|  2.03M|        }
 1968|  2.16M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  5.29M|    {
 1729|  5.29M|        {
 1730|  5.29M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 5.29M]
  ------------------
 1731|  5.29M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 5.29M]
  ------------------
 1732|  5.29M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  5.29M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  5.29M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 5.29M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  5.29M|        }
 1739|       |
 1740|  5.29M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 5.29M, False: 0]
  ------------------
 1741|  5.29M|            return;
 1742|  5.29M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  5.29M|    {
 1777|  5.29M|        return error;
 1778|  5.29M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  15.8M|    {
 1773|  15.8M|        return static_cast<bool>(error);
 1774|  15.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  2.36M|    {
 1903|  2.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  2.36M|    {
 1830|  2.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  2.36M|{
 2038|  2.36M|    const auto beg = handler.get_ctx().begin();
 2039|  2.36M|    detail::parse_format_string<false>(format, handler);
 2040|  2.36M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 129k, False: 2.23M]
  |  |  ------------------
  ------------------
 2041|   129k|        return unexpected(handler.error);
 2042|   129k|    }
 2043|  2.23M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  2.36M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  16.2M|    {
 2022|  16.2M|        return ctx.get();
 2023|  16.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  16.2M|    {
 1834|  16.2M|        return ctx;
 1835|  16.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  4.59M|    {
 1907|  4.59M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 4.59M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  4.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  2.36M|{
 1681|  2.36M|    auto arg = ctx.arg(id);
 1682|  2.36M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  2.36M|    return arg;
 1686|  2.36M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  2.36M|    {
 1944|  2.36M|        return parse_ctx.next_arg_id();
 1945|  2.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  2.36M|    {
 1985|  2.36M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  2.36M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  2.36M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 2.36M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  2.36M|        auto specs = detail::format_specs{};
 1998|  2.36M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  2.36M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  2.36M|            arg.type()};
 2001|       |
 2002|  2.36M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  2.36M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 2.36M]
  |  Branch (2003:29): [True: 0, False: 2.36M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  2.36M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  2.36M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  2.36M|        on_visit_scan_arg(
 2014|  2.36M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  2.36M|                                           get_ctx().locale()},
 2016|  2.36M|            arg);
 2017|  2.36M|        return parse_ctx.begin();
 2018|  2.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  2.36M|    {
 1701|  2.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  2.36M|    {
 1956|  2.36M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 2.36M]
  |  Branch (1956:23): [True: 0, False: 2.36M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  2.36M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  2.36M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 129k, False: 2.23M]
  |  |  ------------------
  ------------------
 1963|   129k|            on_error(r.error());
 1964|   129k|        }
 1965|  2.23M|        else {
 1966|  2.23M|            get_ctx().advance_to(*r);
 1967|  2.23M|        }
 1968|  2.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  2.78M|{
 2053|  2.78M|    const auto argcount = args.size();
 2054|  2.78M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 617k, False: 2.16M]
  |  Branch (2054:60): [True: 617k, False: 0]
  ------------------
 2055|   617k|        auto arg = args.get(0);
 2056|   617k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   617k|    static_cast<    \
  |  |  929|   617k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   617k|    }
 2058|       |
 2059|  2.16M|    auto handler = format_handler<true, CharT>{
 2060|  2.16M|        ranges::subrange<const CharT*>{source.data(),
 2061|  2.16M|                                       source.data() + source.size()},
 2062|  2.16M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.16M|    static_cast<    \
  |  |  929|  2.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.16M|    static_cast<    \
  |  |  929|  2.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  2.16M|    return vscan_parse_format_string(format, handler);
 2064|  2.78M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   926k|{
 1638|   926k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   926k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 926k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   926k|    auto reader =
 1644|   926k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   926k|            ranges::subrange<const CharT*>{source.data(),
 1646|   926k|                                           source.data() + source.size()},
 1647|   926k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   926k|    static_cast<    \
  |  |  929|   926k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   926k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   926k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   926k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   926k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   926k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.7k, False: 887k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  38.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  38.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  38.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  38.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  38.7k|    }                                                  \
  |  |  |  | 3671|   926k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   887k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   887k|    return ranges::distance(source.data(), it);
 1650|   926k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   468k|{
 2053|   468k|    const auto argcount = args.size();
 2054|   468k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 83.0k, False: 385k]
  |  Branch (2054:60): [True: 83.0k, False: 0]
  ------------------
 2055|  83.0k|        auto arg = args.get(0);
 2056|  83.0k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  83.0k|    static_cast<    \
  |  |  929|  83.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  83.0k|    }
 2058|       |
 2059|   385k|    auto handler = format_handler<true, CharT>{
 2060|   385k|        ranges::subrange<const CharT*>{source.data(),
 2061|   385k|                                       source.data() + source.size()},
 2062|   385k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   385k|    static_cast<    \
  |  |  929|   385k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   385k|    static_cast<    \
  |  |  929|   385k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   385k|    return vscan_parse_format_string(format, handler);
 2064|   468k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   936k|{
 1625|   936k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 770k, False: 166k]
  ------------------
 1626|   770k|        return false;
 1627|   770k|    }
 1628|   166k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 166k, False: 0]
  |  Branch (1628:39): [True: 166k, False: 0]
  ------------------
 1629|   936k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   124k|{
 1638|   124k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   124k|    auto reader =
 1644|   124k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   124k|            ranges::subrange<const CharT*>{source.data(),
 1646|   124k|                                           source.data() + source.size()},
 1647|   124k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   124k|    static_cast<    \
  |  |  929|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   124k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 77.4k, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  77.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  77.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  77.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  77.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  77.4k|    }                                                  \
  |  |  |  | 3671|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  47.2k|    return ranges::distance(source.data(), it);
 1650|   124k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   385k|    {
 1903|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   385k|    {
 1853|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   385k|{
 2038|   385k|    const auto beg = handler.get_ctx().begin();
 2039|   385k|    detail::parse_format_string<false>(format, handler);
 2040|   385k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 258k, False: 127k]
  |  |  ------------------
  ------------------
 2041|   258k|        return unexpected(handler.error);
 2042|   258k|    }
 2043|   127k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   385k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.18M|    {
 2022|  2.18M|        return ctx.get();
 2023|  2.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.18M|    {
 1857|  2.18M|        return contiguous_ctx;
 1858|  2.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   512k|    {
 1907|   512k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 512k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   512k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   385k|{
 1681|   385k|    auto arg = ctx.arg(id);
 1682|   385k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   385k|    return arg;
 1686|   385k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   385k|    {
 1944|   385k|        return parse_ctx.next_arg_id();
 1945|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   385k|    {
 1985|   385k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   385k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   385k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 385k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   385k|        auto specs = detail::format_specs{};
 1998|   385k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   385k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   385k|            arg.type()};
 2001|       |
 2002|   385k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   385k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 385k]
  |  Branch (2003:29): [True: 0, False: 385k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   385k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   385k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   385k|        on_visit_scan_arg(
 2014|   385k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   385k|                                           get_ctx().locale()},
 2016|   385k|            arg);
 2017|   385k|        return parse_ctx.begin();
 2018|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   385k|    {
 1701|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   385k|    {
 1956|   385k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 385k]
  |  Branch (1956:23): [True: 0, False: 385k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   385k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   385k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   385k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 258k, False: 127k]
  |  |  ------------------
  ------------------
 1963|   258k|            on_error(r.error());
 1964|   258k|        }
 1965|   127k|        else {
 1966|   127k|            get_ctx().advance_to(*r);
 1967|   127k|        }
 1968|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   468k|{
 2073|   468k|    const auto argcount = args.size();
 2074|   468k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 82.9k, False: 385k]
  |  Branch (2074:60): [True: 82.9k, False: 0]
  ------------------
 2075|  82.9k|        auto arg = args.get(0);
 2076|  82.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  82.9k|    static_cast<    \
  |  |  929|  82.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  82.9k|    }
 2078|       |
 2079|   385k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 385k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   385k|    SCN_UNLIKELY_ATTR
 2087|   385k|    {
 2088|   385k|        auto handler = format_handler<false, CharT>{
 2089|   385k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   385k|    static_cast<    \
  |  |  929|   385k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   385k|    static_cast<    \
  |  |  929|   385k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   385k|        return vscan_parse_format_string(format, handler);
 2091|   385k|    }
 2092|   385k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   124k|{
 1658|   124k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   124k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   124k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   124k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   124k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   124k|    static_cast<    \
  |  |  929|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   124k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 77.4k, False: 47.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  77.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  77.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  77.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  77.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  77.4k|    }                                                  \
  |  |  |  | 3671|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  47.0k|    return it.position();
 1675|   124k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   385k|    {
 1903|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   385k|    {
 1830|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   385k|{
 2038|   385k|    const auto beg = handler.get_ctx().begin();
 2039|   385k|    detail::parse_format_string<false>(format, handler);
 2040|   385k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 258k, False: 127k]
  |  |  ------------------
  ------------------
 2041|   258k|        return unexpected(handler.error);
 2042|   258k|    }
 2043|   127k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   385k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.18M|    {
 2022|  2.18M|        return ctx.get();
 2023|  2.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.18M|    {
 1834|  2.18M|        return ctx;
 1835|  2.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   512k|    {
 1907|   512k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 512k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   512k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   385k|{
 1681|   385k|    auto arg = ctx.arg(id);
 1682|   385k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   385k|    return arg;
 1686|   385k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   385k|    {
 1944|   385k|        return parse_ctx.next_arg_id();
 1945|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   385k|    {
 1985|   385k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   385k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   385k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 385k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   385k|        auto specs = detail::format_specs{};
 1998|   385k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   385k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   385k|            arg.type()};
 2001|       |
 2002|   385k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   385k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 385k]
  |  Branch (2003:29): [True: 0, False: 385k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   385k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   385k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   385k|        on_visit_scan_arg(
 2014|   385k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   385k|                                           get_ctx().locale()},
 2016|   385k|            arg);
 2017|   385k|        return parse_ctx.begin();
 2018|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   385k|    {
 1701|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   385k|    {
 1956|   385k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 385k]
  |  Branch (1956:23): [True: 0, False: 385k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   385k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   385k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   385k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 258k, False: 127k]
  |  |  ------------------
  ------------------
 1963|   258k|            on_error(r.error());
 1964|   258k|        }
 1965|   127k|        else {
 1966|   127k|            get_ctx().advance_to(*r);
 1967|   127k|        }
 1968|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   308k|{
 2099|   308k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   308k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   303k|{
 2099|   303k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   303k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  41.5k|{
 2099|  41.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  41.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  41.4k|{
 2099|  41.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  41.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  41.4k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  4.30k|{
 1363|  4.30k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  4.30k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  4.30k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  4.30k|            std::u32string tmp;
 1368|  4.30k|            transcode_to_string_impl_to32(src, tmp);
 1369|  4.30k|            return transcode_to_string_impl_32to16<false>(
 1370|  4.30k|                std::u32string_view{tmp}, dest);
 1371|  4.30k|        }
 1372|  4.30k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  4.30k|            return transcode_to_string_impl_to32(src, dest);
 1374|  4.30k|        }
 1375|  4.30k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  4.30k|{
 1256|  4.30k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  4.30k|    auto it = src.begin();
 1259|  1.64M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.63M, False: 4.30k]
  ------------------
 1260|  1.63M|        auto res = get_next_code_point(
 1261|  1.63M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.63M|                                                                 src.end()));
 1263|  1.63M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.67k, False: 1.63M]
  |  |  ------------------
  ------------------
 1264|  5.67k|            dest.push_back(DestCharT{0xfffd});
 1265|  5.67k|        }
 1266|  1.63M|        else {
 1267|  1.63M|            dest.push_back(res.value);
 1268|  1.63M|        }
 1269|  1.63M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.63M|    }
 1271|  4.30k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.79M|{
 1169|  2.79M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.79M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.79M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.5k, False: 2.74M]
  |  |  ------------------
  ------------------
 1173|  53.5k|        return {get_start_for_next_code_point(input),
 1174|  53.5k|                detail::invalid_code_point};
 1175|  53.5k|    }
 1176|  2.74M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  2.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.70k, False: 2.73M]
  |  |  ------------------
  ------------------
 1177|  7.70k|        return {input.end(), detail::invalid_code_point};
 1178|  7.70k|    }
 1179|       |
 1180|  2.73M|    return {input.begin() + len,
 1181|  2.73M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  2.74M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  53.5k|{
 1155|  53.5k|    auto it = input.begin();
 1156|   541k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 530k, False: 11.7k]
  ------------------
 1157|   530k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 41.7k, False: 488k]
  ------------------
 1158|  41.7k|            break;
 1159|  41.7k|        }
 1160|   530k|    }
 1161|  53.5k|    return it;
 1162|  53.5k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  56.7M|    {
  809|  56.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  56.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  56.7M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  21.2M|    {
  823|  21.2M|        return a.m_code == b.m_code;
  824|  21.2M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  3.13M|    {
 1728|  3.13M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  3.13M|        std::strcpy(m_locbuf, loc);
 1730|  3.13M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  3.13M|    {
 1733|       |        // Restore locale to what it was before
 1734|  3.13M|        std::setlocale(m_category, m_locbuf);
 1735|  3.13M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  3.13M|    {
 1757|  3.13M|        std::setlocale(cat, "C");
 1758|  3.13M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  5.29M|    {
 2936|  5.29M|        return m_msg == nullptr;
 2937|  5.29M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  5.24M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  66.0M|{
  458|  66.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  66.0M|        static_cast<unsigned char>(ch))];
  460|  66.0M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  52.5k|{
  469|  52.5k|    return static_cast<unsigned char>(ch) <= 127;
  470|  52.5k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  13.4M|{
  539|  13.4M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  13.4M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  24.8M|{
  784|  24.8M|    return e != eof_error::good;
  785|  24.8M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  66.0k|{
  798|  66.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  66.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  66.0k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  66.0k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   276k|{
  845|   276k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   276k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   276k|    return parse_error::eof;
  847|   276k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  7.63M|{
  854|  7.63M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 7.63M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  7.63M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 99.2k, False: 7.53M]
  ------------------
  859|  99.2k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  99.2k|    }
  861|       |
  862|  7.53M|    return scan_error{code, msg};
  863|  7.63M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  7.63M|{
  868|  7.63M|    return [code, msg](parse_error err) {
  869|  7.63M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  7.63M|    };
  871|  7.63M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  8.43M|{
 1200|       |    // Pattern_White_Space property
 1201|  8.43M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 8.04M, False: 384k]
  |  Branch (1201:27): [True: 2.65M, False: 5.39M]
  ------------------
 1202|  8.43M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 170k, False: 5.60M]
  ------------------
 1203|  8.43M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 217k, False: 5.38M]
  ------------------
 1204|  8.43M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 5.93k, False: 5.38M]
  ------------------
 1205|  8.43M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 26.0k, False: 5.35M]
  ------------------
 1206|  8.43M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 359k, False: 4.99M]
  ------------------
 1207|  8.43M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 4.99M]
  ------------------
 1208|  8.43M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  8.16M|{
 2220|  8.16M|    unsigned char running_diff{0};
 2221|  30.6M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 22.4M, False: 8.16M]
  ------------------
 2222|  22.4M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  22.4M|    }
 2224|  8.16M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 245k, False: 7.91M]
  |  Branch (2224:33): [True: 36.4k, False: 7.88M]
  ------------------
 2225|  8.16M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  53.7M|{
 3123|  53.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  53.7M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.85M|{
 3127|  1.85M|#if WCHAR_MIN < 0
 3128|  1.85M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 1.83M, False: 21.1k]
  |  Branch (3128:20): [True: 1.09M, False: 741k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  1.09M|        return char_to_int(static_cast<char>(ch));
 3133|  1.09M|    }
 3134|   762k|    return 255;
 3135|  1.85M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  4.52M|{
 6008|  4.52M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 4.52M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  4.52M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 4.52M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  4.52M|    return {};
 6023|  4.52M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  9.10M|    {
  304|  9.10M|        ranges::advance(x, n);
  305|  9.10M|        return x;
  306|  9.10M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  9.10M|    {
  268|  9.10M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  9.10M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  9.10M|    {
  151|  9.10M|        i += n;
  152|  9.10M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  10.9M|    {
  108|  10.9M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  10.9M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  10.9M|    {
   87|  10.9M|        return s - i;
   88|  10.9M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.42M|    {
  304|  1.42M|        ranges::advance(x, n);
  305|  1.42M|        return x;
  306|  1.42M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.42M|    {
  268|  1.42M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.42M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.42M|    {
  151|  1.42M|        i += n;
  152|  1.42M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   241k|    {
  108|   241k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   241k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   241k|    {
   87|   241k|        return s - i;
   88|   241k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  3.27M|{
  981|  3.27M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  3.27M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  3.27M|        return true;
  984|  3.27M|    }
  985|  3.27M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  3.27M|                           ranges::const_iterator_t<Range>,
  987|  3.27M|                           typename detail::basic_scan_buffer<
  988|  3.27M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  3.27M|        auto beg = r.begin();
  990|  3.27M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 3.27M, False: 0]
  ------------------
  991|  3.27M|            return false;
  992|  3.27M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  3.27M|    else {
 1006|  3.27M|        return false;
 1007|  3.27M|    }
 1008|  3.27M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  91.2M|    {
  763|  91.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  91.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  91.2M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  8.68M|{
 1857|  8.68M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  8.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  8.68M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  8.68M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  8.68M|        if (sz < count) {
 1862|  8.68M|            return unexpected(eof_error::eof);
 1863|  8.68M|        }
 1864|       |
 1865|  8.68M|        return ranges::next(range.begin(), count);
 1866|  8.68M|    }
 1867|  8.68M|    else {
 1868|  8.68M|        auto it = range.begin();
 1869|  8.68M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 5.37M, False: 3.31M]
  ------------------
 1870|  5.37M|            return ranges::next(it, count);
 1871|  5.37M|        }
 1872|       |
 1873|  13.2M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 9.98M, False: 3.25M]
  ------------------
 1874|  9.98M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 58.4k, False: 9.93M]
  ------------------
 1875|  58.4k|                return unexpected(eof_error::eof);
 1876|  58.4k|            }
 1877|  9.98M|        }
 1878|       |
 1879|  3.25M|        return it;
 1880|  3.31M|    }
 1881|  8.68M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  8.68M|{
 1095|  8.68M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  8.68M|        return r.size();
 1097|  8.68M|    }
 1098|  8.68M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  8.68M|                           ranges::const_iterator_t<Range>,
 1100|  8.68M|                           typename detail::basic_scan_buffer<
 1101|  8.68M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  8.68M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  8.68M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  8.68M|        }
 1105|  8.68M|        else {
 1106|  8.68M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 8.68M, False: 0]
  ------------------
 1107|  8.68M|                return static_cast<size_t>(
 1108|  8.68M|                    r.begin().parent()->chars_available() -
 1109|  8.68M|                    r.begin().position());
 1110|  8.68M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  8.68M|        }
 1113|  8.68M|    }
 1114|  8.68M|    else {
 1115|  8.68M|        return 0;
 1116|  8.68M|    }
 1117|  8.68M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  8.06M|    {
  754|  8.06M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  45.6M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  45.6M|              cvref<T> obj = *get<T>(fn);
  745|  45.6M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  45.6M|                  obj(static_cast<decltype(args)>(args)...);
  747|  45.6M|              }
  748|  45.6M|              else {
  749|  45.6M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  45.6M|              }
  751|  45.6M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  45.6M|    {
  684|  45.6M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  45.6M|            return static_cast<T*>(s.m_cp);
  686|  45.6M|        }
  687|  45.6M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  45.6M|            return static_cast<T*>(s.m_p);
  689|  45.6M|        }
  690|  45.6M|        else {
  691|  45.6M|            return reinterpret_cast<T*>(s.m_fp);
  692|  45.6M|        }
  693|  45.6M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  8.06M|        {
  662|  8.06M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  14.2M|    {
  763|  14.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  14.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  14.2M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.92M|    {
  754|  3.92M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  6.94M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.94M|              cvref<T> obj = *get<T>(fn);
  745|  6.94M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.94M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.94M|              }
  748|  6.94M|              else {
  749|  6.94M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.94M|              }
  751|  6.94M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.94M|    {
  684|  6.94M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.94M|            return static_cast<T*>(s.m_cp);
  686|  6.94M|        }
  687|  6.94M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.94M|            return static_cast<T*>(s.m_p);
  689|  6.94M|        }
  690|  6.94M|        else {
  691|  6.94M|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.94M|        }
  693|  6.94M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  3.92M|        {
  662|  3.92M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  2.36M|    {
 6037|  2.36M|        const bool need_skipped_width =
 6038|  2.36M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 2.36M]
  |  Branch (6038:33): [True: 0, False: 2.36M]
  ------------------
 6039|  2.36M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.36M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 2.36M]
  ------------------
 6043|  2.36M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 2.36M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  2.36M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 2.36M, False: 0]
  |  Branch (6047:56): [True: 2.36M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.36M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.36M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.69M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.36M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.36M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.36M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.5k, False: 2.33M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  24.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  24.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  24.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  24.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  24.5k|    }                                                  \
  |  |  |  | 3671|  2.36M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.69M|                            make_eof_scan_error));
 6058|       |
 6059|  4.69M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 2.33M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  2.33M|            return result_type{it, 0};
 6067|  4.69M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  2.36M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  6.38M|{
 1976|  6.38M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  6.38M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  6.38M|{
 1957|  6.38M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  6.38M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  6.38M|    }
 1960|  6.38M|    else {
 1961|  6.38M|        auto first = range.begin();
 1962|  35.8M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 35.8M, False: 43.3k]
  ------------------
 1963|  35.8M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 6.34M, False: 29.4M]
  ------------------
 1964|  6.34M|                return first;
 1965|  6.34M|            }
 1966|  35.8M|        }
 1967|  43.3k|        return first;
 1968|  6.38M|    }
 1969|  6.38M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  5.67M|    {
  108|  5.67M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.67M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  5.67M|    {
   94|  5.67M|        iter_difference_t<I> counter{0};
   95|  58.4M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 52.7M, False: 5.67M]
  ------------------
   96|  52.7M|            ++i;
   97|  52.7M|            ++counter;
   98|  52.7M|        }
   99|  5.67M|        return counter;
  100|  5.67M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  7.63M|    return [code, msg](parse_error err) {
  869|  7.63M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  7.63M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|  1.28M|    {
 1780|  1.28M|        auto stdloc = loc.get<std::locale>();
 1781|  1.28M|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  1.28M|        grouping = numpunct.grouping();
 1783|  1.28M|        thousands_sep =
 1784|  1.28M|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 1.28M]
  ------------------
 1785|  1.28M|        decimal_point = numpunct.decimal_point();
 1786|  1.28M|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|  1.28M|{
 1717|  1.28M|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 1.28M, False: 0]
  ------------------
 1718|  1.28M|        return std::use_facet<Facet>(stdloc);
 1719|  1.28M|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  1.28M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  9.35M|{
 1846|  9.35M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.0k, False: 9.32M]
  |  |  ------------------
  ------------------
 1847|  33.0k|        return unexpected(e);
 1848|  33.0k|    }
 1849|       |
 1850|  9.32M|    return ranges::next(range.begin());
 1851|  9.35M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  13.5M|{
  950|  13.5M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  13.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.4k, False: 13.4M]
  |  |  ------------------
  ------------------
  951|  65.4k|        return eof_error::eof;
  952|  65.4k|    }
  953|  13.4M|    return eof_error::good;
  954|  13.5M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  19.1M|{
  944|  19.1M|    return is_range_eof(r.begin(), r.end());
  945|  19.1M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  19.1M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  19.1M|    {
  937|  19.1M|        return begin == end;
  938|  19.1M|    }
  939|  19.1M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  9.32M|    {
  296|  9.32M|        ++x;
  297|  9.32M|        return x;
  298|  9.32M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  3.54M|{
 3141|  3.54M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.54M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.64M, False: 899k]
  ------------------
 3143|  2.64M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.64M, False: 535]
  ------------------
 3144|  2.64M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.64M|        }
 3146|    535|        return unexpected(eof_error::eof);
 3147|  2.64M|    }
 3148|       |
 3149|   899k|    auto& it = *r;
 3150|   899k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 354k, False: 544k]
  ------------------
 3151|   354k|        return std::pair{it, sign_type::minus_sign};
 3152|   354k|    }
 3153|   544k|    return std::pair{it, sign_type::plus_sign};
 3154|   899k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  6.25M|{
 2272|  6.25M|    auto it = read_code_unit(range);
 2273|  6.25M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.4k, False: 6.23M]
  |  |  ------------------
  ------------------
 2274|  19.4k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  19.4k|    }
 2276|       |
 2277|  11.7M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 11.7M, False: 5.02M]
  ------------------
 2278|  11.7M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.20M, False: 10.4M]
  ------------------
 2279|  1.20M|            return *it;
 2280|  1.20M|        }
 2281|  11.7M|    }
 2282|       |
 2283|  5.02M|    return unexpected(parse_error::error);
 2284|  6.23M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  8.68M|{
 2231|  8.68M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  8.68M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  8.68M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  8.68M|        if (range.size() < str.size()) {
 2236|  8.68M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  8.68M|        }
 2238|  8.68M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  8.68M|            return unexpected(parse_error::error);
 2240|  8.68M|        }
 2241|  8.68M|        return ranges::next(range.begin(), str.size());
 2242|  8.68M|    }
 2243|  8.68M|    else {
 2244|  8.68M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  8.68M|            if (ch < 'A' || ch > 'Z') {
 2246|  8.68M|                return ch;
 2247|  8.68M|            }
 2248|  8.68M|            return static_cast<char_type>(ch +
 2249|  8.68M|                                          static_cast<char_type>('a' - 'A'));
 2250|  8.68M|        };
 2251|       |
 2252|  8.68M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  8.68M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.68M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.68M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 58.4k, False: 8.62M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  58.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  58.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  58.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  58.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  58.4k|    }                                                  \
  |  |  |  | 3671|  8.68M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  8.62M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  8.62M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  8.62M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  8.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.34M, False: 284k]
  |  |  ------------------
  ------------------
 2257|  8.62M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  8.62M|                    return ascii_tolower(a) ==
 2259|  8.62M|                           static_cast<detail::char_t<Range>>(b);
 2260|  8.62M|                }))) {
 2261|  8.34M|            return unexpected(parse_error::error);
 2262|  8.34M|        }
 2263|       |
 2264|   284k|        return it;
 2265|  8.62M|    }
 2266|  8.68M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  10.0M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  10.0M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 9.13M, False: 901k]
  |  Branch (2245:29): [True: 770k, False: 131k]
  ------------------
 2246|  9.90M|                return ch;
 2247|  9.90M|            }
 2248|   131k|            return static_cast<char_type>(ch +
 2249|   131k|                                          static_cast<char_type>('a' - 'A'));
 2250|  10.0M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  3.09M|{
 2146|  3.09M|    auto it = read_code_unit(range);
 2147|  3.09M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.5k, False: 3.08M]
  |  |  ------------------
  ------------------
 2148|  13.5k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  13.5k|    }
 2150|       |
 2151|  3.08M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.55M, False: 532k]
  |  |  ------------------
  ------------------
 2152|  3.08M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.55M|        return unexpected(parse_error::error);
 2154|  2.55M|    }
 2155|       |
 2156|   532k|    return *it;
 2157|  3.08M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  6.37M|{
 1996|  6.37M|    auto it = read_while_code_unit(range, pred);
 1997|  6.37M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 2.63M, False: 3.74M]
  ------------------
 1998|  2.63M|        return unexpected(parse_error::error);
 1999|  2.63M|    }
 2000|  3.74M|    return it;
 2001|  6.37M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  2.96M|    {
 1621|  2.96M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.96M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.96M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.96M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.96M|            m_storage.reset();
 1627|  2.96M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.96M|        }
 1629|  2.96M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.96M|                                          std::basic_string<CharT>>) {
 1631|  2.96M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.96M|            m_view = string_view_type{*m_storage};
 1633|  2.96M|        }
 1634|  2.96M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.96M|                                          typename detail::basic_scan_buffer<
 1636|  2.96M|                                              value_t>::forward_iterator> &&
 1637|  2.96M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.96M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.96M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.96M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 387k, False: 2.57M]
  |  |  ------------------
  ------------------
 1641|  2.96M|                             detail::to_address(end_seg.end()))) {
 1642|   387k|                auto& str = m_storage.emplace();
 1643|   387k|                str.reserve(range.end().position() - range.begin().position());
 1644|   387k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   387k|                m_view = string_view_type{str};
 1646|   387k|                return;
 1647|   387k|            }
 1648|       |
 1649|  2.57M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.57M|                                                            end_seg.data());
 1651|  2.57M|            m_storage.reset();
 1652|  2.57M|        }
 1653|  2.96M|        else {
 1654|  2.96M|            auto& str = m_storage.emplace();
 1655|  2.96M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.96M|                str.reserve(range.size());
 1657|  2.96M|            }
 1658|  2.96M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.96M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.96M|                          std::back_inserter(str));
 1661|  2.96M|            }
 1662|  2.96M|            else {
 1663|  2.96M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.96M|                     ++it) {
 1665|  2.96M|                    str.push_back(*it);
 1666|  2.96M|                }
 1667|  2.96M|            }
 1668|  2.96M|            m_view = string_view_type{str};
 1669|  2.96M|        }
 1670|  2.96M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  21.3M|    {
 1582|  21.3M|        return m_view;
 1583|  21.3M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  12.6M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  2.21M|    {
 6079|  2.21M|        const bool need_skipped_width =
 6080|  2.21M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 2.21M]
  |  Branch (6080:33): [True: 0, False: 2.21M]
  ------------------
 6081|  2.21M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.21M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 2.21M]
  ------------------
 6084|  2.21M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 2.21M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  2.21M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 2.21M, False: 0]
  ------------------
 6093|  2.21M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 2.21M]
  ------------------
 6094|  2.21M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  2.21M|        return result_type{rng.begin(), 0};
 6118|  2.21M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  4.55M|{
 1846|  4.55M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.35k, False: 4.54M]
  |  |  ------------------
  ------------------
 1847|  7.35k|        return unexpected(e);
 1848|  7.35k|    }
 1849|       |
 1850|  4.54M|    return ranges::next(range.begin());
 1851|  4.55M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  8.56M|{
  950|  8.56M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  8.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.0k, False: 8.52M]
  |  |  ------------------
  ------------------
  951|  35.0k|        return eof_error::eof;
  952|  35.0k|    }
  953|  8.52M|    return eof_error::good;
  954|  8.56M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  8.56M|{
  944|  8.56M|    return is_range_eof(r.begin(), r.end());
  945|  8.56M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  8.56M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  8.56M|    {
  937|  8.56M|        return begin == end;
  938|  8.56M|    }
  939|  8.56M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  4.54M|    {
  296|  4.54M|        ++x;
  297|  4.54M|        return x;
  298|  4.54M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.15M|{
 3141|  3.15M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.15M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.32M, False: 831k]
  ------------------
 3143|  2.32M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.32M, False: 168]
  ------------------
 3144|  2.32M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.32M|        }
 3146|    168|        return unexpected(eof_error::eof);
 3147|  2.32M|    }
 3148|       |
 3149|   831k|    auto& it = *r;
 3150|   831k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 334k, False: 497k]
  ------------------
 3151|   334k|        return std::pair{it, sign_type::minus_sign};
 3152|   334k|    }
 3153|   497k|    return std::pair{it, sign_type::plus_sign};
 3154|   831k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.66M|{
 2272|  3.66M|    auto it = read_code_unit(range);
 2273|  3.66M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.46k, False: 3.66M]
  |  |  ------------------
  ------------------
 2274|  3.46k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.46k|    }
 2276|       |
 2277|  6.76M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 6.76M, False: 2.74M]
  ------------------
 2278|  6.76M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 923k, False: 5.84M]
  ------------------
 2279|   923k|            return *it;
 2280|   923k|        }
 2281|  6.76M|    }
 2282|       |
 2283|  2.74M|    return unexpected(parse_error::error);
 2284|  3.66M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  8.22M|{
 2231|  8.22M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  8.22M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  8.22M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  8.22M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 60.5k, False: 8.16M]
  ------------------
 2236|  60.5k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  60.5k|        }
 2238|  8.16M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 7.88M, False: 281k]
  ------------------
 2239|  7.88M|            return unexpected(parse_error::error);
 2240|  7.88M|        }
 2241|   281k|        return ranges::next(range.begin(), str.size());
 2242|  8.16M|    }
 2243|  8.22M|    else {
 2244|  8.22M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  8.22M|            if (ch < 'A' || ch > 'Z') {
 2246|  8.22M|                return ch;
 2247|  8.22M|            }
 2248|  8.22M|            return static_cast<char_type>(ch +
 2249|  8.22M|                                          static_cast<char_type>('a' - 'A'));
 2250|  8.22M|        };
 2251|       |
 2252|  8.22M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  8.22M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  8.22M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  8.22M|        if (SCN_UNLIKELY(!std::equal(
 2257|  8.22M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  8.22M|                    return ascii_tolower(a) ==
 2259|  8.22M|                           static_cast<detail::char_t<Range>>(b);
 2260|  8.22M|                }))) {
 2261|  8.22M|            return unexpected(parse_error::error);
 2262|  8.22M|        }
 2263|       |
 2264|  8.22M|        return it;
 2265|  8.22M|    }
 2266|  8.22M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   883k|{
 2146|   883k|    auto it = read_code_unit(range);
 2147|   883k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   883k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.89k, False: 879k]
  |  |  ------------------
  ------------------
 2148|  3.89k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.89k|    }
 2150|       |
 2151|   879k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   879k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 724k, False: 155k]
  |  |  ------------------
  ------------------
 2152|   879k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   724k|        return unexpected(parse_error::error);
 2154|   724k|    }
 2155|       |
 2156|   155k|    return *it;
 2157|   879k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  11.8M|    {
 1503|  11.8M|        return sv;
 1504|  11.8M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.68M|{
 1976|  1.68M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.68M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.68M|{
 1957|  1.68M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.68M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.68M|    }
 1960|  1.68M|    else {
 1961|  1.68M|        auto first = range.begin();
 1962|  1.68M|        for (; first != range.end(); ++first) {
 1963|  1.68M|            if (pred(*first)) {
 1964|  1.68M|                return first;
 1965|  1.68M|            }
 1966|  1.68M|        }
 1967|  1.68M|        return first;
 1968|  1.68M|    }
 1969|  1.68M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  3.08M|{
 2951|  3.08M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 3.08M, False: 0]
  ------------------
 2952|  3.08M|        auto it = read_while_classic_space(range);
 2953|  3.08M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  3.08M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.1k, False: 3.06M]
  |  |  ------------------
  ------------------
 2955|  21.1k|            return unexpected(e);
 2956|  21.1k|        }
 2957|       |
 2958|  3.06M|        return it;
 2959|  3.08M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  3.08M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  3.08M|{
 2117|  3.08M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  3.08M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  3.08M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  3.08M|        auto buf = make_contiguous_buffer(range);
 2121|  3.08M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  3.08M|        return ranges::next(range.begin(),
 2123|  3.08M|                            ranges::distance(buf.view().begin(), it));
 2124|  3.08M|    }
 2125|  3.08M|    else {
 2126|  3.08M|        auto it = range.begin();
 2127|       |
 2128|  3.08M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  3.08M|            auto seg = get_contiguous_beginning(range);
 2130|  3.08M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  3.08M|                seg_it != seg.end()) {
 2132|  3.08M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  3.08M|            }
 2134|  3.08M|            ranges::advance(it, seg.size());
 2135|  3.08M|        }
 2136|       |
 2137|  3.08M|        return read_while_code_point(
 2138|  3.08M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.08M|    }
 2140|  3.08M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  3.08M|{
 1683|  3.08M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  3.08M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  3.08M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  3.08M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  3.08M|    }
 1688|  3.08M|    else {
 1689|  3.08M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  3.08M|    }
 1691|  3.08M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  3.08M|    {
 1490|  3.08M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  8.83M|    {
  304|  8.83M|        ranges::advance(x, n);
  305|  8.83M|        return x;
  306|  8.83M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  11.7M|    {
  268|  11.7M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  11.7M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  11.7M|    {
  181|  56.8M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 45.1M, False: 11.7M]
  ------------------
  182|  45.1M|            ++i;
  183|  45.1M|        }
  184|  11.7M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   748k|    {
 6193|   748k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   748k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   748k|            auto rd = make_reader<T, char_type>();
 6198|   748k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   748k|                return unexpected(e);
 6200|   748k|            }
 6201|       |
 6202|   748k|            return impl(rd, range, value);
 6203|   748k|        }
 6204|   748k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   748k|            auto rd = make_reader<T, char_type>();
 6206|   748k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 748k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   748k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 748k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   748k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   748k|                return impl(rd, range, value);
 6213|   748k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   748k|        else {
 6221|   748k|            SCN_EXPECT(false);
 6222|   748k|            SCN_UNREACHABLE;
 6223|   748k|        }
 6224|   748k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  4.52M|    {
 3040|  4.52M|        reader_error_handler eh{};
 3041|  4.52M|        get_derived().check_specs_impl(specs, eh);
 3042|  4.52M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.52M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  4.52M|        return {};
 3046|  4.52M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  4.52M|    {
 3051|  4.52M|        return static_cast<Derived&>(*this);
 3052|  4.52M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  4.52M|    {
 4145|  4.52M|        detail::check_float_type_specs(specs, eh);
 4146|  4.52M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   748k|    {
 6124|   748k|        const bool need_skipped_width =
 6125|   748k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 748k]
  |  Branch (6125:33): [True: 0, False: 748k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   748k|        auto it = rng.begin();
 6129|   748k|        std::ptrdiff_t prefix_width = 0;
 6130|   748k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 748k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   748k|        else {
 6138|   748k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   748k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   748k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   748k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.32k, False: 740k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.32k|    }                                                  \
  |  |  |  | 3671|   748k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   740k|            std::tie(it, prefix_width) = prefix_result;
 6140|   740k|        }
 6141|   740k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   740k|        std::ptrdiff_t value_width = 0;
 6145|   740k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 740k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   740k|        else {
 6161|   740k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   740k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   740k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 35.6k, False: 705k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  35.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  35.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  35.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  35.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  35.6k|    }                                                  \
  |  | 3671|   740k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   705k|                                             specs, value, loc));
 6163|       |
 6164|   705k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 705k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   705k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   705k|        std::ptrdiff_t postfix_width = 0;
 6173|   705k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 699k, False: 5.62k]
  ------------------
 6174|   699k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   699k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   699k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   699k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   699k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 699k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   699k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   699k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   699k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   699k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   699k|                                 value_width));
 6178|   699k|            std::tie(it, postfix_width) = postfix_result;
 6179|   699k|        }
 6180|       |
 6181|   705k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   705k|                                                 value_width, postfix_width);
 6183|   705k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 705k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   705k|        return it;
 6188|   705k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  10.5M|    {
 3035|  10.5M|        return true;
 3036|  10.5M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  4.48M|    {
 4217|  4.48M|        unsigned options{};
 4218|  4.48M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 1.28M, False: 3.19M]
  ------------------
 4219|  1.28M|            options |= float_reader_base::allow_thsep;
 4220|  1.28M|        }
 4221|       |
 4222|  4.48M|        SCN_GCC_COMPAT_PUSH
 4223|  4.48M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  4.48M|        switch (specs.type) {
 4226|   601k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 601k, False: 3.88M]
  ------------------
 4227|   601k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  87.7k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 87.7k, False: 4.39M]
  ------------------
 4230|  87.7k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  1.42M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 1.42M, False: 3.06M]
  ------------------
 4233|  1.42M|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|  1.09M|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 1.09M, False: 3.39M]
  ------------------
 4236|  1.09M|                return options | float_reader_base::allow_scientific |
 4237|  1.09M|                       float_reader_base::allow_fixed;
 4238|       |
 4239|  1.28M|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 1.28M, False: 3.19M]
  ------------------
 4240|  1.28M|                return options | float_reader_base::allow_scientific |
 4241|  1.28M|                       float_reader_base::allow_fixed |
 4242|  1.28M|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 4.48M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  4.48M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  4.48M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  4.48M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  4.48M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  6.30M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  12.6M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  1.92M|    {
 3691|  1.92M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.92M|        const std::ptrdiff_t sign_len =
 3694|  1.92M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 510k, False: 1.41M]
  ------------------
 3695|       |
 3696|  1.92M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.92M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.92M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.92M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.9k, False: 1.89M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  32.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  32.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  32.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  32.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  32.9k|    }                                                  \
  |  |  |  | 3671|  1.92M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.89M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.92M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  6.11M|    {
 4057|  6.11M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 6.11M, False: 0]
  ------------------
 4058|  6.11M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 6.11M, False: 0]
  ------------------
 4059|  6.11M|            return;
 4060|  6.11M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  7.18M|    {
 1587|  7.18M|        return m_storage.has_value();
 1588|  7.18M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  4.21M|    {
 1592|  4.21M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  4.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  4.21M|        return *m_storage;
 1594|  4.21M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   740k|    {
 4170|   740k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   740k|#if !SCN_DISABLE_LOCALE
 4173|   740k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 207k, False: 533k]
  ------------------
 4174|   207k|            return read_impl<Range>(
 4175|   207k|                range, rd,
 4176|   207k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   207k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   207k|                },
 4179|   207k|                value, loc);
 4180|   207k|        }
 4181|   533k|#endif
 4182|       |
 4183|   533k|        return read_impl<Range>(
 4184|   533k|            range, rd,
 4185|   533k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   533k|                return r.read_source(SCN_FWD(args)...);
 4187|   533k|            },
 4188|   533k|            value);
 4189|   740k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  1.02M|    {
 4206|  1.02M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.02M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.6k, False: 983k]
  |  |  ------------------
  ------------------
 4208|  38.6k|            return unexpected(r.error());
 4209|  38.6k|        }
 4210|       |
 4211|   983k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   983k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   983k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   983k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   983k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.55k, False: 976k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.55k|    }                                                  \
  |  |  |  | 3671|   983k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   976k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   976k|        return ranges::next(range.begin(), n);
 4213|   983k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  3.24M|    {
  763|  3.24M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.24M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   207k|    {
  754|   207k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   207k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   207k|              cvref<T> obj = *get<T>(fn);
  745|   207k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   207k|                  obj(static_cast<decltype(args)>(args)...);
  747|   207k|              }
  748|   207k|              else {
  749|   207k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   207k|              }
  751|   207k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   207k|    {
  684|   207k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   207k|            return static_cast<T*>(s.m_cp);
  686|   207k|        }
  687|   207k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   207k|            return static_cast<T*>(s.m_p);
  689|   207k|        }
  690|   207k|        else {
  691|   207k|            return reinterpret_cast<T*>(s.m_fp);
  692|   207k|        }
  693|   207k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   207k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   207k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   207k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   669k|    {
 3679|   669k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   669k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   669k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   669k|        return read_source_impl(range);
 3685|   669k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  3.24M|    {
 3705|  3.24M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  3.24M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.24M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.24M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.24M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.24M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  3.24M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  3.24M|        auto it = sign_result.first;
 3708|  3.24M|        m_sign = sign_result.second;
 3709|       |
 3710|  3.24M|        auto digits_begin = it;
 3711|  3.24M|        auto r = ranges::subrange{it, range.end()};
 3712|  3.24M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  3.24M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  3.24M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  3.24M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  3.24M|                SCN_TRY_ASSIGN(
 3717|  3.24M|                    it,
 3718|  3.24M|                    do_read_source_impl(
 3719|  3.24M|                        r,
 3720|  3.24M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  3.24M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  3.24M|            }
 3723|  3.24M|            else {
 3724|  3.24M|                auto cb = [&](const auto& rr)
 3725|  3.24M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  3.24M|                    auto res = read_all(rr);
 3727|  3.24M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  3.24M|                        return unexpected_scan_error(
 3729|  3.24M|                            scan_error::invalid_scanned_value,
 3730|  3.24M|                            "Invalid float value");
 3731|  3.24M|                    }
 3732|  3.24M|                    return res;
 3733|  3.24M|                };
 3734|  3.24M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  3.24M|            }
 3736|  3.24M|        }
 3737|  3.24M|        else {
 3738|  3.24M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  3.24M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.24M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 123k, False: 3.11M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   123k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   123k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   123k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   123k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   123k|    }                                                  \
  |  | 3671|  3.24M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  3.11M|                it,
 3740|  3.11M|                do_read_source_impl(
 3741|  3.11M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  3.11M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  3.11M|        }
 3744|       |
 3745|  3.11M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  3.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  3.11M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 3.08M, False: 26.9k]
  |  Branch (3747:48): [True: 3.07M, False: 18.8k]
  ------------------
 3748|  3.11M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.96M, False: 105k]
  ------------------
 3749|  3.11M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.96M, False: 2.66k]
  ------------------
 3750|  2.96M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.96M|        }
 3752|       |
 3753|  3.11M|        handle_separators();
 3754|       |
 3755|  3.11M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 3.11M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  3.11M|        return it;
 3768|  3.11M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  3.24M|    {
 4000|  3.24M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  3.24M|        const bool allowed_nonhex =
 4002|  3.24M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  3.24M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  3.24M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 3.19M, False: 45.7k]
  |  Branch (4005:45): [True: 0, False: 3.19M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  3.24M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 45.7k, False: 3.19M]
  ------------------
 4011|  45.7k|            return *r;
 4012|  45.7k|        }
 4013|       |
 4014|  3.19M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 3.08M, False: 107k]
  |  Branch (4014:45): [True: 1.42k, False: 3.08M]
  ------------------
 4015|  1.42k|            return unexpected(r.error());
 4016|  1.42k|        }
 4017|  3.19M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 107k, False: 3.08M]
  ------------------
 4018|   107k|            return *r;
 4019|   107k|        }
 4020|       |
 4021|  3.08M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 2.20M, False: 882k]
  |  Branch (4021:28): [True: 707k, False: 1.49M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   707k|            auto it = range.begin();
 4025|       |
 4026|   707k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 33.9k, False: 673k]
  ------------------
 4027|  33.9k|                m_kind = float_kind::hex_with_prefix;
 4028|  33.9k|                it = *r;
 4029|  33.9k|            }
 4030|   673k|            else {
 4031|   673k|                m_kind = float_kind::hex_without_prefix;
 4032|   673k|            }
 4033|       |
 4034|   707k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   707k|        }
 4036|  2.37M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 882k, False: 1.49M]
  |  Branch (4036:29): [True: 882k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   882k|            m_kind = float_kind::generic;
 4040|   882k|            return read_regular_float(range);
 4041|   882k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.49M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.9k, False: 1.41M]
  |  |  ------------------
  ------------------
 4047|  75.9k|            m_kind = float_kind::hex_with_prefix;
 4048|  75.9k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  75.9k|        }
 4050|       |
 4051|  1.41M|        m_kind = float_kind::generic;
 4052|  1.41M|        return read_regular(range);
 4053|  1.49M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  3.24M|    {
 3811|  3.24M|        auto it = range.begin();
 3812|  3.24M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 3.19M, False: 45.7k]
  ------------------
 3813|  3.19M|            return unexpected(r.error());
 3814|  3.19M|        }
 3815|  45.7k|        else {
 3816|  45.7k|            it = *r;
 3817|  45.7k|        }
 3818|       |
 3819|  45.7k|        if (auto r = read_matching_string_classic_nocase(
 3820|  45.7k|                ranges::subrange{it, range.end()}, "inity");
 3821|  45.7k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 26.9k, False: 18.8k]
  ------------------
 3822|  26.9k|            m_kind = float_kind::inf_short;
 3823|  26.9k|            return it;
 3824|  26.9k|        }
 3825|  18.8k|        else {
 3826|  18.8k|            m_kind = float_kind::inf_long;
 3827|  18.8k|            return *r;
 3828|  18.8k|        }
 3829|  45.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  3.19M|    {
 3834|  3.19M|        auto it = range.begin();
 3835|  3.19M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 3.08M, False: 109k]
  ------------------
 3836|  3.08M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  3.08M|                scan_error::invalid_scanned_value,
 3838|  3.08M|                "Invalid floating-point NaN value"));
 3839|  3.08M|        }
 3840|   109k|        else {
 3841|   109k|            it = *r;
 3842|   109k|        }
 3843|       |
 3844|   109k|        if (auto r =
 3845|   109k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|   109k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 105k, False: 4.09k]
  ------------------
 3847|   105k|            m_kind = float_kind::nan_simple;
 3848|   105k|            return it;
 3849|   105k|        }
 3850|  4.09k|        else {
 3851|  4.09k|            it = *r;
 3852|  4.09k|        }
 3853|       |
 3854|  4.09k|        auto payload_beg_it = it;
 3855|  4.09k|        it = read_while_code_unit(
 3856|  4.09k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  4.09k|                return is_ascii_char(ch) &&
 3858|  4.09k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  4.09k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  4.09k|            });
 3861|  4.09k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  4.09k|        m_kind = float_kind::nan_with_payload;
 3864|  4.09k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.66k, False: 1.42k]
  ------------------
 3865|  4.09k|                                             ')')) {
 3866|  2.66k|            return *r;
 3867|  2.66k|        }
 3868|  1.42k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.42k|                                     "Invalid floating-point NaN payload");
 3870|  4.09k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  4.09k|    {
  754|  4.09k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  27.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.7k|              cvref<T> obj = *get<T>(fn);
  745|  27.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.7k|              }
  748|  27.7k|              else {
  749|  27.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.7k|              }
  751|  27.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  27.7k|    {
  684|  27.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.7k|            return static_cast<T*>(s.m_cp);
  686|  27.7k|        }
  687|  27.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.7k|            return static_cast<T*>(s.m_p);
  689|  27.7k|        }
  690|  27.7k|        else {
  691|  27.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.7k|        }
  693|  27.7k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  27.7k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  27.7k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 27.3k, False: 413]
  ------------------
 3858|  27.7k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 24.4k, False: 2.80k]
  |  Branch (3858:39): [True: 16.3k, False: 8.14k]
  |  Branch (3858:54): [True: 2.69k, False: 8.26k]
  |  Branch (3858:67): [True: 2.60k, False: 83]
  ------------------
 3859|  27.3k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.53k, False: 2.80k]
  |  Branch (3859:39): [True: 2.54k, False: 2.99k]
  |  Branch (3859:53): [True: 2.88k, False: 2.91k]
  ------------------
 3860|  27.7k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  4.09k|        {
  662|  4.09k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  2.20M|    {
 3804|  2.20M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  2.20M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   783k|    {
 3904|   783k|        auto it = range.begin();
 3905|       |
 3906|   783k|        std::ptrdiff_t digits_count = 0;
 3907|   783k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   783k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   783k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.5k, False: 767k]
  |  |  ------------------
  ------------------
 3909|  15.5k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  15.5k|                scan_error::invalid_scanned_value,
 3911|  15.5k|                "Invalid hexadecimal floating-point value"));
 3912|  15.5k|        }
 3913|   767k|        else {
 3914|   767k|            digits_count += ranges::distance(it, *r);
 3915|   767k|            it = *r;
 3916|   767k|        }
 3917|       |
 3918|   767k|        m_integral_part_length = digits_count;
 3919|   767k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 112k, False: 655k]
  ------------------
 3920|   767k|                                             m_locale_options.decimal_point)) {
 3921|   112k|            it = *r;
 3922|   112k|        }
 3923|       |
 3924|   767k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 93.5k, False: 674k]
  ------------------
 3925|   767k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  93.5k|            digits_count += ranges::distance(it, *r);
 3927|  93.5k|            it = *r;
 3928|  93.5k|        }
 3929|       |
 3930|   767k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 767k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   767k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   767k|        return it;
 3938|   767k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  1.55M|    {
 3789|  1.55M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.55M]
  |  |  |  Branch (859:45): [True: 0, False: 1.55M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  1.55M|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  1.55M|        return read_while1_code_unit(
 3798|  1.55M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  1.55M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.55M|    {
  754|  1.55M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  8.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.28M|              cvref<T> obj = *get<T>(fn);
  745|  8.28M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.28M|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.28M|              }
  748|  8.28M|              else {
  749|  8.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.28M|              }
  751|  8.28M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.28M|    {
  684|  8.28M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.28M|            return static_cast<T*>(s.m_cp);
  686|  8.28M|        }
  687|  8.28M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.28M|            return static_cast<T*>(s.m_p);
  689|  8.28M|        }
  690|  8.28M|        else {
  691|  8.28M|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.28M|        }
  693|  8.28M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  8.28M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.55M|        {
  662|  1.55M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  2.70M|    {
 3876|  2.70M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 308k, False: 2.39M]
  ------------------
 3877|   308k|            auto beg_exp_it = range.begin();
 3878|   308k|            auto it = *r;
 3879|       |
 3880|   308k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 307k, False: 535]
  ------------------
 3881|   308k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   307k|                it = r_sign->first;
 3883|   307k|            }
 3884|       |
 3885|   308k|            if (auto r_exp = read_while1_code_unit(
 3886|   308k|                    ranges::subrange{it, range.end()},
 3887|   308k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   308k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.64k, False: 304k]
  |  |  ------------------
  ------------------
 3889|  3.64k|                it = beg_exp_it;
 3890|  3.64k|            }
 3891|   304k|            else {
 3892|   304k|                it = *r_exp;
 3893|   304k|            }
 3894|       |
 3895|   308k|            return it;
 3896|   308k|        }
 3897|  2.39M|        return range.begin();
 3898|  2.70M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   308k|    {
  754|   308k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  1.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.00M|              cvref<T> obj = *get<T>(fn);
  745|  1.00M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.00M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.00M|              }
  748|  1.00M|              else {
  749|  1.00M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.00M|              }
  751|  1.00M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  1.00M|    {
  684|  1.00M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.00M|            return static_cast<T*>(s.m_cp);
  686|  1.00M|        }
  687|  1.00M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.00M|            return static_cast<T*>(s.m_p);
  689|  1.00M|        }
  690|  1.00M|        else {
  691|  1.00M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.00M|        }
  693|  1.00M|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|  1.00M|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   308k|        {
  662|   308k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  2.30M|    {
 3944|  2.30M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  2.30M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 1.99M, False: 302k]
  |  Branch (3945:50): [True: 43.0k, False: 1.95M]
  ------------------
 3946|       |
 3947|  2.30M|        auto it = ranges::begin(range);
 3948|  2.30M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  2.30M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  2.30M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.9k, False: 2.21M]
  |  |  ------------------
  ------------------
 3952|  83.9k|            return r.transform_error(
 3953|  83.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  83.9k|                                              "Invalid floating-point value"));
 3955|  83.9k|        }
 3956|  2.21M|        else {
 3957|  2.21M|            digits_count += ranges::distance(it, *r);
 3958|  2.21M|            it = *r;
 3959|  2.21M|        }
 3960|       |
 3961|  2.21M|        m_integral_part_length = digits_count;
 3962|  2.21M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 413k, False: 1.80M]
  ------------------
 3963|  2.21M|                                             m_locale_options.decimal_point)) {
 3964|   413k|            it = *r;
 3965|   413k|        }
 3966|       |
 3967|  2.21M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 363k, False: 1.85M]
  ------------------
 3968|  2.21M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   363k|            digits_count += ranges::distance(it, *r);
 3970|   363k|            it = *r;
 3971|   363k|        }
 3972|       |
 3973|  2.21M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.21M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  2.21M|        auto beg_exp_it = it;
 3979|  2.21M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.93M, False: 280k]
  ------------------
 3980|  1.93M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.93M|        }
 3982|  2.21M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 41.6k, False: 2.17M]
  |  Branch (3982:29): [True: 22.5k, False: 19.0k]
  ------------------
 3983|  22.5k|            return unexpected_scan_error(
 3984|  22.5k|                scan_error::invalid_scanned_value,
 3985|  22.5k|                "No exponent given to scientific float");
 3986|  22.5k|        }
 3987|       |
 3988|  2.19M|        m_kind =
 3989|  2.19M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.89M, False: 303k]
  ------------------
 3990|       |
 3991|  2.19M|        return it;
 3992|  2.21M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  4.51M|    {
 3774|  4.51M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  4.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.51M]
  |  |  |  Branch (859:45): [True: 0, False: 4.51M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  4.51M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  4.51M|        return read_while1_code_unit(
 3783|  4.51M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  4.51M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  4.51M|    {
  754|  4.51M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  26.5M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.5M|              cvref<T> obj = *get<T>(fn);
  745|  26.5M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.5M|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.5M|              }
  748|  26.5M|              else {
  749|  26.5M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.5M|              }
  751|  26.5M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  26.5M|    {
  684|  26.5M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.5M|            return static_cast<T*>(s.m_cp);
  686|  26.5M|        }
  687|  26.5M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.5M|            return static_cast<T*>(s.m_p);
  689|  26.5M|        }
  690|  26.5M|        else {
  691|  26.5M|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.5M|        }
  693|  26.5M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  26.5M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  4.51M|        {
  662|  4.51M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  2.96M|    {
 1577|  2.96M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.96M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   207k|        {
  662|   207k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   533k|    {
  754|   533k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   533k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   533k|              cvref<T> obj = *get<T>(fn);
  745|   533k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   533k|                  obj(static_cast<decltype(args)>(args)...);
  747|   533k|              }
  748|   533k|              else {
  749|   533k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   533k|              }
  751|   533k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   533k|    {
  684|   533k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   533k|            return static_cast<T*>(s.m_cp);
  686|   533k|        }
  687|   533k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   533k|            return static_cast<T*>(s.m_p);
  689|   533k|        }
  690|   533k|        else {
  691|   533k|            return reinterpret_cast<T*>(s.m_fp);
  692|   533k|        }
  693|   533k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   533k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   533k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   533k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   533k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  2.57M|    {
 3665|  2.57M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.57M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.57M|        return read_source_impl(range);
 3671|  2.57M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   533k|        {
  662|   533k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   681k|    {
 4170|   681k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   681k|#if !SCN_DISABLE_LOCALE
 4173|   681k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 189k, False: 491k]
  ------------------
 4174|   189k|            return read_impl<Range>(
 4175|   189k|                range, rd,
 4176|   189k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   189k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   189k|                },
 4179|   189k|                value, loc);
 4180|   189k|        }
 4181|   491k|#endif
 4182|       |
 4183|   491k|        return read_impl<Range>(
 4184|   491k|            range, rd,
 4185|   491k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   491k|                return r.read_source(SCN_FWD(args)...);
 4187|   491k|            },
 4188|   491k|            value);
 4189|   681k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   966k|    {
 4206|   966k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   966k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   966k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.1k, False: 943k]
  |  |  ------------------
  ------------------
 4208|  22.1k|            return unexpected(r.error());
 4209|  22.1k|        }
 4210|       |
 4211|   943k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   943k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   943k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   943k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   943k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 25.4k, False: 918k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  25.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  25.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  25.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  25.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  25.4k|    }                                                  \
  |  |  |  | 3671|   943k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   918k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   918k|        return ranges::next(range.begin(), n);
 4213|   943k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  3.06M|    {
  763|  3.06M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.06M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   189k|    {
  754|   189k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   189k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   189k|              cvref<T> obj = *get<T>(fn);
  745|   189k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   189k|                  obj(static_cast<decltype(args)>(args)...);
  747|   189k|              }
  748|   189k|              else {
  749|   189k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   189k|              }
  751|   189k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   189k|    {
  684|   189k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   189k|            return static_cast<T*>(s.m_cp);
  686|   189k|        }
  687|   189k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   189k|            return static_cast<T*>(s.m_p);
  689|   189k|        }
  690|   189k|        else {
  691|   189k|            return reinterpret_cast<T*>(s.m_fp);
  692|   189k|        }
  693|   189k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   189k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   189k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   189k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   612k|    {
 3679|   612k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   612k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   612k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 612k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   612k|        return read_source_impl(range);
 3685|   612k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  3.06M|    {
 3705|  3.06M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  3.06M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.06M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.06M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.06M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.06M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  3.06M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  3.06M|        auto it = sign_result.first;
 3708|  3.06M|        m_sign = sign_result.second;
 3709|       |
 3710|  3.06M|        auto digits_begin = it;
 3711|  3.06M|        auto r = ranges::subrange{it, range.end()};
 3712|  3.06M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  3.06M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  3.06M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  6.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.06M]
  |  |  |  Branch (859:45): [True: 0, False: 3.06M]
  |  |  |  Branch (859:45): [True: 0, False: 3.06M]
  |  |  ------------------
  ------------------
 3715|  3.06M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  3.06M|            else {
 3724|  3.06M|                auto cb = [&](const auto& rr)
 3725|  3.06M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  3.06M|                    auto res = read_all(rr);
 3727|  3.06M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  3.06M|                        return unexpected_scan_error(
 3729|  3.06M|                            scan_error::invalid_scanned_value,
 3730|  3.06M|                            "Invalid float value");
 3731|  3.06M|                    }
 3732|  3.06M|                    return res;
 3733|  3.06M|                };
 3734|  3.06M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  3.06M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.06M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 68.7k, False: 2.99M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  68.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  68.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  68.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  68.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  68.7k|    }                                                  \
  |  | 3671|  3.06M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  2.99M|            }
 3736|  3.06M|        }
 3737|  2.99M|        else {
 3738|  2.99M|            SCN_TRY_ASSIGN(
 3739|  2.99M|                it,
 3740|  2.99M|                do_read_source_impl(
 3741|  2.99M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.99M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.99M|        }
 3744|       |
 3745|  2.99M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.99M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.96M, False: 26.0k]
  |  Branch (3747:48): [True: 2.95M, False: 18.5k]
  ------------------
 3748|  2.99M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.84M, False: 104k]
  ------------------
 3749|  2.99M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.84M, False: 2.65k]
  ------------------
 3750|  2.84M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.84M|        }
 3752|       |
 3753|  2.99M|        handle_separators();
 3754|       |
 3755|  2.99M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.99M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.99M|        return it;
 3768|  2.99M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  3.06M|    {
 3811|  3.06M|        auto it = range.begin();
 3812|  3.06M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 3.01M, False: 44.6k]
  ------------------
 3813|  3.01M|            return unexpected(r.error());
 3814|  3.01M|        }
 3815|  44.6k|        else {
 3816|  44.6k|            it = *r;
 3817|  44.6k|        }
 3818|       |
 3819|  44.6k|        if (auto r = read_matching_string_classic_nocase(
 3820|  44.6k|                ranges::subrange{it, range.end()}, "inity");
 3821|  44.6k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 26.0k, False: 18.5k]
  ------------------
 3822|  26.0k|            m_kind = float_kind::inf_short;
 3823|  26.0k|            return it;
 3824|  26.0k|        }
 3825|  18.5k|        else {
 3826|  18.5k|            m_kind = float_kind::inf_long;
 3827|  18.5k|            return *r;
 3828|  18.5k|        }
 3829|  44.6k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  3.01M|    {
 3834|  3.01M|        auto it = range.begin();
 3835|  3.01M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.91M, False: 108k]
  ------------------
 3836|  2.91M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.91M|                scan_error::invalid_scanned_value,
 3838|  2.91M|                "Invalid floating-point NaN value"));
 3839|  2.91M|        }
 3840|   108k|        else {
 3841|   108k|            it = *r;
 3842|   108k|        }
 3843|       |
 3844|   108k|        if (auto r =
 3845|   108k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|   108k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 104k, False: 3.88k]
  ------------------
 3847|   104k|            m_kind = float_kind::nan_simple;
 3848|   104k|            return it;
 3849|   104k|        }
 3850|  3.88k|        else {
 3851|  3.88k|            it = *r;
 3852|  3.88k|        }
 3853|       |
 3854|  3.88k|        auto payload_beg_it = it;
 3855|  3.88k|        it = read_while_code_unit(
 3856|  3.88k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.88k|                return is_ascii_char(ch) &&
 3858|  3.88k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.88k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.88k|            });
 3861|  3.88k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.88k|        m_kind = float_kind::nan_with_payload;
 3864|  3.88k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.65k, False: 1.22k]
  ------------------
 3865|  3.88k|                                             ')')) {
 3866|  2.65k|            return *r;
 3867|  2.65k|        }
 3868|  1.22k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.22k|                                     "Invalid floating-point NaN payload");
 3870|  3.88k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.88k|    {
  754|  3.88k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  24.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.8k|              cvref<T> obj = *get<T>(fn);
  745|  24.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.8k|              }
  748|  24.8k|              else {
  749|  24.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.8k|              }
  751|  24.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  24.8k|    {
  684|  24.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.8k|            return static_cast<T*>(s.m_cp);
  686|  24.8k|        }
  687|  24.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.8k|            return static_cast<T*>(s.m_p);
  689|  24.8k|        }
  690|  24.8k|        else {
  691|  24.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.8k|        }
  693|  24.8k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  24.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  24.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 24.6k, False: 215]
  ------------------
 3858|  24.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 21.8k, False: 2.79k]
  |  Branch (3858:39): [True: 13.8k, False: 7.97k]
  |  Branch (3858:54): [True: 2.52k, False: 8.25k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  24.6k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.53k, False: 2.79k]
  |  Branch (3859:39): [True: 2.54k, False: 2.99k]
  |  Branch (3859:53): [True: 2.88k, False: 2.90k]
  ------------------
 3860|  24.8k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.88k|        {
  662|  3.88k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  2.09M|    {
 3804|  2.09M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  2.09M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.67M|{
 1996|  1.67M|    auto it = read_while_code_unit(range, pred);
 1997|  1.67M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 684k, False: 991k]
  ------------------
 1998|   684k|        return unexpected(parse_error::error);
 1999|   684k|    }
 2000|   991k|    return it;
 2001|  1.67M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   512k|    {
 3876|   512k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 91.4k, False: 421k]
  ------------------
 3877|  91.4k|            auto beg_exp_it = range.begin();
 3878|  91.4k|            auto it = *r;
 3879|       |
 3880|  91.4k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 91.2k, False: 168]
  ------------------
 3881|  91.4k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  91.2k|                it = r_sign->first;
 3883|  91.2k|            }
 3884|       |
 3885|  91.4k|            if (auto r_exp = read_while1_code_unit(
 3886|  91.4k|                    ranges::subrange{it, range.end()},
 3887|  91.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  91.4k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  91.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.26k, False: 90.1k]
  |  |  ------------------
  ------------------
 3889|  1.26k|                it = beg_exp_it;
 3890|  1.26k|            }
 3891|  90.1k|            else {
 3892|  90.1k|                it = *r_exp;
 3893|  90.1k|            }
 3894|       |
 3895|  91.4k|            return it;
 3896|  91.4k|        }
 3897|   421k|        return range.begin();
 3898|   512k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  91.4k|    {
  754|  91.4k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   285k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   285k|              cvref<T> obj = *get<T>(fn);
  745|   285k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   285k|                  obj(static_cast<decltype(args)>(args)...);
  747|   285k|              }
  748|   285k|              else {
  749|   285k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   285k|              }
  751|   285k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   285k|    {
  684|   285k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   285k|            return static_cast<T*>(s.m_cp);
  686|   285k|        }
  687|   285k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   285k|            return static_cast<T*>(s.m_p);
  689|   285k|        }
  690|   285k|        else {
  691|   285k|            return reinterpret_cast<T*>(s.m_fp);
  692|   285k|        }
  693|   285k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   285k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  91.4k|        {
  662|  91.4k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   814k|    {
 3944|   814k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   814k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 533k, False: 281k]
  |  Branch (3945:50): [True: 41.3k, False: 491k]
  ------------------
 3946|       |
 3947|   814k|        auto it = ranges::begin(range);
 3948|   814k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   814k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   814k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.7k, False: 770k]
  |  |  ------------------
  ------------------
 3952|  43.7k|            return r.transform_error(
 3953|  43.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  43.7k|                                              "Invalid floating-point value"));
 3955|  43.7k|        }
 3956|   770k|        else {
 3957|   770k|            digits_count += ranges::distance(it, *r);
 3958|   770k|            it = *r;
 3959|   770k|        }
 3960|       |
 3961|   770k|        m_integral_part_length = digits_count;
 3962|   770k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 148k, False: 622k]
  ------------------
 3963|   770k|                                             m_locale_options.decimal_point)) {
 3964|   148k|            it = *r;
 3965|   148k|        }
 3966|       |
 3967|   770k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 131k, False: 639k]
  ------------------
 3968|   770k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   131k|            digits_count += ranges::distance(it, *r);
 3970|   131k|            it = *r;
 3971|   131k|        }
 3972|       |
 3973|   770k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   770k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 770k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   770k|        auto beg_exp_it = it;
 3979|   770k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 512k, False: 258k]
  ------------------
 3980|   512k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   512k|        }
 3982|   770k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 39.6k, False: 731k]
  |  Branch (3982:29): [True: 22.4k, False: 17.1k]
  ------------------
 3983|  22.4k|            return unexpected_scan_error(
 3984|  22.4k|                scan_error::invalid_scanned_value,
 3985|  22.4k|                "No exponent given to scientific float");
 3986|  22.4k|        }
 3987|       |
 3988|   748k|        m_kind =
 3989|   748k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 658k, False: 90.1k]
  ------------------
 3990|       |
 3991|   748k|        return it;
 3992|   770k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|  1.58M|    {
 3774|  1.58M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.58M]
  |  |  |  Branch (859:45): [True: 0, False: 1.58M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.58M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.58M|        return read_while1_code_unit(
 3783|  1.58M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.58M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.58M|    {
  754|  1.58M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  9.49M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.49M|              cvref<T> obj = *get<T>(fn);
  745|  9.49M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.49M|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.49M|              }
  748|  9.49M|              else {
  749|  9.49M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.49M|              }
  751|  9.49M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  9.49M|    {
  684|  9.49M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.49M|            return static_cast<T*>(s.m_cp);
  686|  9.49M|        }
  687|  9.49M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.49M|            return static_cast<T*>(s.m_p);
  689|  9.49M|        }
  690|  9.49M|        else {
  691|  9.49M|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.49M|        }
  693|  9.49M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  9.49M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.58M|        {
  662|  1.58M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  3.06M|    {
 4000|  3.06M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  3.06M|        const bool allowed_nonhex =
 4002|  3.06M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  3.06M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  3.06M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 3.01M, False: 44.6k]
  |  Branch (4005:45): [True: 0, False: 3.01M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  3.06M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 44.6k, False: 3.01M]
  ------------------
 4011|  44.6k|            return *r;
 4012|  44.6k|        }
 4013|       |
 4014|  3.01M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.91M, False: 107k]
  |  Branch (4014:45): [True: 1.22k, False: 2.91M]
  ------------------
 4015|  1.22k|            return unexpected(r.error());
 4016|  1.22k|        }
 4017|  3.01M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 107k, False: 2.91M]
  ------------------
 4018|   107k|            return *r;
 4019|   107k|        }
 4020|       |
 4021|  2.91M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 2.09M, False: 814k]
  |  Branch (4021:28): [True: 644k, False: 1.45M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   644k|            auto it = range.begin();
 4025|       |
 4026|   644k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 31.8k, False: 612k]
  ------------------
 4027|  31.8k|                m_kind = float_kind::hex_with_prefix;
 4028|  31.8k|                it = *r;
 4029|  31.8k|            }
 4030|   612k|            else {
 4031|   612k|                m_kind = float_kind::hex_without_prefix;
 4032|   612k|            }
 4033|       |
 4034|   644k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   644k|        }
 4036|  2.26M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 814k, False: 1.45M]
  |  Branch (4036:29): [True: 814k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   814k|            m_kind = float_kind::generic;
 4040|   814k|            return read_regular_float(range);
 4041|   814k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.45M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.4k, False: 1.37M]
  |  |  ------------------
  ------------------
 4047|  78.4k|            m_kind = float_kind::hex_with_prefix;
 4048|  78.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  78.4k|        }
 4050|       |
 4051|  1.37M|        m_kind = float_kind::generic;
 4052|  1.37M|        return read_regular(range);
 4053|  1.45M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  2.09M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.09M|                    auto res = read_all(rr);
 3727|  2.09M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36k, False: 2.09M]
  |  |  ------------------
  ------------------
 3728|  1.36k|                        return unexpected_scan_error(
 3729|  1.36k|                            scan_error::invalid_scanned_value,
 3730|  1.36k|                            "Invalid float value");
 3731|  1.36k|                    }
 3732|  2.09M|                    return res;
 3733|  2.09M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  2.09M|{
 1839|  2.09M|    return ranges::next(range.begin(), range.end());
 1840|  2.09M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  2.09M|    {
  313|  2.09M|        ranges::advance(x, bound);
  314|  2.09M|        return x;
  315|  2.09M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  2.09M|    {
  275|  2.09M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  2.09M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  2.09M|    {
  190|  2.09M|        i = std::move(bound);
  191|  2.09M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.84M|    {
 1577|  2.84M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.84M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.84M|    {
 1621|  2.84M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.84M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.84M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.84M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.84M|            m_storage.reset();
 1627|  2.84M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.84M|        }
 1629|  2.84M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.84M|                                          std::basic_string<CharT>>) {
 1631|  2.84M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.84M|            m_view = string_view_type{*m_storage};
 1633|  2.84M|        }
 1634|  2.84M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.84M|                                          typename detail::basic_scan_buffer<
 1636|  2.84M|                                              value_t>::forward_iterator> &&
 1637|  2.84M|                           ranges::common_range<Range>) {
 1638|  2.84M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.84M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.84M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.84M|                             detail::to_address(end_seg.end()))) {
 1642|  2.84M|                auto& str = m_storage.emplace();
 1643|  2.84M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.84M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.84M|                m_view = string_view_type{str};
 1646|  2.84M|                return;
 1647|  2.84M|            }
 1648|       |
 1649|  2.84M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.84M|                                                            end_seg.data());
 1651|  2.84M|            m_storage.reset();
 1652|  2.84M|        }
 1653|  2.84M|        else {
 1654|  2.84M|            auto& str = m_storage.emplace();
 1655|  2.84M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.84M|                str.reserve(range.size());
 1657|  2.84M|            }
 1658|  2.84M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.84M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.84M|                          std::back_inserter(str));
 1661|  2.84M|            }
 1662|  2.84M|            else {
 1663|  2.84M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.84M|                     ++it) {
 1665|  2.84M|                    str.push_back(*it);
 1666|  2.84M|                }
 1667|  2.84M|            }
 1668|  2.84M|            m_view = string_view_type{str};
 1669|  2.84M|        }
 1670|  2.84M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   189k|        {
  662|   189k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   491k|    {
  754|   491k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   491k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   491k|              cvref<T> obj = *get<T>(fn);
  745|   491k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   491k|                  obj(static_cast<decltype(args)>(args)...);
  747|   491k|              }
  748|   491k|              else {
  749|   491k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   491k|              }
  751|   491k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   491k|    {
  684|   491k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   491k|            return static_cast<T*>(s.m_cp);
  686|   491k|        }
  687|   491k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   491k|            return static_cast<T*>(s.m_p);
  689|   491k|        }
  690|   491k|        else {
  691|   491k|            return reinterpret_cast<T*>(s.m_fp);
  692|   491k|        }
  693|   491k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   491k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   491k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   491k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   491k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  2.45M|    {
 3665|  2.45M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.45M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.45M|        return read_source_impl(range);
 3671|  2.45M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   491k|        {
  662|   491k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   802k|    {
 6193|   802k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   802k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   802k|            auto rd = make_reader<T, char_type>();
 6198|   802k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   802k|                return unexpected(e);
 6200|   802k|            }
 6201|       |
 6202|   802k|            return impl(rd, range, value);
 6203|   802k|        }
 6204|   802k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   802k|            auto rd = make_reader<T, char_type>();
 6206|   802k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 802k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   802k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 802k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   802k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   802k|                return impl(rd, range, value);
 6213|   802k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   802k|        else {
 6221|   802k|            SCN_EXPECT(false);
 6222|   802k|            SCN_UNREACHABLE;
 6223|   802k|        }
 6224|   802k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   802k|    {
 6124|   802k|        const bool need_skipped_width =
 6125|   802k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 802k]
  |  Branch (6125:33): [True: 0, False: 802k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   802k|        auto it = rng.begin();
 6129|   802k|        std::ptrdiff_t prefix_width = 0;
 6130|   802k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 802k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   802k|        else {
 6138|   802k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   802k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   802k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   802k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.35k, False: 793k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.35k|    }                                                  \
  |  |  |  | 3671|   802k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   793k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   793k|            std::tie(it, prefix_width) = prefix_result;
 6140|   793k|        }
 6141|   793k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   793k|        std::ptrdiff_t value_width = 0;
 6145|   793k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 793k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   793k|        else {
 6161|   793k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   793k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   793k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 34.6k, False: 759k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  34.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  34.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  34.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  34.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  34.6k|    }                                                  \
  |  | 3671|   793k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   793k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   759k|                                             specs, value, loc));
 6163|       |
 6164|   759k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 759k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   759k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   759k|        std::ptrdiff_t postfix_width = 0;
 6173|   759k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 752k, False: 6.44k]
  ------------------
 6174|   752k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   752k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   752k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   752k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   752k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 752k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   752k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   752k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   752k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   752k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   752k|                                 value_width));
 6178|   752k|            std::tie(it, postfix_width) = postfix_result;
 6179|   752k|        }
 6180|       |
 6181|   759k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   759k|                                                 value_width, postfix_width);
 6183|   759k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 759k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   759k|        return it;
 6188|   759k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  2.08M|    {
 3691|  2.08M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  2.08M|        const std::ptrdiff_t sign_len =
 3694|  2.08M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 550k, False: 1.53M]
  ------------------
 3695|       |
 3696|  2.08M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  2.08M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26.6k, False: 2.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  26.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  26.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  26.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  26.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  26.6k|    }                                                  \
  |  |  |  | 3671|  2.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  2.05M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  2.08M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   793k|    {
 4170|   793k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   793k|#if !SCN_DISABLE_LOCALE
 4173|   793k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 229k, False: 564k]
  ------------------
 4174|   229k|            return read_impl<Range>(
 4175|   229k|                range, rd,
 4176|   229k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   229k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   229k|                },
 4179|   229k|                value, loc);
 4180|   229k|        }
 4181|   564k|#endif
 4182|       |
 4183|   564k|        return read_impl<Range>(
 4184|   564k|            range, rd,
 4185|   564k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   564k|                return r.read_source(SCN_FWD(args)...);
 4187|   564k|            },
 4188|   564k|            value);
 4189|   793k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  1.10M|    {
 4206|  1.10M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.10M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 1.06M]
  |  |  ------------------
  ------------------
 4208|  41.7k|            return unexpected(r.error());
 4209|  41.7k|        }
 4210|       |
 4211|  1.06M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.06M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.06M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.06M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.17k, False: 1.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.17k|    }                                                  \
  |  |  |  | 3671|  1.06M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  1.05M|        return ranges::next(range.begin(), n);
 4213|  1.06M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   229k|    {
  754|   229k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   229k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   229k|              cvref<T> obj = *get<T>(fn);
  745|   229k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   229k|                  obj(static_cast<decltype(args)>(args)...);
  747|   229k|              }
  748|   229k|              else {
  749|   229k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   229k|              }
  751|   229k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   229k|    {
  684|   229k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   229k|            return static_cast<T*>(s.m_cp);
  686|   229k|        }
  687|   229k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   229k|            return static_cast<T*>(s.m_p);
  689|   229k|        }
  690|   229k|        else {
  691|   229k|            return reinterpret_cast<T*>(s.m_fp);
  692|   229k|        }
  693|   229k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   229k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   229k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   229k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   229k|        {
  662|   229k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   564k|    {
  754|   564k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   564k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   564k|              cvref<T> obj = *get<T>(fn);
  745|   564k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   564k|                  obj(static_cast<decltype(args)>(args)...);
  747|   564k|              }
  748|   564k|              else {
  749|   564k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   564k|              }
  751|   564k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   564k|    {
  684|   564k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   564k|            return static_cast<T*>(s.m_cp);
  686|   564k|        }
  687|   564k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   564k|            return static_cast<T*>(s.m_p);
  689|   564k|        }
  690|   564k|        else {
  691|   564k|            return reinterpret_cast<T*>(s.m_fp);
  692|   564k|        }
  693|   564k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   564k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   564k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   564k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   564k|        {
  662|   564k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   728k|    {
 4170|   728k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   728k|#if !SCN_DISABLE_LOCALE
 4173|   728k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 209k, False: 519k]
  ------------------
 4174|   209k|            return read_impl<Range>(
 4175|   209k|                range, rd,
 4176|   209k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   209k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   209k|                },
 4179|   209k|                value, loc);
 4180|   209k|        }
 4181|   519k|#endif
 4182|       |
 4183|   519k|        return read_impl<Range>(
 4184|   519k|            range, rd,
 4185|   519k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   519k|                return r.read_source(SCN_FWD(args)...);
 4187|   519k|            },
 4188|   519k|            value);
 4189|   728k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.04M|    {
 4206|  1.04M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.04M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.0k, False: 1.02M]
  |  |  ------------------
  ------------------
 4208|  23.0k|            return unexpected(r.error());
 4209|  23.0k|        }
 4210|       |
 4211|  1.02M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.02M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 23.4k, False: 996k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  23.4k|    }                                                  \
  |  |  |  | 3671|  1.02M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   996k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   996k|        return ranges::next(range.begin(), n);
 4213|  1.02M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   209k|    {
  754|   209k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   209k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   209k|              cvref<T> obj = *get<T>(fn);
  745|   209k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   209k|                  obj(static_cast<decltype(args)>(args)...);
  747|   209k|              }
  748|   209k|              else {
  749|   209k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   209k|              }
  751|   209k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   209k|    {
  684|   209k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   209k|            return static_cast<T*>(s.m_cp);
  686|   209k|        }
  687|   209k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   209k|            return static_cast<T*>(s.m_p);
  689|   209k|        }
  690|   209k|        else {
  691|   209k|            return reinterpret_cast<T*>(s.m_fp);
  692|   209k|        }
  693|   209k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   209k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   209k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   209k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   209k|        {
  662|   209k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   519k|    {
  754|   519k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   519k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   519k|              cvref<T> obj = *get<T>(fn);
  745|   519k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   519k|                  obj(static_cast<decltype(args)>(args)...);
  747|   519k|              }
  748|   519k|              else {
  749|   519k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   519k|              }
  751|   519k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   519k|    {
  684|   519k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   519k|            return static_cast<T*>(s.m_cp);
  686|   519k|        }
  687|   519k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   519k|            return static_cast<T*>(s.m_p);
  689|   519k|        }
  690|   519k|        else {
  691|   519k|            return reinterpret_cast<T*>(s.m_fp);
  692|   519k|        }
  693|   519k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   519k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   519k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   519k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   519k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   519k|        {
  662|   519k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   810k|    {
 6193|   810k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   810k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   810k|            auto rd = make_reader<T, char_type>();
 6198|   810k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   810k|                return unexpected(e);
 6200|   810k|            }
 6201|       |
 6202|   810k|            return impl(rd, range, value);
 6203|   810k|        }
 6204|   810k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   810k|            auto rd = make_reader<T, char_type>();
 6206|   810k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   810k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 810k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   810k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 810k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   810k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   810k|                return impl(rd, range, value);
 6213|   810k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   810k|        else {
 6221|   810k|            SCN_EXPECT(false);
 6222|   810k|            SCN_UNREACHABLE;
 6223|   810k|        }
 6224|   810k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   810k|    {
 6124|   810k|        const bool need_skipped_width =
 6125|   810k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 810k]
  |  Branch (6125:33): [True: 0, False: 810k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   810k|        auto it = rng.begin();
 6129|   810k|        std::ptrdiff_t prefix_width = 0;
 6130|   810k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 810k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   810k|        else {
 6138|   810k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   810k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   810k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   810k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   810k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.87k, False: 801k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.87k|    }                                                  \
  |  |  |  | 3671|   810k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   801k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   801k|            std::tie(it, prefix_width) = prefix_result;
 6140|   801k|        }
 6141|   801k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   801k|        std::ptrdiff_t value_width = 0;
 6145|   801k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 801k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   801k|        else {
 6161|   801k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   801k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   801k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   801k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 34.1k, False: 767k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  34.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  34.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  34.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  34.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  34.1k|    }                                                  \
  |  | 3671|   801k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   801k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   767k|                                             specs, value, loc));
 6163|       |
 6164|   767k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 767k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   767k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   767k|        std::ptrdiff_t postfix_width = 0;
 6173|   767k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 760k, False: 6.89k]
  ------------------
 6174|   760k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   760k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   760k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   760k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   760k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 760k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   760k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   760k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   760k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   760k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   760k|                                 value_width));
 6178|   760k|            std::tie(it, postfix_width) = postfix_result;
 6179|   760k|        }
 6180|       |
 6181|   767k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   767k|                                                 value_width, postfix_width);
 6183|   767k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 767k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   767k|        return it;
 6188|   767k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  2.10M|    {
 3691|  2.10M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  2.10M|        const std::ptrdiff_t sign_len =
 3694|  2.10M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 563k, False: 1.53M]
  ------------------
 3695|       |
 3696|  2.10M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  2.10M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.10M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.10M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 23.3k, False: 2.07M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  23.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  23.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  23.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  23.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  23.3k|    }                                                  \
  |  |  |  | 3671|  2.10M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  2.07M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  2.10M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   801k|    {
 4170|   801k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   801k|#if !SCN_DISABLE_LOCALE
 4173|   801k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 232k, False: 568k]
  ------------------
 4174|   232k|            return read_impl<Range>(
 4175|   232k|                range, rd,
 4176|   232k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   232k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   232k|                },
 4179|   232k|                value, loc);
 4180|   232k|        }
 4181|   568k|#endif
 4182|       |
 4183|   568k|        return read_impl<Range>(
 4184|   568k|            range, rd,
 4185|   568k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   568k|                return r.read_source(SCN_FWD(args)...);
 4187|   568k|            },
 4188|   568k|            value);
 4189|   801k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  1.11M|    {
 4206|  1.11M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.11M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.1k, False: 1.07M]
  |  |  ------------------
  ------------------
 4208|  43.1k|            return unexpected(r.error());
 4209|  43.1k|        }
 4210|       |
 4211|  1.07M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.07M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 1.07M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.02k|    }                                                  \
  |  |  |  | 3671|  1.07M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  1.07M|        return ranges::next(range.begin(), n);
 4213|  1.07M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   232k|    {
  754|   232k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   232k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   232k|              cvref<T> obj = *get<T>(fn);
  745|   232k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   232k|                  obj(static_cast<decltype(args)>(args)...);
  747|   232k|              }
  748|   232k|              else {
  749|   232k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   232k|              }
  751|   232k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   232k|    {
  684|   232k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   232k|            return static_cast<T*>(s.m_cp);
  686|   232k|        }
  687|   232k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   232k|            return static_cast<T*>(s.m_p);
  689|   232k|        }
  690|   232k|        else {
  691|   232k|            return reinterpret_cast<T*>(s.m_fp);
  692|   232k|        }
  693|   232k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   232k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   232k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   232k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   232k|        {
  662|   232k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   568k|    {
  754|   568k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   568k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   568k|              cvref<T> obj = *get<T>(fn);
  745|   568k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   568k|                  obj(static_cast<decltype(args)>(args)...);
  747|   568k|              }
  748|   568k|              else {
  749|   568k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   568k|              }
  751|   568k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   568k|    {
  684|   568k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   568k|            return static_cast<T*>(s.m_cp);
  686|   568k|        }
  687|   568k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   568k|            return static_cast<T*>(s.m_p);
  689|   568k|        }
  690|   568k|        else {
  691|   568k|            return reinterpret_cast<T*>(s.m_fp);
  692|   568k|        }
  693|   568k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   568k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   568k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   568k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   568k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   568k|        {
  662|   568k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   735k|    {
 4170|   735k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   735k|#if !SCN_DISABLE_LOCALE
 4173|   735k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 212k, False: 522k]
  ------------------
 4174|   212k|            return read_impl<Range>(
 4175|   212k|                range, rd,
 4176|   212k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   212k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   212k|                },
 4179|   212k|                value, loc);
 4180|   212k|        }
 4181|   522k|#endif
 4182|       |
 4183|   522k|        return read_impl<Range>(
 4184|   522k|            range, rd,
 4185|   522k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   522k|                return r.read_source(SCN_FWD(args)...);
 4187|   522k|            },
 4188|   522k|            value);
 4189|   735k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.05M|    {
 4206|  1.05M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.05M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.5k, False: 1.03M]
  |  |  ------------------
  ------------------
 4208|  23.5k|            return unexpected(r.error());
 4209|  23.5k|        }
 4210|       |
 4211|  1.03M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.03M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.03M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.03M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22.3k, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  22.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  22.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  22.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  22.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  22.3k|    }                                                  \
  |  |  |  | 3671|  1.03M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  1.00M|        return ranges::next(range.begin(), n);
 4213|  1.03M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   212k|    {
  754|   212k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   212k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   212k|              cvref<T> obj = *get<T>(fn);
  745|   212k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   212k|                  obj(static_cast<decltype(args)>(args)...);
  747|   212k|              }
  748|   212k|              else {
  749|   212k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   212k|              }
  751|   212k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   212k|    {
  684|   212k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   212k|            return static_cast<T*>(s.m_cp);
  686|   212k|        }
  687|   212k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   212k|            return static_cast<T*>(s.m_p);
  689|   212k|        }
  690|   212k|        else {
  691|   212k|            return reinterpret_cast<T*>(s.m_fp);
  692|   212k|        }
  693|   212k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   212k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   212k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   212k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   212k|        {
  662|   212k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   522k|    {
  754|   522k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   522k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   522k|              cvref<T> obj = *get<T>(fn);
  745|   522k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   522k|                  obj(static_cast<decltype(args)>(args)...);
  747|   522k|              }
  748|   522k|              else {
  749|   522k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   522k|              }
  751|   522k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   522k|    {
  684|   522k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   522k|            return static_cast<T*>(s.m_cp);
  686|   522k|        }
  687|   522k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   522k|            return static_cast<T*>(s.m_p);
  689|   522k|        }
  690|   522k|        else {
  691|   522k|            return reinterpret_cast<T*>(s.m_fp);
  692|   522k|        }
  693|   522k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   522k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   522k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   522k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   522k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   522k|        {
  662|   522k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  3.26M|{
 1039|  3.26M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  3.26M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  3.26M|        return r;
 1042|  3.26M|    }
 1043|  3.26M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  3.26M|                           ranges::const_iterator_t<Range>,
 1045|  3.26M|                           typename detail::basic_scan_buffer<
 1046|  3.26M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  3.26M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  3.26M|            auto seg = r.begin().contiguous_segment();
 1049|  3.26M|            auto dist =
 1050|  3.26M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  3.26M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  3.26M|        }
 1053|  3.26M|        else {
 1054|  3.26M|            return r.begin().contiguous_segment();
 1055|  3.26M|        }
 1056|  3.26M|    }
 1057|  3.26M|    else {
 1058|  3.26M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  3.26M|    }
 1060|  3.26M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.90M|{
 2061|  2.90M|    auto it = range.begin();
 2062|  5.63M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 5.61M, False: 25.7k]
  ------------------
 2063|  5.61M|        const auto val =
 2064|  5.61M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  5.61M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  5.61M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.59M, False: 19.6k]
  |  |  ------------------
  ------------------
 2066|  5.59M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  5.59M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  5.59M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.87M, False: 2.71M]
  ------------------
 2069|  2.87M|                return it;
 2070|  2.87M|            }
 2071|  5.59M|        }
 2072|  2.73M|        it = val.iterator;
 2073|  2.73M|    }
 2074|       |
 2075|  25.7k|    return it;
 2076|  2.90M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  5.61M|{
 1899|  5.61M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  5.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  5.61M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  5.61M|    auto it = range.begin();
 1903|  5.61M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  5.61M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  5.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.6k, False: 5.59M]
  |  |  ------------------
  ------------------
 1906|  19.6k|        ++it;
 1907|  19.6k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  19.6k|        return {it, {}};
 1909|  19.6k|    }
 1910|       |
 1911|  5.59M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 5.51M, False: 74.6k]
  ------------------
 1912|  5.51M|        ++it;
 1913|  5.51M|        return {it, string_type(1, *range.begin())};
 1914|  5.51M|    }
 1915|       |
 1916|  74.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  74.6k|    return {it, string_type{range.begin(), it}};
 1918|  5.59M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  19.6k|{
 1155|  19.6k|    auto it = input.begin();
 1156|   259k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 257k, False: 1.88k]
  ------------------
 1157|   257k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 17.7k, False: 239k]
  ------------------
 1158|  17.7k|            break;
 1159|  17.7k|        }
 1160|   257k|    }
 1161|  19.6k|    return it;
 1162|  19.6k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  74.6k|    {
  283|  74.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  74.6k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  74.6k|    {
  252|  74.6k|        constexpr iter_difference_t<I> zero{0};
  253|  74.6k|        iter_difference_t<I> counter{0};
  254|       |
  255|   228k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 155k, False: 73.0k]
  |  Branch (255:30): [True: 153k, False: 1.55k]
  ------------------
  256|   153k|            ++i;
  257|   153k|            ++counter;
  258|   153k|        }
  259|       |
  260|  74.6k|        return counter;
  261|  74.6k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  5.61M|    {
 1890|  5.61M|        return !codepoint.empty();
 1891|  5.61M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.90M|{
 2082|  2.90M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.90M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  3.26M|{
 2951|  3.26M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 3.26M, False: 0]
  ------------------
 2952|  3.26M|        auto it = read_while_classic_space(range);
 2953|  3.26M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  3.26M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.7k, False: 3.24M]
  |  |  ------------------
  ------------------
 2955|  25.7k|            return unexpected(e);
 2956|  25.7k|        }
 2957|       |
 2958|  3.24M|        return it;
 2959|  3.26M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  3.26M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  3.26M|{
 2117|  3.26M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  3.26M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  3.26M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  3.26M|        auto buf = make_contiguous_buffer(range);
 2121|  3.26M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  3.26M|        return ranges::next(range.begin(),
 2123|  3.26M|                            ranges::distance(buf.view().begin(), it));
 2124|  3.26M|    }
 2125|  3.26M|    else {
 2126|  3.26M|        auto it = range.begin();
 2127|       |
 2128|  3.26M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  3.26M|            auto seg = get_contiguous_beginning(range);
 2130|  3.26M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  3.26M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 362k, False: 2.90M]
  ------------------
 2132|   362k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   362k|            }
 2134|  2.90M|            ranges::advance(it, seg.size());
 2135|  2.90M|        }
 2136|       |
 2137|  2.90M|        return read_while_code_point(
 2138|  2.90M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.26M|    }
 2140|  3.26M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.90M|    {
  754|  2.90M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  5.59M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.59M|              cvref<T> obj = *get<T>(fn);
  745|  5.59M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.59M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.59M|              }
  748|  5.59M|              else {
  749|  5.59M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.59M|              }
  751|  5.59M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  5.59M|    {
  684|  5.59M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.59M|            return static_cast<T*>(s.m_cp);
  686|  5.59M|        }
  687|  5.59M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.59M|            return static_cast<T*>(s.m_p);
  689|  5.59M|        }
  690|  5.59M|        else {
  691|  5.59M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.59M|        }
  693|  5.59M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  5.59M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.90M|        {
  662|  2.90M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   509k|{
  981|   509k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   509k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   509k|        return true;
  984|   509k|    }
  985|   509k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   509k|                           ranges::const_iterator_t<Range>,
  987|   509k|                           typename detail::basic_scan_buffer<
  988|   509k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   509k|        auto beg = r.begin();
  990|   509k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 509k, False: 0]
  ------------------
  991|   509k|            return false;
  992|   509k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   509k|    else {
 1006|   509k|        return false;
 1007|   509k|    }
 1008|   509k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  2.51M|    {
  763|  2.51M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.51M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.30M|{
 1857|  1.30M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.30M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.30M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.30M|        if (sz < count) {
 1862|  1.30M|            return unexpected(eof_error::eof);
 1863|  1.30M|        }
 1864|       |
 1865|  1.30M|        return ranges::next(range.begin(), count);
 1866|  1.30M|    }
 1867|  1.30M|    else {
 1868|  1.30M|        auto it = range.begin();
 1869|  1.30M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 763k, False: 539k]
  ------------------
 1870|   763k|            return ranges::next(it, count);
 1871|   763k|        }
 1872|       |
 1873|  2.06M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.58M, False: 481k]
  ------------------
 1874|  1.58M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 57.7k, False: 1.52M]
  ------------------
 1875|  57.7k|                return unexpected(eof_error::eof);
 1876|  57.7k|            }
 1877|  1.58M|        }
 1878|       |
 1879|   481k|        return it;
 1880|   539k|    }
 1881|  1.30M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.30M|{
 1095|  1.30M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.30M|        return r.size();
 1097|  1.30M|    }
 1098|  1.30M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.30M|                           ranges::const_iterator_t<Range>,
 1100|  1.30M|                           typename detail::basic_scan_buffer<
 1101|  1.30M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.30M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  1.30M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.30M|        }
 1105|  1.30M|        else {
 1106|  1.30M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.30M, False: 0]
  ------------------
 1107|  1.30M|                return static_cast<size_t>(
 1108|  1.30M|                    r.begin().parent()->chars_available() -
 1109|  1.30M|                    r.begin().position());
 1110|  1.30M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.30M|        }
 1113|  1.30M|    }
 1114|  1.30M|    else {
 1115|  1.30M|        return 0;
 1116|  1.30M|    }
 1117|  1.30M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   978k|    {
  754|   978k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.25M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.25M|              cvref<T> obj = *get<T>(fn);
  745|  1.25M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.25M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.25M|              }
  748|  1.25M|              else {
  749|  1.25M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.25M|              }
  751|  1.25M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.25M|    {
  684|  1.25M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.25M|            return static_cast<T*>(s.m_cp);
  686|  1.25M|        }
  687|  1.25M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.25M|            return static_cast<T*>(s.m_p);
  689|  1.25M|        }
  690|  1.25M|        else {
  691|  1.25M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.25M|        }
  693|  1.25M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   978k|        {
  662|   978k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   385k|    {
 6037|   385k|        const bool need_skipped_width =
 6038|   385k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 385k]
  |  Branch (6038:33): [True: 0, False: 385k]
  ------------------
 6039|   385k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   385k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 385k]
  ------------------
 6043|   385k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 385k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   385k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 385k, False: 0]
  |  Branch (6047:56): [True: 385k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   385k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 385k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   768k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   385k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   385k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   385k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.21k, False: 383k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.21k|    }                                                  \
  |  |  |  | 3671|   385k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   768k|                            make_eof_scan_error));
 6058|       |
 6059|   768k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 383k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   383k|            return result_type{it, 0};
 6067|   768k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   385k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   692k|{
 1976|   692k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   692k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   692k|{
 1957|   692k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   692k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   692k|    }
 1960|   692k|    else {
 1961|   692k|        auto first = range.begin();
 1962|   899k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 897k, False: 1.96k]
  ------------------
 1963|   897k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 690k, False: 207k]
  ------------------
 1964|   690k|                return first;
 1965|   690k|            }
 1966|   897k|        }
 1967|  1.96k|        return first;
 1968|   692k|    }
 1969|   692k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   306k|    {
  108|   306k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   306k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   306k|    {
   94|   306k|        iter_difference_t<I> counter{0};
   95|   767k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 461k, False: 306k]
  ------------------
   96|   461k|            ++i;
   97|   461k|            ++counter;
   98|   461k|        }
   99|   306k|        return counter;
  100|   306k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   165k|    {
 1780|   165k|        auto stdloc = loc.get<std::locale>();
 1781|   165k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   165k|        grouping = numpunct.grouping();
 1783|   165k|        thousands_sep =
 1784|   165k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 165k]
  ------------------
 1785|   165k|        decimal_point = numpunct.decimal_point();
 1786|   165k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   165k|{
 1717|   165k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 165k, False: 0]
  ------------------
 1718|   165k|        return std::use_facet<Facet>(stdloc);
 1719|   165k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   165k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   839k|{
 1846|   839k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.30k, False: 838k]
  |  |  ------------------
  ------------------
 1847|  1.30k|        return unexpected(e);
 1848|  1.30k|    }
 1849|       |
 1850|   838k|    return ranges::next(range.begin());
 1851|   839k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.47M|{
  950|  1.47M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.27k, False: 1.46M]
  |  |  ------------------
  ------------------
  951|  4.27k|        return eof_error::eof;
  952|  4.27k|    }
  953|  1.46M|    return eof_error::good;
  954|  1.47M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  2.14M|{
  944|  2.14M|    return is_range_eof(r.begin(), r.end());
  945|  2.14M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  2.14M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.14M|    {
  937|  2.14M|        return begin == end;
  938|  2.14M|    }
  939|  2.14M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   838k|    {
  296|   838k|        ++x;
  297|   838k|        return x;
  298|   838k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   513k|{
 3141|   513k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   513k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 511k, False: 1.56k]
  ------------------
 3143|   511k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 511k, False: 66]
  ------------------
 3144|   511k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   511k|        }
 3146|     66|        return unexpected(eof_error::eof);
 3147|   511k|    }
 3148|       |
 3149|  1.56k|    auto& it = *r;
 3150|  1.56k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 1.21k, False: 348]
  ------------------
 3151|  1.21k|        return std::pair{it, sign_type::minus_sign};
 3152|  1.21k|    }
 3153|    348|    return std::pair{it, sign_type::plus_sign};
 3154|  1.56k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   660k|{
 2272|   660k|    auto it = read_code_unit(range);
 2273|   660k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 690, False: 660k]
  |  |  ------------------
  ------------------
 2274|    690|        return unexpected(make_eof_parse_error(it.error()));
 2275|    690|    }
 2276|       |
 2277|  1.31M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.31M, False: 651k]
  ------------------
 2278|  1.31M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 8.13k, False: 1.31M]
  ------------------
 2279|  8.13k|            return *it;
 2280|  8.13k|        }
 2281|  1.31M|    }
 2282|       |
 2283|   651k|    return unexpected(parse_error::error);
 2284|   660k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.30M|{
 2231|  1.30M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.30M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.30M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.30M|        if (range.size() < str.size()) {
 2236|  1.30M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.30M|        }
 2238|  1.30M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.30M|            return unexpected(parse_error::error);
 2240|  1.30M|        }
 2241|  1.30M|        return ranges::next(range.begin(), str.size());
 2242|  1.30M|    }
 2243|  1.30M|    else {
 2244|  1.30M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.30M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.30M|                return ch;
 2247|  1.30M|            }
 2248|  1.30M|            return static_cast<char_type>(ch +
 2249|  1.30M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.30M|        };
 2251|       |
 2252|  1.30M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.30M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.30M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.30M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57.7k, False: 1.24M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  57.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  57.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  57.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  57.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  57.7k|    }                                                  \
  |  |  |  | 3671|  1.30M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.24M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.24M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.24M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.24M, False: 609]
  |  |  ------------------
  ------------------
 2257|  1.24M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.24M|                    return ascii_tolower(a) ==
 2259|  1.24M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.24M|                }))) {
 2261|  1.24M|            return unexpected(parse_error::error);
 2262|  1.24M|        }
 2263|       |
 2264|    609|        return it;
 2265|  1.24M|    }
 2266|  1.30M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.34M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.34M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 918k, False: 427k]
  |  Branch (2245:29): [True: 416k, False: 11.2k]
  ------------------
 2246|  1.33M|                return ch;
 2247|  1.33M|            }
 2248|  11.2k|            return static_cast<char_type>(ch +
 2249|  11.2k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.34M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   178k|{
 2146|   178k|    auto it = read_code_unit(range);
 2147|   178k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 618, False: 178k]
  |  |  ------------------
  ------------------
 2148|    618|        return unexpected(make_eof_parse_error(it.error()));
 2149|    618|    }
 2150|       |
 2151|   178k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 177k, False: 504]
  |  |  ------------------
  ------------------
 2152|   178k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   177k|        return unexpected(parse_error::error);
 2154|   177k|    }
 2155|       |
 2156|    504|    return *it;
 2157|   178k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   692k|{
 1996|   692k|    auto it = read_while_code_unit(range, pred);
 1997|   692k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 508k, False: 183k]
  ------------------
 1998|   508k|        return unexpected(parse_error::error);
 1999|   508k|    }
 2000|   183k|    return it;
 2001|   692k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   175k|    {
 1621|   175k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   175k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   175k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   175k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   175k|            m_storage.reset();
 1627|   175k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   175k|        }
 1629|   175k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   175k|                                          std::basic_string<CharT>>) {
 1631|   175k|            m_storage.emplace(SCN_FWD(range));
 1632|   175k|            m_view = string_view_type{*m_storage};
 1633|   175k|        }
 1634|   175k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   175k|                                          typename detail::basic_scan_buffer<
 1636|   175k|                                              value_t>::forward_iterator> &&
 1637|   175k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   175k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   175k|            auto end_seg = range.end().contiguous_segment();
 1640|   175k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.99k, False: 168k]
  |  |  ------------------
  ------------------
 1641|   175k|                             detail::to_address(end_seg.end()))) {
 1642|  6.99k|                auto& str = m_storage.emplace();
 1643|  6.99k|                str.reserve(range.end().position() - range.begin().position());
 1644|  6.99k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  6.99k|                m_view = string_view_type{str};
 1646|  6.99k|                return;
 1647|  6.99k|            }
 1648|       |
 1649|   168k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   168k|                                                            end_seg.data());
 1651|   168k|            m_storage.reset();
 1652|   168k|        }
 1653|   175k|        else {
 1654|   175k|            auto& str = m_storage.emplace();
 1655|   175k|            if constexpr (ranges::sized_range<Range>) {
 1656|   175k|                str.reserve(range.size());
 1657|   175k|            }
 1658|   175k|            if constexpr (ranges::common_range<Range>) {
 1659|   175k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   175k|                          std::back_inserter(str));
 1661|   175k|            }
 1662|   175k|            else {
 1663|   175k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   175k|                     ++it) {
 1665|   175k|                    str.push_back(*it);
 1666|   175k|                }
 1667|   175k|            }
 1668|   175k|            m_view = string_view_type{str};
 1669|   175k|        }
 1670|   175k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.82M|    {
 1582|  1.82M|        return m_view;
 1583|  1.82M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.02M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   126k|    {
 6079|   126k|        const bool need_skipped_width =
 6080|   126k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 126k]
  |  Branch (6080:33): [True: 0, False: 126k]
  ------------------
 6081|   126k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   126k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 126k]
  ------------------
 6084|   126k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 126k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   126k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 126k, False: 0]
  ------------------
 6093|   126k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 126k]
  ------------------
 6094|   126k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   126k|        return result_type{rng.begin(), 0};
 6118|   126k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  1.30M|{
 1857|  1.30M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.30M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.30M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.30M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 57.8k, False: 1.24M]
  ------------------
 1862|  57.8k|            return unexpected(eof_error::eof);
 1863|  57.8k|        }
 1864|       |
 1865|  1.24M|        return ranges::next(range.begin(), count);
 1866|  1.30M|    }
 1867|  1.30M|    else {
 1868|  1.30M|        auto it = range.begin();
 1869|  1.30M|        if (guaranteed_minimum_size(range) >= count) {
 1870|  1.30M|            return ranges::next(it, count);
 1871|  1.30M|        }
 1872|       |
 1873|  1.30M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  1.30M|            if (it == range.end()) {
 1875|  1.30M|                return unexpected(eof_error::eof);
 1876|  1.30M|            }
 1877|  1.30M|        }
 1878|       |
 1879|  1.30M|        return it;
 1880|  1.30M|    }
 1881|  1.30M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.00M|{
 1899|  1.00M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.00M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.00M|    auto it = range.begin();
 1903|  1.00M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.00M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.00M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.00M, False: 0]
  ------------------
 1912|  1.00M|        ++it;
 1913|  1.00M|        return {it, string_type(1, *range.begin())};
 1914|  1.00M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.00M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  2.25M|{
  944|  2.25M|    return is_range_eof(r.begin(), r.end());
  945|  2.25M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  2.25M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.25M|    {
  937|  2.25M|        return begin == end;
  938|  2.25M|    }
  939|  2.25M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   289k|    {
  190|   289k|        i = std::move(bound);
  191|   289k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  1.00M|    {
 1890|  1.00M|        return !codepoint.empty();
 1891|  1.00M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.24M|{
  950|  1.24M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.29k, False: 1.24M]
  |  |  ------------------
  ------------------
  951|  3.29k|        return eof_error::eof;
  952|  3.29k|    }
  953|  1.24M|    return eof_error::good;
  954|  1.24M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   612k|{
 1846|   612k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 611k]
  |  |  ------------------
  ------------------
 1847|    336|        return unexpected(e);
 1848|    336|    }
 1849|       |
 1850|   611k|    return ranges::next(range.begin());
 1851|   612k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   611k|    {
  296|   611k|        ++x;
  297|   611k|        return x;
  298|   611k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   509k|{
 3141|   509k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   509k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 508k, False: 931]
  ------------------
 3143|   508k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 508k, False: 18]
  ------------------
 3144|   508k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   508k|        }
 3146|     18|        return unexpected(eof_error::eof);
 3147|   508k|    }
 3148|       |
 3149|    931|    auto& it = *r;
 3150|    931|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 718, False: 213]
  ------------------
 3151|    718|        return std::pair{it, sign_type::minus_sign};
 3152|    718|    }
 3153|    213|    return std::pair{it, sign_type::plus_sign};
 3154|    931|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   545k|{
 2272|   545k|    auto it = read_code_unit(range);
 2273|   545k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 156, False: 545k]
  |  |  ------------------
  ------------------
 2274|    156|        return unexpected(make_eof_parse_error(it.error()));
 2275|    156|    }
 2276|       |
 2277|  1.08M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.08M, False: 541k]
  ------------------
 2278|  1.08M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 3.43k, False: 1.08M]
  ------------------
 2279|  3.43k|            return *it;
 2280|  3.43k|        }
 2281|  1.08M|    }
 2282|       |
 2283|   541k|    return unexpected(parse_error::error);
 2284|   545k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.30M|{
 2231|  1.30M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.30M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.30M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.30M|        if (range.size() < str.size()) {
 2236|  1.30M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.30M|        }
 2238|  1.30M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.30M|            return unexpected(parse_error::error);
 2240|  1.30M|        }
 2241|  1.30M|        return ranges::next(range.begin(), str.size());
 2242|  1.30M|    }
 2243|  1.30M|    else {
 2244|  1.30M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.30M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.30M|                return ch;
 2247|  1.30M|            }
 2248|  1.30M|            return static_cast<char_type>(ch +
 2249|  1.30M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.30M|        };
 2251|       |
 2252|  1.30M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.30M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.30M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.30M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57.8k, False: 1.24M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  57.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  57.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  57.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  57.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  57.8k|    }                                                  \
  |  |  |  | 3671|  1.30M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.24M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.24M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.24M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.24M, False: 609]
  |  |  ------------------
  ------------------
 2257|  1.24M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.24M|                    return ascii_tolower(a) ==
 2259|  1.24M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.24M|                }))) {
 2261|  1.24M|            return unexpected(parse_error::error);
 2262|  1.24M|        }
 2263|       |
 2264|    609|        return it;
 2265|  1.24M|    }
 2266|  1.30M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.34M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.34M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 918k, False: 428k]
  |  Branch (2245:29): [True: 417k, False: 11.2k]
  ------------------
 2246|  1.33M|                return ch;
 2247|  1.33M|            }
 2248|  11.2k|            return static_cast<char_type>(ch +
 2249|  11.2k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.34M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  67.0k|{
 2146|  67.0k|    auto it = read_code_unit(range);
 2147|  67.0k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  67.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 66.8k]
  |  |  ------------------
  ------------------
 2148|    180|        return unexpected(make_eof_parse_error(it.error()));
 2149|    180|    }
 2150|       |
 2151|  66.8k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.6k, False: 204]
  |  |  ------------------
  ------------------
 2152|  66.8k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  66.6k|        return unexpected(parse_error::error);
 2154|  66.6k|    }
 2155|       |
 2156|    204|    return *it;
 2157|  66.8k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   286k|{
 1976|   286k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   286k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   286k|{
 1957|   286k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   286k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   286k|    }
 1960|   286k|    else {
 1961|   286k|        auto first = range.begin();
 1962|   286k|        for (; first != range.end(); ++first) {
 1963|   286k|            if (pred(*first)) {
 1964|   286k|                return first;
 1965|   286k|            }
 1966|   286k|        }
 1967|   286k|        return first;
 1968|   286k|    }
 1969|   286k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   509k|{
 2951|   509k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 509k, False: 0]
  ------------------
 2952|   509k|        auto it = read_while_classic_space(range);
 2953|   509k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   509k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.71k, False: 507k]
  |  |  ------------------
  ------------------
 2955|  2.71k|            return unexpected(e);
 2956|  2.71k|        }
 2957|       |
 2958|   507k|        return it;
 2959|   509k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   509k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   509k|{
 2117|   509k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   509k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   509k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   509k|        auto buf = make_contiguous_buffer(range);
 2121|   509k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   509k|        return ranges::next(range.begin(),
 2123|   509k|                            ranges::distance(buf.view().begin(), it));
 2124|   509k|    }
 2125|   509k|    else {
 2126|   509k|        auto it = range.begin();
 2127|       |
 2128|   509k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   509k|            auto seg = get_contiguous_beginning(range);
 2130|   509k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   509k|                seg_it != seg.end()) {
 2132|   509k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   509k|            }
 2134|   509k|            ranges::advance(it, seg.size());
 2135|   509k|        }
 2136|       |
 2137|   509k|        return read_while_code_point(
 2138|   509k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   509k|    }
 2140|   509k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   509k|{
 2082|   509k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   509k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   670k|{
 2061|   670k|    auto it = range.begin();
 2062|  1.11M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.00M, False: 106k]
  ------------------
 2063|  1.00M|        const auto val =
 2064|  1.00M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.00M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.00M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.00M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.00M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.00M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 563k, False: 441k]
  ------------------
 2069|   563k|                return it;
 2070|   563k|            }
 2071|  1.00M|        }
 2072|   441k|        it = val.iterator;
 2073|   441k|    }
 2074|       |
 2075|   106k|    return it;
 2076|   670k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   509k|    {
  754|   509k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   675k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   675k|              cvref<T> obj = *get<T>(fn);
  745|   675k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   675k|                  obj(static_cast<decltype(args)>(args)...);
  747|   675k|              }
  748|   675k|              else {
  749|   675k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   675k|              }
  751|   675k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   675k|    {
  684|   675k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   675k|            return static_cast<T*>(s.m_cp);
  686|   675k|        }
  687|   675k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   675k|            return static_cast<T*>(s.m_p);
  689|   675k|        }
  690|   675k|        else {
  691|   675k|            return reinterpret_cast<T*>(s.m_fp);
  692|   675k|        }
  693|   675k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   675k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   509k|        {
  662|   509k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   937k|    {
  304|   937k|        ranges::advance(x, n);
  305|   937k|        return x;
  306|   937k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   937k|    {
  268|   937k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   937k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   937k|    {
  181|  3.14M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.21M, False: 937k]
  ------------------
  182|  2.21M|            ++i;
  183|  2.21M|        }
  184|   937k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   127k|    {
 6193|   127k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   127k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   127k|            auto rd = make_reader<T, char_type>();
 6198|   127k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   127k|                return unexpected(e);
 6200|   127k|            }
 6201|       |
 6202|   127k|            return impl(rd, range, value);
 6203|   127k|        }
 6204|   127k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   127k|            auto rd = make_reader<T, char_type>();
 6206|   127k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   127k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 127k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   127k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   127k|                return impl(rd, range, value);
 6213|   127k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   127k|        else {
 6221|   127k|            SCN_EXPECT(false);
 6222|   127k|            SCN_UNREACHABLE;
 6223|   127k|        }
 6224|   127k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   770k|    {
 3040|   770k|        reader_error_handler eh{};
 3041|   770k|        get_derived().check_specs_impl(specs, eh);
 3042|   770k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   770k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 770k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   770k|        return {};
 3046|   770k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   770k|    {
 3051|   770k|        return static_cast<Derived&>(*this);
 3052|   770k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   770k|    {
 4145|   770k|        detail::check_float_type_specs(specs, eh);
 4146|   770k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   127k|    {
 6124|   127k|        const bool need_skipped_width =
 6125|   127k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 127k]
  |  Branch (6125:33): [True: 0, False: 127k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   127k|        auto it = rng.begin();
 6129|   127k|        std::ptrdiff_t prefix_width = 0;
 6130|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 127k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   127k|        else {
 6138|   127k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 700, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    700|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    700|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    700|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    700|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    700|    }                                                  \
  |  |  |  | 3671|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   127k|            std::tie(it, prefix_width) = prefix_result;
 6140|   127k|        }
 6141|   127k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   127k|        std::ptrdiff_t value_width = 0;
 6145|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 127k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   127k|        else {
 6161|   127k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 85.3k, False: 41.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  85.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  85.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  85.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  85.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  85.3k|    }                                                  \
  |  | 3671|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  41.9k|                                             specs, value, loc));
 6163|       |
 6164|  41.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 41.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  41.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  41.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  41.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 41.7k, False: 204]
  ------------------
 6174|  41.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  41.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  41.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  41.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  41.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  41.7k|                                 value_width));
 6178|  41.7k|            std::tie(it, postfix_width) = postfix_result;
 6179|  41.7k|        }
 6180|       |
 6181|  41.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  41.9k|                                                 value_width, postfix_width);
 6183|  41.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 41.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  41.9k|        return it;
 6188|  41.9k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.27M|    {
 3035|  1.27M|        return true;
 3036|  1.27M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   766k|    {
 4217|   766k|        unsigned options{};
 4218|   766k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 165k, False: 601k]
  ------------------
 4219|   165k|            options |= float_reader_base::allow_thsep;
 4220|   165k|        }
 4221|       |
 4222|   766k|        SCN_GCC_COMPAT_PUSH
 4223|   766k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   766k|        switch (specs.type) {
 4226|   165k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 165k, False: 600k]
  ------------------
 4227|   165k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|   103k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 103k, False: 662k]
  ------------------
 4230|   103k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   166k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 166k, False: 599k]
  ------------------
 4233|   166k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   165k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 165k, False: 601k]
  ------------------
 4236|   165k|                return options | float_reader_base::allow_scientific |
 4237|   165k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   165k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 165k, False: 601k]
  ------------------
 4240|   165k|                return options | float_reader_base::allow_scientific |
 4241|   165k|                       float_reader_base::allow_fixed |
 4242|   165k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 766k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   766k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   766k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   766k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   766k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.01M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.02M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   175k|    {
 3691|   175k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   175k|        const std::ptrdiff_t sign_len =
 3694|   175k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 211, False: 175k]
  ------------------
 3695|       |
 3696|   175k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   175k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   175k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   175k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60.8k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  60.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  60.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  60.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  60.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  60.8k|    }                                                  \
  |  |  |  | 3671|   175k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   114k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   175k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   529k|    {
 4057|   529k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 529k, False: 0]
  ------------------
 4058|   529k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 529k, False: 0]
  ------------------
 4059|   529k|            return;
 4060|   529k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   394k|    {
 1587|   394k|        return m_storage.has_value();
 1588|   394k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   229k|    {
 1592|   229k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   229k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   229k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   229k|        return *m_storage;
 1594|   229k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   127k|    {
 4170|   127k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   127k|#if !SCN_DISABLE_LOCALE
 4173|   127k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 27.3k, False: 99.9k]
  ------------------
 4174|  27.3k|            return read_impl<Range>(
 4175|  27.3k|                range, rd,
 4176|  27.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  27.3k|                },
 4179|  27.3k|                value, loc);
 4180|  27.3k|        }
 4181|  99.9k|#endif
 4182|       |
 4183|  99.9k|        return read_impl<Range>(
 4184|  99.9k|            range, rd,
 4185|  99.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  99.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  99.9k|            },
 4188|  99.9k|            value);
 4189|   127k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   168k|    {
 4206|   168k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   168k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 109k, False: 58.2k]
  |  |  ------------------
  ------------------
 4208|   109k|            return unexpected(r.error());
 4209|   109k|        }
 4210|       |
 4211|  58.2k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  58.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 926, False: 57.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    926|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    926|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    926|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    926|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    926|    }                                                  \
  |  |  |  | 3671|  58.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  57.3k|        return ranges::next(range.begin(), n);
 4213|  58.2k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   506k|    {
  763|   506k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   506k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  27.3k|    {
  754|  27.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  27.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.3k|              cvref<T> obj = *get<T>(fn);
  745|  27.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.3k|              }
  748|  27.3k|              else {
  749|  27.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.3k|              }
  751|  27.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  27.3k|    {
  684|  27.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.3k|            return static_cast<T*>(s.m_cp);
  686|  27.3k|        }
  687|  27.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.3k|            return static_cast<T*>(s.m_p);
  689|  27.3k|        }
  690|  27.3k|        else {
  691|  27.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.3k|        }
  693|  27.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  27.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  27.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  82.4k|    {
 3679|  82.4k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  82.4k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  82.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 82.4k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  82.4k|        return read_source_impl(range);
 3685|  82.4k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   506k|    {
 3705|   506k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   506k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   506k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   506k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 506k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   506k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   506k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   506k|        auto it = sign_result.first;
 3708|   506k|        m_sign = sign_result.second;
 3709|       |
 3710|   506k|        auto digits_begin = it;
 3711|   506k|        auto r = ranges::subrange{it, range.end()};
 3712|   506k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   506k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   506k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   506k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   506k|                SCN_TRY_ASSIGN(
 3717|   506k|                    it,
 3718|   506k|                    do_read_source_impl(
 3719|   506k|                        r,
 3720|   506k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   506k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   506k|            }
 3723|   506k|            else {
 3724|   506k|                auto cb = [&](const auto& rr)
 3725|   506k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   506k|                    auto res = read_all(rr);
 3727|   506k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   506k|                        return unexpected_scan_error(
 3729|   506k|                            scan_error::invalid_scanned_value,
 3730|   506k|                            "Invalid float value");
 3731|   506k|                    }
 3732|   506k|                    return res;
 3733|   506k|                };
 3734|   506k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   506k|            }
 3736|   506k|        }
 3737|   506k|        else {
 3738|   506k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   506k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   506k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 330k, False: 175k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   330k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   330k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   330k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   330k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   330k|    }                                                  \
  |  | 3671|   506k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   175k|                it,
 3740|   175k|                do_read_source_impl(
 3741|   175k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   175k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   175k|        }
 3744|       |
 3745|   175k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   175k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 175k, False: 0]
  |  Branch (3747:48): [True: 175k, False: 0]
  ------------------
 3748|   175k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 175k, False: 0]
  ------------------
 3749|   175k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 175k, False: 0]
  ------------------
 3750|   175k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   175k|        }
 3752|       |
 3753|   175k|        handle_separators();
 3754|       |
 3755|   175k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 175k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   175k|        return it;
 3768|   175k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   506k|    {
 4000|   506k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   506k|        const bool allowed_nonhex =
 4002|   506k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   506k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   506k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 506k, False: 0]
  |  Branch (4005:45): [True: 0, False: 506k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   506k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 506k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   506k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 506k, False: 0]
  |  Branch (4014:45): [True: 0, False: 506k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   506k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 506k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   506k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 289k, False: 217k]
  |  Branch (4021:28): [True: 83.4k, False: 206k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  83.4k|            auto it = range.begin();
 4025|       |
 4026|  83.4k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 174, False: 83.2k]
  ------------------
 4027|    174|                m_kind = float_kind::hex_with_prefix;
 4028|    174|                it = *r;
 4029|    174|            }
 4030|  83.2k|            else {
 4031|  83.2k|                m_kind = float_kind::hex_without_prefix;
 4032|  83.2k|            }
 4033|       |
 4034|  83.4k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  83.4k|        }
 4036|   423k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 217k, False: 206k]
  |  Branch (4036:29): [True: 217k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   217k|            m_kind = float_kind::generic;
 4040|   217k|            return read_regular_float(range);
 4041|   217k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   206k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 435, False: 205k]
  |  |  ------------------
  ------------------
 4047|    435|            m_kind = float_kind::hex_with_prefix;
 4048|    435|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    435|        }
 4050|       |
 4051|   205k|        m_kind = float_kind::generic;
 4052|   205k|        return read_regular(range);
 4053|   206k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   506k|    {
 3811|   506k|        auto it = range.begin();
 3812|   506k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 506k, False: 0]
  ------------------
 3813|   506k|            return unexpected(r.error());
 3814|   506k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   506k|    {
 3834|   506k|        auto it = range.begin();
 3835|   506k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 506k, False: 0]
  ------------------
 3836|   506k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   506k|                scan_error::invalid_scanned_value,
 3838|   506k|                "Invalid floating-point NaN value"));
 3839|   506k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   289k|    {
 3804|   289k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   289k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  83.8k|    {
 3904|  83.8k|        auto it = range.begin();
 3905|       |
 3906|  83.8k|        std::ptrdiff_t digits_count = 0;
 3907|  83.8k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  83.8k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  83.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.0k, False: 32.8k]
  |  |  ------------------
  ------------------
 3909|  51.0k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  51.0k|                scan_error::invalid_scanned_value,
 3911|  51.0k|                "Invalid hexadecimal floating-point value"));
 3912|  51.0k|        }
 3913|  32.8k|        else {
 3914|  32.8k|            digits_count += ranges::distance(it, *r);
 3915|  32.8k|            it = *r;
 3916|  32.8k|        }
 3917|       |
 3918|  32.8k|        m_integral_part_length = digits_count;
 3919|  32.8k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 120, False: 32.6k]
  ------------------
 3920|  32.8k|                                             m_locale_options.decimal_point)) {
 3921|    120|            it = *r;
 3922|    120|        }
 3923|       |
 3924|  32.8k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 12, False: 32.7k]
  ------------------
 3925|  32.8k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|     12|            digits_count += ranges::distance(it, *r);
 3927|     12|            it = *r;
 3928|     12|        }
 3929|       |
 3930|  32.8k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.8k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  32.8k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  32.8k|        return it;
 3938|  32.8k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   116k|    {
 3789|   116k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 116k]
  |  |  |  Branch (859:45): [True: 0, False: 116k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   116k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   116k|        return read_while1_code_unit(
 3798|   116k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   116k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   155k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   155k|              cvref<T> obj = *get<T>(fn);
  745|   155k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   155k|                  obj(static_cast<decltype(args)>(args)...);
  747|   155k|              }
  748|   155k|              else {
  749|   155k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   155k|              }
  751|   155k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   155k|    {
  684|   155k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   155k|            return static_cast<T*>(s.m_cp);
  686|   155k|        }
  687|   155k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   155k|            return static_cast<T*>(s.m_p);
  689|   155k|        }
  690|   155k|        else {
  691|   155k|            return reinterpret_cast<T*>(s.m_fp);
  692|   155k|        }
  693|   155k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   155k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   147k|    {
 3876|   147k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 6.56k, False: 140k]
  ------------------
 3877|  6.56k|            auto beg_exp_it = range.begin();
 3878|  6.56k|            auto it = *r;
 3879|       |
 3880|  6.56k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 6.50k, False: 66]
  ------------------
 3881|  6.56k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  6.50k|                it = r_sign->first;
 3883|  6.50k|            }
 3884|       |
 3885|  6.56k|            if (auto r_exp = read_while1_code_unit(
 3886|  6.56k|                    ranges::subrange{it, range.end()},
 3887|  6.56k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  6.56k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.78k, False: 4.78k]
  |  |  ------------------
  ------------------
 3889|  1.78k|                it = beg_exp_it;
 3890|  1.78k|            }
 3891|  4.78k|            else {
 3892|  4.78k|                it = *r_exp;
 3893|  4.78k|            }
 3894|       |
 3895|  6.56k|            return it;
 3896|  6.56k|        }
 3897|   140k|        return range.begin();
 3898|   147k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  6.56k|    {
  754|  6.56k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  17.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.1k|              cvref<T> obj = *get<T>(fn);
  745|  17.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.1k|              }
  748|  17.1k|              else {
  749|  17.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.1k|              }
  751|  17.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  17.1k|    {
  684|  17.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.1k|            return static_cast<T*>(s.m_cp);
  686|  17.1k|        }
  687|  17.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.1k|            return static_cast<T*>(s.m_p);
  689|  17.1k|        }
  690|  17.1k|        else {
  691|  17.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.1k|        }
  693|  17.1k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  17.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  6.56k|        {
  662|  6.56k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   422k|    {
 3944|   422k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   422k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 340k, False: 82.6k]
  |  Branch (3945:50): [True: 51.9k, False: 288k]
  ------------------
 3946|       |
 3947|   422k|        auto it = ranges::begin(range);
 3948|   422k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   422k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   422k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 276k, False: 146k]
  |  |  ------------------
  ------------------
 3952|   276k|            return r.transform_error(
 3953|   276k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   276k|                                              "Invalid floating-point value"));
 3955|   276k|        }
 3956|   146k|        else {
 3957|   146k|            digits_count += ranges::distance(it, *r);
 3958|   146k|            it = *r;
 3959|   146k|        }
 3960|       |
 3961|   146k|        m_integral_part_length = digits_count;
 3962|   146k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 384, False: 145k]
  ------------------
 3963|   146k|                                             m_locale_options.decimal_point)) {
 3964|    384|            it = *r;
 3965|    384|        }
 3966|       |
 3967|   146k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 33, False: 146k]
  ------------------
 3968|   146k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|     33|            digits_count += ranges::distance(it, *r);
 3970|     33|            it = *r;
 3971|     33|        }
 3972|       |
 3973|   146k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   146k|        auto beg_exp_it = it;
 3979|   146k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 114k, False: 31.4k]
  ------------------
 3980|   114k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   114k|        }
 3982|   146k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 3.84k, False: 142k]
  |  Branch (3982:29): [True: 3.21k, False: 624]
  ------------------
 3983|  3.21k|            return unexpected_scan_error(
 3984|  3.21k|                scan_error::invalid_scanned_value,
 3985|  3.21k|                "No exponent given to scientific float");
 3986|  3.21k|        }
 3987|       |
 3988|   142k|        m_kind =
 3989|   142k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 138k, False: 4.64k]
  ------------------
 3990|       |
 3991|   142k|        return it;
 3992|   146k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   568k|    {
 3774|   568k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 568k]
  |  |  |  Branch (859:45): [True: 0, False: 568k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   568k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   568k|        return read_while1_code_unit(
 3783|   568k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   568k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   568k|    {
  754|   568k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   724k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   724k|              cvref<T> obj = *get<T>(fn);
  745|   724k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   724k|                  obj(static_cast<decltype(args)>(args)...);
  747|   724k|              }
  748|   724k|              else {
  749|   724k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   724k|              }
  751|   724k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   724k|    {
  684|   724k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   724k|            return static_cast<T*>(s.m_cp);
  686|   724k|        }
  687|   724k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   724k|            return static_cast<T*>(s.m_p);
  689|   724k|        }
  690|   724k|        else {
  691|   724k|            return reinterpret_cast<T*>(s.m_fp);
  692|   724k|        }
  693|   724k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   724k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   568k|        {
  662|   568k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   175k|    {
 1577|   175k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   175k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  27.3k|        {
  662|  27.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  99.9k|    {
  754|  99.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  99.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.9k|              cvref<T> obj = *get<T>(fn);
  745|  99.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  99.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  99.9k|              }
  748|  99.9k|              else {
  749|  99.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.9k|              }
  751|  99.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  99.9k|    {
  684|  99.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  99.9k|            return static_cast<T*>(s.m_cp);
  686|  99.9k|        }
  687|  99.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  99.9k|            return static_cast<T*>(s.m_p);
  689|  99.9k|        }
  690|  99.9k|        else {
  691|  99.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  99.9k|        }
  693|  99.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  99.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  99.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  99.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  99.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   424k|    {
 3665|   424k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   424k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 424k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   424k|        return read_source_impl(range);
 3671|   424k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  99.9k|        {
  662|  99.9k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   127k|    {
 4170|   127k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   127k|#if !SCN_DISABLE_LOCALE
 4173|   127k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 27.3k, False: 99.9k]
  ------------------
 4174|  27.3k|            return read_impl<Range>(
 4175|  27.3k|                range, rd,
 4176|  27.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  27.3k|                },
 4179|  27.3k|                value, loc);
 4180|  27.3k|        }
 4181|  99.9k|#endif
 4182|       |
 4183|  99.9k|        return read_impl<Range>(
 4184|  99.9k|            range, rd,
 4185|  99.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  99.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  99.9k|            },
 4188|  99.9k|            value);
 4189|   127k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   168k|    {
 4206|   168k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   168k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.9k, False: 117k]
  |  |  ------------------
  ------------------
 4208|  50.9k|            return unexpected(r.error());
 4209|  50.9k|        }
 4210|       |
 4211|   117k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.8k, False: 57.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  59.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  59.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  59.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  59.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  59.8k|    }                                                  \
  |  |  |  | 3671|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  57.4k|        return ranges::next(range.begin(), n);
 4213|   117k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   507k|    {
  763|   507k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   507k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  27.3k|    {
  754|  27.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  27.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.3k|              cvref<T> obj = *get<T>(fn);
  745|  27.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.3k|              }
  748|  27.3k|              else {
  749|  27.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.3k|              }
  751|  27.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  27.3k|    {
  684|  27.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.3k|            return static_cast<T*>(s.m_cp);
  686|  27.3k|        }
  687|  27.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.3k|            return static_cast<T*>(s.m_p);
  689|  27.3k|        }
  690|  27.3k|        else {
  691|  27.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.3k|        }
  693|  27.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  27.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  27.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  82.5k|    {
 3679|  82.5k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  82.5k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  82.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 82.5k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  82.5k|        return read_source_impl(range);
 3685|  82.5k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   507k|    {
 3705|   507k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   507k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   507k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   507k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   507k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 507k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   507k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   507k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   507k|        auto it = sign_result.first;
 3708|   507k|        m_sign = sign_result.second;
 3709|       |
 3710|   507k|        auto digits_begin = it;
 3711|   507k|        auto r = ranges::subrange{it, range.end()};
 3712|   507k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   507k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   507k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 507k]
  |  |  |  Branch (859:45): [True: 0, False: 507k]
  |  |  |  Branch (859:45): [True: 0, False: 507k]
  |  |  ------------------
  ------------------
 3715|   507k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   507k|            else {
 3724|   507k|                auto cb = [&](const auto& rr)
 3725|   507k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   507k|                    auto res = read_all(rr);
 3727|   507k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   507k|                        return unexpected_scan_error(
 3729|   507k|                            scan_error::invalid_scanned_value,
 3730|   507k|                            "Invalid float value");
 3731|   507k|                    }
 3732|   507k|                    return res;
 3733|   507k|                };
 3734|   507k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   507k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   507k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   507k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 153k, False: 353k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   153k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   153k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   153k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   153k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   153k|    }                                                  \
  |  | 3671|   507k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   353k|            }
 3736|   507k|        }
 3737|   353k|        else {
 3738|   353k|            SCN_TRY_ASSIGN(
 3739|   353k|                it,
 3740|   353k|                do_read_source_impl(
 3741|   353k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   353k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   353k|        }
 3744|       |
 3745|   353k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   353k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   353k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   353k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 353k, False: 0]
  |  Branch (3747:48): [True: 353k, False: 0]
  ------------------
 3748|   353k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 353k, False: 0]
  ------------------
 3749|   353k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 353k, False: 0]
  ------------------
 3750|   353k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   353k|        }
 3752|       |
 3753|   353k|        handle_separators();
 3754|       |
 3755|   353k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 353k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   353k|        return it;
 3768|   353k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   507k|    {
 3811|   507k|        auto it = range.begin();
 3812|   507k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 507k, False: 0]
  ------------------
 3813|   507k|            return unexpected(r.error());
 3814|   507k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   507k|    {
 3834|   507k|        auto it = range.begin();
 3835|   507k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 507k, False: 0]
  ------------------
 3836|   507k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   507k|                scan_error::invalid_scanned_value,
 3838|   507k|                "Invalid floating-point NaN value"));
 3839|   507k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   289k|    {
 3804|   289k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   289k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   286k|{
 1996|   286k|    auto it = read_while_code_unit(range, pred);
 1997|   286k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 217k, False: 68.8k]
  ------------------
 1998|   217k|        return unexpected(parse_error::error);
 1999|   217k|    }
 2000|  68.8k|    return it;
 2001|   286k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  35.6k|    {
 3876|  35.6k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.50k, False: 33.1k]
  ------------------
 3877|  2.50k|            auto beg_exp_it = range.begin();
 3878|  2.50k|            auto it = *r;
 3879|       |
 3880|  2.50k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.48k, False: 18]
  ------------------
 3881|  2.50k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.48k|                it = r_sign->first;
 3883|  2.48k|            }
 3884|       |
 3885|  2.50k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.50k|                    ranges::subrange{it, range.end()},
 3887|  2.50k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.50k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 730, False: 1.77k]
  |  |  ------------------
  ------------------
 3889|    730|                it = beg_exp_it;
 3890|    730|            }
 3891|  1.77k|            else {
 3892|  1.77k|                it = *r_exp;
 3893|  1.77k|            }
 3894|       |
 3895|  2.50k|            return it;
 3896|  2.50k|        }
 3897|  33.1k|        return range.begin();
 3898|  35.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  2.50k|    {
  754|  2.50k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  6.34k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.34k|              cvref<T> obj = *get<T>(fn);
  745|  6.34k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.34k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.34k|              }
  748|  6.34k|              else {
  749|  6.34k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.34k|              }
  751|  6.34k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  6.34k|    {
  684|  6.34k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.34k|            return static_cast<T*>(s.m_cp);
  686|  6.34k|        }
  687|  6.34k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.34k|            return static_cast<T*>(s.m_p);
  689|  6.34k|        }
  690|  6.34k|        else {
  691|  6.34k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.34k|        }
  693|  6.34k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  6.34k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  2.50k|        {
  662|  2.50k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   217k|    {
 3944|   217k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   217k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 134k, False: 82.6k]
  |  Branch (3945:50): [True: 51.9k, False: 82.5k]
  ------------------
 3946|       |
 3947|   217k|        auto it = ranges::begin(range);
 3948|   217k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   217k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   217k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150k, False: 67.0k]
  |  |  ------------------
  ------------------
 3952|   150k|            return r.transform_error(
 3953|   150k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   150k|                                              "Invalid floating-point value"));
 3955|   150k|        }
 3956|  67.0k|        else {
 3957|  67.0k|            digits_count += ranges::distance(it, *r);
 3958|  67.0k|            it = *r;
 3959|  67.0k|        }
 3960|       |
 3961|  67.0k|        m_integral_part_length = digits_count;
 3962|  67.0k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 204, False: 66.8k]
  ------------------
 3963|  67.0k|                                             m_locale_options.decimal_point)) {
 3964|    204|            it = *r;
 3965|    204|        }
 3966|       |
 3967|  67.0k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 18, False: 67.0k]
  ------------------
 3968|  67.0k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|     18|            digits_count += ranges::distance(it, *r);
 3970|     18|            it = *r;
 3971|     18|        }
 3972|       |
 3973|  67.0k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  67.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.0k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  67.0k|        auto beg_exp_it = it;
 3979|  67.0k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 35.6k, False: 31.4k]
  ------------------
 3980|  35.6k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  35.6k|        }
 3982|  67.0k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 3.84k, False: 63.2k]
  |  Branch (3982:29): [True: 3.21k, False: 624]
  ------------------
 3983|  3.21k|            return unexpected_scan_error(
 3984|  3.21k|                scan_error::invalid_scanned_value,
 3985|  3.21k|                "No exponent given to scientific float");
 3986|  3.21k|        }
 3987|       |
 3988|  63.8k|        m_kind =
 3989|  63.8k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 62.0k, False: 1.77k]
  ------------------
 3990|       |
 3991|  63.8k|        return it;
 3992|  67.0k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   284k|    {
 3774|   284k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 284k]
  |  |  |  Branch (859:45): [True: 0, False: 284k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   284k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   284k|        return read_while1_code_unit(
 3783|   284k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   284k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   284k|    {
  754|   284k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   355k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   355k|              cvref<T> obj = *get<T>(fn);
  745|   355k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   355k|                  obj(static_cast<decltype(args)>(args)...);
  747|   355k|              }
  748|   355k|              else {
  749|   355k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   355k|              }
  751|   355k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   355k|    {
  684|   355k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   355k|            return static_cast<T*>(s.m_cp);
  686|   355k|        }
  687|   355k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   355k|            return static_cast<T*>(s.m_p);
  689|   355k|        }
  690|   355k|        else {
  691|   355k|            return reinterpret_cast<T*>(s.m_fp);
  692|   355k|        }
  693|   355k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   355k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   284k|        {
  662|   284k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   507k|    {
 4000|   507k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   507k|        const bool allowed_nonhex =
 4002|   507k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   507k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   507k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 507k, False: 0]
  |  Branch (4005:45): [True: 0, False: 507k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   507k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 507k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   507k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 507k, False: 0]
  |  Branch (4014:45): [True: 0, False: 507k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   507k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 507k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   507k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 289k, False: 217k]
  |  Branch (4021:28): [True: 83.5k, False: 206k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  83.5k|            auto it = range.begin();
 4025|       |
 4026|  83.5k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 174, False: 83.3k]
  ------------------
 4027|    174|                m_kind = float_kind::hex_with_prefix;
 4028|    174|                it = *r;
 4029|    174|            }
 4030|  83.3k|            else {
 4031|  83.3k|                m_kind = float_kind::hex_without_prefix;
 4032|  83.3k|            }
 4033|       |
 4034|  83.5k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  83.5k|        }
 4036|   423k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 217k, False: 206k]
  |  Branch (4036:29): [True: 217k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   217k|            m_kind = float_kind::generic;
 4040|   217k|            return read_regular_float(range);
 4041|   217k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   206k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 435, False: 206k]
  |  |  ------------------
  ------------------
 4047|    435|            m_kind = float_kind::hex_with_prefix;
 4048|    435|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    435|        }
 4050|       |
 4051|   206k|        m_kind = float_kind::generic;
 4052|   206k|        return read_regular(range);
 4053|   206k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   289k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   289k|                    auto res = read_all(rr);
 3727|   289k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 289k]
  |  |  ------------------
  ------------------
 3728|     84|                        return unexpected_scan_error(
 3729|     84|                            scan_error::invalid_scanned_value,
 3730|     84|                            "Invalid float value");
 3731|     84|                    }
 3732|   289k|                    return res;
 3733|   289k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   289k|{
 1839|   289k|    return ranges::next(range.begin(), range.end());
 1840|   289k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   289k|    {
  313|   289k|        ranges::advance(x, bound);
  314|   289k|        return x;
  315|   289k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   289k|    {
  275|   289k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   289k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   353k|    {
 1577|   353k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   353k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   353k|    {
 1621|   353k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   353k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   353k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   353k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   353k|            m_storage.reset();
 1627|   353k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   353k|        }
 1629|   353k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   353k|                                          std::basic_string<CharT>>) {
 1631|   353k|            m_storage.emplace(SCN_FWD(range));
 1632|   353k|            m_view = string_view_type{*m_storage};
 1633|   353k|        }
 1634|   353k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   353k|                                          typename detail::basic_scan_buffer<
 1636|   353k|                                              value_t>::forward_iterator> &&
 1637|   353k|                           ranges::common_range<Range>) {
 1638|   353k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   353k|            auto end_seg = range.end().contiguous_segment();
 1640|   353k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   353k|                             detail::to_address(end_seg.end()))) {
 1642|   353k|                auto& str = m_storage.emplace();
 1643|   353k|                str.reserve(range.end().position() - range.begin().position());
 1644|   353k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   353k|                m_view = string_view_type{str};
 1646|   353k|                return;
 1647|   353k|            }
 1648|       |
 1649|   353k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   353k|                                                            end_seg.data());
 1651|   353k|            m_storage.reset();
 1652|   353k|        }
 1653|   353k|        else {
 1654|   353k|            auto& str = m_storage.emplace();
 1655|   353k|            if constexpr (ranges::sized_range<Range>) {
 1656|   353k|                str.reserve(range.size());
 1657|   353k|            }
 1658|   353k|            if constexpr (ranges::common_range<Range>) {
 1659|   353k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   353k|                          std::back_inserter(str));
 1661|   353k|            }
 1662|   353k|            else {
 1663|   353k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   353k|                     ++it) {
 1665|   353k|                    str.push_back(*it);
 1666|   353k|                }
 1667|   353k|            }
 1668|   353k|            m_view = string_view_type{str};
 1669|   353k|        }
 1670|   353k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  27.3k|        {
  662|  27.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  99.9k|    {
  754|  99.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  99.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.9k|              cvref<T> obj = *get<T>(fn);
  745|  99.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  99.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  99.9k|              }
  748|  99.9k|              else {
  749|  99.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.9k|              }
  751|  99.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  99.9k|    {
  684|  99.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  99.9k|            return static_cast<T*>(s.m_cp);
  686|  99.9k|        }
  687|  99.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  99.9k|            return static_cast<T*>(s.m_p);
  689|  99.9k|        }
  690|  99.9k|        else {
  691|  99.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  99.9k|        }
  693|  99.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  99.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  99.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  99.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  99.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   424k|    {
 3665|   424k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   424k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 424k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   424k|        return read_source_impl(range);
 3671|   424k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  99.9k|        {
  662|  99.9k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   128k|    {
 6193|   128k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   128k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   128k|            auto rd = make_reader<T, char_type>();
 6198|   128k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   128k|                return unexpected(e);
 6200|   128k|            }
 6201|       |
 6202|   128k|            return impl(rd, range, value);
 6203|   128k|        }
 6204|   128k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   128k|            auto rd = make_reader<T, char_type>();
 6206|   128k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   128k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 128k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   128k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   128k|                return impl(rd, range, value);
 6213|   128k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   128k|        else {
 6221|   128k|            SCN_EXPECT(false);
 6222|   128k|            SCN_UNREACHABLE;
 6223|   128k|        }
 6224|   128k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   128k|    {
 6124|   128k|        const bool need_skipped_width =
 6125|   128k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 128k]
  |  Branch (6125:33): [True: 0, False: 128k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   128k|        auto it = rng.begin();
 6129|   128k|        std::ptrdiff_t prefix_width = 0;
 6130|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 128k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   128k|        else {
 6138|   128k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 750, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    750|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    750|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    750|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    750|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    750|    }                                                  \
  |  |  |  | 3671|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   127k|            std::tie(it, prefix_width) = prefix_result;
 6140|   127k|        }
 6141|   127k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   127k|        std::ptrdiff_t value_width = 0;
 6145|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 127k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   127k|        else {
 6161|   127k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 85.2k, False: 42.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  85.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  85.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  85.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  85.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  85.2k|    }                                                  \
  |  | 3671|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  42.3k|                                             specs, value, loc));
 6163|       |
 6164|  42.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 42.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  42.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  42.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  42.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 42.1k, False: 226]
  ------------------
 6174|  42.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  42.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  42.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  42.1k|                                 value_width));
 6178|  42.1k|            std::tie(it, postfix_width) = postfix_result;
 6179|  42.1k|        }
 6180|       |
 6181|  42.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  42.3k|                                                 value_width, postfix_width);
 6183|  42.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 42.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  42.3k|        return it;
 6188|  42.3k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   176k|    {
 3691|   176k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   176k|        const std::ptrdiff_t sign_len =
 3694|   176k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 211, False: 175k]
  ------------------
 3695|       |
 3696|   176k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60.0k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  60.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  60.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  60.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  60.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  60.0k|    }                                                  \
  |  |  |  | 3671|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   116k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   176k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   127k|    {
 4170|   127k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   127k|#if !SCN_DISABLE_LOCALE
 4173|   127k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 27.4k, False: 100k]
  ------------------
 4174|  27.4k|            return read_impl<Range>(
 4175|  27.4k|                range, rd,
 4176|  27.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  27.4k|                },
 4179|  27.4k|                value, loc);
 4180|  27.4k|        }
 4181|   100k|#endif
 4182|       |
 4183|   100k|        return read_impl<Range>(
 4184|   100k|            range, rd,
 4185|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   100k|                return r.read_source(SCN_FWD(args)...);
 4187|   100k|            },
 4188|   100k|            value);
 4189|   127k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   168k|    {
 4206|   168k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   168k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110k, False: 58.4k]
  |  |  ------------------
  ------------------
 4208|   110k|            return unexpected(r.error());
 4209|   110k|        }
 4210|       |
 4211|  58.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  58.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 446, False: 57.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    446|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    446|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    446|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    446|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    446|    }                                                  \
  |  |  |  | 3671|  58.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  57.9k|        return ranges::next(range.begin(), n);
 4213|  58.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  27.4k|    {
  754|  27.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  27.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.4k|              cvref<T> obj = *get<T>(fn);
  745|  27.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.4k|              }
  748|  27.4k|              else {
  749|  27.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.4k|              }
  751|  27.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  27.4k|    {
  684|  27.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.4k|            return static_cast<T*>(s.m_cp);
  686|  27.4k|        }
  687|  27.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.4k|            return static_cast<T*>(s.m_p);
  689|  27.4k|        }
  690|  27.4k|        else {
  691|  27.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.4k|        }
  693|  27.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  27.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  27.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  27.4k|        {
  662|  27.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   100k|    {
  684|   100k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   100k|            return static_cast<T*>(s.m_cp);
  686|   100k|        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   100k|            return static_cast<T*>(s.m_p);
  689|   100k|        }
  690|   100k|        else {
  691|   100k|            return reinterpret_cast<T*>(s.m_fp);
  692|   100k|        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   100k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   127k|    {
 4170|   127k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   127k|#if !SCN_DISABLE_LOCALE
 4173|   127k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 27.4k, False: 100k]
  ------------------
 4174|  27.4k|            return read_impl<Range>(
 4175|  27.4k|                range, rd,
 4176|  27.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  27.4k|                },
 4179|  27.4k|                value, loc);
 4180|  27.4k|        }
 4181|   100k|#endif
 4182|       |
 4183|   100k|        return read_impl<Range>(
 4184|   100k|            range, rd,
 4185|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   100k|                return r.read_source(SCN_FWD(args)...);
 4187|   100k|            },
 4188|   100k|            value);
 4189|   127k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   168k|    {
 4206|   168k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   168k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.1k, False: 117k]
  |  |  ------------------
  ------------------
 4208|  51.1k|            return unexpected(r.error());
 4209|  51.1k|        }
 4210|       |
 4211|   117k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.6k, False: 58.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  59.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  59.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  59.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  59.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  59.6k|    }                                                  \
  |  |  |  | 3671|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  58.1k|        return ranges::next(range.begin(), n);
 4213|   117k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  27.4k|    {
  754|  27.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  27.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.4k|              cvref<T> obj = *get<T>(fn);
  745|  27.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.4k|              }
  748|  27.4k|              else {
  749|  27.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.4k|              }
  751|  27.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  27.4k|    {
  684|  27.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.4k|            return static_cast<T*>(s.m_cp);
  686|  27.4k|        }
  687|  27.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.4k|            return static_cast<T*>(s.m_p);
  689|  27.4k|        }
  690|  27.4k|        else {
  691|  27.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.4k|        }
  693|  27.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  27.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  27.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  27.4k|        {
  662|  27.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   100k|    {
  684|   100k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   100k|            return static_cast<T*>(s.m_cp);
  686|   100k|        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   100k|            return static_cast<T*>(s.m_p);
  689|   100k|        }
  690|   100k|        else {
  691|   100k|            return reinterpret_cast<T*>(s.m_fp);
  692|   100k|        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   100k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   128k|    {
 6193|   128k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   128k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   128k|            auto rd = make_reader<T, char_type>();
 6198|   128k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   128k|                return unexpected(e);
 6200|   128k|            }
 6201|       |
 6202|   128k|            return impl(rd, range, value);
 6203|   128k|        }
 6204|   128k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   128k|            auto rd = make_reader<T, char_type>();
 6206|   128k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   128k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 128k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   128k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   128k|                return impl(rd, range, value);
 6213|   128k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   128k|        else {
 6221|   128k|            SCN_EXPECT(false);
 6222|   128k|            SCN_UNREACHABLE;
 6223|   128k|        }
 6224|   128k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   128k|    {
 6124|   128k|        const bool need_skipped_width =
 6125|   128k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 128k]
  |  Branch (6125:33): [True: 0, False: 128k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   128k|        auto it = rng.begin();
 6129|   128k|        std::ptrdiff_t prefix_width = 0;
 6130|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 128k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   128k|        else {
 6138|   128k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 766, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    766|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    766|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    766|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    766|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    766|    }                                                  \
  |  |  |  | 3671|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   128k|            std::tie(it, prefix_width) = prefix_result;
 6140|   128k|        }
 6141|   128k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   128k|        std::ptrdiff_t value_width = 0;
 6145|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 128k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   128k|        else {
 6161|   128k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 85.2k, False: 42.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  85.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  85.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  85.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  85.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  85.2k|    }                                                  \
  |  | 3671|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  42.9k|                                             specs, value, loc));
 6163|       |
 6164|  42.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 42.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  42.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  42.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  42.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 42.6k, False: 236]
  ------------------
 6174|  42.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  42.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  42.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  42.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  42.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  42.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  42.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  42.6k|                                 value_width));
 6178|  42.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  42.6k|        }
 6180|       |
 6181|  42.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  42.9k|                                                 value_width, postfix_width);
 6183|  42.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 42.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  42.9k|        return it;
 6188|  42.9k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   177k|    {
 3691|   177k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   177k|        const std::ptrdiff_t sign_len =
 3694|   177k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 216, False: 177k]
  ------------------
 3695|       |
 3696|   177k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   177k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   177k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   177k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.6k, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  59.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  59.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  59.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  59.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  59.6k|    }                                                  \
  |  |  |  | 3671|   177k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   118k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   177k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   128k|    {
 4170|   128k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   128k|#if !SCN_DISABLE_LOCALE
 4173|   128k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 27.7k, False: 100k]
  ------------------
 4174|  27.7k|            return read_impl<Range>(
 4175|  27.7k|                range, rd,
 4176|  27.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  27.7k|                },
 4179|  27.7k|                value, loc);
 4180|  27.7k|        }
 4181|   100k|#endif
 4182|       |
 4183|   100k|        return read_impl<Range>(
 4184|   100k|            range, rd,
 4185|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   100k|                return r.read_source(SCN_FWD(args)...);
 4187|   100k|            },
 4188|   100k|            value);
 4189|   128k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   169k|    {
 4206|   169k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   169k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110k, False: 59.0k]
  |  |  ------------------
  ------------------
 4208|   110k|            return unexpected(r.error());
 4209|   110k|        }
 4210|       |
 4211|  59.0k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  59.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  59.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  59.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 95, False: 58.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     95|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     95|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     95|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     95|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     95|    }                                                  \
  |  |  |  | 3671|  59.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  58.9k|        return ranges::next(range.begin(), n);
 4213|  59.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  27.7k|    {
  754|  27.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  27.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.7k|              cvref<T> obj = *get<T>(fn);
  745|  27.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.7k|              }
  748|  27.7k|              else {
  749|  27.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.7k|              }
  751|  27.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  27.7k|    {
  684|  27.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.7k|            return static_cast<T*>(s.m_cp);
  686|  27.7k|        }
  687|  27.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.7k|            return static_cast<T*>(s.m_p);
  689|  27.7k|        }
  690|  27.7k|        else {
  691|  27.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.7k|        }
  693|  27.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  27.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  27.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  27.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  27.7k|        {
  662|  27.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   100k|    {
  684|   100k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   100k|            return static_cast<T*>(s.m_cp);
  686|   100k|        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   100k|            return static_cast<T*>(s.m_p);
  689|   100k|        }
  690|   100k|        else {
  691|   100k|            return reinterpret_cast<T*>(s.m_fp);
  692|   100k|        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   100k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   128k|    {
 4170|   128k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   128k|#if !SCN_DISABLE_LOCALE
 4173|   128k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 27.7k, False: 100k]
  ------------------
 4174|  27.7k|            return read_impl<Range>(
 4175|  27.7k|                range, rd,
 4176|  27.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  27.7k|                },
 4179|  27.7k|                value, loc);
 4180|  27.7k|        }
 4181|   100k|#endif
 4182|       |
 4183|   100k|        return read_impl<Range>(
 4184|   100k|            range, rd,
 4185|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   100k|                return r.read_source(SCN_FWD(args)...);
 4187|   100k|            },
 4188|   100k|            value);
 4189|   128k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   169k|    {
 4206|   169k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   169k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.2k, False: 118k]
  |  |  ------------------
  ------------------
 4208|  51.2k|            return unexpected(r.error());
 4209|  51.2k|        }
 4210|       |
 4211|   118k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.5k, False: 59.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  59.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  59.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  59.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  59.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  59.5k|    }                                                  \
  |  |  |  | 3671|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  59.0k|        return ranges::next(range.begin(), n);
 4213|   118k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  27.7k|    {
  754|  27.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  27.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.7k|              cvref<T> obj = *get<T>(fn);
  745|  27.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.7k|              }
  748|  27.7k|              else {
  749|  27.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.7k|              }
  751|  27.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  27.7k|    {
  684|  27.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.7k|            return static_cast<T*>(s.m_cp);
  686|  27.7k|        }
  687|  27.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.7k|            return static_cast<T*>(s.m_p);
  689|  27.7k|        }
  690|  27.7k|        else {
  691|  27.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.7k|        }
  693|  27.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  27.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  27.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  27.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  27.7k|        {
  662|  27.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   100k|    {
  684|   100k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   100k|            return static_cast<T*>(s.m_cp);
  686|   100k|        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   100k|            return static_cast<T*>(s.m_p);
  689|   100k|        }
  690|   100k|        else {
  691|   100k|            return reinterpret_cast<T*>(s.m_fp);
  692|   100k|        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   100k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   509k|{
 2061|   509k|    auto it = range.begin();
 2062|   678k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 675k, False: 2.71k]
  ------------------
 2063|   675k|        const auto val =
 2064|   675k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   675k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   675k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 675k, False: 0]
  |  |  ------------------
  ------------------
 2066|   675k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   675k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   675k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 506k, False: 168k]
  ------------------
 2069|   506k|                return it;
 2070|   506k|            }
 2071|   675k|        }
 2072|   168k|        it = val.iterator;
 2073|   168k|    }
 2074|       |
 2075|  2.71k|    return it;
 2076|   509k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   675k|{
 1899|   675k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   675k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   675k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   675k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   675k|    auto it = range.begin();
 1903|   675k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   675k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   675k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 675k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   675k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 675k, False: 0]
  ------------------
 1912|   675k|        ++it;
 1913|   675k|        return {it, string_type(1, *range.begin())};
 1914|   675k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   675k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   675k|    {
 1890|   675k|        return !codepoint.empty();
 1891|   675k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   509k|{
 2082|   509k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   509k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   509k|{
 2951|   509k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 509k, False: 0]
  ------------------
 2952|   509k|        auto it = read_while_classic_space(range);
 2953|   509k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   509k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.71k, False: 506k]
  |  |  ------------------
  ------------------
 2955|  2.71k|            return unexpected(e);
 2956|  2.71k|        }
 2957|       |
 2958|   506k|        return it;
 2959|   509k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   509k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   509k|{
 2117|   509k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   509k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   509k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   509k|        auto buf = make_contiguous_buffer(range);
 2121|   509k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   509k|        return ranges::next(range.begin(),
 2123|   509k|                            ranges::distance(buf.view().begin(), it));
 2124|   509k|    }
 2125|   509k|    else {
 2126|   509k|        auto it = range.begin();
 2127|       |
 2128|   509k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   509k|            auto seg = get_contiguous_beginning(range);
 2130|   509k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   509k|                seg_it != seg.end()) {
 2132|   509k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   509k|            }
 2134|   509k|            ranges::advance(it, seg.size());
 2135|   509k|        }
 2136|       |
 2137|   509k|        return read_while_code_point(
 2138|   509k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   509k|    }
 2140|   509k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   509k|    {
  754|   509k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   675k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   675k|              cvref<T> obj = *get<T>(fn);
  745|   675k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   675k|                  obj(static_cast<decltype(args)>(args)...);
  747|   675k|              }
  748|   675k|              else {
  749|   675k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   675k|              }
  751|   675k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   675k|    {
  684|   675k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   675k|            return static_cast<T*>(s.m_cp);
  686|   675k|        }
  687|   675k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   675k|            return static_cast<T*>(s.m_p);
  689|   675k|        }
  690|   675k|        else {
  691|   675k|            return reinterpret_cast<T*>(s.m_fp);
  692|   675k|        }
  693|   675k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   675k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   509k|        {
  662|   509k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.81M|{
 2088|  2.81M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.81M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.81M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.81M|        auto buf = make_contiguous_buffer(range);
 2092|  2.81M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.81M|        return ranges::next(range.begin(),
 2094|  2.81M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.81M|    }
 2096|  2.81M|    else {
 2097|  2.81M|        auto it = range.begin();
 2098|       |
 2099|  2.81M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.81M|            auto seg = get_contiguous_beginning(range);
 2101|  2.81M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.81M|                seg_it != seg.end()) {
 2103|  2.81M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.81M|            }
 2105|  2.81M|            ranges::advance(it, seg.size());
 2106|  2.81M|        }
 2107|       |
 2108|  2.81M|        return read_until_code_point(
 2109|  2.81M|            ranges::subrange{it, range.end()},
 2110|  2.81M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.81M|    }
 2112|  2.81M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.81M|{
 1683|  2.81M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.81M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.81M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.81M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.81M|    }
 1688|  2.81M|    else {
 1689|  2.81M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.81M|    }
 1691|  2.81M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.81M|    {
 1490|  2.81M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.81M|    {
 1577|  2.81M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.81M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.81M|    {
 1621|  2.81M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.81M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.81M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.81M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.81M|            m_storage.reset();
 1627|  2.81M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.81M|        }
 1629|  2.81M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.81M|                                          std::basic_string<CharT>>) {
 1631|  2.81M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.81M|            m_view = string_view_type{*m_storage};
 1633|  2.81M|        }
 1634|  2.81M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.81M|                                          typename detail::basic_scan_buffer<
 1636|  2.81M|                                              value_t>::forward_iterator> &&
 1637|  2.81M|                           ranges::common_range<Range>) {
 1638|  2.81M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.81M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.81M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.81M|                             detail::to_address(end_seg.end()))) {
 1642|  2.81M|                auto& str = m_storage.emplace();
 1643|  2.81M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.81M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.81M|                m_view = string_view_type{str};
 1646|  2.81M|                return;
 1647|  2.81M|            }
 1648|       |
 1649|  2.81M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.81M|                                                            end_seg.data());
 1651|  2.81M|            m_storage.reset();
 1652|  2.81M|        }
 1653|  2.81M|        else {
 1654|  2.81M|            auto& str = m_storage.emplace();
 1655|  2.81M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.81M|                str.reserve(range.size());
 1657|  2.81M|            }
 1658|  2.81M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.81M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.81M|                          std::back_inserter(str));
 1661|  2.81M|            }
 1662|  2.81M|            else {
 1663|  2.81M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.81M|                     ++it) {
 1665|  2.81M|                    str.push_back(*it);
 1666|  2.81M|                }
 1667|  2.81M|            }
 1668|  2.81M|            m_view = string_view_type{str};
 1669|  2.81M|        }
 1670|  2.81M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|  1.92M|    {
 4100|  1.92M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 204k, False: 1.72M]
  ------------------
 4101|   204k|            return std::copysign(value, T{-1.0});
 4102|   204k|        }
 4103|  1.72M|        return std::copysign(value, T{1.0});
 4104|  1.92M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   160k|{
 2088|   160k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   160k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   160k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   160k|        auto buf = make_contiguous_buffer(range);
 2092|   160k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   160k|        return ranges::next(range.begin(),
 2094|   160k|                            ranges::distance(buf.view().begin(), it));
 2095|   160k|    }
 2096|   160k|    else {
 2097|   160k|        auto it = range.begin();
 2098|       |
 2099|   160k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   160k|            auto seg = get_contiguous_beginning(range);
 2101|   160k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   160k|                seg_it != seg.end()) {
 2103|   160k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   160k|            }
 2105|   160k|            ranges::advance(it, seg.size());
 2106|   160k|        }
 2107|       |
 2108|   160k|        return read_until_code_point(
 2109|   160k|            ranges::subrange{it, range.end()},
 2110|   160k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   160k|    }
 2112|   160k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   329k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   329k|              cvref<T> obj = *get<T>(fn);
  745|   329k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   329k|                  obj(static_cast<decltype(args)>(args)...);
  747|   329k|              }
  748|   329k|              else {
  749|   329k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   329k|              }
  751|   329k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   329k|    {
  684|   329k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   329k|            return static_cast<T*>(s.m_cp);
  686|   329k|        }
  687|   329k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   329k|            return static_cast<T*>(s.m_p);
  689|   329k|        }
  690|   329k|        else {
  691|   329k|            return reinterpret_cast<T*>(s.m_fp);
  692|   329k|        }
  693|   329k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   329k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|   160k|    {
 1577|   160k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   160k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   160k|    {
 1621|   160k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   160k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   160k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   160k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   160k|            m_storage.reset();
 1627|   160k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   160k|        }
 1629|   160k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   160k|                                          std::basic_string<CharT>>) {
 1631|   160k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   160k|            m_view = string_view_type{*m_storage};
 1633|   160k|        }
 1634|   160k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   160k|                                          typename detail::basic_scan_buffer<
 1636|   160k|                                              value_t>::forward_iterator> &&
 1637|   160k|                           ranges::common_range<Range>) {
 1638|   160k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   160k|            auto end_seg = range.end().contiguous_segment();
 1640|   160k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   160k|                             detail::to_address(end_seg.end()))) {
 1642|   160k|                auto& str = m_storage.emplace();
 1643|   160k|                str.reserve(range.end().position() - range.begin().position());
 1644|   160k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   160k|                m_view = string_view_type{str};
 1646|   160k|                return;
 1647|   160k|            }
 1648|       |
 1649|   160k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   160k|                                                            end_seg.data());
 1651|   160k|            m_storage.reset();
 1652|   160k|        }
 1653|   160k|        else {
 1654|   160k|            auto& str = m_storage.emplace();
 1655|   160k|            if constexpr (ranges::sized_range<Range>) {
 1656|   160k|                str.reserve(range.size());
 1657|   160k|            }
 1658|   160k|            if constexpr (ranges::common_range<Range>) {
 1659|   160k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   160k|                          std::back_inserter(str));
 1661|   160k|            }
 1662|   160k|            else {
 1663|   160k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   160k|                     ++it) {
 1665|   160k|                    str.push_back(*it);
 1666|   160k|                }
 1667|   160k|            }
 1668|   160k|            m_view = string_view_type{str};
 1669|   160k|        }
 1670|   160k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   175k|    {
 4100|   175k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 168, False: 175k]
  ------------------
 4101|    168|            return std::copysign(value, T{-1.0});
 4102|    168|        }
 4103|   175k|        return std::copysign(value, T{1.0});
 4104|   175k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  2.08M|    {
 4100|  2.08M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 220k, False: 1.86M]
  ------------------
 4101|   220k|            return std::copysign(value, T{-1.0});
 4102|   220k|        }
 4103|  1.86M|        return std::copysign(value, T{1.0});
 4104|  2.08M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   176k|    {
 4100|   176k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 168, False: 176k]
  ------------------
 4101|    168|            return std::copysign(value, T{-1.0});
 4102|    168|        }
 4103|   176k|        return std::copysign(value, T{1.0});
 4104|   176k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  2.10M|    {
 4100|  2.10M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 226k, False: 1.87M]
  ------------------
 4101|   226k|            return std::copysign(value, T{-1.0});
 4102|   226k|        }
 4103|  1.87M|        return std::copysign(value, T{1.0});
 4104|  2.10M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   177k|    {
 4100|   177k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 173, False: 177k]
  ------------------
 4101|    173|            return std::copysign(value, T{-1.0});
 4102|    173|        }
 4103|   177k|        return std::copysign(value, T{1.0});
 4104|   177k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   926k|{
 5795|   926k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   926k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.57k, False: 919k]
  |  |  ------------------
  ------------------
 5796|  6.57k|        return unexpected(e);
 5797|  6.57k|    }
 5798|       |
 5799|   919k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 919k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   919k|    return skip_classic_whitespace(range);
 5804|   919k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   287k|    {
 5871|   287k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   287k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   287k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   287k|            auto rd = make_reader<T, char_type>();
 5876|   287k|            return impl(rd, range, value);
 5877|   287k|        }
 5878|   287k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   287k|            auto rd = make_reader<T, char_type>();
 5880|   287k|            if (!is_segment_contiguous(range)) {
 5881|   287k|                return impl(rd, range, value);
 5882|   287k|            }
 5883|   287k|            auto crange = get_as_contiguous(range);
 5884|   287k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   287k|            return ranges::next(range.begin(),
 5886|   287k|                                ranges::distance(crange.begin(), it));
 5887|   287k|        }
 5888|   287k|        else {
 5889|   287k|            SCN_EXPECT(false);
 5890|   287k|            SCN_UNREACHABLE;
 5891|   287k|        }
 5892|   287k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   287k|    {
 5863|   287k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   287k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.32k, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.32k|    }                                                  \
  |  |  |  | 3671|   287k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   284k|                        .transform_error(make_eof_scan_error));
 5865|   284k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   287k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   284k|    {
 4152|   284k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   284k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   284k|        float_reader<CharT> rd{};
 4155|   284k|        return read_impl<Range>(
 4156|   284k|            range, rd,
 4157|   284k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   284k|                return r.read_source(SCN_FWD(args)...);
 4159|   284k|            },
 4160|   284k|            value);
 4161|   284k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|  1.82M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  2.07M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   284k|    {
  754|   284k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   284k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   284k|              cvref<T> obj = *get<T>(fn);
  745|   284k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   284k|                  obj(static_cast<decltype(args)>(args)...);
  747|   284k|              }
  748|   284k|              else {
  749|   284k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   284k|              }
  751|   284k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   284k|    {
  684|   284k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   284k|            return static_cast<T*>(s.m_cp);
  686|   284k|        }
  687|   284k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   284k|            return static_cast<T*>(s.m_p);
  689|   284k|        }
  690|   284k|        else {
  691|   284k|            return reinterpret_cast<T*>(s.m_fp);
  692|   284k|        }
  693|   284k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   284k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   284k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   284k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   284k|        {
  662|   284k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   317k|    {
 5871|   317k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   317k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   317k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   317k|            auto rd = make_reader<T, char_type>();
 5876|   317k|            return impl(rd, range, value);
 5877|   317k|        }
 5878|   317k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   317k|            auto rd = make_reader<T, char_type>();
 5880|   317k|            if (!is_segment_contiguous(range)) {
 5881|   317k|                return impl(rd, range, value);
 5882|   317k|            }
 5883|   317k|            auto crange = get_as_contiguous(range);
 5884|   317k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   317k|            return ranges::next(range.begin(),
 5886|   317k|                                ranges::distance(crange.begin(), it));
 5887|   317k|        }
 5888|   317k|        else {
 5889|   317k|            SCN_EXPECT(false);
 5890|   317k|            SCN_UNREACHABLE;
 5891|   317k|        }
 5892|   317k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   317k|    {
 5863|   317k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   317k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.67k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.67k|    }                                                  \
  |  |  |  | 3671|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   314k|                        .transform_error(make_eof_scan_error));
 5865|   314k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   317k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   314k|    {
 4152|   314k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   314k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   314k|        float_reader<CharT> rd{};
 4155|   314k|        return read_impl<Range>(
 4156|   314k|            range, rd,
 4157|   314k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   314k|                return r.read_source(SCN_FWD(args)...);
 4159|   314k|            },
 4160|   314k|            value);
 4161|   314k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   314k|    {
  754|   314k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   314k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   314k|              cvref<T> obj = *get<T>(fn);
  745|   314k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   314k|                  obj(static_cast<decltype(args)>(args)...);
  747|   314k|              }
  748|   314k|              else {
  749|   314k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   314k|              }
  751|   314k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   314k|    {
  684|   314k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   314k|            return static_cast<T*>(s.m_cp);
  686|   314k|        }
  687|   314k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   314k|            return static_cast<T*>(s.m_p);
  689|   314k|        }
  690|   314k|        else {
  691|   314k|            return reinterpret_cast<T*>(s.m_fp);
  692|   314k|        }
  693|   314k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   314k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   314k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   314k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   314k|        {
  662|   314k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   322k|    {
 5871|   322k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   322k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   322k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   322k|            auto rd = make_reader<T, char_type>();
 5876|   322k|            return impl(rd, range, value);
 5877|   322k|        }
 5878|   322k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   322k|            auto rd = make_reader<T, char_type>();
 5880|   322k|            if (!is_segment_contiguous(range)) {
 5881|   322k|                return impl(rd, range, value);
 5882|   322k|            }
 5883|   322k|            auto crange = get_as_contiguous(range);
 5884|   322k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   322k|            return ranges::next(range.begin(),
 5886|   322k|                                ranges::distance(crange.begin(), it));
 5887|   322k|        }
 5888|   322k|        else {
 5889|   322k|            SCN_EXPECT(false);
 5890|   322k|            SCN_UNREACHABLE;
 5891|   322k|        }
 5892|   322k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   322k|    {
 5863|   322k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.85k, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.85k|    }                                                  \
  |  |  |  | 3671|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   319k|                        .transform_error(make_eof_scan_error));
 5865|   319k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   322k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   319k|    {
 4152|   319k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   319k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   319k|        float_reader<CharT> rd{};
 4155|   319k|        return read_impl<Range>(
 4156|   319k|            range, rd,
 4157|   319k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   319k|                return r.read_source(SCN_FWD(args)...);
 4159|   319k|            },
 4160|   319k|            value);
 4161|   319k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   319k|    {
  754|   319k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   319k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   319k|              cvref<T> obj = *get<T>(fn);
  745|   319k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   319k|                  obj(static_cast<decltype(args)>(args)...);
  747|   319k|              }
  748|   319k|              else {
  749|   319k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   319k|              }
  751|   319k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   319k|    {
  684|   319k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   319k|            return static_cast<T*>(s.m_cp);
  686|   319k|        }
  687|   319k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   319k|            return static_cast<T*>(s.m_p);
  689|   319k|        }
  690|   319k|        else {
  691|   319k|            return reinterpret_cast<T*>(s.m_fp);
  692|   319k|        }
  693|   319k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   319k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   319k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   319k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   319k|        {
  662|   319k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   911k|{
 5795|   911k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   911k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.65k, False: 905k]
  |  |  ------------------
  ------------------
 5796|  6.65k|        return unexpected(e);
 5797|  6.65k|    }
 5798|       |
 5799|   905k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 905k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   905k|    return skip_classic_whitespace(range);
 5804|   905k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   283k|    {
 5871|   283k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   283k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   283k|            auto rd = make_reader<T, char_type>();
 5876|   283k|            return impl(rd, range, value);
 5877|   283k|        }
 5878|   283k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   283k|            auto rd = make_reader<T, char_type>();
 5880|   283k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 283k, False: 0]
  ------------------
 5881|   283k|                return impl(rd, range, value);
 5882|   283k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   283k|        else {
 5889|   283k|            SCN_EXPECT(false);
 5890|   283k|            SCN_UNREACHABLE;
 5891|   283k|        }
 5892|   283k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   283k|    {
 5863|   283k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.33k, False: 281k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.33k|    }                                                  \
  |  |  |  | 3671|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   281k|                        .transform_error(make_eof_scan_error));
 5865|   281k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   283k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   281k|    {
 4152|   281k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   281k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   281k|        float_reader<CharT> rd{};
 4155|   281k|        return read_impl<Range>(
 4156|   281k|            range, rd,
 4157|   281k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   281k|                return r.read_source(SCN_FWD(args)...);
 4159|   281k|            },
 4160|   281k|            value);
 4161|   281k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   281k|    {
  754|   281k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   281k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   281k|              cvref<T> obj = *get<T>(fn);
  745|   281k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   281k|                  obj(static_cast<decltype(args)>(args)...);
  747|   281k|              }
  748|   281k|              else {
  749|   281k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   281k|              }
  751|   281k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   281k|    {
  684|   281k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   281k|            return static_cast<T*>(s.m_cp);
  686|   281k|        }
  687|   281k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   281k|            return static_cast<T*>(s.m_p);
  689|   281k|        }
  690|   281k|        else {
  691|   281k|            return reinterpret_cast<T*>(s.m_fp);
  692|   281k|        }
  693|   281k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   281k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   281k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   281k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   281k|        {
  662|   281k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   312k|    {
 5871|   312k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   312k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   312k|            auto rd = make_reader<T, char_type>();
 5876|   312k|            return impl(rd, range, value);
 5877|   312k|        }
 5878|   312k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   312k|            auto rd = make_reader<T, char_type>();
 5880|   312k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 312k, False: 0]
  ------------------
 5881|   312k|                return impl(rd, range, value);
 5882|   312k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   312k|        else {
 5889|   312k|            SCN_EXPECT(false);
 5890|   312k|            SCN_UNREACHABLE;
 5891|   312k|        }
 5892|   312k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   312k|    {
 5863|   312k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   312k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   312k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   312k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.67k, False: 309k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.67k|    }                                                  \
  |  |  |  | 3671|   312k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   309k|                        .transform_error(make_eof_scan_error));
 5865|   309k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   312k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   309k|    {
 4152|   309k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   309k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   309k|        float_reader<CharT> rd{};
 4155|   309k|        return read_impl<Range>(
 4156|   309k|            range, rd,
 4157|   309k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   309k|                return r.read_source(SCN_FWD(args)...);
 4159|   309k|            },
 4160|   309k|            value);
 4161|   309k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   309k|    {
  754|   309k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   309k|    {
  684|   309k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   309k|            return static_cast<T*>(s.m_cp);
  686|   309k|        }
  687|   309k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   309k|            return static_cast<T*>(s.m_p);
  689|   309k|        }
  690|   309k|        else {
  691|   309k|            return reinterpret_cast<T*>(s.m_fp);
  692|   309k|        }
  693|   309k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   309k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   309k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   309k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   309k|        {
  662|   309k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   315k|    {
 5871|   315k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   315k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   315k|            auto rd = make_reader<T, char_type>();
 5876|   315k|            return impl(rd, range, value);
 5877|   315k|        }
 5878|   315k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   315k|            auto rd = make_reader<T, char_type>();
 5880|   315k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 315k, False: 0]
  ------------------
 5881|   315k|                return impl(rd, range, value);
 5882|   315k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   315k|        else {
 5889|   315k|            SCN_EXPECT(false);
 5890|   315k|            SCN_UNREACHABLE;
 5891|   315k|        }
 5892|   315k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   315k|    {
 5863|   315k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   315k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   315k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   315k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.84k, False: 312k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.84k|    }                                                  \
  |  |  |  | 3671|   315k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   312k|                        .transform_error(make_eof_scan_error));
 5865|   312k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   315k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   312k|    {
 4152|   312k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   312k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   312k|        float_reader<CharT> rd{};
 4155|   312k|        return read_impl<Range>(
 4156|   312k|            range, rd,
 4157|   312k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   312k|                return r.read_source(SCN_FWD(args)...);
 4159|   312k|            },
 4160|   312k|            value);
 4161|   312k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   312k|    {
  754|   312k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   312k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   312k|              cvref<T> obj = *get<T>(fn);
  745|   312k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   312k|                  obj(static_cast<decltype(args)>(args)...);
  747|   312k|              }
  748|   312k|              else {
  749|   312k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   312k|              }
  751|   312k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   312k|    {
  684|   312k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   312k|            return static_cast<T*>(s.m_cp);
  686|   312k|        }
  687|   312k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   312k|            return static_cast<T*>(s.m_p);
  689|   312k|        }
  690|   312k|        else {
  691|   312k|            return reinterpret_cast<T*>(s.m_fp);
  692|   312k|        }
  693|   312k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   312k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   312k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   312k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   312k|        {
  662|   312k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  2.16M|    {
 2879|  2.16M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  6.36M|    {
 2883|  6.36M|        return m_current;
 2884|  6.36M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  4.20M|    {
 2888|  4.20M|        return m_range.end();
 2889|  4.20M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  2.03M|    {
 2903|  2.03M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  2.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  2.03M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  2.03M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 2.03M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  2.03M|        }
 2909|  2.03M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.03M|    static_cast<    \
  |  |  929|  2.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  2.03M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  2.16M|    {
 2893|  2.16M|        return ranges::subrange{begin(), end()};
 2894|  2.16M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  2.16M|    {
 6037|  2.16M|        const bool need_skipped_width =
 6038|  2.16M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 2.16M]
  |  Branch (6038:33): [True: 0, False: 2.16M]
  ------------------
 6039|  2.16M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.16M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 2.16M]
  ------------------
 6043|  2.16M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 2.16M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  2.16M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 2.16M, False: 0]
  |  Branch (6047:56): [True: 2.16M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.16M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.16M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.31M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.16M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.16M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.16M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.8k, False: 2.14M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.8k|    }                                                  \
  |  |  |  | 3671|  2.16M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.31M|                            make_eof_scan_error));
 6058|       |
 6059|  4.31M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 2.14M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  2.14M|            return result_type{it, 0};
 6067|  4.31M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  2.16M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  2.02M|    {
 6079|  2.02M|        const bool need_skipped_width =
 6080|  2.02M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 2.02M]
  |  Branch (6080:33): [True: 0, False: 2.02M]
  ------------------
 6081|  2.02M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.02M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 2.02M]
  ------------------
 6084|  2.02M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 2.02M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  2.02M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 2.02M, False: 0]
  ------------------
 6093|  2.02M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 2.02M]
  ------------------
 6094|  2.02M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  2.02M|        return result_type{rng.begin(), 0};
 6118|  2.02M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   687k|    {
 6193|   687k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   687k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   687k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   687k|            auto rd = make_reader<T, char_type>();
 6198|   687k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 687k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   687k|            return impl(rd, range, value);
 6203|   687k|        }
 6204|   687k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   687k|            auto rd = make_reader<T, char_type>();
 6206|   687k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   687k|                return unexpected(e);
 6208|   687k|            }
 6209|       |
 6210|   687k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   687k|                specs.width != 0) {
 6212|   687k|                return impl(rd, range, value);
 6213|   687k|            }
 6214|       |
 6215|   687k|            auto crange = get_as_contiguous(range);
 6216|   687k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   687k|            return ranges::next(range.begin(),
 6218|   687k|                                ranges::distance(crange.begin(), it));
 6219|   687k|        }
 6220|   687k|        else {
 6221|   687k|            SCN_EXPECT(false);
 6222|   687k|            SCN_UNREACHABLE;
 6223|   687k|        }
 6224|   687k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   687k|    {
 6124|   687k|        const bool need_skipped_width =
 6125|   687k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 687k]
  |  Branch (6125:33): [True: 0, False: 687k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   687k|        auto it = rng.begin();
 6129|   687k|        std::ptrdiff_t prefix_width = 0;
 6130|   687k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 687k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   687k|        else {
 6138|   687k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   687k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   687k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   687k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.01k, False: 681k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.01k|    }                                                  \
  |  |  |  | 3671|   687k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   681k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   681k|            std::tie(it, prefix_width) = prefix_result;
 6140|   681k|        }
 6141|   681k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   681k|        std::ptrdiff_t value_width = 0;
 6145|   681k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 681k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   681k|        else {
 6161|   681k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   681k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   681k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 36.9k, False: 644k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  36.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  36.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  36.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  36.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  36.9k|    }                                                  \
  |  | 3671|   681k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   681k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   644k|                                             specs, value, loc));
 6163|       |
 6164|   644k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 644k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   644k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   644k|        std::ptrdiff_t postfix_width = 0;
 6173|   644k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 639k, False: 4.99k]
  ------------------
 6174|   639k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   639k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   639k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   639k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 639k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   639k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   639k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   639k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   639k|                                 value_width));
 6178|   639k|            std::tie(it, postfix_width) = postfix_result;
 6179|   639k|        }
 6180|       |
 6181|   644k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   644k|                                                 value_width, postfix_width);
 6183|   644k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 644k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   644k|        return it;
 6188|   644k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   735k|    {
 6193|   735k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   735k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   735k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   735k|            auto rd = make_reader<T, char_type>();
 6198|   735k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 735k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   735k|            return impl(rd, range, value);
 6203|   735k|        }
 6204|   735k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   735k|            auto rd = make_reader<T, char_type>();
 6206|   735k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   735k|                return unexpected(e);
 6208|   735k|            }
 6209|       |
 6210|   735k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   735k|                specs.width != 0) {
 6212|   735k|                return impl(rd, range, value);
 6213|   735k|            }
 6214|       |
 6215|   735k|            auto crange = get_as_contiguous(range);
 6216|   735k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   735k|            return ranges::next(range.begin(),
 6218|   735k|                                ranges::distance(crange.begin(), it));
 6219|   735k|        }
 6220|   735k|        else {
 6221|   735k|            SCN_EXPECT(false);
 6222|   735k|            SCN_UNREACHABLE;
 6223|   735k|        }
 6224|   735k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   735k|    {
 6124|   735k|        const bool need_skipped_width =
 6125|   735k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 735k]
  |  Branch (6125:33): [True: 0, False: 735k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   735k|        auto it = rng.begin();
 6129|   735k|        std::ptrdiff_t prefix_width = 0;
 6130|   735k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 735k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   735k|        else {
 6138|   735k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   735k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   735k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   735k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.72k, False: 728k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.72k|    }                                                  \
  |  |  |  | 3671|   735k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   728k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   728k|            std::tie(it, prefix_width) = prefix_result;
 6140|   728k|        }
 6141|   728k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   728k|        std::ptrdiff_t value_width = 0;
 6145|   728k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 728k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   728k|        else {
 6161|   728k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   728k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   728k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   728k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 36.2k, False: 692k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  36.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  36.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  36.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  36.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  36.2k|    }                                                  \
  |  | 3671|   728k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   728k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   692k|                                             specs, value, loc));
 6163|       |
 6164|   692k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 692k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   692k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   692k|        std::ptrdiff_t postfix_width = 0;
 6173|   692k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 687k, False: 5.59k]
  ------------------
 6174|   687k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   687k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   687k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   687k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 687k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   687k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   687k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   687k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   687k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   687k|                                 value_width));
 6178|   687k|            std::tie(it, postfix_width) = postfix_result;
 6179|   687k|        }
 6180|       |
 6181|   692k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   692k|                                                 value_width, postfix_width);
 6183|   692k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 692k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   692k|        return it;
 6188|   692k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   742k|    {
 6193|   742k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   742k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   742k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   742k|            auto rd = make_reader<T, char_type>();
 6198|   742k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 742k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   742k|            return impl(rd, range, value);
 6203|   742k|        }
 6204|   742k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   742k|            auto rd = make_reader<T, char_type>();
 6206|   742k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   742k|                return unexpected(e);
 6208|   742k|            }
 6209|       |
 6210|   742k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   742k|                specs.width != 0) {
 6212|   742k|                return impl(rd, range, value);
 6213|   742k|            }
 6214|       |
 6215|   742k|            auto crange = get_as_contiguous(range);
 6216|   742k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   742k|            return ranges::next(range.begin(),
 6218|   742k|                                ranges::distance(crange.begin(), it));
 6219|   742k|        }
 6220|   742k|        else {
 6221|   742k|            SCN_EXPECT(false);
 6222|   742k|            SCN_UNREACHABLE;
 6223|   742k|        }
 6224|   742k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   742k|    {
 6124|   742k|        const bool need_skipped_width =
 6125|   742k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 742k]
  |  Branch (6125:33): [True: 0, False: 742k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   742k|        auto it = rng.begin();
 6129|   742k|        std::ptrdiff_t prefix_width = 0;
 6130|   742k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 742k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   742k|        else {
 6138|   742k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   742k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   742k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   742k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.11k, False: 735k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.11k|    }                                                  \
  |  |  |  | 3671|   742k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   735k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   735k|            std::tie(it, prefix_width) = prefix_result;
 6140|   735k|        }
 6141|   735k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   735k|        std::ptrdiff_t value_width = 0;
 6145|   735k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 735k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   735k|        else {
 6161|   735k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   735k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   735k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 35.8k, False: 699k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  35.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  35.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  35.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  35.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  35.8k|    }                                                  \
  |  | 3671|   735k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   735k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   699k|                                             specs, value, loc));
 6163|       |
 6164|   699k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 699k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   699k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   699k|        std::ptrdiff_t postfix_width = 0;
 6173|   699k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 694k, False: 5.94k]
  ------------------
 6174|   694k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   694k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   694k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   694k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   694k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 694k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   694k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   694k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   694k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   694k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   694k|                                 value_width));
 6178|   694k|            std::tie(it, postfix_width) = postfix_result;
 6179|   694k|        }
 6180|       |
 6181|   699k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   699k|                                                 value_width, postfix_width);
 6183|   699k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 699k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   699k|        return it;
 6188|   699k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   124k|{
 5795|   124k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 246, False: 124k]
  |  |  ------------------
  ------------------
 5796|    246|        return unexpected(e);
 5797|    246|    }
 5798|       |
 5799|   124k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 124k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   124k|    return skip_classic_whitespace(range);
 5804|   124k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  41.2k|    {
 5871|  41.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  41.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  41.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  41.2k|            auto rd = make_reader<T, char_type>();
 5876|  41.2k|            return impl(rd, range, value);
 5877|  41.2k|        }
 5878|  41.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  41.2k|            auto rd = make_reader<T, char_type>();
 5880|  41.2k|            if (!is_segment_contiguous(range)) {
 5881|  41.2k|                return impl(rd, range, value);
 5882|  41.2k|            }
 5883|  41.2k|            auto crange = get_as_contiguous(range);
 5884|  41.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  41.2k|            return ranges::next(range.begin(),
 5886|  41.2k|                                ranges::distance(crange.begin(), it));
 5887|  41.2k|        }
 5888|  41.2k|        else {
 5889|  41.2k|            SCN_EXPECT(false);
 5890|  41.2k|            SCN_UNREACHABLE;
 5891|  41.2k|        }
 5892|  41.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  41.2k|    {
 5863|  41.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  41.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 228, False: 41.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    228|    }                                                  \
  |  |  |  | 3671|  41.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  41.0k|                        .transform_error(make_eof_scan_error));
 5865|  41.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  41.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  41.0k|    {
 4152|  41.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  41.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  41.0k|        float_reader<CharT> rd{};
 4155|  41.0k|        return read_impl<Range>(
 4156|  41.0k|            range, rd,
 4157|  41.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  41.0k|            },
 4160|  41.0k|            value);
 4161|  41.0k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   247k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  41.0k|    {
  754|  41.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  41.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.0k|              cvref<T> obj = *get<T>(fn);
  745|  41.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  41.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.0k|              }
  748|  41.0k|              else {
  749|  41.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.0k|              }
  751|  41.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  41.0k|    {
  684|  41.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  41.0k|            return static_cast<T*>(s.m_cp);
  686|  41.0k|        }
  687|  41.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  41.0k|            return static_cast<T*>(s.m_p);
  689|  41.0k|        }
  690|  41.0k|        else {
  691|  41.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  41.0k|        }
  693|  41.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  41.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  41.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  41.0k|        {
  662|  41.0k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  41.4k|    {
 5871|  41.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  41.4k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  41.4k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  41.4k|            auto rd = make_reader<T, char_type>();
 5876|  41.4k|            return impl(rd, range, value);
 5877|  41.4k|        }
 5878|  41.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  41.4k|            auto rd = make_reader<T, char_type>();
 5880|  41.4k|            if (!is_segment_contiguous(range)) {
 5881|  41.4k|                return impl(rd, range, value);
 5882|  41.4k|            }
 5883|  41.4k|            auto crange = get_as_contiguous(range);
 5884|  41.4k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  41.4k|            return ranges::next(range.begin(),
 5886|  41.4k|                                ranges::distance(crange.begin(), it));
 5887|  41.4k|        }
 5888|  41.4k|        else {
 5889|  41.4k|            SCN_EXPECT(false);
 5890|  41.4k|            SCN_UNREACHABLE;
 5891|  41.4k|        }
 5892|  41.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  41.4k|    {
 5863|  41.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  41.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 255, False: 41.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    255|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    255|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    255|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    255|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    255|    }                                                  \
  |  |  |  | 3671|  41.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  41.2k|                        .transform_error(make_eof_scan_error));
 5865|  41.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  41.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  41.2k|    {
 4152|  41.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  41.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  41.2k|        float_reader<CharT> rd{};
 4155|  41.2k|        return read_impl<Range>(
 4156|  41.2k|            range, rd,
 4157|  41.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  41.2k|            },
 4160|  41.2k|            value);
 4161|  41.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  41.2k|    {
  754|  41.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  41.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.2k|              cvref<T> obj = *get<T>(fn);
  745|  41.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  41.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.2k|              }
  748|  41.2k|              else {
  749|  41.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.2k|              }
  751|  41.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  41.2k|    {
  684|  41.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  41.2k|            return static_cast<T*>(s.m_cp);
  686|  41.2k|        }
  687|  41.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  41.2k|            return static_cast<T*>(s.m_p);
  689|  41.2k|        }
  690|  41.2k|        else {
  691|  41.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  41.2k|        }
  693|  41.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  41.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  41.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  41.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  41.2k|        {
  662|  41.2k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  41.8k|    {
 5871|  41.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  41.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  41.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  41.8k|            auto rd = make_reader<T, char_type>();
 5876|  41.8k|            return impl(rd, range, value);
 5877|  41.8k|        }
 5878|  41.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  41.8k|            auto rd = make_reader<T, char_type>();
 5880|  41.8k|            if (!is_segment_contiguous(range)) {
 5881|  41.8k|                return impl(rd, range, value);
 5882|  41.8k|            }
 5883|  41.8k|            auto crange = get_as_contiguous(range);
 5884|  41.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  41.8k|            return ranges::next(range.begin(),
 5886|  41.8k|                                ranges::distance(crange.begin(), it));
 5887|  41.8k|        }
 5888|  41.8k|        else {
 5889|  41.8k|            SCN_EXPECT(false);
 5890|  41.8k|            SCN_UNREACHABLE;
 5891|  41.8k|        }
 5892|  41.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  41.8k|    {
 5863|  41.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 41.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    264|    }                                                  \
  |  |  |  | 3671|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  41.6k|                        .transform_error(make_eof_scan_error));
 5865|  41.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  41.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  41.6k|    {
 4152|  41.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  41.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  41.6k|        float_reader<CharT> rd{};
 4155|  41.6k|        return read_impl<Range>(
 4156|  41.6k|            range, rd,
 4157|  41.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  41.6k|            },
 4160|  41.6k|            value);
 4161|  41.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  41.6k|    {
  754|  41.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  41.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.6k|              cvref<T> obj = *get<T>(fn);
  745|  41.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  41.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.6k|              }
  748|  41.6k|              else {
  749|  41.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.6k|              }
  751|  41.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  41.6k|    {
  684|  41.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  41.6k|            return static_cast<T*>(s.m_cp);
  686|  41.6k|        }
  687|  41.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  41.6k|            return static_cast<T*>(s.m_p);
  689|  41.6k|        }
  690|  41.6k|        else {
  691|  41.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  41.6k|        }
  693|  41.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  41.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  41.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  41.6k|        {
  662|  41.6k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   385k|    {
 2879|   385k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   898k|    {
 2883|   898k|        return m_current;
 2884|   898k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   512k|    {
 2888|   512k|        return m_range.end();
 2889|   512k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   127k|    {
 2903|   127k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   127k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   127k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 127k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   127k|        }
 2909|   127k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   127k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   385k|    {
 2893|   385k|        return ranges::subrange{begin(), end()};
 2894|   385k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   385k|    {
 6037|   385k|        const bool need_skipped_width =
 6038|   385k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 385k]
  |  Branch (6038:33): [True: 0, False: 385k]
  ------------------
 6039|   385k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   385k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 385k]
  ------------------
 6043|   385k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 385k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   385k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 385k, False: 0]
  |  Branch (6047:56): [True: 385k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   385k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 385k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   768k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   385k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   385k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   385k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.21k, False: 383k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.21k|    }                                                  \
  |  |  |  | 3671|   385k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   768k|                            make_eof_scan_error));
 6058|       |
 6059|   768k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 383k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   383k|            return result_type{it, 0};
 6067|   768k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   385k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   126k|    {
 6079|   126k|        const bool need_skipped_width =
 6080|   126k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 126k]
  |  Branch (6080:33): [True: 0, False: 126k]
  ------------------
 6081|   126k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   126k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 126k]
  ------------------
 6084|   126k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 126k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   126k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 126k, False: 0]
  ------------------
 6093|   126k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 126k]
  ------------------
 6094|   126k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   126k|        return result_type{rng.begin(), 0};
 6118|   126k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|   128k|    {
 6193|   128k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   128k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   128k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   128k|            auto rd = make_reader<T, char_type>();
 6198|   128k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   128k|            return impl(rd, range, value);
 6203|   128k|        }
 6204|   128k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   128k|            auto rd = make_reader<T, char_type>();
 6206|   128k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   128k|                return unexpected(e);
 6208|   128k|            }
 6209|       |
 6210|   128k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   128k|                specs.width != 0) {
 6212|   128k|                return impl(rd, range, value);
 6213|   128k|            }
 6214|       |
 6215|   128k|            auto crange = get_as_contiguous(range);
 6216|   128k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   128k|            return ranges::next(range.begin(),
 6218|   128k|                                ranges::distance(crange.begin(), it));
 6219|   128k|        }
 6220|   128k|        else {
 6221|   128k|            SCN_EXPECT(false);
 6222|   128k|            SCN_UNREACHABLE;
 6223|   128k|        }
 6224|   128k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   128k|    {
 6124|   128k|        const bool need_skipped_width =
 6125|   128k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 128k]
  |  Branch (6125:33): [True: 0, False: 128k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   128k|        auto it = rng.begin();
 6129|   128k|        std::ptrdiff_t prefix_width = 0;
 6130|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 128k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   128k|        else {
 6138|   128k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 700, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    700|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    700|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    700|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    700|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    700|    }                                                  \
  |  |  |  | 3671|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   127k|            std::tie(it, prefix_width) = prefix_result;
 6140|   127k|        }
 6141|   127k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   127k|        std::ptrdiff_t value_width = 0;
 6145|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 127k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   127k|        else {
 6161|   127k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 85.3k, False: 42.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  85.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  85.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  85.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  85.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  85.3k|    }                                                  \
  |  | 3671|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  42.0k|                                             specs, value, loc));
 6163|       |
 6164|  42.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 42.0k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  42.0k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  42.0k|        std::ptrdiff_t postfix_width = 0;
 6173|  42.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 41.8k, False: 204]
  ------------------
 6174|  41.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 41.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  41.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  41.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  41.8k|                                 value_width));
 6178|  41.8k|            std::tie(it, postfix_width) = postfix_result;
 6179|  41.8k|        }
 6180|       |
 6181|  42.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  42.0k|                                                 value_width, postfix_width);
 6183|  42.0k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 42.0k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  42.0k|        return it;
 6188|  42.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|   128k|    {
 6193|   128k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   128k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   128k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   128k|            auto rd = make_reader<T, char_type>();
 6198|   128k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   128k|            return impl(rd, range, value);
 6203|   128k|        }
 6204|   128k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   128k|            auto rd = make_reader<T, char_type>();
 6206|   128k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   128k|                return unexpected(e);
 6208|   128k|            }
 6209|       |
 6210|   128k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   128k|                specs.width != 0) {
 6212|   128k|                return impl(rd, range, value);
 6213|   128k|            }
 6214|       |
 6215|   128k|            auto crange = get_as_contiguous(range);
 6216|   128k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   128k|            return ranges::next(range.begin(),
 6218|   128k|                                ranges::distance(crange.begin(), it));
 6219|   128k|        }
 6220|   128k|        else {
 6221|   128k|            SCN_EXPECT(false);
 6222|   128k|            SCN_UNREACHABLE;
 6223|   128k|        }
 6224|   128k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   128k|    {
 6124|   128k|        const bool need_skipped_width =
 6125|   128k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 128k]
  |  Branch (6125:33): [True: 0, False: 128k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   128k|        auto it = rng.begin();
 6129|   128k|        std::ptrdiff_t prefix_width = 0;
 6130|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 128k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   128k|        else {
 6138|   128k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 750, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    750|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    750|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    750|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    750|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    750|    }                                                  \
  |  |  |  | 3671|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   127k|            std::tie(it, prefix_width) = prefix_result;
 6140|   127k|        }
 6141|   127k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   127k|        std::ptrdiff_t value_width = 0;
 6145|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 127k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   127k|        else {
 6161|   127k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 85.2k, False: 42.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  85.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  85.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  85.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  85.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  85.2k|    }                                                  \
  |  | 3671|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  42.4k|                                             specs, value, loc));
 6163|       |
 6164|  42.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 42.4k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  42.4k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  42.4k|        std::ptrdiff_t postfix_width = 0;
 6173|  42.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 42.2k, False: 226]
  ------------------
 6174|  42.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  42.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  42.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  42.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  42.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  42.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  42.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  42.2k|                                 value_width));
 6178|  42.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  42.2k|        }
 6180|       |
 6181|  42.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  42.4k|                                                 value_width, postfix_width);
 6183|  42.4k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 42.4k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  42.4k|        return it;
 6188|  42.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   129k|    {
 6193|   129k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   129k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   129k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   129k|            auto rd = make_reader<T, char_type>();
 6198|   129k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 129k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   129k|            return impl(rd, range, value);
 6203|   129k|        }
 6204|   129k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   129k|            auto rd = make_reader<T, char_type>();
 6206|   129k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   129k|                return unexpected(e);
 6208|   129k|            }
 6209|       |
 6210|   129k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   129k|                specs.width != 0) {
 6212|   129k|                return impl(rd, range, value);
 6213|   129k|            }
 6214|       |
 6215|   129k|            auto crange = get_as_contiguous(range);
 6216|   129k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   129k|            return ranges::next(range.begin(),
 6218|   129k|                                ranges::distance(crange.begin(), it));
 6219|   129k|        }
 6220|   129k|        else {
 6221|   129k|            SCN_EXPECT(false);
 6222|   129k|            SCN_UNREACHABLE;
 6223|   129k|        }
 6224|   129k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   129k|    {
 6124|   129k|        const bool need_skipped_width =
 6125|   129k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 129k]
  |  Branch (6125:33): [True: 0, False: 129k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   129k|        auto it = rng.begin();
 6129|   129k|        std::ptrdiff_t prefix_width = 0;
 6130|   129k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 129k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   129k|        else {
 6138|   129k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 766, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    766|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    766|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    766|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    766|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    766|    }                                                  \
  |  |  |  | 3671|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   128k|            std::tie(it, prefix_width) = prefix_result;
 6140|   128k|        }
 6141|   128k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   128k|        std::ptrdiff_t value_width = 0;
 6145|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 128k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   128k|        else {
 6161|   128k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 85.2k, False: 43.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  85.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  85.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  85.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  85.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  85.2k|    }                                                  \
  |  | 3671|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  43.0k|                                             specs, value, loc));
 6163|       |
 6164|  43.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 43.0k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  43.0k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  43.0k|        std::ptrdiff_t postfix_width = 0;
 6173|  43.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 42.7k, False: 236]
  ------------------
 6174|  42.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  42.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  42.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  42.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  42.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  42.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  42.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  42.7k|                                 value_width));
 6178|  42.7k|            std::tie(it, postfix_width) = postfix_result;
 6179|  42.7k|        }
 6180|       |
 6181|  43.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  43.0k|                                                 value_width, postfix_width);
 6183|  43.0k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 43.0k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  43.0k|        return it;
 6188|  43.0k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   124k|{
 5795|   124k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 246, False: 124k]
  |  |  ------------------
  ------------------
 5796|    246|        return unexpected(e);
 5797|    246|    }
 5798|       |
 5799|   124k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 124k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   124k|    return skip_classic_whitespace(range);
 5804|   124k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  41.1k|    {
 5871|  41.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  41.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  41.1k|            auto rd = make_reader<T, char_type>();
 5876|  41.1k|            return impl(rd, range, value);
 5877|  41.1k|        }
 5878|  41.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  41.1k|            auto rd = make_reader<T, char_type>();
 5880|  41.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 41.1k, False: 0]
  ------------------
 5881|  41.1k|                return impl(rd, range, value);
 5882|  41.1k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  41.1k|        else {
 5889|  41.1k|            SCN_EXPECT(false);
 5890|  41.1k|            SCN_UNREACHABLE;
 5891|  41.1k|        }
 5892|  41.1k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  41.1k|    {
 5863|  41.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 228, False: 40.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    228|    }                                                  \
  |  |  |  | 3671|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  40.9k|                        .transform_error(make_eof_scan_error));
 5865|  40.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  41.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  40.9k|    {
 4152|  40.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  40.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  40.9k|        float_reader<CharT> rd{};
 4155|  40.9k|        return read_impl<Range>(
 4156|  40.9k|            range, rd,
 4157|  40.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  40.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  40.9k|            },
 4160|  40.9k|            value);
 4161|  40.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  40.9k|    {
  754|  40.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  40.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.9k|              cvref<T> obj = *get<T>(fn);
  745|  40.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  40.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.9k|              }
  748|  40.9k|              else {
  749|  40.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.9k|              }
  751|  40.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.9k|    {
  684|  40.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  40.9k|            return static_cast<T*>(s.m_cp);
  686|  40.9k|        }
  687|  40.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  40.9k|            return static_cast<T*>(s.m_p);
  689|  40.9k|        }
  690|  40.9k|        else {
  691|  40.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  40.9k|        }
  693|  40.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  40.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  40.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  40.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  40.9k|        {
  662|  40.9k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  41.4k|    {
 5871|  41.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  41.4k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  41.4k|            auto rd = make_reader<T, char_type>();
 5876|  41.4k|            return impl(rd, range, value);
 5877|  41.4k|        }
 5878|  41.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  41.4k|            auto rd = make_reader<T, char_type>();
 5880|  41.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 41.4k, False: 0]
  ------------------
 5881|  41.4k|                return impl(rd, range, value);
 5882|  41.4k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  41.4k|        else {
 5889|  41.4k|            SCN_EXPECT(false);
 5890|  41.4k|            SCN_UNREACHABLE;
 5891|  41.4k|        }
 5892|  41.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  41.4k|    {
 5863|  41.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  41.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 255, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    255|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    255|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    255|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    255|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    255|    }                                                  \
  |  |  |  | 3671|  41.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  41.1k|                        .transform_error(make_eof_scan_error));
 5865|  41.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  41.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  41.1k|    {
 4152|  41.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  41.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  41.1k|        float_reader<CharT> rd{};
 4155|  41.1k|        return read_impl<Range>(
 4156|  41.1k|            range, rd,
 4157|  41.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  41.1k|            },
 4160|  41.1k|            value);
 4161|  41.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  41.1k|    {
  754|  41.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  41.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.1k|              cvref<T> obj = *get<T>(fn);
  745|  41.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  41.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.1k|              }
  748|  41.1k|              else {
  749|  41.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.1k|              }
  751|  41.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  41.1k|    {
  684|  41.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  41.1k|            return static_cast<T*>(s.m_cp);
  686|  41.1k|        }
  687|  41.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  41.1k|            return static_cast<T*>(s.m_p);
  689|  41.1k|        }
  690|  41.1k|        else {
  691|  41.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  41.1k|        }
  693|  41.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  41.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  41.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  41.1k|        {
  662|  41.1k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  41.8k|    {
 5871|  41.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  41.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  41.8k|            auto rd = make_reader<T, char_type>();
 5876|  41.8k|            return impl(rd, range, value);
 5877|  41.8k|        }
 5878|  41.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  41.8k|            auto rd = make_reader<T, char_type>();
 5880|  41.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 41.8k, False: 0]
  ------------------
 5881|  41.8k|                return impl(rd, range, value);
 5882|  41.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  41.8k|        else {
 5889|  41.8k|            SCN_EXPECT(false);
 5890|  41.8k|            SCN_UNREACHABLE;
 5891|  41.8k|        }
 5892|  41.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  41.8k|    {
 5863|  41.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 41.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    264|    }                                                  \
  |  |  |  | 3671|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  41.5k|                        .transform_error(make_eof_scan_error));
 5865|  41.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  41.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  41.5k|    {
 4152|  41.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  41.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  41.5k|        float_reader<CharT> rd{};
 4155|  41.5k|        return read_impl<Range>(
 4156|  41.5k|            range, rd,
 4157|  41.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  41.5k|            },
 4160|  41.5k|            value);
 4161|  41.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  41.5k|    {
  754|  41.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  41.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.5k|              cvref<T> obj = *get<T>(fn);
  745|  41.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  41.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.5k|              }
  748|  41.5k|              else {
  749|  41.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.5k|              }
  751|  41.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  41.5k|    {
  684|  41.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  41.5k|            return static_cast<T*>(s.m_cp);
  686|  41.5k|        }
  687|  41.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  41.5k|            return static_cast<T*>(s.m_p);
  689|  41.5k|        }
  690|  41.5k|        else {
  691|  41.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  41.5k|        }
  693|  41.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  41.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  41.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  41.5k|        {
  662|  41.5k|        }

LLVMFuzzerTestOneInput:
   54|  4.30k|{
   55|  4.30k|    scn::fuzz::run(data, size);
   56|  4.30k|    return 0;
   57|  4.30k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  4.30k|{
   33|  4.30k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 4.30k]
  |  Branch (33:35): [True: 0, False: 4.30k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  4.30k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  4.30k|    const auto& f =
   40|  4.30k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  4.30k|    do_basic_run(sv, f);
   42|       |
   43|  4.30k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  4.30k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  4.30k|    do_basic_run(wsv_reinterpret, wf);
   46|  4.30k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 4.30k, False: 0]
  ------------------
   47|  4.30k|        do_basic_run(wsv_transcode, wf);
   48|  4.30k|    }
   49|  4.30k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.30k|{
   25|  4.30k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.30k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.30k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.30k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.30k|{
   25|  4.30k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.30k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.30k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.30k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  8.60k|{
   25|  8.60k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  8.60k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  8.60k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  8.60k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  8.60k|{
   25|  8.60k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  8.60k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  8.60k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  8.60k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.30k|{
   52|  4.30k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.30k|    string_buffer.resize(size);
   56|  4.30k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.30k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.30k|    const auto wsv_reinterpret_size =
   61|  4.30k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 78, False: 4.22k]
  ------------------
   62|  4.30k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.30k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.30k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.30k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.30k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.30k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.30k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  4.30k|{
  122|  4.30k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  4.30k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  4.30k|    buf.resize(sizeof...(Args));
  125|  4.30k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  4.30k|    return buf;
  127|  4.30k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  4.30k|{
  108|  4.30k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  4.30k|        return format_string_view_buffer;
  110|  4.30k|    }
  111|  4.30k|    else {
  112|  4.30k|        return wformat_string_view_buffer;
  113|  4.30k|    }
  114|  4.30k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.30k|{
  185|  4.30k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.30k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.30k|                                   format_strings);
  188|  4.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.30k|{
  133|       |    // Regular scan
  134|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.8k, False: 4.30k]
  ------------------
  135|  25.8k|        auto it = scn::ranges::begin(source);
  136|   439k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   439k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   439k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   439k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   439k|            auto result = scn::scan<T>(
  139|   439k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   439k|                scn::runtime_format(f));
  141|   439k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.8k, False: 413k]
  ------------------
  142|  25.8k|                break;
  143|  25.8k|            }
  144|   413k|            it = result->begin();
  145|   413k|        }
  146|  25.8k|    }
  147|       |
  148|       |    // scan localized
  149|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.8k, False: 4.30k]
  ------------------
  150|  25.8k|        auto it = scn::ranges::begin(source);
  151|   439k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   439k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   439k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   439k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   439k|            auto result = scn::scan<T>(
  154|   439k|                global_locale,
  155|   439k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   439k|                scn::runtime_format(f));
  157|   439k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.8k, False: 413k]
  ------------------
  158|  25.8k|                break;
  159|  25.8k|            }
  160|   413k|            it = result->begin();
  161|   413k|        }
  162|  25.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.30k|    {
  166|  4.30k|        auto it = scn::ranges::begin(source);
  167|  95.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  95.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  95.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  95.7k|            auto result = scn::scan_value<T>(
  170|  95.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  95.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.30k, False: 91.4k]
  ------------------
  172|  4.30k|                break;
  173|  4.30k|            }
  174|  91.4k|            it = result->begin();
  175|  91.4k|        }
  176|  4.30k|    }
  177|  4.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.30k|{
  133|       |    // Regular scan
  134|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.8k, False: 4.30k]
  ------------------
  135|  25.8k|        auto it = scn::ranges::begin(source);
  136|   473k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   473k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   473k|            auto result = scn::scan<T>(
  139|   473k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   473k|                scn::runtime_format(f));
  141|   473k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.8k, False: 447k]
  ------------------
  142|  25.8k|                break;
  143|  25.8k|            }
  144|   447k|            it = result->begin();
  145|   447k|        }
  146|  25.8k|    }
  147|       |
  148|       |    // scan localized
  149|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.8k, False: 4.30k]
  ------------------
  150|  25.8k|        auto it = scn::ranges::begin(source);
  151|   473k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   473k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   473k|            auto result = scn::scan<T>(
  154|   473k|                global_locale,
  155|   473k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   473k|                scn::runtime_format(f));
  157|   473k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.8k, False: 447k]
  ------------------
  158|  25.8k|                break;
  159|  25.8k|            }
  160|   447k|            it = result->begin();
  161|   447k|        }
  162|  25.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.30k|    {
  166|  4.30k|        auto it = scn::ranges::begin(source);
  167|   105k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   105k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   105k|            auto result = scn::scan_value<T>(
  170|   105k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   105k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.30k, False: 101k]
  ------------------
  172|  4.30k|                break;
  173|  4.30k|            }
  174|   101k|            it = result->begin();
  175|   101k|        }
  176|  4.30k|    }
  177|  4.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.30k|{
  133|       |    // Regular scan
  134|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.8k, False: 4.30k]
  ------------------
  135|  25.8k|        auto it = scn::ranges::begin(source);
  136|   478k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   478k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   478k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   478k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   478k|            auto result = scn::scan<T>(
  139|   478k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   478k|                scn::runtime_format(f));
  141|   478k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.8k, False: 453k]
  ------------------
  142|  25.8k|                break;
  143|  25.8k|            }
  144|   453k|            it = result->begin();
  145|   453k|        }
  146|  25.8k|    }
  147|       |
  148|       |    // scan localized
  149|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.8k, False: 4.30k]
  ------------------
  150|  25.8k|        auto it = scn::ranges::begin(source);
  151|   478k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   478k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   478k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   478k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   478k|            auto result = scn::scan<T>(
  154|   478k|                global_locale,
  155|   478k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   478k|                scn::runtime_format(f));
  157|   478k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.8k, False: 453k]
  ------------------
  158|  25.8k|                break;
  159|  25.8k|            }
  160|   453k|            it = result->begin();
  161|   453k|        }
  162|  25.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.30k|    {
  166|  4.30k|        auto it = scn::ranges::begin(source);
  167|   107k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   107k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   107k|            auto result = scn::scan_value<T>(
  170|   107k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   107k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.30k, False: 103k]
  ------------------
  172|  4.30k|                break;
  173|  4.30k|            }
  174|   103k|            it = result->begin();
  175|   103k|        }
  176|  4.30k|    }
  177|  4.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.30k|{
  133|       |    // Regular scan
  134|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.8k, False: 4.30k]
  ------------------
  135|  25.8k|        auto it = scn::ranges::begin(source);
  136|   468k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   468k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   468k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   468k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   468k|            auto result = scn::scan<T>(
  139|   468k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   468k|                scn::runtime_format(f));
  141|   468k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.8k, False: 442k]
  ------------------
  142|  25.8k|                break;
  143|  25.8k|            }
  144|   442k|            it = result->begin();
  145|   442k|        }
  146|  25.8k|    }
  147|       |
  148|       |    // scan localized
  149|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.8k, False: 4.30k]
  ------------------
  150|  25.8k|        auto it = scn::ranges::begin(source);
  151|   468k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   468k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   468k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   468k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   468k|            auto result = scn::scan<T>(
  154|   468k|                global_locale,
  155|   468k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   468k|                scn::runtime_format(f));
  157|   468k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.8k, False: 442k]
  ------------------
  158|  25.8k|                break;
  159|  25.8k|            }
  160|   442k|            it = result->begin();
  161|   442k|        }
  162|  25.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.30k|    {
  166|  4.30k|        auto it = scn::ranges::begin(source);
  167|  94.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  94.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  94.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  94.6k|            auto result = scn::scan_value<T>(
  170|  94.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  94.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.30k, False: 90.3k]
  ------------------
  172|  4.30k|                break;
  173|  4.30k|            }
  174|  90.3k|            it = result->begin();
  175|  90.3k|        }
  176|  4.30k|    }
  177|  4.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.30k|{
  133|       |    // Regular scan
  134|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.8k, False: 4.30k]
  ------------------
  135|  25.8k|        auto it = scn::ranges::begin(source);
  136|   505k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   505k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   505k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   505k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   505k|            auto result = scn::scan<T>(
  139|   505k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   505k|                scn::runtime_format(f));
  141|   505k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.8k, False: 479k]
  ------------------
  142|  25.8k|                break;
  143|  25.8k|            }
  144|   479k|            it = result->begin();
  145|   479k|        }
  146|  25.8k|    }
  147|       |
  148|       |    // scan localized
  149|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.8k, False: 4.30k]
  ------------------
  150|  25.8k|        auto it = scn::ranges::begin(source);
  151|   505k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   505k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   505k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   505k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   505k|            auto result = scn::scan<T>(
  154|   505k|                global_locale,
  155|   505k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   505k|                scn::runtime_format(f));
  157|   505k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.8k, False: 479k]
  ------------------
  158|  25.8k|                break;
  159|  25.8k|            }
  160|   479k|            it = result->begin();
  161|   479k|        }
  162|  25.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.30k|    {
  166|  4.30k|        auto it = scn::ranges::begin(source);
  167|   104k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   104k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   104k|            auto result = scn::scan_value<T>(
  170|   104k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   104k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.30k, False: 99.8k]
  ------------------
  172|  4.30k|                break;
  173|  4.30k|            }
  174|  99.8k|            it = result->begin();
  175|  99.8k|        }
  176|  4.30k|    }
  177|  4.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.30k|{
  133|       |    // Regular scan
  134|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.8k, False: 4.30k]
  ------------------
  135|  25.8k|        auto it = scn::ranges::begin(source);
  136|   510k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   510k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   510k|            auto result = scn::scan<T>(
  139|   510k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   510k|                scn::runtime_format(f));
  141|   510k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.8k, False: 484k]
  ------------------
  142|  25.8k|                break;
  143|  25.8k|            }
  144|   484k|            it = result->begin();
  145|   484k|        }
  146|  25.8k|    }
  147|       |
  148|       |    // scan localized
  149|  25.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.8k, False: 4.30k]
  ------------------
  150|  25.8k|        auto it = scn::ranges::begin(source);
  151|   510k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   510k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   510k|            auto result = scn::scan<T>(
  154|   510k|                global_locale,
  155|   510k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   510k|                scn::runtime_format(f));
  157|   510k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.8k, False: 484k]
  ------------------
  158|  25.8k|                break;
  159|  25.8k|            }
  160|   484k|            it = result->begin();
  161|   484k|        }
  162|  25.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.30k|    {
  166|  4.30k|        auto it = scn::ranges::begin(source);
  167|   105k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   105k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   105k|            auto result = scn::scan_value<T>(
  170|   105k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   105k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.30k, False: 100k]
  ------------------
  172|  4.30k|                break;
  173|  4.30k|            }
  174|   100k|            it = result->begin();
  175|   100k|        }
  176|  4.30k|    }
  177|  4.30k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  4.30k|{
   90|  4.30k|    using char_type = ranges::range_value_t<Source>;
   91|  4.30k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.30k|    deque.clear();
   93|  4.30k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.30k|              std::back_inserter(deque));
   95|  4.30k|    return deque;
   96|  4.30k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  4.30k|{
   79|  4.30k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  4.30k|        return noncontiguous_buffer;
   81|  4.30k|    }
   82|  4.30k|    else {
   83|  4.30k|        return wnoncontiguous_buffer;
   84|  4.30k|    }
   85|  4.30k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  4.30k|{
  122|  4.30k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  4.30k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  4.30k|    buf.resize(sizeof...(Args));
  125|  4.30k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  4.30k|    return buf;
  127|  4.30k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  4.30k|{
  108|  4.30k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  4.30k|        return format_string_view_buffer;
  110|  4.30k|    }
  111|  4.30k|    else {
  112|  4.30k|        return wformat_string_view_buffer;
  113|  4.30k|    }
  114|  4.30k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  8.60k|{
  185|  8.60k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  8.60k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  8.60k|                                   format_strings);
  188|  8.60k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  8.60k|{
  133|       |    // Regular scan
  134|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 51.6k, False: 8.60k]
  ------------------
  135|  51.6k|        auto it = scn::ranges::begin(source);
  136|  77.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  77.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  77.7k|            auto result = scn::scan<T>(
  139|  77.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  77.7k|                scn::runtime_format(f));
  141|  77.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 51.6k, False: 26.1k]
  ------------------
  142|  51.6k|                break;
  143|  51.6k|            }
  144|  26.1k|            it = result->begin();
  145|  26.1k|        }
  146|  51.6k|    }
  147|       |
  148|       |    // scan localized
  149|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 51.6k, False: 8.60k]
  ------------------
  150|  51.6k|        auto it = scn::ranges::begin(source);
  151|  77.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  77.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  77.7k|            auto result = scn::scan<T>(
  154|  77.7k|                global_locale,
  155|  77.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  77.7k|                scn::runtime_format(f));
  157|  77.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 51.6k, False: 26.1k]
  ------------------
  158|  51.6k|                break;
  159|  51.6k|            }
  160|  26.1k|            it = result->begin();
  161|  26.1k|        }
  162|  51.6k|    }
  163|       |
  164|       |    // scan_value
  165|  8.60k|    {
  166|  8.60k|        auto it = scn::ranges::begin(source);
  167|  13.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.7k|            auto result = scn::scan_value<T>(
  170|  13.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.60k, False: 5.14k]
  ------------------
  172|  8.60k|                break;
  173|  8.60k|            }
  174|  5.14k|            it = result->begin();
  175|  5.14k|        }
  176|  8.60k|    }
  177|  8.60k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  8.60k|{
  133|       |    // Regular scan
  134|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 51.6k, False: 8.60k]
  ------------------
  135|  51.6k|        auto it = scn::ranges::begin(source);
  136|  78.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  78.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  78.0k|            auto result = scn::scan<T>(
  139|  78.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  78.0k|                scn::runtime_format(f));
  141|  78.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 51.6k, False: 26.4k]
  ------------------
  142|  51.6k|                break;
  143|  51.6k|            }
  144|  26.4k|            it = result->begin();
  145|  26.4k|        }
  146|  51.6k|    }
  147|       |
  148|       |    // scan localized
  149|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 51.6k, False: 8.60k]
  ------------------
  150|  51.6k|        auto it = scn::ranges::begin(source);
  151|  78.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  78.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  78.0k|            auto result = scn::scan<T>(
  154|  78.0k|                global_locale,
  155|  78.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  78.0k|                scn::runtime_format(f));
  157|  78.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 51.6k, False: 26.4k]
  ------------------
  158|  51.6k|                break;
  159|  51.6k|            }
  160|  26.4k|            it = result->begin();
  161|  26.4k|        }
  162|  51.6k|    }
  163|       |
  164|       |    // scan_value
  165|  8.60k|    {
  166|  8.60k|        auto it = scn::ranges::begin(source);
  167|  13.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.8k|            auto result = scn::scan_value<T>(
  170|  13.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.60k, False: 5.22k]
  ------------------
  172|  8.60k|                break;
  173|  8.60k|            }
  174|  5.22k|            it = result->begin();
  175|  5.22k|        }
  176|  8.60k|    }
  177|  8.60k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  8.60k|{
  133|       |    // Regular scan
  134|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 51.6k, False: 8.60k]
  ------------------
  135|  51.6k|        auto it = scn::ranges::begin(source);
  136|  78.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  78.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  78.4k|            auto result = scn::scan<T>(
  139|  78.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  78.4k|                scn::runtime_format(f));
  141|  78.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 51.6k, False: 26.8k]
  ------------------
  142|  51.6k|                break;
  143|  51.6k|            }
  144|  26.8k|            it = result->begin();
  145|  26.8k|        }
  146|  51.6k|    }
  147|       |
  148|       |    // scan localized
  149|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 51.6k, False: 8.60k]
  ------------------
  150|  51.6k|        auto it = scn::ranges::begin(source);
  151|  78.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  78.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  78.4k|            auto result = scn::scan<T>(
  154|  78.4k|                global_locale,
  155|  78.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  78.4k|                scn::runtime_format(f));
  157|  78.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 51.6k, False: 26.8k]
  ------------------
  158|  51.6k|                break;
  159|  51.6k|            }
  160|  26.8k|            it = result->begin();
  161|  26.8k|        }
  162|  51.6k|    }
  163|       |
  164|       |    // scan_value
  165|  8.60k|    {
  166|  8.60k|        auto it = scn::ranges::begin(source);
  167|  13.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.9k|            auto result = scn::scan_value<T>(
  170|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.60k, False: 5.35k]
  ------------------
  172|  8.60k|                break;
  173|  8.60k|            }
  174|  5.35k|            it = result->begin();
  175|  5.35k|        }
  176|  8.60k|    }
  177|  8.60k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  8.60k|{
  133|       |    // Regular scan
  134|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 51.6k, False: 8.60k]
  ------------------
  135|  51.6k|        auto it = scn::ranges::begin(source);
  136|  77.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  77.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  77.7k|            auto result = scn::scan<T>(
  139|  77.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  77.7k|                scn::runtime_format(f));
  141|  77.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 51.6k, False: 26.1k]
  ------------------
  142|  51.6k|                break;
  143|  51.6k|            }
  144|  26.1k|            it = result->begin();
  145|  26.1k|        }
  146|  51.6k|    }
  147|       |
  148|       |    // scan localized
  149|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 51.6k, False: 8.60k]
  ------------------
  150|  51.6k|        auto it = scn::ranges::begin(source);
  151|  77.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  77.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  77.7k|            auto result = scn::scan<T>(
  154|  77.7k|                global_locale,
  155|  77.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  77.7k|                scn::runtime_format(f));
  157|  77.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 51.6k, False: 26.1k]
  ------------------
  158|  51.6k|                break;
  159|  51.6k|            }
  160|  26.1k|            it = result->begin();
  161|  26.1k|        }
  162|  51.6k|    }
  163|       |
  164|       |    // scan_value
  165|  8.60k|    {
  166|  8.60k|        auto it = scn::ranges::begin(source);
  167|  13.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.7k|            auto result = scn::scan_value<T>(
  170|  13.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.60k, False: 5.12k]
  ------------------
  172|  8.60k|                break;
  173|  8.60k|            }
  174|  5.12k|            it = result->begin();
  175|  5.12k|        }
  176|  8.60k|    }
  177|  8.60k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  8.60k|{
  133|       |    // Regular scan
  134|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 51.6k, False: 8.60k]
  ------------------
  135|  51.6k|        auto it = scn::ranges::begin(source);
  136|  77.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  77.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  77.9k|            auto result = scn::scan<T>(
  139|  77.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  77.9k|                scn::runtime_format(f));
  141|  77.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 51.6k, False: 26.3k]
  ------------------
  142|  51.6k|                break;
  143|  51.6k|            }
  144|  26.3k|            it = result->begin();
  145|  26.3k|        }
  146|  51.6k|    }
  147|       |
  148|       |    // scan localized
  149|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 51.6k, False: 8.60k]
  ------------------
  150|  51.6k|        auto it = scn::ranges::begin(source);
  151|  77.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  77.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  77.9k|            auto result = scn::scan<T>(
  154|  77.9k|                global_locale,
  155|  77.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  77.9k|                scn::runtime_format(f));
  157|  77.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 51.6k, False: 26.3k]
  ------------------
  158|  51.6k|                break;
  159|  51.6k|            }
  160|  26.3k|            it = result->begin();
  161|  26.3k|        }
  162|  51.6k|    }
  163|       |
  164|       |    // scan_value
  165|  8.60k|    {
  166|  8.60k|        auto it = scn::ranges::begin(source);
  167|  13.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.8k|            auto result = scn::scan_value<T>(
  170|  13.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.60k, False: 5.20k]
  ------------------
  172|  8.60k|                break;
  173|  8.60k|            }
  174|  5.20k|            it = result->begin();
  175|  5.20k|        }
  176|  8.60k|    }
  177|  8.60k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  8.60k|{
  133|       |    // Regular scan
  134|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 51.6k, False: 8.60k]
  ------------------
  135|  51.6k|        auto it = scn::ranges::begin(source);
  136|  78.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  78.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  78.3k|            auto result = scn::scan<T>(
  139|  78.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  78.3k|                scn::runtime_format(f));
  141|  78.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 51.6k, False: 26.7k]
  ------------------
  142|  51.6k|                break;
  143|  51.6k|            }
  144|  26.7k|            it = result->begin();
  145|  26.7k|        }
  146|  51.6k|    }
  147|       |
  148|       |    // scan localized
  149|  51.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 51.6k, False: 8.60k]
  ------------------
  150|  51.6k|        auto it = scn::ranges::begin(source);
  151|  78.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  78.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  78.3k|            auto result = scn::scan<T>(
  154|  78.3k|                global_locale,
  155|  78.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  78.3k|                scn::runtime_format(f));
  157|  78.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 51.6k, False: 26.7k]
  ------------------
  158|  51.6k|                break;
  159|  51.6k|            }
  160|  26.7k|            it = result->begin();
  161|  26.7k|        }
  162|  51.6k|    }
  163|       |
  164|       |    // scan_value
  165|  8.60k|    {
  166|  8.60k|        auto it = scn::ranges::begin(source);
  167|  13.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.9k|            auto result = scn::scan_value<T>(
  170|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.60k, False: 5.33k]
  ------------------
  172|  8.60k|                break;
  173|  8.60k|            }
  174|  5.33k|            it = result->begin();
  175|  5.33k|        }
  176|  8.60k|    }
  177|  8.60k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  8.60k|{
   90|  8.60k|    using char_type = ranges::range_value_t<Source>;
   91|  8.60k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  8.60k|    deque.clear();
   93|  8.60k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  8.60k|              std::back_inserter(deque));
   95|  8.60k|    return deque;
   96|  8.60k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  8.60k|{
   79|  8.60k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  8.60k|        return noncontiguous_buffer;
   81|  8.60k|    }
   82|  8.60k|    else {
   83|  8.60k|        return wnoncontiguous_buffer;
   84|  8.60k|    }
   85|  8.60k|}

