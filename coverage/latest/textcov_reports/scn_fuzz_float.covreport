_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.19M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.19M|  chars_format const fmt = options.format;
  277|  2.19M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.19M|  parsed_number_string_t<UC> answer;
  280|  2.19M|  answer.valid = false;
  281|  2.19M|  answer.too_many_digits = false;
  282|  2.19M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.19M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.19M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.19M|  UC const * const start_digits = p;
  303|       |
  304|  2.19M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  12.9M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 11.8M, False: 1.06M]
  |  Branch (306:25): [True: 10.7M, False: 1.12M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  10.7M|    i = 10 * i +
  310|  10.7M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  10.7M|    ++p;
  312|  10.7M|  }
  313|  2.19M|  UC const * const end_of_integer_part = p;
  314|  2.19M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.19M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.19M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.19M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.19M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.19M|  int64_t exponent = 0;
  324|  2.19M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.12M, False: 1.06M]
  |  Branch (324:49): [True: 369k, False: 759k]
  ------------------
  325|  2.19M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 369k, False: 1.82M]
  ------------------
  326|   369k|    ++p;
  327|   369k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   369k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.47M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.25M, False: 218k]
  |  Branch (332:27): [True: 1.10M, False: 150k]
  ------------------
  333|  1.10M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.10M|      ++p;
  335|  1.10M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.10M|    }
  337|   369k|    exponent = before - p;
  338|   369k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   369k|    digit_count -= exponent;
  340|   369k|  }
  341|  2.19M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.19M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.19M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.19M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.19M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.19M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.19M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.92M, False: 268k]
  ------------------
  352|  2.19M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 910k, False: 1.01M]
  ------------------
  353|  2.19M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 236k, False: 674k]
  |  Branch (353:29): [True: 80.6k, False: 593k]
  ------------------
  354|  2.19M|       ||
  355|  2.19M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.87M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.87M]
  ------------------
  356|  1.87M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.87M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   317k|    UC const * location_of_e = p;
  359|   317k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 236k, False: 80.6k]
  |  Branch (359:28): [True: 80.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   317k|      ++p;
  361|   317k|    }
  362|   317k|    bool neg_exp = false;
  363|   317k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 316k, False: 215]
  |  Branch (363:24): [True: 21.7k, False: 295k]
  ------------------
  364|  21.7k|      neg_exp = true;
  365|  21.7k|      ++p;
  366|   295k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 295k, False: 215]
  |  Branch (366:31): [True: 58.6k, False: 236k]
  ------------------
  367|  58.6k|      ++p;
  368|  58.6k|    }
  369|   317k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 255, False: 316k]
  |  Branch (369:24): [True: 920, False: 315k]
  ------------------
  370|  1.17k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.17k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.17k|      p = location_of_e;
  376|   315k|    } else {
  377|  1.01M|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 799k, False: 212k]
  |  Branch (377:29): [True: 695k, False: 103k]
  ------------------
  378|   695k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   695k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 656k, False: 39.5k]
  ------------------
  380|   656k|          exp_number = 10 * exp_number + digit;
  381|   656k|        }
  382|   695k|        ++p;
  383|   695k|      }
  384|   315k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 21.7k, False: 294k]
  ------------------
  385|   315k|      exponent += exp_number;
  386|   315k|    }
  387|  1.87M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.87M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.60M, False: 268k]
  |  Branch (389:44): [True: 0, False: 1.60M]
  ------------------
  390|  1.87M|  }
  391|  2.19M|  answer.lastmatch = p;
  392|  2.19M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.19M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 342k, False: 1.85M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   342k|    UC const * start = start_digits;
  405|  3.18M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.17M, False: 14.6k]
  |  Branch (405:32): [True: 2.77M, False: 391k]
  |  Branch (405:53): [True: 64.2k, False: 327k]
  ------------------
  406|  2.84M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 2.77M, False: 64.2k]
  ------------------
  407|  2.84M|      start++;
  408|  2.84M|    }
  409|       |
  410|   342k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 291k, False: 51.2k]
  ------------------
  411|   291k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   291k|      i = 0;
  416|   291k|      p = answer.integer.ptr;
  417|   291k|      UC const* int_end = p + answer.integer.len();
  418|   291k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  4.02M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.92M, False: 95.9k]
  |  Branch (419:54): [True: 3.73M, False: 195k]
  ------------------
  420|  3.73M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.73M|        ++p;
  422|  3.73M|      }
  423|   291k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 95.9k, False: 195k]
  ------------------
  424|  95.9k|        exponent = end_of_integer_part - p + exp_number;
  425|  95.9k|      }
  426|   195k|      else { // We have a value with a fractional component.
  427|   195k|        p = answer.fraction.ptr;
  428|   195k|        UC const* frac_end = p + answer.fraction.len();
  429|  3.70M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.51M, False: 195k]
  |  Branch (429:56): [True: 3.51M, False: 0]
  ------------------
  430|  3.51M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.51M|          ++p;
  432|  3.51M|        }
  433|   195k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   195k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   291k|    }
  437|   342k|  }
  438|  2.19M|  answer.exponent = exponent;
  439|  2.19M|  answer.mantissa = i;
  440|  2.19M|  return answer;
  441|  2.19M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  14.2M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  14.2M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 360k, False: 13.9M]
  |  Branch (36:27): [True: 1.02M, False: 12.8M]
  ------------------
   37|  14.2M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   369k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.50M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.26M, False: 238k]
  |  Branch (249:43): [True: 1.13M, False: 130k]
  ------------------
  250|  1.13M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.13M|    p += 8;
  252|  1.13M|  }
  253|   369k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.26M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.26M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.26M|     0x8080808080808080));
  172|  1.26M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  2.85M|uint64_t read8_to_u64(const UC *chars) {
   54|  2.85M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  2.85M|  uint64_t val;
   63|  2.85M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  2.85M|  return val;
   69|  2.85M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.58M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.58M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.58M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.58M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.58M|  val -= 0x3030303030303030;
  151|  1.58M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.58M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.58M|  return uint32_t(val);
  154|  1.58M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   443k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   443k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   443k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   443k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   443k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  70.8k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  70.8k|  chars_format const fmt = options.format;
  277|  70.8k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  70.8k|  parsed_number_string_t<UC> answer;
  280|  70.8k|  answer.valid = false;
  281|  70.8k|  answer.too_many_digits = false;
  282|  70.8k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  70.8k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 70.8k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  70.8k|  UC const * const start_digits = p;
  303|       |
  304|  70.8k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   145k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 95.8k, False: 49.7k]
  |  Branch (306:25): [True: 74.7k, False: 21.1k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  74.7k|    i = 10 * i +
  310|  74.7k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  74.7k|    ++p;
  312|  74.7k|  }
  313|  70.8k|  UC const * const end_of_integer_part = p;
  314|  70.8k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  70.8k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  70.8k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  70.8k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 70.8k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  70.8k|  int64_t exponent = 0;
  324|  70.8k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 21.1k, False: 49.7k]
  |  Branch (324:49): [True: 72, False: 21.0k]
  ------------------
  325|  70.8k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 72, False: 70.7k]
  ------------------
  326|     72|    ++p;
  327|     72|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|     72|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|     72|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 20, False: 52]
  |  Branch (332:27): [True: 0, False: 20]
  ------------------
  333|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  334|      0|      ++p;
  335|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|      0|    }
  337|     72|    exponent = before - p;
  338|     72|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|     72|    digit_count -= exponent;
  340|     72|  }
  341|  70.8k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  70.8k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 70.8k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  70.8k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 70.8k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  70.8k|  int64_t exp_number = 0;            // explicit exponential part
  351|  70.8k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 55.1k, False: 15.6k]
  ------------------
  352|  70.8k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 21.0k, False: 34.1k]
  ------------------
  353|  70.8k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 56, False: 20.9k]
  |  Branch (353:29): [True: 2.63k, False: 18.3k]
  ------------------
  354|  70.8k|       ||
  355|  70.8k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  68.1k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 68.1k]
  ------------------
  356|  68.1k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  68.1k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  2.69k|    UC const * location_of_e = p;
  359|  2.69k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 56, False: 2.63k]
  |  Branch (359:28): [True: 2.63k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  2.69k|      ++p;
  361|  2.69k|    }
  362|  2.69k|    bool neg_exp = false;
  363|  2.69k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 2.68k, False: 10]
  |  Branch (363:24): [True: 236, False: 2.44k]
  ------------------
  364|    236|      neg_exp = true;
  365|    236|      ++p;
  366|  2.45k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 2.44k, False: 10]
  |  Branch (366:31): [True: 0, False: 2.44k]
  ------------------
  367|      0|      ++p;
  368|      0|    }
  369|  2.69k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 10, False: 2.68k]
  |  Branch (369:24): [True: 420, False: 2.26k]
  ------------------
  370|    430|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 430]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    430|      p = location_of_e;
  376|  2.26k|    } else {
  377|  6.99k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 5.33k, False: 1.66k]
  |  Branch (377:29): [True: 4.73k, False: 600]
  ------------------
  378|  4.73k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  4.73k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 4.73k, False: 0]
  ------------------
  380|  4.73k|          exp_number = 10 * exp_number + digit;
  381|  4.73k|        }
  382|  4.73k|        ++p;
  383|  4.73k|      }
  384|  2.26k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 216, False: 2.04k]
  ------------------
  385|  2.26k|      exponent += exp_number;
  386|  2.26k|    }
  387|  68.1k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  68.1k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 52.5k, False: 15.6k]
  |  Branch (389:44): [True: 0, False: 52.5k]
  ------------------
  390|  68.1k|  }
  391|  70.8k|  answer.lastmatch = p;
  392|  70.8k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  70.8k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 70.8k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|  70.8k|  answer.exponent = exponent;
  439|  70.8k|  answer.mantissa = i;
  440|  70.8k|  return answer;
  441|  70.8k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   103k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   103k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 21.7k, False: 82.1k]
  |  Branch (36:27): [True: 362, False: 81.7k]
  ------------------
   37|   103k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|     72|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|     72|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|     72|    return;
  240|     72|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|  96.3k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   213k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   342k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   342k|    return small_mul(vec, y);
  565|   342k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   526k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   526k|  limb carry = 0;
  284|  2.56M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 2.03M, False: 526k]
  ------------------
  285|  2.03M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  2.03M|  }
  287|   526k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 341k, False: 185k]
  ------------------
  288|   341k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   341k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
  289|   341k|  }
  290|   526k|  return true;
  291|   526k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  4.54M|  constexpr size_t len() const noexcept {
   77|  4.54M|    return length;
   78|  4.54M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  2.03M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  2.03M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  2.03M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  2.03M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  2.03M|  carry = limb(z >> limb_bits);
  235|  2.03M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  2.03M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  5.40M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  5.40M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  5.40M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  5.40M|    return data[index];
   60|  5.40M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   461k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   461k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 461k, False: 0]
  ------------------
   93|   461k|      push_unchecked(value);
   94|   461k|      return true;
   95|   461k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   461k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   563k|  constexpr size_t capacity() const noexcept {
   83|   563k|    return size;
   84|   563k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   542k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   542k|    data[length] = value;
   88|   542k|    length++;
   89|   542k|  }
_ZN10fast_float6bigint3addEm:
  567|   342k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   342k|    return small_add(vec, y);
  569|   342k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   342k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   342k|  return small_add_from(vec, y, 0);
  277|   342k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   342k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   342k|  size_t index = start;
  259|   342k|  limb carry = y;
  260|   342k|  bool overflow;
  261|   506k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 259k, False: 246k]
  |  Branch (261:24): [True: 163k, False: 96.3k]
  ------------------
  262|   163k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   163k|    carry = limb(overflow);
  264|   163k|    index += 1;
  265|   163k|  }
  266|   342k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 96.3k, False: 246k]
  ------------------
  267|  96.3k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  96.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 96.3k]
  |  |  ------------------
  ------------------
  268|  96.3k|  }
  269|   342k|  return true;
  270|   342k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   561k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   561k|  limb z;
  211|       |// gcc and clang
  212|   561k|#if defined(__has_builtin)
  213|   561k|  #if __has_builtin(__builtin_add_overflow)
  214|   561k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   561k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   561k|      return z;
  217|   561k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   561k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  15.0k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  15.0k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  15.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
  611|  15.0k|    return pow2(exp);
  612|  15.0k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  96.3k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  96.3k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  96.3k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|   105k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 8.83k, False: 96.3k]
  ------------------
  582|  8.83k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  8.83k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
  583|  8.83k|      exp -= large_step;
  584|  8.83k|    }
  585|  96.3k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  96.3k|    uint32_t small_step = 27;
  587|  96.3k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   159k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 62.7k, False: 96.3k]
  ------------------
  593|  62.7k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  62.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 62.7k]
  |  |  ------------------
  ------------------
  594|  62.7k|      exp -= small_step;
  595|  62.7k|    }
  596|  96.3k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 76.9k, False: 19.4k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  76.9k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  76.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 76.9k]
  |  |  ------------------
  ------------------
  601|  76.9k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  76.9k|      );
  603|  76.9k|    }
  604|       |
  605|  96.3k|    return true;
  606|  96.3k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  8.83k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  8.83k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 8.83k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  8.83k|  } else {
  368|  8.83k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  8.83k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
  369|  8.83k|  }
  370|  8.83k|  return true;
  371|  8.83k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  8.83k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  8.83k|  limb_span xs = limb_span(x.data, x.len());
  337|  8.83k|  stackvec<size> z(xs);
  338|  8.83k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  8.83k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 8.83k, False: 0]
  ------------------
  341|  8.83k|    limb y0 = y[0];
  342|  8.83k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  8.83k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
  343|  44.1k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 35.3k, False: 8.83k]
  ------------------
  344|  35.3k|      limb yi = y[index];
  345|  35.3k|      stackvec<size> zi;
  346|  35.3k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 35.3k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  35.3k|        zi.set_len(0);
  349|  35.3k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  35.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.3k]
  |  |  ------------------
  ------------------
  350|  35.3k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  35.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.3k]
  |  |  ------------------
  ------------------
  351|  35.3k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  35.3k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  35.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.3k]
  |  |  ------------------
  ------------------
  353|  35.3k|      }
  354|  35.3k|    }
  355|  8.83k|  }
  356|       |
  357|  8.83k|  x.normalize();
  358|  8.83k|  return true;
  359|  8.83k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  8.83k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  8.83k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  8.83k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  8.83k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   137k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   137k|    length = uint16_t(len);
   75|   137k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  44.1k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  44.1k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 44.1k, False: 0]
  ------------------
  108|  44.1k|      extend_unchecked(s);
  109|  44.1k|      return true;
  110|  44.1k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  44.1k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  44.1k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  44.1k|    limb* ptr = data + length;
  102|  44.1k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  44.1k|    set_len(len() + s.len());
  104|  44.1k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  35.3k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  35.3k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 35.3k]
  |  Branch (300:26): [True: 34.9k, False: 396]
  ------------------
  301|  34.9k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  34.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 34.9k]
  |  |  ------------------
  ------------------
  302|  34.9k|  }
  303|       |
  304|  35.3k|  bool carry = false;
  305|   324k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 289k, False: 35.3k]
  ------------------
  306|   289k|    limb xi = x[index + start];
  307|   289k|    limb yi = y[index];
  308|   289k|    bool c1 = false;
  309|   289k|    bool c2 = false;
  310|   289k|    xi = scalar_add(xi, yi, c1);
  311|   289k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 108k, False: 180k]
  ------------------
  312|   108k|      xi = scalar_add(xi, 1, c2);
  313|   108k|    }
  314|   289k|    x[index + start] = xi;
  315|   289k|    carry = c1 | c2;
  316|   289k|  }
  317|       |
  318|       |  // handle overflow
  319|  35.3k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 35.3k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  35.3k|  return true;
  323|  35.3k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  34.9k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  34.9k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 34.9k]
  ------------------
  132|      0|      return false;
  133|  34.9k|    } else {
  134|  34.9k|      resize_unchecked(new_len, value);
  135|  34.9k|      return true;
  136|  34.9k|    }
  137|  34.9k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  34.9k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  34.9k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 34.9k, False: 0]
  ------------------
  120|  34.9k|      size_t count = new_len - len();
  121|  34.9k|      limb* first = data + len();
  122|  34.9k|      limb* last = first + count;
  123|  34.9k|      ::std::fill(first, last, value);
  124|  34.9k|      set_len(new_len);
  125|  34.9k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  34.9k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  90.1k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  90.1k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 90.1k, False: 0]
  |  Branch (152:25): [True: 0, False: 90.1k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  90.1k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   134k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   134k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   134k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   134k|    size_t rindex = length - index - 1;
   69|   134k|    return data[rindex];
   70|   134k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  96.2k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  96.2k|    return shl(exp);
  574|  96.2k|  }
_ZN10fast_float6bigint3shlEm:
  530|  96.2k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  96.2k|    size_t rem = n % limb_bits;
  532|  96.2k|    size_t div = n / limb_bits;
  533|  96.2k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 81.0k, False: 15.2k]
  ------------------
  534|  81.0k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  81.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 81.0k]
  |  |  ------------------
  ------------------
  535|  81.0k|    }
  536|  96.2k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 22.8k, False: 73.3k]
  ------------------
  537|  22.8k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  22.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 22.8k]
  |  |  ------------------
  ------------------
  538|  22.8k|    }
  539|  96.2k|    return true;
  540|  96.2k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  81.0k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  81.0k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  81.0k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  81.0k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  81.0k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  81.0k|    size_t shl = n;
  493|  81.0k|    size_t shr = limb_bits - shl;
  494|  81.0k|    limb prev = 0;
  495|   293k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 212k, False: 81.0k]
  ------------------
  496|   212k|      limb xi = vec[index];
  497|   212k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   212k|      prev = xi;
  499|   212k|    }
  500|       |
  501|  81.0k|    limb carry = prev >> shr;
  502|  81.0k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 23.6k, False: 57.3k]
  ------------------
  503|  23.6k|      return vec.try_push(carry);
  504|  23.6k|    }
  505|  57.3k|    return true;
  506|  81.0k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  22.8k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  22.8k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  22.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  22.8k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 22.8k]
  ------------------
  512|      0|      return false;
  513|  22.8k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 22.8k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  22.8k|      limb* dst = vec.data + n;
  516|  22.8k|      const limb* src = vec.data;
  517|  22.8k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  22.8k|      limb* first = vec.data;
  520|  22.8k|      limb* last = first + n;
  521|  22.8k|      ::std::fill(first, last, 0);
  522|  22.8k|      vec.set_len(n + vec.len());
  523|  22.8k|      return true;
  524|  22.8k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  22.8k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  37.8k|  constexpr bool is_empty() const noexcept {
   80|  37.8k|    return length == 0;
   81|  37.8k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  15.0k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  15.0k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  15.0k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 15.0k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  15.0k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.90k, False: 13.1k]
  ------------------
  435|  1.90k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  13.1k|    } else {
  437|  13.1k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  13.1k|      truncated |= vec.nonzero(2);
  439|  13.1k|      return result;
  440|  13.1k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  15.0k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.90k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.90k|  truncated = false;
  167|  1.90k|  int shl = leading_zeroes(r0);
  168|  1.90k|  return r0 << shl;
  169|  1.90k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  13.1k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  13.1k|  int shl = leading_zeroes(r0);
  174|  13.1k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 13.0k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  13.0k|  } else {
  178|  13.0k|    int shr = 64 - shl;
  179|  13.0k|    truncated = (r1 << shl) != 0;
  180|  13.0k|    return (r0 << shl) | (r1 >> shr);
  181|  13.0k|  }
  182|  13.1k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  13.1k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  13.1k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 834, False: 12.3k]
  ------------------
  143|    834|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 780, False: 54]
  ------------------
  144|    780|        return true;
  145|    780|      }
  146|     54|      index++;
  147|     54|    }
  148|  12.3k|    return false;
  149|  13.1k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  15.0k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  15.0k|    int lz = ctlz();
  560|  15.0k|    return int(limb_bits * vec.len()) - lz;
  561|  15.0k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  15.0k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  15.0k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 15.0k]
  ------------------
  545|      0|      return 0;
  546|  15.0k|    } else {
  547|  15.0k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  15.0k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  15.0k|    }
  555|  15.0k|  }
_ZN10fast_float6bigintC2Em:
  418|  81.3k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  81.3k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  81.3k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  81.3k|    vec.normalize();
  426|  81.3k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  81.3k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  81.3k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 81.3k]
  ------------------
  464|      0|      return 1;
  465|  81.3k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 81.3k]
  ------------------
  466|      0|      return -1;
  467|  81.3k|    } else {
  468|   160k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 151k, False: 9.08k]
  ------------------
  469|   151k|        limb xi = vec[index - 1];
  470|   151k|        limb yi = other.vec[index - 1];
  471|   151k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 11.6k, False: 139k]
  ------------------
  472|  11.6k|          return 1;
  473|   139k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 60.5k, False: 79.3k]
  ------------------
  474|  60.5k|          return -1;
  475|  60.5k|        }
  476|   151k|      }
  477|  9.08k|      return 0;
  478|  81.3k|    }
  479|  81.3k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   303k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   303k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   303k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   303k|    return data[index];
   64|   303k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   436k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   436k|  adjusted_mantissa answer;
   96|   436k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 12.1k, False: 424k]
  |  Branch (96:19): [True: 1.88k, False: 422k]
  ------------------
   97|  14.0k|    answer.power2 = 0;
   98|  14.0k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  14.0k|    return answer;
  101|  14.0k|  }
  102|   422k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 9.11k, False: 413k]
  ------------------
  103|       |    // we want to get infinity:
  104|  9.11k|    answer.power2 = binary::infinite_power();
  105|  9.11k|    answer.mantissa = 0;
  106|  9.11k|    return answer;
  107|  9.11k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   413k|  int lz = leading_zeroes(w);
  112|   413k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   413k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   413k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   413k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   413k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   413k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 865, False: 412k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    865|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 829]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    829|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    829|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    829|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    829|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 829, False: 0]
  ------------------
  156|    829|    return answer;
  157|    865|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   412k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 155k, False: 257k]
  |  Branch (162:30): [True: 154k, False: 956]
  |  Branch (162:77): [True: 137k, False: 17.0k]
  ------------------
  163|   412k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 25.0k, False: 112k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  25.0k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 11.5k, False: 13.5k]
  ------------------
  168|  11.5k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  11.5k|    }
  170|  25.0k|  }
  171|       |
  172|   412k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   412k|  answer.mantissa >>= 1;
  174|   412k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 16.4k, False: 396k]
  ------------------
  175|  16.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  16.4k|    answer.power2++; // undo previous addition
  177|  16.4k|  }
  178|       |
  179|   412k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   412k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.85k, False: 409k]
  ------------------
  181|  2.85k|    answer.power2 = binary::infinite_power();
  182|  2.85k|    answer.mantissa = 0;
  183|  2.85k|  }
  184|   412k|  return answer;
  185|   413k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   456k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   456k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   456k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   456k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   456k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   456k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   456k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 72.2k, False: 384k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  72.2k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  72.2k|    firstproduct.low += secondproduct.high;
   35|  72.2k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 59.6k, False: 12.6k]
  ------------------
   36|  59.6k|      firstproduct.high++;
   37|  59.6k|    }
   38|  72.2k|  }
   39|   456k|  return firstproduct;
   40|   456k|}
_ZN10fast_float6detail5powerEi:
   58|   906k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   906k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   906k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  43.3k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  43.3k|  int lz = leading_zeroes(w);
   82|  43.3k|  w <<= lz;
   83|  43.3k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  43.3k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  43.3k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  43.3k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  43.3k|  int hilz = int(w >> 63) ^ 1;
   69|  43.3k|  adjusted_mantissa answer;
   70|  43.3k|  answer.mantissa = w << hilz;
   71|  43.3k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  43.3k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  43.3k|  return answer;
   74|  43.3k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   408k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   408k|  adjusted_mantissa answer;
   96|   408k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 6.88k, False: 401k]
  |  Branch (96:19): [True: 364, False: 401k]
  ------------------
   97|  7.25k|    answer.power2 = 0;
   98|  7.25k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  7.25k|    return answer;
  101|  7.25k|  }
  102|   401k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.52k, False: 396k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.52k|    answer.power2 = binary::infinite_power();
  105|  4.52k|    answer.mantissa = 0;
  106|  4.52k|    return answer;
  107|  4.52k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   396k|  int lz = leading_zeroes(w);
  112|   396k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   396k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   396k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   396k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   396k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   396k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 13.8k, False: 382k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  13.8k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 13.7k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  13.7k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  13.7k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  13.7k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  13.7k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 13.7k, False: 0]
  ------------------
  156|  13.7k|    return answer;
  157|  13.8k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   382k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 119k, False: 262k]
  |  Branch (162:30): [True: 70.3k, False: 49.4k]
  |  Branch (162:77): [True: 62.2k, False: 8.16k]
  ------------------
  163|   382k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 22.7k, False: 39.5k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  22.7k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 14.9k, False: 7.78k]
  ------------------
  168|  14.9k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  14.9k|    }
  170|  22.7k|  }
  171|       |
  172|   382k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   382k|  answer.mantissa >>= 1;
  174|   382k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 12.9k, False: 369k]
  ------------------
  175|  12.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  12.9k|    answer.power2++; // undo previous addition
  177|  12.9k|  }
  178|       |
  179|   382k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   382k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 284, False: 382k]
  ------------------
  181|    284|    answer.power2 = binary::infinite_power();
  182|    284|    answer.mantissa = 0;
  183|    284|  }
  184|   382k|  return answer;
  185|   396k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   449k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   449k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   449k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   449k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   449k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   449k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   449k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 114k, False: 334k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   114k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   114k|    firstproduct.low += secondproduct.high;
   35|   114k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 56.6k, False: 58.0k]
  ------------------
   36|  56.6k|      firstproduct.high++;
   37|  56.6k|    }
   38|   114k|  }
   39|   449k|  return firstproduct;
   40|   449k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  52.9k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  52.9k|  int lz = leading_zeroes(w);
   82|  52.9k|  w <<= lz;
   83|  52.9k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  52.9k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  52.9k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  52.9k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  52.9k|  int hilz = int(w >> 63) ^ 1;
   69|  52.9k|  adjusted_mantissa answer;
   70|  52.9k|  answer.mantissa = w << hilz;
   71|  52.9k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  52.9k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  52.9k|  return answer;
   74|  52.9k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  43.3k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  43.3k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  43.3k|  int32_t sci_exp = scientific_exponent(num);
  411|  43.3k|  size_t max_digits = binary_format<T>::max_digits();
  412|  43.3k|  size_t digits = 0;
  413|  43.3k|  bigint bigmant;
  414|  43.3k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  43.3k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  43.3k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 878, False: 42.5k]
  ------------------
  418|    878|    return positive_digit_comp<T>(bigmant, exponent);
  419|  42.5k|  } else {
  420|  42.5k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  42.5k|  }
  422|  43.3k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  96.3k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  96.3k|  uint64_t mantissa = num.mantissa;
   30|  96.3k|  int32_t exponent = int32_t(num.exponent);
   31|   481k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 385k, False: 96.3k]
  ------------------
   32|   385k|    mantissa /= 10000;
   33|   385k|    exponent += 4;
   34|   385k|  }
   35|   192k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 96.3k, False: 96.3k]
  ------------------
   36|  96.3k|    mantissa /= 100;
   37|  96.3k|    exponent += 2;
   38|  96.3k|  }
   39|  96.3k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 96.3k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  96.3k|  return exponent;
   44|  96.3k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  96.3k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  96.3k|  size_t counter = 0;
  245|  96.3k|  digits = 0;
  246|  96.3k|  limb value = 0;
  247|  96.3k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  96.3k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  96.3k|  UC const * p = num.integer.ptr;
  255|  96.3k|  UC const * pend = p + num.integer.len();
  256|  96.3k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   209k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 113k, False: 95.9k]
  ------------------
  259|   214k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 128k, False: 86.6k]
  |  Branch (259:45): [True: 101k, False: 26.8k]
  |  Branch (259:70): [True: 100k, False: 414]
  ------------------
  260|   100k|      parse_eight_digits(p, value, counter, digits);
  261|   100k|    }
  262|   417k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 384k, False: 33.1k]
  |  Branch (262:30): [True: 304k, False: 80.2k]
  |  Branch (262:43): [True: 304k, False: 414]
  ------------------
  263|   304k|      parse_one_digit(p, value, counter, digits);
  264|   304k|    }
  265|   113k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 414, False: 113k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    414|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    414|      bool truncated = is_truncated(p, pend);
  269|    414|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 382, False: 32]
  ------------------
  270|    382|        truncated |= is_truncated(num.fraction);
  271|    382|      }
  272|    414|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 226, False: 188]
  ------------------
  273|    226|        round_up_bigint(result, digits);
  274|    226|      }
  275|    414|      return;
  276|   113k|    } else {
  277|   113k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   113k|      counter = 0;
  279|   113k|      value = 0;
  280|   113k|    }
  281|   113k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  95.9k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 81.8k, False: 14.0k]
  ------------------
  285|  81.8k|    p = num.fraction.ptr;
  286|  81.8k|    pend = p + num.fraction.len();
  287|  81.8k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 15.6k, False: 66.2k]
  ------------------
  288|  15.6k|      skip_zeros(p, pend);
  289|  15.6k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   299k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 225k, False: 74.8k]
  ------------------
  292|   567k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 470k, False: 96.6k]
  |  Branch (292:47): [True: 344k, False: 126k]
  |  Branch (292:72): [True: 342k, False: 2.30k]
  ------------------
  293|   342k|        parse_eight_digits(p, value, counter, digits);
  294|   342k|      }
  295|   934k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 788k, False: 146k]
  |  Branch (295:32): [True: 714k, False: 73.8k]
  |  Branch (295:45): [True: 709k, False: 4.72k]
  ------------------
  296|   709k|        parse_one_digit(p, value, counter, digits);
  297|   709k|      }
  298|   225k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 7.01k, False: 218k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  7.01k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  7.01k|        bool truncated = is_truncated(p, pend);
  302|  7.01k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.79k, False: 3.22k]
  ------------------
  303|  3.79k|          round_up_bigint(result, digits);
  304|  3.79k|        }
  305|  7.01k|        return;
  306|   218k|      } else {
  307|   218k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   218k|        counter = 0;
  309|   218k|        value = 0;
  310|   218k|      }
  311|   225k|    }
  312|  81.8k|  }
  313|       |
  314|  88.9k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 88.9k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  88.9k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   111k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   111k|  uint64_t val;
  161|   184k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 134k, False: 49.4k]
  ------------------
  162|   134k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   134k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 62.5k, False: 72.0k]
  ------------------
  164|  62.5k|      break;
  165|  62.5k|    }
  166|  72.0k|    first += int_cmp_len<UC>();
  167|  72.0k|  }
  168|   276k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 260k, False: 15.6k]
  ------------------
  169|   260k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 96.3k, False: 164k]
  ------------------
  170|  96.3k|      break;
  171|  96.3k|    }
  172|   164k|    first++;
  173|   164k|  }
  174|   111k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   443k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   443k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   443k|  p += 8;
  210|   443k|  counter += 8;
  211|   443k|  count += 8;
  212|   443k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|  1.01M|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|  1.01M|  value = value * 10 + limb(*p - UC('0'));
  218|  1.01M|  p++;
  219|  1.01M|  counter++;
  220|  1.01M|  count++;
  221|  1.01M|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   342k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   342k|  big.mul(power);
  226|   342k|  big.add(value);
  227|   342k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  7.81k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  7.81k|  uint64_t val;
  183|  19.0k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 13.1k, False: 5.94k]
  ------------------
  184|  13.1k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  13.1k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.87k, False: 11.2k]
  ------------------
  186|  1.87k|      return true;
  187|  1.87k|    }
  188|  11.2k|    first += int_cmp_len<UC>();
  189|  11.2k|  }
  190|  9.95k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 6.23k, False: 3.72k]
  ------------------
  191|  6.23k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.22k, False: 4.01k]
  ------------------
  192|  2.22k|      return true;
  193|  2.22k|    }
  194|  4.01k|    ++first;
  195|  4.01k|  }
  196|  3.72k|  return false;
  197|  5.94k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    382|bool is_truncated(span<const UC> s) noexcept {
  201|    382|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    382|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  4.01k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  4.01k|  add_native(big, 10, 1);
  234|  4.01k|  count++;
  235|  4.01k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    878|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    878|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    878|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    878|  adjusted_mantissa answer;
  324|    878|  bool truncated;
  325|    878|  answer.mantissa = bigmant.hi64(truncated);
  326|    878|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    878|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
  334|       |
  335|    878|  return answer;
  336|    878|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    878|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    878|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    878|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 878]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    878|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    878|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 878]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    878|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    878|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 878]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    878|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    878|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    878|  const uint64_t mask
  125|    878|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 878]
  ------------------
  126|    878|    ? UINT64_MAX
  127|    878|    : (uint64_t(1) << shift) - 1;
  128|    878|  const uint64_t halfway
  129|    878|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 878]
  ------------------
  130|    878|    ? 0
  131|    878|    : uint64_t(1) << (shift - 1);
  132|    878|  uint64_t truncated_bits = am.mantissa & mask;
  133|    878|  bool is_above = truncated_bits > halfway;
  134|    878|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    878|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 878]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    878|  } else {
  140|    878|    am.mantissa >>= shift;
  141|    878|  }
  142|    878|  am.power2 += shift;
  143|       |
  144|    878|  bool is_odd = (am.mantissa & 1) == 1;
  145|    878|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    878|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 86, False: 792]
  |  Branch (331:27): [True: 644, False: 148]
  |  Branch (331:41): [True: 68, False: 576]
  |  Branch (331:56): [True: 94, False: 630]
  |  Branch (331:66): [True: 32, False: 62]
  ------------------
  332|    878|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  42.5k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  42.5k|  bigint& real_digits = bigmant;
  347|  42.5k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  42.5k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  42.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  42.5k|  T b;
  354|  42.5k|  to_float(false, am_b, b);
  355|  42.5k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  42.5k|  bigint theor_digits(theor.mantissa);
  357|  42.5k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  42.5k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  42.5k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  42.5k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 42.5k, False: 0]
  ------------------
  363|  42.5k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  42.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  42.5k|  }
  365|  42.5k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 42.5k, False: 0]
  ------------------
  366|  42.5k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  42.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  42.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  42.5k|  int ord = real_digits.compare(theor_digits);
  373|  42.5k|  adjusted_mantissa answer = am;
  374|  42.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  42.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  42.5k|      (void)_;  // not needed, since we've done our comparison
  377|  42.5k|      (void)__; // not needed, since we've done our comparison
  378|  42.5k|      if (ord > 0) {
  379|  42.5k|        return true;
  380|  42.5k|      } else if (ord < 0) {
  381|  42.5k|        return false;
  382|  42.5k|      } else {
  383|  42.5k|        return is_odd;
  384|  42.5k|      }
  385|  42.5k|    });
  386|  42.5k|  });
  387|       |
  388|  42.5k|  return answer;
  389|  42.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  42.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  42.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  42.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 42.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  42.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  42.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 42.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  42.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  42.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 42.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  42.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  42.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  81.3k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  81.3k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 81.3k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  81.3k|  } else {
  153|  81.3k|    am.mantissa >>= shift;
  154|  81.3k|  }
  155|  81.3k|  am.power2 += shift;
  156|  81.3k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  42.5k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  42.5k|  adjusted_mantissa am = to_extended(value);
   84|  42.5k|  am.mantissa <<= 1;
   85|  42.5k|  am.mantissa += 1;
   86|  42.5k|  am.power2 -= 1;
   87|  42.5k|  return am;
   88|  42.5k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  42.5k|adjusted_mantissa to_extended(T value) noexcept {
   50|  42.5k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  42.5k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  42.5k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  42.5k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  42.5k|  adjusted_mantissa am;
   56|  42.5k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  42.5k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  42.5k|  ::memcpy(&bits, &value, sizeof(T));
   62|  42.5k|#endif
   63|  42.5k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 42.5k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  42.5k|  } else {
   68|       |    // normal
   69|  42.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  42.5k|    am.power2 -= bias;
   71|  42.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  42.5k|  }
   73|       |
   74|  42.5k|  return am;
   75|  42.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  42.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  42.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  42.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 42.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  42.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  42.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 42.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  42.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  42.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 42.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  42.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  42.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  42.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  42.5k|      (void)_;  // not needed, since we've done our comparison
  377|  42.5k|      (void)__; // not needed, since we've done our comparison
  378|  42.5k|      if (ord > 0) {
  379|  42.5k|        return true;
  380|  42.5k|      } else if (ord < 0) {
  381|  42.5k|        return false;
  382|  42.5k|      } else {
  383|  42.5k|        return is_odd;
  384|  42.5k|      }
  385|  42.5k|    });
  386|  42.5k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  42.5k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  42.5k|  const uint64_t mask
  125|  42.5k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 42.5k]
  ------------------
  126|  42.5k|    ? UINT64_MAX
  127|  42.5k|    : (uint64_t(1) << shift) - 1;
  128|  42.5k|  const uint64_t halfway
  129|  42.5k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 42.5k]
  ------------------
  130|  42.5k|    ? 0
  131|  42.5k|    : uint64_t(1) << (shift - 1);
  132|  42.5k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  42.5k|  bool is_above = truncated_bits > halfway;
  134|  42.5k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  42.5k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 42.5k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  42.5k|  } else {
  140|  42.5k|    am.mantissa >>= shift;
  141|  42.5k|  }
  142|  42.5k|  am.power2 += shift;
  143|       |
  144|  42.5k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  42.5k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  42.5k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  42.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  42.5k|      (void)_;  // not needed, since we've done our comparison
  377|  42.5k|      (void)__; // not needed, since we've done our comparison
  378|  42.5k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 536, False: 41.9k]
  ------------------
  379|    536|        return true;
  380|  41.9k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 33.9k, False: 8.06k]
  ------------------
  381|  33.9k|        return false;
  382|  33.9k|      } else {
  383|  8.06k|        return is_odd;
  384|  8.06k|      }
  385|  42.5k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  52.9k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  52.9k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  52.9k|  int32_t sci_exp = scientific_exponent(num);
  411|  52.9k|  size_t max_digits = binary_format<T>::max_digits();
  412|  52.9k|  size_t digits = 0;
  413|  52.9k|  bigint bigmant;
  414|  52.9k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  52.9k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  52.9k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 14.1k, False: 38.8k]
  ------------------
  418|  14.1k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  38.8k|  } else {
  420|  38.8k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  38.8k|  }
  422|  52.9k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  14.1k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  14.1k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  14.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  14.1k|  adjusted_mantissa answer;
  324|  14.1k|  bool truncated;
  325|  14.1k|  answer.mantissa = bigmant.hi64(truncated);
  326|  14.1k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  14.1k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  14.1k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.1k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.1k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.1k|    });
  333|  14.1k|  });
  334|       |
  335|  14.1k|  return answer;
  336|  14.1k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  14.1k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  14.1k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  14.1k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 14.1k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  14.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  14.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.01k, False: 13.1k]
  ------------------
  109|  1.01k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.01k|    am.power2++;
  111|  1.01k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  14.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  14.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 14.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  14.1k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  14.1k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.1k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.1k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.1k|    });
  333|  14.1k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  14.1k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  14.1k|  const uint64_t mask
  125|  14.1k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 14.1k]
  ------------------
  126|  14.1k|    ? UINT64_MAX
  127|  14.1k|    : (uint64_t(1) << shift) - 1;
  128|  14.1k|  const uint64_t halfway
  129|  14.1k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 14.1k]
  ------------------
  130|  14.1k|    ? 0
  131|  14.1k|    : uint64_t(1) << (shift - 1);
  132|  14.1k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  14.1k|  bool is_above = truncated_bits > halfway;
  134|  14.1k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  14.1k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 14.1k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  14.1k|  } else {
  140|  14.1k|    am.mantissa >>= shift;
  141|  14.1k|  }
  142|  14.1k|  am.power2 += shift;
  143|       |
  144|  14.1k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  14.1k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  14.1k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  14.1k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.1k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.16k, False: 12.9k]
  |  Branch (331:27): [True: 12.0k, False: 972]
  |  Branch (331:41): [True: 3.86k, False: 8.14k]
  |  Branch (331:56): [True: 364, False: 8.74k]
  |  Branch (331:66): [True: 82, False: 282]
  ------------------
  332|  14.1k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  38.8k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  38.8k|  bigint& real_digits = bigmant;
  347|  38.8k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  38.8k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  38.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  38.8k|  T b;
  354|  38.8k|  to_float(false, am_b, b);
  355|  38.8k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  38.8k|  bigint theor_digits(theor.mantissa);
  357|  38.8k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  38.8k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  38.8k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  38.8k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 38.8k, False: 0]
  ------------------
  363|  38.8k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  38.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  38.8k|  }
  365|  38.8k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 5.39k, False: 33.4k]
  ------------------
  366|  5.39k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  5.39k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  33.4k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 33.2k, False: 130]
  ------------------
  368|  33.2k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  33.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  33.2k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  38.8k|  int ord = real_digits.compare(theor_digits);
  373|  38.8k|  adjusted_mantissa answer = am;
  374|  38.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  38.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  38.8k|      (void)_;  // not needed, since we've done our comparison
  377|  38.8k|      (void)__; // not needed, since we've done our comparison
  378|  38.8k|      if (ord > 0) {
  379|  38.8k|        return true;
  380|  38.8k|      } else if (ord < 0) {
  381|  38.8k|        return false;
  382|  38.8k|      } else {
  383|  38.8k|        return is_odd;
  384|  38.8k|      }
  385|  38.8k|    });
  386|  38.8k|  });
  387|       |
  388|  38.8k|  return answer;
  389|  38.8k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  38.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  38.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  38.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 182, False: 38.6k]
  ------------------
   96|       |    // have a denormal float
   97|    182|    int32_t shift = -am.power2 + 1;
   98|    182|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    182|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 182, False: 0]
  ------------------
  101|    182|    return;
  102|    182|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  38.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  38.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 38.6k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  38.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  38.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 38.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  38.6k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  38.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  38.8k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  38.8k|  adjusted_mantissa am = to_extended(value);
   84|  38.8k|  am.mantissa <<= 1;
   85|  38.8k|  am.mantissa += 1;
   86|  38.8k|  am.power2 -= 1;
   87|  38.8k|  return am;
   88|  38.8k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  38.8k|adjusted_mantissa to_extended(T value) noexcept {
   50|  38.8k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  38.8k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  38.8k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  38.8k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  38.8k|  adjusted_mantissa am;
   56|  38.8k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  38.8k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  38.8k|  ::memcpy(&bits, &value, sizeof(T));
   62|  38.8k|#endif
   63|  38.8k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 182, False: 38.6k]
  ------------------
   64|       |    // denormal
   65|    182|    am.power2 = 1 - bias;
   66|    182|    am.mantissa = bits & mantissa_mask;
   67|  38.6k|  } else {
   68|       |    // normal
   69|  38.6k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  38.6k|    am.power2 -= bias;
   71|  38.6k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  38.6k|  }
   73|       |
   74|  38.8k|  return am;
   75|  38.8k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  38.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  38.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  38.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 182, False: 38.6k]
  ------------------
   96|       |    // have a denormal float
   97|    182|    int32_t shift = -am.power2 + 1;
   98|    182|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    182|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 182, False: 0]
  ------------------
  101|    182|    return;
  102|    182|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  38.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  38.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 118, False: 38.5k]
  ------------------
  109|    118|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    118|    am.power2++;
  111|    118|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  38.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  38.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 38.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  38.6k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  38.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  38.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  38.8k|      (void)_;  // not needed, since we've done our comparison
  377|  38.8k|      (void)__; // not needed, since we've done our comparison
  378|  38.8k|      if (ord > 0) {
  379|  38.8k|        return true;
  380|  38.8k|      } else if (ord < 0) {
  381|  38.8k|        return false;
  382|  38.8k|      } else {
  383|  38.8k|        return is_odd;
  384|  38.8k|      }
  385|  38.8k|    });
  386|  38.8k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  38.8k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  38.8k|  const uint64_t mask
  125|  38.8k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 38.8k]
  ------------------
  126|  38.8k|    ? UINT64_MAX
  127|  38.8k|    : (uint64_t(1) << shift) - 1;
  128|  38.8k|  const uint64_t halfway
  129|  38.8k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 38.8k]
  ------------------
  130|  38.8k|    ? 0
  131|  38.8k|    : uint64_t(1) << (shift - 1);
  132|  38.8k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  38.8k|  bool is_above = truncated_bits > halfway;
  134|  38.8k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  38.8k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 38.8k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  38.8k|  } else {
  140|  38.8k|    am.mantissa >>= shift;
  141|  38.8k|  }
  142|  38.8k|  am.power2 += shift;
  143|       |
  144|  38.8k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  38.8k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  38.8k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  38.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  38.8k|      (void)_;  // not needed, since we've done our comparison
  377|  38.8k|      (void)__; // not needed, since we've done our comparison
  378|  38.8k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 11.1k, False: 27.6k]
  ------------------
  379|  11.1k|        return true;
  380|  27.6k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 26.6k, False: 1.01k]
  ------------------
  381|  26.6k|        return false;
  382|  26.6k|      } else {
  383|  1.01k|        return is_odd;
  384|  1.01k|      }
  385|  38.8k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  4.38M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  2.56M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   665k|  constexpr size_t len() const noexcept {
  238|   665k|    return length;
  239|   665k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.08M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.08M|  return -10;
  469|  1.08M|#endif
  470|  1.08M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|  1.01M|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|  1.01M|  return 10;
  517|  1.01M|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   855k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   855k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   855k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.86M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.86M|  return 23;
  477|  2.86M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   786k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   786k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   786k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|  1.03M|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   424k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   424k|  return -65;
  568|   424k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   422k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   422k|  return 38;
  559|   422k|}
_ZN10fast_float14leading_zeroesEm:
  268|   936k|int leading_zeroes(uint64_t input_num) {
  269|   936k|  assert(input_num > 0);
  270|   936k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   936k|  return __builtin_clzll(input_num);
  285|   936k|#endif
  286|   936k|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.09M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.09M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.09M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.09M|  answer.low = uint64_t(r);
  337|  1.09M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.09M|  return answer;
  342|  1.09M|}
_ZN10fast_float8value128C2Ev:
  251|  1.09M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   500k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   500k|  return -127;
  500|   500k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   155k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   155k|  return -17;
  493|   155k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   154k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   154k|  return 10;
  485|   154k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   291k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   291k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 96.3k, False: 194k]
  |  Branch (352:38): [True: 0, False: 194k]
  ------------------
  353|   291k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  43.3k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  43.3k|  return 114;
  575|  43.3k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   286k|{
  650|   286k|    return sizeof(uint64_t) / sizeof(UC);
  651|   286k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   147k|{
  644|   147k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   147k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   147k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   149k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   589k|  constexpr size_t len() const noexcept {
  238|   589k|    return length;
  239|   589k|  }
_ZNK10fast_float4spanImEixEm:
  241|   333k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   333k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   333k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   333k|    return ptr[index];
  244|   333k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   339k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   339k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   339k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   339k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   339k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   339k|  ::memcpy(&value, &word, sizeof(T));
  615|   339k|#endif
  616|   339k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   339k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   805k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   805k|  return 0xFF;
  507|   805k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.19M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   141k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|  70.9k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|  70.8k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.17M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.17M|  return -22;
  461|  1.17M|#endif
  462|  1.17M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.14M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.14M|  return 22;
  514|  1.14M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   942k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   942k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   942k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.87M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.87M|  return 52;
  474|  2.87M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   923k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   923k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   923k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   401k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   401k|  return -342;
  564|   401k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   401k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   401k|  return 308;
  555|   401k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   502k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   502k|  return -1023;
  497|   502k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   119k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   119k|  return -4;
  489|   119k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  70.3k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  70.3k|  return 23;
  481|  70.3k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  52.9k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  52.9k|  return 769;
  572|  52.9k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   295k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   295k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   295k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   295k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   295k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   295k|  ::memcpy(&value, &word, sizeof(T));
  615|   295k|#endif
  616|   295k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   295k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   735k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   735k|  return 0x7FF;
  504|   735k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.04M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.04M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.04M|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  1.04M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.04M|    return from_chars_advanced(first, last, value, options);
  143|  1.04M|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.04M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.04M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.04M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.04M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.04M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.04M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.04M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.04M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.04M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.04M|  answer.ec = std::errc(); // be optimistic
  221|  1.04M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.04M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 984k, False: 63.4k]
  |  Branch (227:69): [True: 914k, False: 70.5k]
  |  Branch (227:131): [True: 821k, False: 92.7k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   821k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 821k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   821k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 751k, False: 69.7k]
  ------------------
  239|   751k|        value = T(pns.mantissa);
  240|   751k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 12.2k, False: 739k]
  ------------------
  241|   739k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   751k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 751k]
  ------------------
  243|   751k|        return answer;
  244|   751k|      }
  245|   821k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   821k|  }
  262|   296k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   296k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 139k, False: 157k]
  |  Branch (263:29): [True: 139k, False: 0]
  ------------------
  264|   139k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 43.3k, False: 95.8k]
  ------------------
  265|  43.3k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  43.3k|    }
  267|   139k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   296k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 43.3k, False: 253k]
  ------------------
  271|   296k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   296k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 284k, False: 12.1k]
  |  Branch (273:29): [True: 21.2k, False: 263k]
  |  Branch (273:49): [True: 1.56k, False: 19.6k]
  |  Branch (273:68): [True: 8.31k, False: 286k]
  ------------------
  274|  9.88k|    answer.ec = std::errc::result_out_of_range;
  275|  9.88k|  }
  276|   296k|  return answer;
  277|  1.04M|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.79M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.79M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.79M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.79M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.79M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.79M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  35.4k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  35.4k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  35.4k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  35.4k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  35.4k|    return from_chars_advanced(first, last, value, options);
  143|  35.4k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  35.4k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  35.4k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  35.4k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  35.4k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  35.4k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 35.4k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  35.4k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  35.4k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 35.4k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  35.4k|  answer.ec = std::errc(); // be optimistic
  221|  35.4k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  35.4k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 35.3k, False: 72]
  |  Branch (227:69): [True: 34.6k, False: 670]
  |  Branch (227:131): [True: 34.6k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  34.6k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 34.6k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  34.6k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 34.6k, False: 0]
  ------------------
  239|  34.6k|        value = T(pns.mantissa);
  240|  34.6k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36, False: 34.6k]
  ------------------
  241|  34.6k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  34.6k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 34.6k]
  ------------------
  243|  34.6k|        return answer;
  244|  34.6k|      }
  245|  34.6k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  34.6k|  }
  262|    742|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    742|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 742]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    742|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 742]
  ------------------
  271|    742|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    742|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 724, False: 18]
  |  Branch (273:29): [True: 646, False: 78]
  |  Branch (273:49): [True: 54, False: 592]
  |  Branch (273:68): [True: 592, False: 96]
  ------------------
  274|    646|    answer.ec = std::errc::result_out_of_range;
  275|    646|  }
  276|    742|  return answer;
  277|  35.4k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.14M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.14M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.14M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.14M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.14M|    return from_chars_advanced(first, last, value, options);
  143|  1.14M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.14M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.14M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.14M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.14M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.14M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.14M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.14M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.14M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.14M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.14M|  answer.ec = std::errc(); // be optimistic
  221|  1.14M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.14M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.10M, False: 35.8k]
  |  Branch (227:69): [True: 1.03M, False: 73.3k]
  |  Branch (227:131): [True: 908k, False: 127k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   908k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 908k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   908k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 888k, False: 19.4k]
  ------------------
  239|   888k|        value = T(pns.mantissa);
  240|   888k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 46.0k, False: 842k]
  ------------------
  241|   842k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   888k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 888k]
  ------------------
  243|   888k|        return answer;
  244|   888k|      }
  245|   908k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   908k|  }
  262|   255k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   255k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 151k, False: 103k]
  |  Branch (263:29): [True: 151k, False: 0]
  ------------------
  264|   151k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 52.9k, False: 98.9k]
  ------------------
  265|  52.9k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  52.9k|    }
  267|   151k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   255k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 52.9k, False: 202k]
  ------------------
  271|   255k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   255k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 248k, False: 6.87k]
  |  Branch (273:29): [True: 11.4k, False: 237k]
  |  Branch (273:49): [True: 420, False: 11.0k]
  |  Branch (273:68): [True: 3.92k, False: 251k]
  ------------------
  274|  4.34k|    answer.ec = std::errc::result_out_of_range;
  275|  4.34k|  }
  276|   255k|  return answer;
  277|  1.14M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  35.4k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  35.4k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  35.4k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  35.4k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  35.4k|    return from_chars_advanced(first, last, value, options);
  143|  35.4k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  35.4k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  35.4k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  35.4k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  35.4k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  35.4k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 35.4k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  35.4k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  35.4k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 35.4k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  35.4k|  answer.ec = std::errc(); // be optimistic
  221|  35.4k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  35.4k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 35.3k, False: 72]
  |  Branch (227:69): [True: 34.7k, False: 628]
  |  Branch (227:131): [True: 34.7k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  34.7k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 34.7k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  34.7k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 34.7k, False: 0]
  ------------------
  239|  34.7k|        value = T(pns.mantissa);
  240|  34.7k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36, False: 34.6k]
  ------------------
  241|  34.6k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  34.7k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 34.7k]
  ------------------
  243|  34.7k|        return answer;
  244|  34.7k|      }
  245|  34.7k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  34.7k|  }
  262|    700|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    700|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 700]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    700|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 700]
  ------------------
  271|    700|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    700|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 682, False: 18]
  |  Branch (273:29): [True: 368, False: 314]
  |  Branch (273:49): [True: 0, False: 368]
  |  Branch (273:68): [True: 368, False: 332]
  ------------------
  274|    368|    answer.ec = std::errc::result_out_of_range;
  275|    368|  }
  276|    700|  return answer;
  277|  35.4k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  7.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   792k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   792k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  6.62M|{
 3803|  6.62M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|  6.62M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|  6.62M|    }
 3806|  6.62M|    else if constexpr (sizeof(U) == 2) {
 3807|  6.62M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|  6.62M|    }
 3809|  6.62M|    else {
 3810|       |        // utf-32
 3811|  6.62M|        static_assert(sizeof(U) == 4);
 3812|  6.62M|        SCN_UNUSED(ch);
 3813|  6.62M|        return 1;
 3814|  6.62M|    }
 3815|  6.62M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  6.62M|{
 3767|  6.62M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  6.62M|    SCN_GCC_COMPAT_PUSH
 3770|  6.62M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  6.62M|    constexpr char lengths[] =
 3772|  6.62M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  6.62M|        "\1\1\1\1\1\1\1\1"
 3774|  6.62M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  6.62M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  6.62M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  6.62M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  6.62M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  6.62M|    SCN_GCC_COMPAT_POP
 3781|  6.62M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  6.22M|{
 4009|  6.22M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  6.22M|        return decode_utf8_code_point_exhaustive(input);
 4011|  6.22M|    }
 4012|  6.22M|    else if constexpr (sizeof(CharT) == 2) {
 4013|  6.22M|        return decode_utf16_code_point_exhaustive(input);
 4014|  6.22M|    }
 4015|  6.22M|    else {
 4016|  6.22M|        SCN_EXPECT(input.size() == 1);
 4017|  6.22M|        auto cp = static_cast<char32_t>(input.front());
 4018|  6.22M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|  6.22M|            return invalid_code_point;
 4020|  6.22M|        }
 4021|  6.22M|        return cp;
 4022|  6.22M|    }
 4023|  6.22M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  6.22M|{
 3822|  6.22M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  6.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  6.22M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  6.22M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  6.22M|    };
 3827|       |
 3828|  6.22M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 5.95M, False: 276k]
  ------------------
 3829|  5.95M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 831, False: 5.94M]
  ------------------
 3830|    831|            SCN_UNLIKELY_ATTR
 3831|    831|            return invalid_code_point;
 3832|    831|        }
 3833|  5.94M|        return static_cast<char32_t>(input[0]);
 3834|  5.95M|    }
 3835|       |
 3836|   276k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 243k, False: 32.5k]
  ------------------
 3837|   243k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 145, False: 243k]
  ------------------
 3838|    145|            SCN_UNLIKELY_ATTR
 3839|    145|            return invalid_code_point;
 3840|    145|        }
 3841|   243k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 52.7k, False: 190k]
  ------------------
 3842|  52.7k|            SCN_UNLIKELY_ATTR
 3843|  52.7k|            return invalid_code_point;
 3844|  52.7k|        }
 3845|       |
 3846|   190k|        char32_t cp{};
 3847|   190k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   190k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   190k|        return cp;
 3850|   243k|    }
 3851|       |
 3852|  32.5k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 14.3k, False: 18.1k]
  ------------------
 3853|  14.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 134, False: 14.2k]
  ------------------
 3854|    134|            SCN_UNLIKELY_ATTR
 3855|    134|            return invalid_code_point;
 3856|    134|        }
 3857|  14.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 6.65k, False: 7.56k]
  ------------------
 3858|  14.2k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 1.45k, False: 6.10k]
  ------------------
 3859|  8.11k|            SCN_UNLIKELY_ATTR
 3860|  8.11k|            return invalid_code_point;
 3861|  8.11k|        }
 3862|       |
 3863|  6.10k|        char32_t cp{};
 3864|  6.10k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  6.10k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  6.10k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  6.10k|        return cp;
 3868|  14.2k|    }
 3869|       |
 3870|  18.1k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 18.1k, False: 0]
  ------------------
 3871|  18.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 18.1k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  18.1k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 2.57k, False: 15.6k]
  ------------------
 3876|  2.57k|            SCN_UNLIKELY_ATTR
 3877|  2.57k|            return invalid_code_point;
 3878|  2.57k|        }
 3879|  15.6k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 3.71k, False: 11.9k]
  ------------------
 3880|  15.6k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 1.16k, False: 10.7k]
  ------------------
 3881|  15.6k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 1.74k, False: 8.99k]
  ------------------
 3882|  6.62k|            SCN_UNLIKELY_ATTR
 3883|  6.62k|            return invalid_code_point;
 3884|  6.62k|        }
 3885|       |
 3886|  8.99k|        char32_t cp{};
 3887|  8.99k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  8.99k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  8.99k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  8.99k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  8.99k|        return cp;
 3892|  15.6k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   303k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   303k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   303k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  13.0M|{
 3695|  13.0M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  13.0M|                                          decltype(first), decltype(last)> &&
 3697|  13.0M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  13.0M|        return {first, last};
 3699|  13.0M|    }
 3700|  13.0M|    else {
 3701|  13.0M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  13.0M|                                       to_address(first), to_address(last)))};
 3703|  13.0M|    }
 3704|  13.0M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  39.7M|{
  322|  39.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  39.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  39.7M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  44.2M|{
  302|  44.2M|    return p;
  303|  44.2M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  19.3M|{
 3726|  19.3M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  19.3M|                      typename std::basic_string_view<CharT>::iterator,
 3728|  19.3M|                      decltype(it)> &&
 3729|  19.3M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  19.3M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  19.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  19.3M|        return it;
 3732|  19.3M|    }
 3733|  19.3M|    else {
 3734|  19.3M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  19.3M|    }
 3736|  19.3M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   129k|    {
 2720|   129k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   129k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   129k|    {
 2701|   129k|        return decay_copy(t.begin());
 2702|   129k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1944|  26.8M|{
 1945|  26.8M|    return SCN_FWD(t);
  ------------------
  |  |  930|  26.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  26.8M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  5.02M|    {
 2777|  5.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  5.02M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  5.02M|    {
 2759|  5.02M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  5.02M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   355k|{
 8863|   355k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   355k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   355k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   355k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5391|  1.43M|{
 5392|  1.43M|    detail::check_scan_arg_types<Args...>();
 5393|  1.43M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.43M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5130|  1.79M|{
 5131|  1.79M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.79M|                  "Scan argument types must be default constructible");
 5133|  1.79M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.79M|                  "Scan argument types must be Destructible");
 5135|  1.79M|    static_assert(
 5136|  1.79M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.79M|        "Scan argument types must not be references");
 5138|  1.79M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5344|  1.43M|    {
 5345|  1.43M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.43M|    {
 5356|  1.43M|        return {detail::make_arg<
 5357|  1.43M|            kind, Context,
 5358|  1.43M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.43M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.43M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5165|  1.43M|{
 5166|  1.43M|    return make_value<Context>(value).ref_value;
 5167|  1.43M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5115|  1.58M|{
 5116|  1.58M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.58M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.58M|                                  needs_context_tag>) {
 5120|  1.58M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.58M|    }
 5122|  1.58M|    else {
 5123|  1.58M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.58M|            value, context_tag<Context>{}));
 5125|  1.58M|    }
 5126|  1.58M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4954|  1.58M|    {                                                                        \
 4955|  1.58M|        return val;                                                          \
 4956|  1.58M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5084|  1.79M|{
 5085|  1.79M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.79M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.79M|    constexpr bool scannable_char =
 5089|  1.79M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.79M|    static_assert(scannable_char,
 5091|  1.79M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.79M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.79M|    constexpr bool scannable_const =
 5095|  1.79M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.79M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.79M|    constexpr bool scannable_disabled =
 5099|  1.79M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.79M|    static_assert(scannable_disabled,
 5101|  1.79M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.79M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.79M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.79M|    static_assert(
 5106|  1.79M|        scannable,
 5107|  1.79M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.79M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.79M|    return arg_value{arg};
 5111|  1.79M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4897|  1.79M|    {
 4898|  1.79M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  1.12M|{
 8650|  1.12M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  1.12M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|  1.12M|{
 8587|  1.12M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  1.12M|    auto result = vscan_impl(buffer, format, args);
 8590|  1.12M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.2k, False: 1.07M]
  |  |  ------------------
  ------------------
 8591|  58.2k|        return unexpected(result.error());
 8592|  58.2k|    }
 8593|  1.07M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  1.12M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4715|  2.50M|{
 4716|  2.50M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  2.50M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  2.50M|                  "\n"
 4720|  2.50M|                  "Unsupported range type given as input to a scanning "
 4721|  2.50M|                  "function.\n"
 4722|  2.50M|                  "A range needs to have a character type (value type) "
 4723|  2.50M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  2.50M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  2.50M|                  "to be included.\n"
 4726|  2.50M|                  "See the scnlib documentation for more details.");
 4727|  2.50M|    static_assert(
 4728|  2.50M|        !std::is_same_v<T, custom_char_traits>,
 4729|  2.50M|        "\n"
 4730|  2.50M|        "Unsupported range type given as input to a scanning "
 4731|  2.50M|        "function.\n"
 4732|  2.50M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  2.50M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  2.50M|        "not supported.");
 4735|  2.50M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  2.50M|                  "\n"
 4737|  2.50M|                  "Unsupported range type given as input to a scanning "
 4738|  2.50M|                  "function.\n"
 4739|  2.50M|                  "file_marker_found cannot be used as an "
 4740|  2.50M|                  "source range type to scn::scan.\n"
 4741|  2.50M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  2.50M|                  "and do not provide an explicit source range, "
 4743|  2.50M|                  "or use scn::scan with a FILE* directly.");
 4744|  2.50M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  2.50M|                  "\n"
 4746|  2.50M|                  "Unsupported range type given as input to a scanning "
 4747|  2.50M|                  "function.\n"
 4748|  2.50M|                  "In order to be scannable, a range needs to satisfy "
 4749|  2.50M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  2.50M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  2.50M|                  "\n"
 4752|  2.50M|                  "Unsupported range type given as input to a scanning "
 4753|  2.50M|                  "function.\n"
 4754|  2.50M|                  "A range needs to model forward_range and have a valid "
 4755|  2.50M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  2.50M|                  "Examples of scannable ranges are std::string, "
 4757|  2.50M|                  "std::string_view, "
 4758|  2.50M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  2.50M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  2.50M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  2.50M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|  2.50M|{
 4655|  2.50M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|  2.50M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|  2.50M|    }
 4658|  2.50M|    else {
 4659|  2.50M|        return invalid_char_type{};
 4660|  2.50M|    }
 4661|  2.50M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  2.50M|    {
 2851|  2.50M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  2.50M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  2.50M|    {
 2832|  2.50M|        return t.data();
 2833|  2.50M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3226|  2.50M|    {
 3227|  2.50M|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 21.5k, False: 2.48M]
  ------------------
 3228|  2.50M|                   ? nullptr
 3229|  2.50M|                   : std::addressof(*ranges::begin(derived()));
 3230|  2.50M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  2.50M|    {
 3001|  2.50M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  2.50M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  2.50M|    {
 2974|  2.50M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  2.50M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3334|  13.9M|    {
 3335|  13.9M|        return m_iterator == m_sentinel;
 3336|  13.9M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3180|  4.99M|    {
 3181|  4.99M|        return static_cast<const D&>(*this);
 3182|  4.99M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  4.87M|    {
 2720|  4.87M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  4.87M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  4.87M|    {
 2701|  4.87M|        return decay_copy(t.begin());
 2702|  4.87M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  59.1M|    {
 3326|  59.1M|        return m_iterator;
 3327|  59.1M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|  2.50M|    {
 2926|  2.50M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|  2.50M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|  2.50M|    {
 2892|  2.50M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|  2.50M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1944|  7.74M|{
 1945|  7.74M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  7.74M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3341|  13.9M|    {
 3342|  13.9M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  13.9M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1593|  18.7M|    {
 1594|  18.7M|        return has_value();
 1595|  18.7M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|  37.1M|    {
  481|  37.1M|        return m_has_value;
  482|  37.1M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1599|  1.14M|    {
 1600|  1.14M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.14M|        return this->get_unexpected().error();
 1602|  1.14M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.14M|    {
  464|  1.14M|        return m_unexpected;
  465|  1.14M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  8.85M|    {
  357|  8.85M|        return m_unexpected;
  358|  8.85M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|  4.32M|    {
  343|  4.32M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  4.32M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   126k|    {
 1472|   126k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   126k|    {
  443|   126k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|  10.4M|    {
  352|  10.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  10.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  10.4M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.50M|    {
 1173|  2.50M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  2.38M|{
 5919|  2.38M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.38M|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.38M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.38M|    }
 5923|  2.38M|    else {
 5924|  2.38M|        auto it = ranges::begin(source);
 5925|  2.38M|        while (n > 0) {
 5926|  2.38M|            --n;
 5927|  2.38M|            ++it;
 5928|  2.38M|        }
 5929|  2.38M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.38M|    }
 5931|  2.38M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  14.4M|    {
 2720|  14.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  14.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  14.4M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  14.4M|    {
 2701|  14.4M|        return decay_copy(t.begin());
 2702|  14.4M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5905|  2.38M|{
 5906|  2.38M|    return ranges::end(source);
 5907|  2.38M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.38M|    {
 2777|  2.38M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.38M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.38M|    {
 2759|  2.38M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.38M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  29.7M|    {
 3330|  29.7M|        return m_sentinel;
 3331|  29.7M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1648|  7.39M|    {
 1649|  7.39M|        return value();
 1650|  7.39M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1622|  17.2M|    {
 1623|  17.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  17.2M|        return this->get_value();
 1625|  17.2M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  17.2M|    {
  447|  17.2M|        return m_value;
  448|  17.2M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.38M|    {
 1426|  2.38M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.38M|    {
  433|  2.38M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   711k|    {
 7971|   711k|        return m_str;
 7972|   711k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.43M|    {
 5422|  1.43M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5374|  1.43M|    {
 5375|  1.43M|        return m_argptrs;
 5376|  1.43M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5473|  4.55M|    {
 5474|  4.55M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   711k|{
 8816|   711k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.8k, False: 673k]
  |  |  ------------------
  ------------------
 8817|  38.8k|        return unexpected(result.error());
 8818|  38.8k|    }
 8819|   673k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   673k|    static_cast<    \
  |  |  929|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   673k|    static_cast<    \
  |  |  929|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   711k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1593|  2.50M|    {
 1594|  2.50M|        return has_value();
 1595|  2.50M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.01M|    {
  481|  5.01M|        return m_has_value;
  482|  5.01M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1599|   126k|    {
 1600|   126k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   126k|        return this->get_unexpected().error();
 1602|   126k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   126k|    {
  464|   126k|        return m_unexpected;
  465|   126k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  42.0k|    {
 1472|  42.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  42.0k|    {
  443|  42.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   789k|    {
 1173|   789k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  2.14M|    {
 1649|  2.14M|        return value();
 1650|  2.14M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.38M|    {
 1623|  2.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.38M|        return this->get_value();
 1625|  2.38M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.38M|    {
  447|  2.38M|        return m_value;
  448|  2.38M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5825|   747k|    {
 5826|   747k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5676|  2.38M|    {
 5677|  2.38M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5611|  1.54M|    {
 5612|  1.54M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   747k|    {
 1426|   747k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   747k|    {
  433|   747k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5369|  1.43M|    {
 5370|  1.43M|        return m_args;
 5371|  1.43M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3311|  23.7M|    {
 3312|  23.7M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7686|  4.55M|{
 7687|  4.55M|    return s;
 7688|  4.55M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7663|  4.55M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   711k|    {
 7967|   711k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   789k|    {
 1594|   789k|        return has_value();
 1595|   789k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.53M|    {
  481|  1.53M|        return m_has_value;
  482|  1.53M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1668|   747k|    {
 1669|   747k|        return &value();
 1670|   747k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   747k|    {
 1623|   747k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   747k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   747k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   747k|        return this->get_value();
 1625|   747k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   747k|    {
  447|   747k|        return m_value;
  448|   747k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5693|  2.38M|    {
 5694|  2.38M|        return ranges::begin(m_range);
 5695|  2.38M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   355k|{
 8930|   355k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   355k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   355k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   355k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  1.12M|{
 8668|  1.12M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  1.12M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|  1.12M|{
 8603|  1.12M|#if !SCN_DISABLE_LOCALE
 8604|  1.12M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  1.12M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  1.12M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  1.12M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  1.12M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.2k, False: 1.07M]
  |  |  ------------------
  ------------------
 8611|  58.2k|        return unexpected(result.error());
 8612|  58.2k|    }
 8613|  1.07M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  1.12M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  78.0k|{
 8969|  78.0k|    T value;
 8970|  78.0k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  78.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  78.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.23k, False: 74.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.23k|    }                                                  \
  |  |  |  | 3667|  78.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  74.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  74.7k|    static_cast<    \
  |  |  929|  74.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  74.7k|    static_cast<    \
  |  |  929|  74.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  78.0k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5150|   151k|{
 5151|   151k|    check_scan_arg_types<T>();
 5152|       |
 5153|   151k|    basic_scan_arg<Context> arg;
 5154|   151k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   151k|    arg.m_value = make_value<Context>(value);
 5156|   151k|    return arg;
 5157|   151k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5236|  5.04M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4893|  5.67M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|   252k|{
 8681|   252k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|   252k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|   252k|{
 8627|   252k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|   252k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.70k, False: 242k]
  |  |  ------------------
  ------------------
 8631|  9.70k|        return unexpected(result.error());
 8632|  9.70k|    }
 8633|   242k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   252k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   242k|    {
 1659|   242k|        return std::move(value());
 1660|   242k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   383k|{
 8863|   383k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   383k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   383k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   383k|    static_cast<    \
  |  |  929|   383k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   383k|    static_cast<    \
  |  |  929|   383k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   383k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5391|  1.54M|{
 5392|  1.54M|    detail::check_scan_arg_types<Args...>();
 5393|  1.54M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.54M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5130|  1.92M|{
 5131|  1.92M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.92M|                  "Scan argument types must be default constructible");
 5133|  1.92M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.92M|                  "Scan argument types must be Destructible");
 5135|  1.92M|    static_assert(
 5136|  1.92M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.92M|        "Scan argument types must not be references");
 5138|  1.92M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5344|  1.54M|    {
 5345|  1.54M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.54M|    {
 5356|  1.54M|        return {detail::make_arg<
 5357|  1.54M|            kind, Context,
 5358|  1.54M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.54M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.54M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|  1.54M|{
 5166|  1.54M|    return make_value<Context>(value).ref_value;
 5167|  1.54M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5115|  1.71M|{
 5116|  1.71M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.71M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.71M|                                  needs_context_tag>) {
 5120|  1.71M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.71M|    }
 5122|  1.71M|    else {
 5123|  1.71M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.71M|            value, context_tag<Context>{}));
 5125|  1.71M|    }
 5126|  1.71M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4954|  1.71M|    {                                                                        \
 4955|  1.71M|        return val;                                                          \
 4956|  1.71M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5084|  1.92M|{
 5085|  1.92M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.92M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.92M|    constexpr bool scannable_char =
 5089|  1.92M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.92M|    static_assert(scannable_char,
 5091|  1.92M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.92M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.92M|    constexpr bool scannable_const =
 5095|  1.92M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.92M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.92M|    constexpr bool scannable_disabled =
 5099|  1.92M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.92M|    static_assert(scannable_disabled,
 5101|  1.92M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.92M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.92M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.92M|    static_assert(
 5106|  1.92M|        scannable,
 5107|  1.92M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.92M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.92M|    return arg_value{arg};
 5111|  1.92M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4897|  1.92M|    {
 4898|  1.92M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   767k|    {
 7971|   767k|        return m_str;
 7972|   767k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.54M|    {
 5422|  1.54M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5374|  1.54M|    {
 5375|  1.54M|        return m_argptrs;
 5376|  1.54M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   767k|{
 8816|   767k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.8k, False: 728k]
  |  |  ------------------
  ------------------
 8817|  38.8k|        return unexpected(result.error());
 8818|  38.8k|    }
 8819|   728k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   767k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  42.0k|    {
 1472|  42.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  42.0k|    {
  443|  42.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   853k|    {
 1173|   853k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5825|   811k|    {
 5826|   811k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5611|  1.67M|    {
 5612|  1.67M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   811k|    {
 1426|   811k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   811k|    {
  433|   811k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5369|  1.54M|    {
 5370|  1.54M|        return m_args;
 5371|  1.54M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   767k|    {
 7967|   767k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   853k|    {
 1594|   853k|        return has_value();
 1595|   853k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.66M|    {
  481|  1.66M|        return m_has_value;
  482|  1.66M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1668|   811k|    {
 1669|   811k|        return &value();
 1670|   811k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   811k|    {
 1623|   811k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   811k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   811k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   811k|        return this->get_value();
 1625|   811k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   811k|    {
  447|   811k|        return m_value;
  448|   811k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   383k|{
 8930|   383k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   383k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   383k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   383k|    static_cast<    \
  |  |  929|   383k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   383k|    static_cast<    \
  |  |  929|   383k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   383k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  86.2k|{
 8969|  86.2k|    T value;
 8970|  86.2k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  86.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  86.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  86.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  86.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.23k, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.23k|    }                                                  \
  |  |  |  | 3667|  86.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  83.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  83.0k|    static_cast<    \
  |  |  929|  83.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  83.0k|    static_cast<    \
  |  |  929|  83.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  86.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5150|   167k|{
 5151|   167k|    check_scan_arg_types<T>();
 5152|       |
 5153|   167k|    basic_scan_arg<Context> arg;
 5154|   167k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   167k|    arg.m_value = make_value<Context>(value);
 5156|   167k|    return arg;
 5157|   167k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   388k|{
 8863|   388k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   388k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   388k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   388k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5391|  1.56M|{
 5392|  1.56M|    detail::check_scan_arg_types<Args...>();
 5393|  1.56M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.56M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5130|  1.94M|{
 5131|  1.94M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.94M|                  "Scan argument types must be default constructible");
 5133|  1.94M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.94M|                  "Scan argument types must be Destructible");
 5135|  1.94M|    static_assert(
 5136|  1.94M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.94M|        "Scan argument types must not be references");
 5138|  1.94M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5344|  1.56M|    {
 5345|  1.56M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.56M|    {
 5356|  1.56M|        return {detail::make_arg<
 5357|  1.56M|            kind, Context,
 5358|  1.56M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.56M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.56M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5165|  1.56M|{
 5166|  1.56M|    return make_value<Context>(value).ref_value;
 5167|  1.56M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5115|  1.73M|{
 5116|  1.73M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.73M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.73M|                                  needs_context_tag>) {
 5120|  1.73M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.73M|    }
 5122|  1.73M|    else {
 5123|  1.73M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.73M|            value, context_tag<Context>{}));
 5125|  1.73M|    }
 5126|  1.73M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4954|  1.73M|    {                                                                        \
 4955|  1.73M|        return val;                                                          \
 4956|  1.73M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5084|  1.94M|{
 5085|  1.94M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.94M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.94M|    constexpr bool scannable_char =
 5089|  1.94M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.94M|    static_assert(scannable_char,
 5091|  1.94M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.94M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.94M|    constexpr bool scannable_const =
 5095|  1.94M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.94M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.94M|    constexpr bool scannable_disabled =
 5099|  1.94M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.94M|    static_assert(scannable_disabled,
 5101|  1.94M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.94M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.94M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.94M|    static_assert(
 5106|  1.94M|        scannable,
 5107|  1.94M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.94M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.94M|    return arg_value{arg};
 5111|  1.94M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4897|  1.94M|    {
 4898|  1.94M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   777k|    {
 7971|   777k|        return m_str;
 7972|   777k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.56M|    {
 5422|  1.56M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5374|  1.56M|    {
 5375|  1.56M|        return m_argptrs;
 5376|  1.56M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   777k|{
 8816|   777k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   777k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.8k, False: 738k]
  |  |  ------------------
  ------------------
 8817|  38.8k|        return unexpected(result.error());
 8818|  38.8k|    }
 8819|   738k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   738k|    static_cast<    \
  |  |  929|   738k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   738k|    static_cast<    \
  |  |  929|   738k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   777k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  42.0k|    {
 1472|  42.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  42.0k|    {
  443|  42.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   865k|    {
 1173|   865k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5825|   823k|    {
 5826|   823k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5611|  1.69M|    {
 5612|  1.69M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   823k|    {
 1426|   823k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   823k|    {
  433|   823k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5369|  1.56M|    {
 5370|  1.56M|        return m_args;
 5371|  1.56M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   777k|    {
 7967|   777k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   865k|    {
 1594|   865k|        return has_value();
 1595|   865k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.68M|    {
  481|  1.68M|        return m_has_value;
  482|  1.68M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1668|   823k|    {
 1669|   823k|        return &value();
 1670|   823k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   823k|    {
 1623|   823k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   823k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   823k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   823k|        return this->get_value();
 1625|   823k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   823k|    {
  447|   823k|        return m_value;
  448|   823k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   388k|{
 8930|   388k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   388k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   388k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   388k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  87.8k|{
 8969|  87.8k|    T value;
 8970|  87.8k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  87.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  87.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  87.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  87.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  87.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.23k, False: 84.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.23k|    }                                                  \
  |  |  |  | 3667|  87.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  84.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  84.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  84.6k|    static_cast<    \
  |  |  929|  84.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  84.6k|    static_cast<    \
  |  |  929|  84.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  87.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5150|   170k|{
 5151|   170k|    check_scan_arg_types<T>();
 5152|       |
 5153|   170k|    basic_scan_arg<Context> arg;
 5154|   170k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   170k|    arg.m_value = make_value<Context>(value);
 5156|   170k|    return arg;
 5157|   170k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   126k|    {
 2720|   126k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   126k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   126k|    {
 2701|   126k|        return decay_copy(t.begin());
 2702|   126k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1944|   111M|{
 1945|   111M|    return SCN_FWD(t);
  ------------------
  |  |  930|   111M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   111M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  5.06M|    {
 2777|  5.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  5.06M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  5.06M|    {
 2759|  5.06M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  5.06M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   362k|{
 8863|   362k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   362k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   362k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   362k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  1.14M|{
 8650|  1.14M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  1.14M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|  1.14M|{
 8587|  1.14M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  1.14M|    auto result = vscan_impl(buffer, format, args);
 8590|  1.14M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.2k, False: 1.08M]
  |  |  ------------------
  ------------------
 8591|  58.2k|        return unexpected(result.error());
 8592|  58.2k|    }
 8593|  1.08M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  1.14M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4715|  2.53M|{
 4716|  2.53M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  2.53M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  2.53M|                  "\n"
 4720|  2.53M|                  "Unsupported range type given as input to a scanning "
 4721|  2.53M|                  "function.\n"
 4722|  2.53M|                  "A range needs to have a character type (value type) "
 4723|  2.53M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  2.53M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  2.53M|                  "to be included.\n"
 4726|  2.53M|                  "See the scnlib documentation for more details.");
 4727|  2.53M|    static_assert(
 4728|  2.53M|        !std::is_same_v<T, custom_char_traits>,
 4729|  2.53M|        "\n"
 4730|  2.53M|        "Unsupported range type given as input to a scanning "
 4731|  2.53M|        "function.\n"
 4732|  2.53M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  2.53M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  2.53M|        "not supported.");
 4735|  2.53M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  2.53M|                  "\n"
 4737|  2.53M|                  "Unsupported range type given as input to a scanning "
 4738|  2.53M|                  "function.\n"
 4739|  2.53M|                  "file_marker_found cannot be used as an "
 4740|  2.53M|                  "source range type to scn::scan.\n"
 4741|  2.53M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  2.53M|                  "and do not provide an explicit source range, "
 4743|  2.53M|                  "or use scn::scan with a FILE* directly.");
 4744|  2.53M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  2.53M|                  "\n"
 4746|  2.53M|                  "Unsupported range type given as input to a scanning "
 4747|  2.53M|                  "function.\n"
 4748|  2.53M|                  "In order to be scannable, a range needs to satisfy "
 4749|  2.53M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  2.53M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  2.53M|                  "\n"
 4752|  2.53M|                  "Unsupported range type given as input to a scanning "
 4753|  2.53M|                  "function.\n"
 4754|  2.53M|                  "A range needs to model forward_range and have a valid "
 4755|  2.53M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  2.53M|                  "Examples of scannable ranges are std::string, "
 4757|  2.53M|                  "std::string_view, "
 4758|  2.53M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  2.53M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  2.53M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  2.53M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|  2.53M|{
 4686|  2.53M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|  2.53M|        return file_marker_found{};
 4688|  2.53M|    }
 4689|  2.53M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|  2.53M|        if constexpr (ranges::range<Range>) {
 4691|  2.53M|            return insufficient_range{};
 4692|  2.53M|        }
 4693|  2.53M|        else {
 4694|  2.53M|            return invalid_input_range{};
 4695|  2.53M|        }
 4696|  2.53M|    }
 4697|  2.53M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|  2.53M|        return invalid_char_type{};
 4699|  2.53M|    }
 4700|  2.53M|    else {
 4701|  2.53M|        return make_forward_scan_buffer(r);
 4702|  2.53M|    }
 4703|  2.53M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4519|  2.53M|{
 4520|  2.53M|    return basic_scan_forward_buffer_impl(range);
 4521|  2.53M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|  2.53M|    {
 4407|  2.53M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4377|  2.53M|    {
 4378|  2.53M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4146|  2.53M|    {
 4147|  2.53M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4061|  2.53M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  4.94M|    {
 2720|  4.94M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  4.94M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  4.94M|    {
 2701|  4.94M|        return decay_copy(t.begin());
 2702|  4.94M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  7.34M|    {
 3326|  7.34M|        return m_iterator;
 3327|  7.34M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4410|  32.3M|    {
 4411|  32.3M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 422k, False: 31.9M]
  ------------------
 4412|   422k|            return false;
 4413|   422k|        }
 4414|  31.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  31.9M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  31.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  31.9M|        }
 4417|  31.9M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 29.4M, False: 2.51M]
  ------------------
 4418|  29.4M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|  29.4M|                                          this->m_current_view.begin(),
 4420|  29.4M|                                          this->m_current_view.end());
 4421|  29.4M|        }
 4422|  31.9M|        m_latest = *m_cursor;
 4423|  31.9M|        ++m_cursor;
 4424|  31.9M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  31.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  31.9M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  31.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  31.9M|        }
 4428|  31.9M|        return true;
 4429|  31.9M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  96.3M|    {
 2777|  96.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  96.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  96.3M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  96.3M|    {
 2759|  96.3M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  96.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  96.3M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  98.7M|    {
 3330|  98.7M|        return m_sentinel;
 3331|  98.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4066|  2.53M|    {
 4067|  2.53M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.53M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|  2.53M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|   126k|    {
 1472|   126k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   126k|    {
  443|   126k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.53M|    {
 1173|  2.53M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  2.40M|{
 5919|  2.40M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.40M|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.40M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.40M|    }
 5923|  2.40M|    else {
 5924|  2.40M|        auto it = ranges::begin(source);
 5925|  2.40M|        while (n > 0) {
 5926|  2.40M|            --n;
 5927|  2.40M|            ++it;
 5928|  2.40M|        }
 5929|  2.40M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.40M|    }
 5931|  2.40M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  2.40M|    {
 2720|  2.40M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  2.40M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  2.40M|    {
 2701|  2.40M|        return decay_copy(t.begin());
 2702|  2.40M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5905|  2.40M|{
 5906|  2.40M|    return ranges::end(source);
 5907|  2.40M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.40M|    {
 2777|  2.40M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.40M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.40M|    {
 2759|  2.40M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.40M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  2.40M|    {
 1426|  2.40M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  2.40M|    {
  433|  2.40M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   724k|    {
 7971|   724k|        return m_str;
 7972|   724k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   724k|{
 8816|   724k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.8k, False: 685k]
  |  |  ------------------
  ------------------
 8817|  38.8k|        return unexpected(result.error());
 8818|  38.8k|    }
 8819|   685k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   685k|    static_cast<    \
  |  |  929|   685k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   685k|    static_cast<    \
  |  |  929|   685k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   724k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1593|  2.53M|    {
 1594|  2.53M|        return has_value();
 1595|  2.53M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.06M|    {
  481|  5.06M|        return m_has_value;
  482|  5.06M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1599|   126k|    {
 1600|   126k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   126k|        return this->get_unexpected().error();
 1602|   126k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   126k|    {
  464|   126k|        return m_unexpected;
  465|   126k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  42.0k|    {
 1472|  42.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  42.0k|    {
  443|  42.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   798k|    {
 1173|   798k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  2.17M|    {
 1649|  2.17M|        return value();
 1650|  2.17M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  2.40M|    {
 1623|  2.40M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.40M|        return this->get_value();
 1625|  2.40M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.40M|    {
  447|  2.40M|        return m_value;
  448|  2.40M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5825|   756k|    {
 5826|   756k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5676|  2.40M|    {
 5677|  2.40M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   756k|    {
 1426|   756k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   756k|    {
  433|   756k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3311|  4.94M|    {
 3312|  4.94M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   724k|    {
 7967|   724k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   798k|    {
 1594|   798k|        return has_value();
 1595|   798k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.55M|    {
  481|  1.55M|        return m_has_value;
  482|  1.55M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1668|   756k|    {
 1669|   756k|        return &value();
 1670|   756k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   756k|    {
 1623|   756k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   756k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   756k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   756k|        return this->get_value();
 1625|   756k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   756k|    {
  447|   756k|        return m_value;
  448|   756k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5693|  2.40M|    {
 5694|  2.40M|        return ranges::begin(m_range);
 5695|  2.40M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   362k|{
 8930|   362k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   362k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   362k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   362k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  1.14M|{
 8668|  1.14M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  1.14M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|  1.14M|{
 8603|  1.14M|#if !SCN_DISABLE_LOCALE
 8604|  1.14M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  1.14M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  1.14M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  1.14M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  1.14M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.2k, False: 1.08M]
  |  |  ------------------
  ------------------
 8611|  58.2k|        return unexpected(result.error());
 8612|  58.2k|    }
 8613|  1.08M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  1.14M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  73.7k|{
 8969|  73.7k|    T value;
 8970|  73.7k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  73.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  73.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  73.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  73.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.23k, False: 70.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.23k|    }                                                  \
  |  |  |  | 3667|  73.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  70.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  70.4k|    static_cast<    \
  |  |  929|  70.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  70.4k|    static_cast<    \
  |  |  929|  70.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  73.7k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|   237k|{
 8681|   237k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|   237k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|   237k|{
 8627|   237k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|   237k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|   237k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.70k, False: 228k]
  |  |  ------------------
  ------------------
 8631|  9.70k|        return unexpected(result.error());
 8632|  9.70k|    }
 8633|   228k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   237k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|   228k|    {
 1659|   228k|        return std::move(value());
 1660|   228k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   390k|{
 8863|   390k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   390k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   390k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   390k|    static_cast<    \
  |  |  929|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   390k|    static_cast<    \
  |  |  929|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   390k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   781k|    {
 7971|   781k|        return m_str;
 7972|   781k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   781k|{
 8816|   781k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.8k, False: 742k]
  |  |  ------------------
  ------------------
 8817|  38.8k|        return unexpected(result.error());
 8818|  38.8k|    }
 8819|   742k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   742k|    static_cast<    \
  |  |  929|   742k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   742k|    static_cast<    \
  |  |  929|   742k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   781k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  42.0k|    {
 1472|  42.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  42.0k|    {
  443|  42.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   862k|    {
 1173|   862k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5825|   820k|    {
 5826|   820k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   820k|    {
 1426|   820k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   820k|    {
  433|   820k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   781k|    {
 7967|   781k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   862k|    {
 1594|   862k|        return has_value();
 1595|   862k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.68M|    {
  481|  1.68M|        return m_has_value;
  482|  1.68M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1668|   820k|    {
 1669|   820k|        return &value();
 1670|   820k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   820k|    {
 1623|   820k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   820k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   820k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   820k|        return this->get_value();
 1625|   820k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   820k|    {
  447|   820k|        return m_value;
  448|   820k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   390k|{
 8930|   390k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   390k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   390k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   390k|    static_cast<    \
  |  |  929|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   390k|    static_cast<    \
  |  |  929|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   390k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  81.5k|{
 8969|  81.5k|    T value;
 8970|  81.5k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  81.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  81.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  81.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  81.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  81.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.23k, False: 78.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.23k|    }                                                  \
  |  |  |  | 3667|  81.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  78.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  78.3k|    static_cast<    \
  |  |  929|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  78.3k|    static_cast<    \
  |  |  929|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  81.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   395k|{
 8863|   395k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   395k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   395k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   395k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   790k|    {
 7971|   790k|        return m_str;
 7972|   790k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   790k|{
 8816|   790k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.8k, False: 751k]
  |  |  ------------------
  ------------------
 8817|  38.8k|        return unexpected(result.error());
 8818|  38.8k|    }
 8819|   751k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   751k|    static_cast<    \
  |  |  929|   751k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   751k|    static_cast<    \
  |  |  929|   751k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   790k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  42.0k|    {
 1472|  42.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  42.0k|    {
  443|  42.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   872k|    {
 1173|   872k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5825|   830k|    {
 5826|   830k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   830k|    {
 1426|   830k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   830k|    {
  433|   830k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   790k|    {
 7967|   790k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   872k|    {
 1594|   872k|        return has_value();
 1595|   872k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.70M|    {
  481|  1.70M|        return m_has_value;
  482|  1.70M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1668|   830k|    {
 1669|   830k|        return &value();
 1670|   830k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   830k|    {
 1623|   830k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   830k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   830k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   830k|        return this->get_value();
 1625|   830k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   830k|    {
  447|   830k|        return m_value;
  448|   830k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   395k|{
 8930|   395k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   395k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   395k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   395k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  82.6k|{
 8969|  82.6k|    T value;
 8970|  82.6k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  82.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  82.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  82.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  82.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  82.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.23k, False: 79.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.23k|    }                                                  \
  |  |  |  | 3667|  82.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  79.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  79.3k|    static_cast<    \
  |  |  929|  79.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  79.3k|    static_cast<    \
  |  |  929|  79.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  82.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   258k|    {
 2720|   258k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   258k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   258k|    {
 2701|   258k|        return decay_copy(t.begin());
 2702|   258k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1944|  1.74M|{
 1945|  1.74M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  1.74M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   640k|    {
 2777|   640k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   640k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   640k|    {
 2759|   640k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   640k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5391|   194k|{
 5392|   194k|    detail::check_scan_arg_types<Args...>();
 5393|   194k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   194k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5344|   194k|    {
 5345|   194k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   194k|    {
 5356|   194k|        return {detail::make_arg<
 5357|   194k|            kind, Context,
 5358|   194k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   194k|                                 typename Context::char_type>::value>(args)...};
 5360|   194k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5165|   194k|{
 5166|   194k|    return make_value<Context>(value).ref_value;
 5167|   194k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5115|   211k|{
 5116|   211k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   211k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   211k|                                  needs_context_tag>) {
 5120|   211k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   211k|    }
 5122|   211k|    else {
 5123|   211k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   211k|            value, context_tag<Context>{}));
 5125|   211k|    }
 5126|   211k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4954|   211k|    {                                                                        \
 4955|   211k|        return val;                                                          \
 4956|   211k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|   145k|{
 8587|   145k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   145k|    auto result = vscan_impl(buffer, format, args);
 8590|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116k, False: 29.4k]
  |  |  ------------------
  ------------------
 8591|   116k|        return unexpected(result.error());
 8592|   116k|    }
 8593|  29.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   145k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4715|   317k|{
 4716|   317k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   317k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   317k|                  "\n"
 4720|   317k|                  "Unsupported range type given as input to a scanning "
 4721|   317k|                  "function.\n"
 4722|   317k|                  "A range needs to have a character type (value type) "
 4723|   317k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   317k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   317k|                  "to be included.\n"
 4726|   317k|                  "See the scnlib documentation for more details.");
 4727|   317k|    static_assert(
 4728|   317k|        !std::is_same_v<T, custom_char_traits>,
 4729|   317k|        "\n"
 4730|   317k|        "Unsupported range type given as input to a scanning "
 4731|   317k|        "function.\n"
 4732|   317k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   317k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   317k|        "not supported.");
 4735|   317k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   317k|                  "\n"
 4737|   317k|                  "Unsupported range type given as input to a scanning "
 4738|   317k|                  "function.\n"
 4739|   317k|                  "file_marker_found cannot be used as an "
 4740|   317k|                  "source range type to scn::scan.\n"
 4741|   317k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   317k|                  "and do not provide an explicit source range, "
 4743|   317k|                  "or use scn::scan with a FILE* directly.");
 4744|   317k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   317k|                  "\n"
 4746|   317k|                  "Unsupported range type given as input to a scanning "
 4747|   317k|                  "function.\n"
 4748|   317k|                  "In order to be scannable, a range needs to satisfy "
 4749|   317k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   317k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   317k|                  "\n"
 4752|   317k|                  "Unsupported range type given as input to a scanning "
 4753|   317k|                  "function.\n"
 4754|   317k|                  "A range needs to model forward_range and have a valid "
 4755|   317k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   317k|                  "Examples of scannable ranges are std::string, "
 4757|   317k|                  "std::string_view, "
 4758|   317k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   317k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   317k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   317k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|   317k|{
 4655|   317k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|   317k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|   317k|    }
 4658|   317k|    else {
 4659|   317k|        return invalid_char_type{};
 4660|   317k|    }
 4661|   317k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   317k|    {
 2851|   317k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   317k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   317k|    {
 2832|   317k|        return t.data();
 2833|   317k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3226|   317k|    {
 3227|   317k|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 498, False: 316k]
  ------------------
 3228|   317k|                   ? nullptr
 3229|   317k|                   : std::addressof(*ranges::begin(derived()));
 3230|   317k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   317k|    {
 3001|   317k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   317k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   317k|    {
 2974|   317k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   317k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3334|   516k|    {
 3335|   516k|        return m_iterator == m_sentinel;
 3336|   516k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3180|   633k|    {
 3181|   633k|        return static_cast<const D&>(*this);
 3182|   633k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   381k|    {
 2720|   381k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   381k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   381k|    {
 2701|   381k|        return decay_copy(t.begin());
 2702|   381k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  8.32M|    {
 3326|  8.32M|        return m_iterator;
 3327|  8.32M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|   317k|    {
 2926|   317k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|   317k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|   317k|    {
 2892|   317k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|   317k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3341|  1.32M|    {
 3342|  1.32M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  1.32M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   252k|    {
 1472|   252k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   252k|    {
  443|   252k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   317k|    {
 1173|   317k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  64.8k|{
 5919|  64.8k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  64.8k|                      ranges::iterator_t<SourceRange>>) {
 5921|  64.8k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  64.8k|    }
 5923|  64.8k|    else {
 5924|  64.8k|        auto it = ranges::begin(source);
 5925|  64.8k|        while (n > 0) {
 5926|  64.8k|            --n;
 5927|  64.8k|            ++it;
 5928|  64.8k|        }
 5929|  64.8k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  64.8k|    }
 5931|  64.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   403k|    {
 2720|   403k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   403k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   403k|    {
 2701|   403k|        return decay_copy(t.begin());
 2702|   403k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5905|  64.8k|{
 5906|  64.8k|    return ranges::end(source);
 5907|  64.8k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  64.8k|    {
 2777|  64.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  64.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  64.8k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  64.8k|    {
 2759|  64.8k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  64.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  64.8k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  4.28M|    {
 3330|  4.28M|        return m_sentinel;
 3331|  4.28M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  64.8k|    {
 1426|  64.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  64.8k|    {
  433|  64.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  97.1k|    {
 7971|  97.1k|        return m_str;
 7972|  97.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   194k|    {
 5422|   194k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5374|   194k|    {
 5375|   194k|        return m_argptrs;
 5376|   194k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5473|   583k|    {
 5474|   583k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  97.1k|{
 8816|  97.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  97.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.6k, False: 19.5k]
  |  |  ------------------
  ------------------
 8817|  77.6k|        return unexpected(result.error());
 8818|  77.6k|    }
 8819|  19.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.5k|    static_cast<    \
  |  |  929|  19.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.5k|    static_cast<    \
  |  |  929|  19.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  97.1k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1593|   317k|    {
 1594|   317k|        return has_value();
 1595|   317k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   634k|    {
  481|   634k|        return m_has_value;
  482|   634k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1599|   252k|    {
 1600|   252k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   252k|        return this->get_unexpected().error();
 1602|   252k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   252k|    {
  464|   252k|        return m_unexpected;
  465|   252k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  84.0k|    {
 1472|  84.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  84.0k|    {
  443|  84.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   105k|    {
 1173|   105k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  58.9k|    {
 1649|  58.9k|        return value();
 1650|  58.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  64.8k|    {
 1623|  64.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  64.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  64.8k|        return this->get_value();
 1625|  64.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  64.8k|    {
  447|  64.8k|        return m_value;
  448|  64.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5825|  21.4k|    {
 5826|  21.4k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5676|  64.8k|    {
 5677|  64.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  21.4k|    {
 1426|  21.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  21.4k|    {
  433|  21.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5369|   194k|    {
 5370|   194k|        return m_args;
 5371|   194k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3311|  2.94M|    {
 3312|  2.94M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7691|   583k|{
 7692|   583k|    return s;
 7693|   583k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7663|   583k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  97.1k|    {
 7967|  97.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   105k|    {
 1594|   105k|        return has_value();
 1595|   105k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   126k|    {
  481|   126k|        return m_has_value;
  482|   126k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1668|  21.4k|    {
 1669|  21.4k|        return &value();
 1670|  21.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  21.4k|    {
 1623|  21.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.4k|        return this->get_value();
 1625|  21.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  21.4k|    {
  447|  21.4k|        return m_value;
  448|  21.4k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5693|  64.8k|    {
 5694|  64.8k|        return ranges::begin(m_range);
 5695|  64.8k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|   145k|{
 8603|   145k|#if !SCN_DISABLE_LOCALE
 8604|   145k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   145k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   145k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   145k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116k, False: 29.4k]
  |  |  ------------------
  ------------------
 8611|   116k|        return unexpected(result.error());
 8612|   116k|    }
 8613|  29.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   145k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5150|  16.7k|{
 5151|  16.7k|    check_scan_arg_types<T>();
 5152|       |
 5153|  16.7k|    basic_scan_arg<Context> arg;
 5154|  16.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  16.7k|    arg.m_value = make_value<Context>(value);
 5156|  16.7k|    return arg;
 5157|  16.7k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5236|   633k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  25.2k|{
 8627|  25.2k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  25.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  25.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.4k, False: 5.83k]
  |  |  ------------------
  ------------------
 8631|  19.4k|        return unexpected(result.error());
 8632|  19.4k|    }
 8633|  5.83k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  5.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  25.2k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  5.83k|    {
 1659|  5.83k|        return std::move(value());
 1660|  5.83k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5391|   194k|{
 5392|   194k|    detail::check_scan_arg_types<Args...>();
 5393|   194k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   194k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5344|   194k|    {
 5345|   194k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   194k|    {
 5356|   194k|        return {detail::make_arg<
 5357|   194k|            kind, Context,
 5358|   194k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   194k|                                 typename Context::char_type>::value>(args)...};
 5360|   194k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|   194k|{
 5166|   194k|    return make_value<Context>(value).ref_value;
 5167|   194k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5115|   211k|{
 5116|   211k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   211k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   211k|                                  needs_context_tag>) {
 5120|   211k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   211k|    }
 5122|   211k|    else {
 5123|   211k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   211k|            value, context_tag<Context>{}));
 5125|   211k|    }
 5126|   211k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4954|   211k|    {                                                                        \
 4955|   211k|        return val;                                                          \
 4956|   211k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  97.2k|    {
 7971|  97.2k|        return m_str;
 7972|  97.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   194k|    {
 5422|   194k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5374|   194k|    {
 5375|   194k|        return m_argptrs;
 5376|   194k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  97.2k|{
 8816|  97.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.6k, False: 19.6k]
  |  |  ------------------
  ------------------
 8817|  77.6k|        return unexpected(result.error());
 8818|  77.6k|    }
 8819|  19.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.6k|    static_cast<    \
  |  |  929|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.6k|    static_cast<    \
  |  |  929|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  97.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  84.0k|    {
 1472|  84.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  84.0k|    {
  443|  84.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   105k|    {
 1173|   105k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5825|  21.5k|    {
 5826|  21.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  21.5k|    {
 1426|  21.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  21.5k|    {
  433|  21.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5369|   194k|    {
 5370|   194k|        return m_args;
 5371|   194k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  97.2k|    {
 7967|  97.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   105k|    {
 1594|   105k|        return has_value();
 1595|   105k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   127k|    {
  481|   127k|        return m_has_value;
  482|   127k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1668|  21.5k|    {
 1669|  21.5k|        return &value();
 1670|  21.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  21.5k|    {
 1623|  21.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.5k|        return this->get_value();
 1625|  21.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  21.5k|    {
  447|  21.5k|        return m_value;
  448|  21.5k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5150|  16.8k|{
 5151|  16.8k|    check_scan_arg_types<T>();
 5152|       |
 5153|  16.8k|    basic_scan_arg<Context> arg;
 5154|  16.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  16.8k|    arg.m_value = make_value<Context>(value);
 5156|  16.8k|    return arg;
 5157|  16.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5391|   194k|{
 5392|   194k|    detail::check_scan_arg_types<Args...>();
 5393|   194k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   194k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5344|   194k|    {
 5345|   194k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   194k|    {
 5356|   194k|        return {detail::make_arg<
 5357|   194k|            kind, Context,
 5358|   194k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   194k|                                 typename Context::char_type>::value>(args)...};
 5360|   194k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5165|   194k|{
 5166|   194k|    return make_value<Context>(value).ref_value;
 5167|   194k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5115|   211k|{
 5116|   211k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   211k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   211k|                                  needs_context_tag>) {
 5120|   211k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   211k|    }
 5122|   211k|    else {
 5123|   211k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   211k|            value, context_tag<Context>{}));
 5125|   211k|    }
 5126|   211k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4954|   211k|    {                                                                        \
 4955|   211k|        return val;                                                          \
 4956|   211k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  97.4k|    {
 7971|  97.4k|        return m_str;
 7972|  97.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   194k|    {
 5422|   194k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5374|   194k|    {
 5375|   194k|        return m_argptrs;
 5376|   194k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  97.4k|{
 8816|  97.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  97.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.6k, False: 19.8k]
  |  |  ------------------
  ------------------
 8817|  77.6k|        return unexpected(result.error());
 8818|  77.6k|    }
 8819|  19.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.8k|    static_cast<    \
  |  |  929|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.8k|    static_cast<    \
  |  |  929|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  97.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  84.0k|    {
 1472|  84.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  84.0k|    {
  443|  84.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   105k|    {
 1173|   105k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5825|  21.7k|    {
 5826|  21.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  21.7k|    {
 1426|  21.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  21.7k|    {
  433|  21.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5369|   194k|    {
 5370|   194k|        return m_args;
 5371|   194k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  97.4k|    {
 7967|  97.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   105k|    {
 1594|   105k|        return has_value();
 1595|   105k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   127k|    {
  481|   127k|        return m_has_value;
  482|   127k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1668|  21.7k|    {
 1669|  21.7k|        return &value();
 1670|  21.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  21.7k|    {
 1623|  21.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.7k|        return this->get_value();
 1625|  21.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  21.7k|    {
  447|  21.7k|        return m_value;
  448|  21.7k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5150|  16.8k|{
 5151|  16.8k|    check_scan_arg_types<T>();
 5152|       |
 5153|  16.8k|    basic_scan_arg<Context> arg;
 5154|  16.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  16.8k|    arg.m_value = make_value<Context>(value);
 5156|  16.8k|    return arg;
 5157|  16.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   252k|    {
 2720|   252k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   252k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   252k|    {
 2701|   252k|        return decay_copy(t.begin());
 2702|   252k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1944|  5.33M|{
 1945|  5.33M|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  5.33M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   633k|    {
 2777|   633k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   633k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   633k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   633k|    {
 2759|   633k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   633k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   633k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|   145k|{
 8587|   145k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   145k|    auto result = vscan_impl(buffer, format, args);
 8590|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116k, False: 29.4k]
  |  |  ------------------
  ------------------
 8591|   116k|        return unexpected(result.error());
 8592|   116k|    }
 8593|  29.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   145k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4715|   316k|{
 4716|   316k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   316k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   316k|                  "\n"
 4720|   316k|                  "Unsupported range type given as input to a scanning "
 4721|   316k|                  "function.\n"
 4722|   316k|                  "A range needs to have a character type (value type) "
 4723|   316k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   316k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   316k|                  "to be included.\n"
 4726|   316k|                  "See the scnlib documentation for more details.");
 4727|   316k|    static_assert(
 4728|   316k|        !std::is_same_v<T, custom_char_traits>,
 4729|   316k|        "\n"
 4730|   316k|        "Unsupported range type given as input to a scanning "
 4731|   316k|        "function.\n"
 4732|   316k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   316k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   316k|        "not supported.");
 4735|   316k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   316k|                  "\n"
 4737|   316k|                  "Unsupported range type given as input to a scanning "
 4738|   316k|                  "function.\n"
 4739|   316k|                  "file_marker_found cannot be used as an "
 4740|   316k|                  "source range type to scn::scan.\n"
 4741|   316k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   316k|                  "and do not provide an explicit source range, "
 4743|   316k|                  "or use scn::scan with a FILE* directly.");
 4744|   316k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   316k|                  "\n"
 4746|   316k|                  "Unsupported range type given as input to a scanning "
 4747|   316k|                  "function.\n"
 4748|   316k|                  "In order to be scannable, a range needs to satisfy "
 4749|   316k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   316k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   316k|                  "\n"
 4752|   316k|                  "Unsupported range type given as input to a scanning "
 4753|   316k|                  "function.\n"
 4754|   316k|                  "A range needs to model forward_range and have a valid "
 4755|   316k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   316k|                  "Examples of scannable ranges are std::string, "
 4757|   316k|                  "std::string_view, "
 4758|   316k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   316k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   316k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   316k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|   316k|{
 4686|   316k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|   316k|        return file_marker_found{};
 4688|   316k|    }
 4689|   316k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|   316k|        if constexpr (ranges::range<Range>) {
 4691|   316k|            return insufficient_range{};
 4692|   316k|        }
 4693|   316k|        else {
 4694|   316k|            return invalid_input_range{};
 4695|   316k|        }
 4696|   316k|    }
 4697|   316k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|   316k|        return invalid_char_type{};
 4699|   316k|    }
 4700|   316k|    else {
 4701|   316k|        return make_forward_scan_buffer(r);
 4702|   316k|    }
 4703|   316k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4519|   316k|{
 4520|   316k|    return basic_scan_forward_buffer_impl(range);
 4521|   316k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|   316k|    {
 4407|   316k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4377|   316k|    {
 4378|   316k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4146|   316k|    {
 4147|   316k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4061|   316k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   381k|    {
 2720|   381k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   381k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   381k|    {
 2701|   381k|        return decay_copy(t.begin());
 2702|   381k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|   446k|    {
 3326|   446k|        return m_iterator;
 3327|   446k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4410|  1.41M|    {
 4411|  1.41M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 152k, False: 1.26M]
  ------------------
 4412|   152k|            return false;
 4413|   152k|        }
 4414|  1.26M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  1.26M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  1.26M|        }
 4417|  1.26M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 946k, False: 316k]
  ------------------
 4418|   946k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|   946k|                                          this->m_current_view.begin(),
 4420|   946k|                                          this->m_current_view.end());
 4421|   946k|        }
 4422|  1.26M|        m_latest = *m_cursor;
 4423|  1.26M|        ++m_cursor;
 4424|  1.26M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  1.26M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  1.26M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  1.26M|        }
 4428|  1.26M|        return true;
 4429|  1.26M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  3.94M|    {
 2777|  3.94M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  3.94M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  3.94M|    {
 2759|  3.94M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  3.94M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  4.00M|    {
 3330|  4.00M|        return m_sentinel;
 3331|  4.00M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4066|   316k|    {
 4067|   316k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   316k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|   316k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|   252k|    {
 1472|   252k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   252k|    {
  443|   252k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   316k|    {
 1173|   316k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  64.6k|{
 5919|  64.6k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  64.6k|                      ranges::iterator_t<SourceRange>>) {
 5921|  64.6k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  64.6k|    }
 5923|  64.6k|    else {
 5924|  64.6k|        auto it = ranges::begin(source);
 5925|  64.6k|        while (n > 0) {
 5926|  64.6k|            --n;
 5927|  64.6k|            ++it;
 5928|  64.6k|        }
 5929|  64.6k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  64.6k|    }
 5931|  64.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  64.6k|    {
 2720|  64.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  64.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  64.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  64.6k|    {
 2701|  64.6k|        return decay_copy(t.begin());
 2702|  64.6k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5905|  64.6k|{
 5906|  64.6k|    return ranges::end(source);
 5907|  64.6k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  64.6k|    {
 2777|  64.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  64.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  64.6k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  64.6k|    {
 2759|  64.6k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  64.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  64.6k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  64.6k|    {
 1426|  64.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  64.6k|    {
  433|  64.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  97.0k|    {
 7971|  97.0k|        return m_str;
 7972|  97.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  97.0k|{
 8816|  97.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.6k, False: 19.4k]
  |  |  ------------------
  ------------------
 8817|  77.6k|        return unexpected(result.error());
 8818|  77.6k|    }
 8819|  19.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.4k|    static_cast<    \
  |  |  929|  19.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.4k|    static_cast<    \
  |  |  929|  19.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  97.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1593|   316k|    {
 1594|   316k|        return has_value();
 1595|   316k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   633k|    {
  481|   633k|        return m_has_value;
  482|   633k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1599|   252k|    {
 1600|   252k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   252k|        return this->get_unexpected().error();
 1602|   252k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   252k|    {
  464|   252k|        return m_unexpected;
  465|   252k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  84.0k|    {
 1472|  84.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  84.0k|    {
  443|  84.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   105k|    {
 1173|   105k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  58.8k|    {
 1649|  58.8k|        return value();
 1650|  58.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  64.6k|    {
 1623|  64.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  64.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  64.6k|        return this->get_value();
 1625|  64.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  64.6k|    {
  447|  64.6k|        return m_value;
  448|  64.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5825|  21.3k|    {
 5826|  21.3k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5676|  64.6k|    {
 5677|  64.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  21.3k|    {
 1426|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  21.3k|    {
  433|  21.3k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3311|   381k|    {
 3312|   381k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  97.0k|    {
 7967|  97.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   105k|    {
 1594|   105k|        return has_value();
 1595|   105k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   126k|    {
  481|   126k|        return m_has_value;
  482|   126k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1668|  21.3k|    {
 1669|  21.3k|        return &value();
 1670|  21.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  21.3k|    {
 1623|  21.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.3k|        return this->get_value();
 1625|  21.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  21.3k|    {
  447|  21.3k|        return m_value;
  448|  21.3k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5693|  64.6k|    {
 5694|  64.6k|        return ranges::begin(m_range);
 5695|  64.6k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|   145k|{
 8603|   145k|#if !SCN_DISABLE_LOCALE
 8604|   145k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   145k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   145k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   145k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116k, False: 29.4k]
  |  |  ------------------
  ------------------
 8611|   116k|        return unexpected(result.error());
 8612|   116k|    }
 8613|  29.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   145k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  25.2k|{
 8627|  25.2k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  25.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  25.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.4k, False: 5.81k]
  |  |  ------------------
  ------------------
 8631|  19.4k|        return unexpected(result.error());
 8632|  19.4k|    }
 8633|  5.81k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  5.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  25.2k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|  5.81k|    {
 1659|  5.81k|        return std::move(value());
 1660|  5.81k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  97.2k|    {
 7971|  97.2k|        return m_str;
 7972|  97.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  97.2k|{
 8816|  97.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.6k, False: 19.6k]
  |  |  ------------------
  ------------------
 8817|  77.6k|        return unexpected(result.error());
 8818|  77.6k|    }
 8819|  19.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.6k|    static_cast<    \
  |  |  929|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.6k|    static_cast<    \
  |  |  929|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  97.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  84.0k|    {
 1472|  84.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  84.0k|    {
  443|  84.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   105k|    {
 1173|   105k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5825|  21.5k|    {
 5826|  21.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  21.5k|    {
 1426|  21.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  21.5k|    {
  433|  21.5k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  97.2k|    {
 7967|  97.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   105k|    {
 1594|   105k|        return has_value();
 1595|   105k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   127k|    {
  481|   127k|        return m_has_value;
  482|   127k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1668|  21.5k|    {
 1669|  21.5k|        return &value();
 1670|  21.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  21.5k|    {
 1623|  21.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.5k|        return this->get_value();
 1625|  21.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  21.5k|    {
  447|  21.5k|        return m_value;
  448|  21.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  97.3k|    {
 7971|  97.3k|        return m_str;
 7972|  97.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  97.3k|{
 8816|  97.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.6k, False: 19.7k]
  |  |  ------------------
  ------------------
 8817|  77.6k|        return unexpected(result.error());
 8818|  77.6k|    }
 8819|  19.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.7k|    static_cast<    \
  |  |  929|  19.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.7k|    static_cast<    \
  |  |  929|  19.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  97.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  84.0k|    {
 1472|  84.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  84.0k|    {
  443|  84.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   105k|    {
 1173|   105k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5825|  21.7k|    {
 5826|  21.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  21.7k|    {
 1426|  21.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  21.7k|    {
  433|  21.7k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  97.3k|    {
 7967|  97.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   105k|    {
 1594|   105k|        return has_value();
 1595|   105k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   127k|    {
  481|   127k|        return m_has_value;
  482|   127k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1668|  21.7k|    {
 1669|  21.7k|        return &value();
 1670|  21.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  21.7k|    {
 1623|  21.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.7k|        return this->get_value();
 1625|  21.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  21.7k|    {
  447|  21.7k|        return m_value;
  448|  21.7k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3563|  6.10M|    {
 3564|  6.10M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  6.10M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  6.10M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  26.1M|    {
 3570|  26.1M|        return m_code == good;
 3571|  26.1M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   582k|    {
 3581|   582k|        return m_code;
 3582|   582k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|   113M|    {
 3326|   113M|        return m_iterator;
 3327|   113M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  10.6M|    {
 3326|  10.6M|        return m_iterator;
 3327|  10.6M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6255|  4.05M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6267|  1.13M|    {
 6268|  1.13M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.13M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6268:23): [Folded - Ignored]
  ------------------
 6269|  1.13M|            m_specs.localized = true;
 6270|  1.13M|        }
 6271|      0|        else {
 6272|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6273|      0|        }
 6274|  1.13M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6298|  2.92M|    {
 6299|  2.92M|        m_specs.type = type;
 6300|  2.92M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6371|  4.05M|    {
 6372|  4.05M|        return static_cast<bool>(m_error);
 6373|  4.05M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   582k|{
 3605|   582k|    return a.code() == b;
 3606|   582k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   582k|{
 3609|   582k|    return !(a == b);
 3610|   582k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7058|  1.13M|{
 7059|  1.13M|    switch (type) {
 7060|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7060:9): [True: 0, False: 1.13M]
  ------------------
 7061|      0|            return arg_type_category::none;
 7062|       |
 7063|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7063:9): [True: 0, False: 1.13M]
  ------------------
 7064|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 1.13M]
  ------------------
 7065|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7065:9): [True: 0, False: 1.13M]
  ------------------
 7066|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7066:9): [True: 0, False: 1.13M]
  ------------------
 7067|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.13M]
  ------------------
 7068|      0|            return arg_type_category::integer;
 7069|       |
 7070|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.13M]
  ------------------
 7071|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.13M]
  ------------------
 7072|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7072:9): [True: 0, False: 1.13M]
  ------------------
 7073|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7073:9): [True: 0, False: 1.13M]
  ------------------
 7074|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.13M]
  ------------------
 7075|      0|            return arg_type_category::unsigned_integer;
 7076|       |
 7077|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.13M]
  ------------------
 7078|      0|            return arg_type_category::pointer;
 7079|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 1.13M]
  ------------------
 7080|      0|            return arg_type_category::boolean;
 7081|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.13M]
  ------------------
 7082|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 1.13M]
  ------------------
 7083|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 1.13M]
  ------------------
 7084|      0|            return arg_type_category::character;
 7085|       |
 7086|   351k|        case arg_type::float_type:
  ------------------
  |  Branch (7086:9): [True: 351k, False: 778k]
  ------------------
 7087|   737k|        case arg_type::double_type:
  ------------------
  |  Branch (7087:9): [True: 385k, False: 744k]
  ------------------
 7088|  1.13M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7088:9): [True: 392k, False: 737k]
  ------------------
 7089|  1.13M|            return arg_type_category::floating;
 7090|       |
 7091|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 1.13M]
  ------------------
 7092|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 1.13M]
  ------------------
 7093|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7093:9): [True: 0, False: 1.13M]
  ------------------
 7094|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 1.13M]
  ------------------
 7095|      0|            return arg_type_category::string;
 7096|       |
 7097|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.13M]
  ------------------
 7098|      0|            return arg_type_category::custom;
 7099|       |
 7100|      0|            SCN_CLANG_PUSH
 7101|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7102|      0|        default:
  ------------------
  |  Branch (7102:9): [True: 0, False: 1.13M]
  ------------------
 7103|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|  1.13M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7105|  1.13M|            SCN_CLANG_POP
 7106|  1.13M|    }
 7107|       |
 7108|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.13M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|  4.91M|    {
 2892|  4.91M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|  4.91M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2925|  4.91M|    {
 2926|  4.91M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|  4.91M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2948|  4.91M|    {
 2949|  4.91M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2950|  4.91M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2957|  4.91M|    {
 2958|  4.91M|        return fn::impl(std::forward<T>(t));
 2959|  4.91M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3649|  1.34k|{
 3650|  1.34k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.34k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.31k|{
 3650|  2.31k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.31k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3649|  36.6k|{
 3650|  36.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  36.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  36.6k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  4.05M|{
 7189|  4.05M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 2.92M, False: 1.13M]
  ------------------
 7190|  4.05M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7190:10): [True: 0, False: 2.92M]
  ------------------
 7191|  2.92M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7191:10): [True: 0, False: 2.92M]
  ------------------
 7192|      0|        SCN_UNLIKELY_ATTR
 7193|      0|        return handler.on_error("Invalid type specifier for float type");
 7194|      0|    }
 7195|  4.05M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4190|   731M|    {
 4191|   731M|        return m_end == nullptr;
 4192|   731M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  1.97M|{
 3711|  1.97M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  1.97M|                                          const CharT*, const CharT*>) {
 3713|  1.97M|        return {first, last};
 3714|  1.97M|    }
 3715|  1.97M|    else {
 3716|  1.97M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  1.97M|    }
 3718|  1.97M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4206|  9.63M|    {
 4207|  9.63M|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 9.63M]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|  9.63M|        return parent()->get_segment_starting_at(position());
 4213|  9.63M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4200|   407M|    {
 4201|   407M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   407M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   407M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|   407M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|   407M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4096|  9.63M|    {
 4097|  9.63M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  9.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.25M, False: 5.38M]
  |  |  ------------------
  ------------------
 4098|  9.63M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|  4.25M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|  4.25M|        }
 4101|  5.38M|        const auto start = pos - m_putback_buffer.size();
 4102|  5.38M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  5.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|  5.38M|        return m_current_view.substr(start);
 4104|  5.38M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4195|  6.71M|    {
 4196|  6.71M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  6.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4197|  6.71M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4198|  6.71M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4185|  17.6M|    {
 4186|  17.6M|        return m_position;
 4187|  17.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4118|  7.60M|    {
 4119|  7.60M|        return m_is_contiguous;
 4120|  7.60M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4190|  30.7M|    {
 4191|  30.7M|        return m_end == nullptr;
 4192|  30.7M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  62.0k|{
 3711|  62.0k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  62.0k|                                          const CharT*, const CharT*>) {
 3713|  62.0k|        return {first, last};
 3714|  62.0k|    }
 3715|  62.0k|    else {
 3716|  62.0k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  62.0k|    }
 3718|  62.0k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4206|   447k|    {
 4207|   447k|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 447k]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|   447k|        return parent()->get_segment_starting_at(position());
 4213|   447k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4200|  16.6M|    {
 4201|  16.6M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  16.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|  16.6M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|  16.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4096|   447k|    {
 4097|   447k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126k, False: 320k]
  |  |  ------------------
  ------------------
 4098|   447k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|   126k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|   126k|        }
 4101|   320k|        const auto start = pos - m_putback_buffer.size();
 4102|   320k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   320k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   320k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|   320k|        return m_current_view.substr(start);
 4104|   320k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4195|   804k|    {
 4196|   804k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   804k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   804k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4197|   804k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4198|   804k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4185|  1.27M|    {
 4186|  1.27M|        return m_position;
 4187|  1.27M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4118|   950k|    {
 4119|   950k|        return m_is_contiguous;
 4120|   950k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3175|  22.8M|    {
 3176|  22.8M|        return static_cast<D&>(*this);
 3177|  22.8M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  11.4M|    {
 2974|  11.4M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  11.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  11.4M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  11.4M|    {
 3001|  11.4M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  11.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  11.4M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3216|  11.4M|    {
 3217|  11.4M|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 18.5k, False: 11.4M]
  ------------------
 3218|  11.4M|                   ? nullptr
 3219|  11.4M|                   : std::addressof(*ranges::begin(derived()));
 3220|  11.4M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3175|   398k|    {
 3176|   398k|        return static_cast<D&>(*this);
 3177|   398k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   199k|    {
 2974|   199k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   199k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   199k|    {
 3001|   199k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   199k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3216|   199k|    {
 3217|   199k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 0, False: 199k]
  ------------------
 3218|   199k|                   ? nullptr
 3219|   199k|                   : std::addressof(*ranges::begin(derived()));
 3220|   199k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8164|  1.81M|    {
 8165|  1.81M|        return ranges::subrange{begin(), end()};
 8166|  1.81M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8148|  5.36M|    {
 8149|  5.36M|        return m_current;
 8150|  5.36M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8156|  1.81M|    {
 8157|  1.81M|        return ranges::default_sentinel;
 8158|  1.81M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  28.1M|    {
 3312|  28.1M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7986|  8.68M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.53M|    {
 1833|  2.53M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.53M|                                            std::forward<F>(f));
 1835|  2.53M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  2.53M|{
 1319|  2.53M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.53M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.53M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.53M|            return result(*std::forward<Exp>(exp));
 1323|  2.53M|        }
 1324|       |
 1325|  2.53M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.53M|        return result(unexpect, monostate{});
 1327|  2.53M|    }
 1328|  2.53M|    else {
 1329|  2.53M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.53M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.50M, False: 28.9k]
  |  |  ------------------
  ------------------
 1331|  2.53M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.53M|                   : result(unexpect,
 1333|  28.9k|                            trivial_invoke(std::forward<F>(f),
 1334|  28.9k|                                           std::forward<Exp>(exp).error()));
 1335|  2.53M|    }
 1336|  2.53M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  27.1M|    {
  481|  27.1M|        return m_has_value;
  482|  27.1M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|  9.16M|    {
 1659|  9.16M|        return std::move(value());
 1660|  9.16M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|  10.5M|    {
 1623|  10.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  10.5M|        return this->get_value();
 1625|  10.5M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  10.5M|    {
  447|  10.5M|        return m_value;
  448|  10.5M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|  9.70M|    {
 1426|  9.70M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  9.70M|    {
  433|  9.70M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  14.3M|    {
 1173|  14.3M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|  59.2k|{
 1207|  59.2k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  59.2k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  81.3k|    {
 1610|  81.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  81.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  81.3k|        return std::move(this->get_unexpected().error());
 1612|  81.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|   110k|    {
  464|   110k|        return m_unexpected;
  465|   110k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|   498k|    {
  357|   498k|        return m_unexpected;
  358|   498k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|  2.46M|    {
 1482|  2.46M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.77M|    {
  443|  2.77M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8164|   241k|    {
 8165|   241k|        return ranges::subrange{begin(), end()};
 8166|   241k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8148|   529k|    {
 8149|   529k|        return m_current;
 8150|   529k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8156|   241k|    {
 8157|   241k|        return ranges::default_sentinel;
 8158|   241k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  2.48M|    {
 3312|  2.48M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   316k|    {
 1833|   316k|        return detail::transform_error_impl(std::move(*this),
 1834|   316k|                                            std::forward<F>(f));
 1835|   316k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   316k|{
 1319|   316k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   316k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   316k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   316k|            return result(*std::forward<Exp>(exp));
 1323|   316k|        }
 1324|       |
 1325|   316k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   316k|        return result(unexpect, monostate{});
 1327|   316k|    }
 1328|   316k|    else {
 1329|   316k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   316k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   316k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 314k, False: 2.20k]
  |  |  ------------------
  ------------------
 1331|   316k|                   ? result(*std::forward<Exp>(exp))
 1332|   316k|                   : result(unexpect,
 1333|  2.20k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.20k|                                           std::forward<Exp>(exp).error()));
 1335|   316k|    }
 1336|   316k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.68M|    {
  481|  2.68M|        return m_has_value;
  482|  2.68M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|  1.06M|    {
 1659|  1.06M|        return std::move(value());
 1660|  1.06M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|  1.07M|    {
 1623|  1.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.07M|        return this->get_value();
 1625|  1.07M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  1.07M|    {
  447|  1.07M|        return m_value;
  448|  1.07M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|   509k|    {
 1426|   509k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   509k|    {
  433|   509k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.81M|    {
 1173|  1.81M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  52.0k|    {
 1610|  52.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  52.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  52.0k|        return std::move(this->get_unexpected().error());
 1612|  52.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  52.8k|    {
  464|  52.8k|        return m_unexpected;
  465|  52.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|   564k|    {
 1482|   564k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.26M|    {
  443|  1.26M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|   215k|    {
  343|   215k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   215k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   215k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|   275k|    {
 1472|   275k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  2.67M|    {
  443|  2.67M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  14.1M|    {
 1173|  14.1M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  9.69M|    {
 1426|  9.69M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  9.69M|    {
  433|  9.69M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1593|  16.6M|    {
 1594|  16.6M|        return has_value();
 1595|  16.6M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  25.9M|    {
  481|  25.9M|        return m_has_value;
  482|  25.9M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1599|   332k|    {
 1600|   332k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   332k|        return this->get_unexpected().error();
 1602|   332k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   332k|    {
  464|   332k|        return m_unexpected;
  465|   332k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  7.29M|    {
 1659|  7.29M|        return std::move(value());
 1660|  7.29M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  9.05M|    {
 1623|  9.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  9.05M|        return this->get_value();
 1625|  9.05M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  9.05M|    {
  447|  9.05M|        return m_value;
  448|  9.05M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|   561k|    {
 1472|   561k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   992k|    {
  443|   992k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.81M|    {
 1173|  1.81M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|   778k|    {
 1426|   778k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   778k|    {
  433|   778k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1593|  2.13M|    {
 1594|  2.13M|        return has_value();
 1595|  2.13M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  3.43M|    {
  481|  3.43M|        return m_has_value;
  482|  3.43M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1599|   677k|    {
 1600|   677k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   677k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   677k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   677k|        return this->get_unexpected().error();
 1602|   677k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   677k|    {
  464|   677k|        return m_unexpected;
  465|   677k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|   579k|    {
 1659|   579k|        return std::move(value());
 1660|   579k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|   626k|    {
 1623|   626k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   626k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   626k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   626k|        return this->get_value();
 1625|   626k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|   626k|    {
  447|   626k|        return m_value;
  448|   626k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  2.50M|    {
 1833|  2.50M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.50M|                                            std::forward<F>(f));
 1835|  2.50M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  2.50M|{
 1319|  2.50M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.50M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.50M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.50M|            return result(*std::forward<Exp>(exp));
 1323|  2.50M|        }
 1324|       |
 1325|  2.50M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.50M|        return result(unexpect, monostate{});
 1327|  2.50M|    }
 1328|  2.50M|    else {
 1329|  2.50M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.50M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.48M, False: 25.9k]
  |  |  ------------------
  ------------------
 1331|  2.50M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.50M|                   : result(unexpect,
 1333|  25.9k|                            trivial_invoke(std::forward<F>(f),
 1334|  25.9k|                                           std::forward<Exp>(exp).error()));
 1335|  2.50M|    }
 1336|  2.50M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  9.63M|    {
  481|  9.63M|        return m_has_value;
  482|  9.63M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  2.48M|    {
 1659|  2.48M|        return std::move(value());
 1660|  2.48M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  3.41M|    {
 1623|  3.41M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.41M|        return this->get_value();
 1625|  3.41M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  3.41M|    {
  447|  3.41M|        return m_value;
  448|  3.41M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1609|  25.9k|    {
 1610|  25.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  25.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  25.9k|        return std::move(this->get_unexpected().error());
 1612|  25.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  32.8k|    {
  464|  32.8k|        return m_unexpected;
  465|  32.8k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|  2.40M|    {
 1482|  2.40M|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  18.0M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   308k|    {
 1472|   308k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4234|  61.4M|    {
 4235|  61.4M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  61.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  61.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 61.4M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  61.4M|        auto res = read_at_position();
 4244|  61.4M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  61.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  61.4M|        return parent()->get_character_at(m_position);
 4246|  61.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4299|   239M|    {
 4300|   239M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   239M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   239M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|   239M|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 239M]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|   239M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   239M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 207M, False: 32.3M]
  |  |  ------------------
  ------------------
 4307|   207M|            return true;
 4308|   207M|        }
 4309|       |
 4310|  64.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 32.3M, False: 31.9M]
  ------------------
 4311|  32.3M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 422k, False: 31.9M]
  ------------------
 4312|   422k|                return false;
 4313|   422k|            }
 4314|  32.3M|        }
 4315|  31.9M|        return true;
 4316|  32.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4076|   310M|    {
 4077|   310M|        return m_putback_buffer.size() + m_current_view.size();
 4078|   310M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4107|  61.4M|    {
 4108|  61.4M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  61.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4M, False: 23.0M]
  |  |  ------------------
  ------------------
 4109|  61.4M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  38.4M|            return m_putback_buffer[pos];
 4111|  38.4M|        }
 4112|  23.0M|        const auto start = pos - m_putback_buffer.size();
 4113|  23.0M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  23.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|  23.0M|        return m_current_view[start];
 4115|  23.0M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4220|   122M|    {
 4221|   122M|        ++m_position;
 4222|   122M|        (void)read_at_position();
 4223|   122M|        return *this;
 4224|   122M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4269|  58.4M|    {
 4270|  58.4M|        return !(lhs == rhs);
 4271|  58.4M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4264|  65.0M|    {
 4265|  65.0M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 65.0M, False: 0]
  |  Branch (4265:46): [True: 8.51M, False: 56.5M]
  ------------------
 4266|  65.0M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  22.4M|    {
 4276|  22.4M|        return x.is_at_end();
 4277|  22.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4319|  55.6M|    {
 4320|  55.6M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 55.6M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  55.6M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 55.6M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  55.6M|        return !read_at_position();
 4327|  55.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  16.3M|    {
 1426|  16.3M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  16.3M|    {
  433|  16.3M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.4M|    {
 1173|  16.4M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|   152k|    {
  343|   152k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   152k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   152k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|   110k|    {
 1472|   110k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   110k|    {
  443|   110k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|   249k|    {
  352|   249k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   249k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   249k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1593|  7.24M|    {
 1594|  7.24M|        return has_value();
 1595|  7.24M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1648|  1.39M|    {
 1649|  1.39M|        return value();
 1650|  1.39M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  96.8k|    {
  343|  96.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  96.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  96.8k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  21.7k|    {
 1472|  21.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  21.7k|    {
  443|  21.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.52M|    {
 1173|  3.52M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  3.50M|    {
 1426|  3.50M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  3.50M|    {
  433|  3.50M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|  3.52M|    {
 1594|  3.52M|        return has_value();
 1595|  3.52M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  7.05M|    {
  481|  7.05M|        return m_has_value;
  482|  7.05M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  21.7k|    {
 1600|  21.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  21.7k|        return this->get_unexpected().error();
 1602|  21.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  21.7k|    {
  464|  21.7k|        return m_unexpected;
  465|  21.7k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.50M|    {
 1659|  3.50M|        return std::move(value());
 1660|  3.50M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.50M|    {
 1623|  3.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.50M|        return this->get_value();
 1625|  3.50M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.50M|    {
  447|  3.50M|        return m_value;
  448|  3.50M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  79.3M|    {
 3330|  79.3M|        return m_sentinel;
 3331|  79.3M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|  94.2k|    {
  343|  94.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  94.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  94.2k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  21.7M|    {
  357|  21.7M|        return m_unexpected;
  358|  21.7M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  5.93M|    {
  352|  5.93M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.93M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  5.93M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  26.7M|    {
  343|  26.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  26.7M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  26.7M|    {
  357|  26.7M|        return m_unexpected;
  358|  26.7M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  26.7M|    {
  352|  26.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  26.7M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|   152k|{
 1207|   152k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|   152k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  5.69M|    {
  343|  5.69M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.69M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  5.69M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1599|  29.5k|    {
 1600|  29.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  29.5k|        return this->get_unexpected().error();
 1602|  29.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  2.54M|    {
 1472|  2.54M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.59M|    {
  443|  2.59M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  28.0M|    {
 1173|  28.0M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1425|  1.40M|    {
 1426|  1.40M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.40M|    {
  433|  1.40M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  14.3M|    {
 1472|  14.3M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  14.3M|    {
  443|  14.3M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1593|  30.6M|    {
 1594|  30.6M|        return has_value();
 1595|  30.6M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  53.7M|    {
  481|  53.7M|        return m_has_value;
  482|  53.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1599|  6.94M|    {
 1600|  6.94M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.94M|        return this->get_unexpected().error();
 1602|  6.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.94M|    {
  464|  6.94M|        return m_unexpected;
  465|  6.94M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1425|  2.75M|    {
 1426|  2.75M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.75M|    {
  433|  2.75M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.75M|    {
 1173|  2.75M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|    512|    {
 1472|    512|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|    512|    {
  443|    512|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1648|  7.13M|    {
 1649|  7.13M|        return value();
 1650|  7.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1622|  13.7M|    {
 1623|  13.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  13.7M|        return this->get_value();
 1625|  13.7M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  13.7M|    {
  447|  13.7M|        return m_value;
  448|  13.7M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1593|   249k|    {
 1594|   249k|        return has_value();
 1595|   249k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|  5.50M|    {
  481|  5.50M|        return m_has_value;
  482|  5.50M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1658|  2.50M|    {
 1659|  2.50M|        return std::move(value());
 1660|  2.50M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1622|  2.75M|    {
 1623|  2.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.75M|        return this->get_value();
 1625|  2.75M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|  2.75M|    {
  447|  2.75M|        return m_value;
  448|  2.75M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  6.71M|    {
 1833|  6.71M|        return detail::transform_error_impl(std::move(*this),
 1834|  6.71M|                                            std::forward<F>(f));
 1835|  6.71M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  6.71M|{
 1319|  6.71M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  6.71M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  6.71M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  6.71M|            return result(*std::forward<Exp>(exp));
 1323|  6.71M|        }
 1324|       |
 1325|  6.71M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  6.71M|        return result(unexpect, monostate{});
 1327|  6.71M|    }
 1328|  6.71M|    else {
 1329|  6.71M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  6.71M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.71M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.66M, False: 52.4k]
  |  |  ------------------
  ------------------
 1331|  6.71M|                   ? result(*std::forward<Exp>(exp))
 1332|  6.71M|                   : result(unexpect,
 1333|  52.4k|                            trivial_invoke(std::forward<F>(f),
 1334|  52.4k|                                           std::forward<Exp>(exp).error()));
 1335|  6.71M|    }
 1336|  6.71M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1425|  9.78M|    {
 1426|  9.78M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  9.78M|    {
  433|  9.78M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1481|  52.4k|    {
 1482|  52.4k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1658|  6.66M|    {
 1659|  6.66M|        return std::move(value());
 1660|  6.66M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  2.89M|    {
 3326|  2.89M|        return m_iterator;
 3327|  2.89M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  2.89M|    {
 3330|  2.89M|        return m_sentinel;
 3331|  2.89M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  16.8M|    {
 1594|  16.8M|        return has_value();
 1595|  16.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  26.3M|    {
  481|  26.3M|        return m_has_value;
  482|  26.3M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|   406k|    {
 1600|   406k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   406k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   406k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   406k|        return this->get_unexpected().error();
 1602|   406k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   406k|    {
  464|   406k|        return m_unexpected;
  465|   406k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|  7.32M|    {
 1659|  7.32M|        return std::move(value());
 1660|  7.32M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|  9.14M|    {
 1623|  9.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  9.14M|        return this->get_value();
 1625|  9.14M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  9.14M|    {
  447|  9.14M|        return m_value;
  448|  9.14M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  4.57M|{
  322|  4.57M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  4.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  4.57M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  2.28M|    {
 3312|  2.28M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|  33.1M|    {
 4287|  33.1M|        return !x.is_at_end();
 4288|  33.1M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  1.86M|    {
 1426|  1.86M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.86M|    {
  433|  1.86M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  32.8k|    {
 1472|  32.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  32.8k|    {
  443|  32.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  6.19M|    {
 1173|  6.19M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  6.16M|    {
 1426|  6.16M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  6.16M|    {
  433|  6.16M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1593|  3.68M|    {
 1594|  3.68M|        return has_value();
 1595|  3.68M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|   927k|    {
 1649|   927k|        return value();
 1650|   927k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  18.5k|    {
 1472|  18.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  18.5k|    {
  443|  18.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.39M|    {
 1173|  3.39M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  3.37M|    {
 1426|  3.37M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  3.37M|    {
  433|  3.37M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1593|  3.39M|    {
 1594|  3.39M|        return has_value();
 1595|  3.39M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.78M|    {
  481|  6.78M|        return m_has_value;
  482|  6.78M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1599|  18.5k|    {
 1600|  18.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  18.5k|        return this->get_unexpected().error();
 1602|  18.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  18.5k|    {
  464|  18.5k|        return m_unexpected;
  465|  18.5k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  3.37M|    {
 1659|  3.37M|        return std::move(value());
 1660|  3.37M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  3.37M|    {
 1623|  3.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.37M|        return this->get_value();
 1625|  3.37M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.37M|    {
  447|  3.37M|        return m_value;
  448|  3.37M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1599|  6.92k|    {
 1600|  6.92k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.92k|        return this->get_unexpected().error();
 1602|  6.92k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  2.50M|    {
 1472|  2.50M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.50M|    {
  443|  2.50M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  14.1M|    {
 1173|  14.1M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1425|   944k|    {
 1426|   944k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   944k|    {
  433|   944k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  9.66M|    {
 1472|  9.66M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  9.66M|    {
  443|  9.66M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1593|  16.6M|    {
 1594|  16.6M|        return has_value();
 1595|  16.6M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  28.3M|    {
  481|  28.3M|        return m_has_value;
  482|  28.3M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1599|  6.65M|    {
 1600|  6.65M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.65M|        return this->get_unexpected().error();
 1602|  6.65M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.65M|    {
  464|  6.65M|        return m_unexpected;
  465|  6.65M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  2.56M|    {
 1426|  2.56M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.56M|    {
  433|  2.56M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.56M|    {
 1173|  2.56M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|    162|    {
 1472|    162|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|    162|    {
  443|    162|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1648|  2.70M|    {
 1649|  2.70M|        return value();
 1650|  2.70M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|  2.70M|    {
 1623|  2.70M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.70M|        return this->get_value();
 1625|  2.70M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  2.70M|    {
  447|  2.70M|        return m_value;
  448|  2.70M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  80.1k|    {
 1594|  80.1k|        return has_value();
 1595|  80.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  5.12M|    {
  481|  5.12M|        return m_has_value;
  482|  5.12M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.48M|    {
 1659|  2.48M|        return std::move(value());
 1660|  2.48M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.56M|    {
 1623|  2.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.56M|        return this->get_value();
 1625|  2.56M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  2.56M|    {
  447|  2.56M|        return m_value;
  448|  2.56M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  1.05M|    {
 1426|  1.05M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.05M|    {
  433|  1.05M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  4.80M|    {
 2851|  4.80M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  4.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  4.80M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  4.80M|    {
 2832|  4.80M|        return t.data();
 2833|  4.80M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  1.79M|    {
 1426|  1.79M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.79M|    {
  433|  1.79M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1471|  1.14M|    {
 1472|  1.14M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  1.14M|    {
  443|  1.14M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  15.9M|    {
 1173|  15.9M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1425|  14.4M|    {
 1426|  14.4M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  14.4M|    {
  433|  14.4M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1658|  9.83M|    {
 1659|  9.83M|        return std::move(value());
 1660|  9.83M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1206|  5.80M|{
 1207|  5.80M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  5.80M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1832|  2.50M|    {
 1833|  2.50M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.50M|                                            std::forward<F>(f));
 1835|  2.50M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|  2.50M|{
 1319|  2.50M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.50M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.50M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.50M|            return result(*std::forward<Exp>(exp));
 1323|  2.50M|        }
 1324|       |
 1325|  2.50M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.50M|        return result(unexpect, monostate{});
 1327|  2.50M|    }
 1328|  2.50M|    else {
 1329|  2.50M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.50M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.50M, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.50M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.50M|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.50M|    }
 1336|  2.50M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  2.50M|    {
 1426|  2.50M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.50M|    {
  433|  2.50M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.50M|    {
 1173|  2.50M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|  2.50M|    {
 1594|  2.50M|        return has_value();
 1595|  2.50M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.00M|    {
  481|  5.00M|        return m_has_value;
  482|  5.00M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1658|  2.50M|    {
 1659|  2.50M|        return std::move(value());
 1660|  2.50M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  2.50M|    {
 1623|  2.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.50M|        return this->get_value();
 1625|  2.50M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.50M|    {
  447|  2.50M|        return m_value;
  448|  2.50M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1818|  2.43M|    {
 1819|  2.43M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|  2.43M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1318|  2.43M|{
 1319|  2.43M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.43M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.43M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.43M|            return result(*std::forward<Exp>(exp));
 1323|  2.43M|        }
 1324|       |
 1325|  2.43M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.43M|        return result(unexpect, monostate{});
 1327|  2.43M|    }
 1328|  2.43M|    else {
 1329|  2.43M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.43M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.43M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.43M]
  |  |  ------------------
  ------------------
 1331|  2.43M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.43M|                   : result(unexpect,
 1333|  2.43M|                            trivial_invoke(std::forward<F>(f),
 1334|  2.43M|                                           std::forward<Exp>(exp).error()));
 1335|  2.43M|    }
 1336|  2.43M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  1.81M|    {
 1649|  1.81M|        return value();
 1650|  1.81M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   613k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1668|   248k|    {
 1669|   248k|        return &value();
 1670|   248k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2719|  1.75M|    {
 2720|  1.75M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  1.75M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2700|  1.75M|    {
 2701|  1.75M|        return decay_copy(t.begin());
 2702|  1.75M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1944|  1.75M|{
 1945|  1.75M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  1.75M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|  1.09M|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|  2.48M|    {
 1833|  2.48M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.48M|                                            std::forward<F>(f));
 1835|  2.48M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|  2.48M|{
 1319|  2.48M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.48M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.48M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.48M|            return result(*std::forward<Exp>(exp));
 1323|  2.48M|        }
 1324|       |
 1325|  2.48M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.48M|        return result(unexpect, monostate{});
 1327|  2.48M|    }
 1328|  2.48M|    else {
 1329|  2.48M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.48M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.48M, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.48M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.48M|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.48M|    }
 1336|  2.48M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.48M|    {
 1426|  2.48M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.48M|    {
  433|  2.48M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.48M|    {
 1173|  2.48M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|  2.48M|    {
 1594|  2.48M|        return has_value();
 1595|  2.48M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.96M|    {
  481|  4.96M|        return m_has_value;
  482|  4.96M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.48M|    {
 1659|  2.48M|        return std::move(value());
 1660|  2.48M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.48M|    {
 1623|  2.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.48M|        return this->get_value();
 1625|  2.48M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.48M|    {
  447|  2.48M|        return m_value;
  448|  2.48M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1818|  2.37M|    {
 1819|  2.37M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|  2.37M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|  2.37M|{
 1319|  2.37M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.37M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.37M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.37M|            return result(*std::forward<Exp>(exp));
 1323|  2.37M|        }
 1324|       |
 1325|  2.37M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.37M|        return result(unexpect, monostate{});
 1327|  2.37M|    }
 1328|  2.37M|    else {
 1329|  2.37M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.37M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.37M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.37M]
  |  |  ------------------
  ------------------
 1331|  2.37M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.37M|                   : result(unexpect,
 1333|  2.37M|                            trivial_invoke(std::forward<F>(f),
 1334|  2.37M|                                           std::forward<Exp>(exp).error()));
 1335|  2.37M|    }
 1336|  2.37M|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|  2.37M|    {
 3644|  2.37M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  1.75M|    {
 1649|  1.75M|        return value();
 1650|  1.75M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1668|  79.9k|    {
 1669|  79.9k|        return &value();
 1670|  79.9k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3643|  2.43M|    {
 3644|  2.43M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   695k|    {
 1472|   695k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4234|  2.82M|    {
 4235|  2.82M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  2.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  2.82M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 2.82M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  2.82M|        auto res = read_at_position();
 4244|  2.82M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  2.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  2.82M|        return parent()->get_character_at(m_position);
 4246|  2.82M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4299|  9.25M|    {
 4300|  9.25M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  9.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|  9.25M|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 9.25M]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|  9.25M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  9.25M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.83M, False: 1.41M]
  |  |  ------------------
  ------------------
 4307|  7.83M|            return true;
 4308|  7.83M|        }
 4309|       |
 4310|  2.67M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 1.41M, False: 1.26M]
  ------------------
 4311|  1.41M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 152k, False: 1.26M]
  ------------------
 4312|   152k|                return false;
 4313|   152k|            }
 4314|  1.41M|        }
 4315|  1.26M|        return true;
 4316|  1.41M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4076|  12.7M|    {
 4077|  12.7M|        return m_putback_buffer.size() + m_current_view.size();
 4078|  12.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4107|  2.82M|    {
 4108|  2.82M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.38M, False: 440k]
  |  |  ------------------
  ------------------
 4109|  2.82M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  2.38M|            return m_putback_buffer[pos];
 4111|  2.38M|        }
 4112|   440k|        const auto start = pos - m_putback_buffer.size();
 4113|   440k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   440k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   440k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|   440k|        return m_current_view[start];
 4115|   440k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4220|  3.34M|    {
 4221|  3.34M|        ++m_position;
 4222|  3.34M|        (void)read_at_position();
 4223|  3.34M|        return *this;
 4224|  3.34M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4269|  1.08M|    {
 4270|  1.08M|        return !(lhs == rhs);
 4271|  1.08M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4264|  1.52M|    {
 4265|  1.52M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 1.52M, False: 0]
  |  Branch (4265:46): [True: 486k, False: 1.03M]
  ------------------
 4266|  1.52M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  2.20M|    {
 4276|  2.20M|        return x.is_at_end();
 4277|  2.20M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4319|  3.08M|    {
 4320|  3.08M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 3.08M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  3.08M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 3.08M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  3.08M|        return !read_at_position();
 4327|  3.08M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   875k|{
 3803|   875k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|   875k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|   875k|    }
 3806|   875k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3806:24): [Folded - Ignored]
  ------------------
 3807|   875k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|   875k|    }
 3809|   875k|    else {
 3810|       |        // utf-32
 3811|   875k|        static_assert(sizeof(U) == 4);
 3812|   875k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   875k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   875k|        return 1;
 3814|   875k|    }
 3815|   875k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  1.50M|    {
 1426|  1.50M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.50M|    {
  433|  1.50M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.56M|    {
 1173|  1.56M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  52.8k|    {
 1472|  52.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  52.8k|    {
  443|  52.8k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1593|   439k|    {
 1594|   439k|        return has_value();
 1595|   439k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1648|  3.47k|    {
 1649|  3.47k|        return value();
 1650|  3.47k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   875k|{
 4009|   875k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|   875k|        return decode_utf8_code_point_exhaustive(input);
 4011|   875k|    }
 4012|   875k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4012:24): [Folded - Ignored]
  ------------------
 4013|   875k|        return decode_utf16_code_point_exhaustive(input);
 4014|   875k|    }
 4015|   875k|    else {
 4016|   875k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   875k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   875k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   875k|        auto cp = static_cast<char32_t>(input.front());
 4018|   875k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   875k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 255k, False: 619k]
  |  |  ------------------
  ------------------
 4019|   255k|            return invalid_code_point;
 4020|   255k|        }
 4021|   619k|        return cp;
 4022|   875k|    }
 4023|   875k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  1.65k|    {
 1472|  1.65k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.65k|    {
  443|  1.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   288k|    {
 1173|   288k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   286k|    {
 1426|   286k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   286k|    {
  433|   286k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|   288k|    {
 1594|   288k|        return has_value();
 1595|   288k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   576k|    {
  481|   576k|        return m_has_value;
  482|   576k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  1.65k|    {
 1600|  1.65k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.65k|        return this->get_unexpected().error();
 1602|  1.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.65k|    {
  464|  1.65k|        return m_unexpected;
  465|  1.65k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   286k|    {
 1659|   286k|        return std::move(value());
 1660|   286k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   286k|    {
 1623|   286k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   286k|        return this->get_value();
 1625|   286k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   286k|    {
  447|   286k|        return m_value;
  448|   286k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  5.01M|    {
 3330|  5.01M|        return m_sentinel;
 3331|  5.01M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1599|    813|    {
 1600|    813|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    813|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    813|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    813|        return this->get_unexpected().error();
 1602|    813|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|   365k|    {
 1472|   365k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   415k|    {
  443|   415k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.74M|    {
 1173|  2.74M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1425|  3.47k|    {
 1426|  3.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  3.47k|    {
  433|  3.47k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  1.50M|    {
 1472|  1.50M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.50M|    {
  443|  1.50M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1593|  3.06M|    {
 1594|  3.06M|        return has_value();
 1595|  3.06M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  5.76M|    {
  481|  5.76M|        return m_has_value;
  482|  5.76M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1599|  1.24M|    {
 1600|  1.24M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.24M|        return this->get_unexpected().error();
 1602|  1.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.24M|    {
  464|  1.24M|        return m_unexpected;
  465|  1.24M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1425|   317k|    {
 1426|   317k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   317k|    {
  433|   317k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   317k|    {
 1173|   317k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|     27|    {
 1472|     27|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|     27|    {
  443|     27|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1648|   139k|    {
 1649|   139k|        return value();
 1650|   139k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1622|   894k|    {
 1623|   894k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   894k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   894k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   894k|        return this->get_value();
 1625|   894k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   894k|    {
  447|   894k|        return m_value;
  448|   894k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1593|  2.93k|    {
 1594|  2.93k|        return has_value();
 1595|  2.93k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|   635k|    {
  481|   635k|        return m_has_value;
  482|   635k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1658|   314k|    {
 1659|   314k|        return std::move(value());
 1660|   314k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1622|   317k|    {
 1623|   317k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   317k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   317k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   317k|        return this->get_value();
 1625|   317k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|   317k|    {
  447|   317k|        return m_value;
  448|   317k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   804k|    {
 1833|   804k|        return detail::transform_error_impl(std::move(*this),
 1834|   804k|                                            std::forward<F>(f));
 1835|   804k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   804k|{
 1319|   804k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   804k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   804k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   804k|            return result(*std::forward<Exp>(exp));
 1323|   804k|        }
 1324|       |
 1325|   804k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   804k|        return result(unexpect, monostate{});
 1327|   804k|    }
 1328|   804k|    else {
 1329|   804k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   804k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   804k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 755k, False: 49.8k]
  |  |  ------------------
  ------------------
 1331|   804k|                   ? result(*std::forward<Exp>(exp))
 1332|   804k|                   : result(unexpect,
 1333|  49.8k|                            trivial_invoke(std::forward<F>(f),
 1334|  49.8k|                                           std::forward<Exp>(exp).error()));
 1335|   804k|    }
 1336|   804k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1425|   823k|    {
 1426|   823k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   823k|    {
  433|   823k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1481|  49.8k|    {
 1482|  49.8k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1658|   755k|    {
 1659|   755k|        return std::move(value());
 1660|   755k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  71.7k|    {
 3326|  71.7k|        return m_iterator;
 3327|  71.7k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  71.7k|    {
 3330|  71.7k|        return m_sentinel;
 3331|  71.7k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  2.13M|    {
 1594|  2.13M|        return has_value();
 1595|  2.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  3.56M|    {
  481|  3.56M|        return m_has_value;
  482|  3.56M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|   945k|    {
 1600|   945k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   945k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   945k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   945k|        return this->get_unexpected().error();
 1602|   945k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   945k|    {
  464|   945k|        return m_unexpected;
  465|   945k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|   444k|    {
 1659|   444k|        return std::move(value());
 1660|   444k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|   491k|    {
 1623|   491k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   491k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   491k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   491k|        return this->get_value();
 1625|   491k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   491k|    {
  447|   491k|        return m_value;
  448|   491k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|   130k|{
  302|   130k|    return p;
  303|   130k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   130k|{
  322|   130k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   130k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  65.2k|    {
 3312|  65.2k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|   884k|    {
 4287|   884k|        return !x.is_at_end();
 4288|   884k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  47.2k|    {
 1426|  47.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  47.2k|    {
  433|  47.2k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  52.3k|    {
 1472|  52.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  52.3k|    {
  443|  52.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.47M|    {
 1173|  1.47M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  1.42M|    {
 1426|  1.42M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.42M|    {
  433|  1.42M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1593|   355k|    {
 1594|   355k|        return has_value();
 1595|   355k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.60M|    {
  481|  2.60M|        return m_has_value;
  482|  2.60M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|  1.57k|    {
 1649|  1.57k|        return value();
 1650|  1.57k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  1.07M|    {
 1623|  1.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.07M|        return this->get_value();
 1625|  1.07M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  1.07M|    {
  447|  1.07M|        return m_value;
  448|  1.07M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  1.65k|    {
 1472|  1.65k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  1.65k|    {
  443|  1.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   288k|    {
 1173|   288k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|   286k|    {
 1426|   286k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   286k|    {
  433|   286k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   317k|    {
 1833|   317k|        return detail::transform_error_impl(std::move(*this),
 1834|   317k|                                            std::forward<F>(f));
 1835|   317k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   317k|{
 1319|   317k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   317k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   317k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   317k|            return result(*std::forward<Exp>(exp));
 1323|   317k|        }
 1324|       |
 1325|   317k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   317k|        return result(unexpect, monostate{});
 1327|   317k|    }
 1328|   317k|    else {
 1329|   317k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   317k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   317k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 314k, False: 2.20k]
  |  |  ------------------
  ------------------
 1331|   317k|                   ? result(*std::forward<Exp>(exp))
 1332|   317k|                   : result(unexpect,
 1333|  2.20k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.20k|                                           std::forward<Exp>(exp).error()));
 1335|   317k|    }
 1336|   317k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  1.07M|    {
 1659|  1.07M|        return std::move(value());
 1660|  1.07M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1609|  52.0k|    {
 1610|  52.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  52.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  52.0k|        return std::move(this->get_unexpected().error());
 1612|  52.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  52.3k|    {
  464|  52.3k|        return m_unexpected;
  465|  52.3k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|   430k|    {
 1482|   430k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1593|   288k|    {
 1594|   288k|        return has_value();
 1595|   288k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|   576k|    {
  481|   576k|        return m_has_value;
  482|   576k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1599|  1.65k|    {
 1600|  1.65k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.65k|        return this->get_unexpected().error();
 1602|  1.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.65k|    {
  464|  1.65k|        return m_unexpected;
  465|  1.65k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|   286k|    {
 1659|   286k|        return std::move(value());
 1660|   286k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|   286k|    {
 1623|   286k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   286k|        return this->get_value();
 1625|   286k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|   286k|    {
  447|   286k|        return m_value;
  448|   286k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1599|    248|    {
 1600|    248|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    248|        return this->get_unexpected().error();
 1602|    248|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|   365k|    {
 1472|   365k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   414k|    {
  443|   414k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.44M|    {
 1173|  2.44M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1425|  1.57k|    {
 1426|  1.57k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.57k|    {
  433|  1.57k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  1.24M|    {
 1472|  1.24M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.24M|    {
  443|  1.24M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1593|  2.76M|    {
 1594|  2.76M|        return has_value();
 1595|  2.76M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  5.10M|    {
  481|  5.10M|        return m_has_value;
  482|  5.10M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1599|  1.10M|    {
 1600|  1.10M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.10M|        return this->get_unexpected().error();
 1602|  1.10M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.10M|    {
  464|  1.10M|        return m_unexpected;
  465|  1.10M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|   316k|    {
 1426|   316k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   316k|    {
  433|   316k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   316k|    {
 1173|   316k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|     12|    {
 1472|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|     12|    {
  443|     12|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1648|  53.2k|    {
 1649|  53.2k|        return value();
 1650|  53.2k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|   808k|    {
 1623|   808k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   808k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   808k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   808k|        return this->get_value();
 1625|   808k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   808k|    {
  447|   808k|        return m_value;
  448|   808k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  1.19k|    {
 1594|  1.19k|        return has_value();
 1595|  1.19k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|   632k|    {
  481|   632k|        return m_has_value;
  482|   632k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|   314k|    {
 1659|   314k|        return std::move(value());
 1660|   314k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|   316k|    {
 1623|   316k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   316k|        return this->get_value();
 1625|   316k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|   316k|    {
  447|   316k|        return m_value;
  448|   316k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   805k|    {
 1833|   805k|        return detail::transform_error_impl(std::move(*this),
 1834|   805k|                                            std::forward<F>(f));
 1835|   805k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   805k|{
 1319|   805k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   805k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   805k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   805k|            return result(*std::forward<Exp>(exp));
 1323|   805k|        }
 1324|       |
 1325|   805k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   805k|        return result(unexpect, monostate{});
 1327|   805k|    }
 1328|   805k|    else {
 1329|   805k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   805k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   805k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 755k, False: 49.8k]
  |  |  ------------------
  ------------------
 1331|   805k|                   ? result(*std::forward<Exp>(exp))
 1332|   805k|                   : result(unexpect,
 1333|  49.8k|                            trivial_invoke(std::forward<F>(f),
 1334|  49.8k|                                           std::forward<Exp>(exp).error()));
 1335|   805k|    }
 1336|   805k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|   781k|    {
 1426|   781k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   781k|    {
  433|   781k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|  49.8k|    {
 1482|  49.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|   755k|    {
 1659|   755k|        return std::move(value());
 1660|   755k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   199k|    {
 2851|   199k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   199k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   199k|    {
 2832|   199k|        return t.data();
 2833|   199k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  47.3k|    {
 1426|  47.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  47.3k|    {
  433|  47.3k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1832|   314k|    {
 1833|   314k|        return detail::transform_error_impl(std::move(*this),
 1834|   314k|                                            std::forward<F>(f));
 1835|   314k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|   314k|{
 1319|   314k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   314k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   314k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   314k|            return result(*std::forward<Exp>(exp));
 1323|   314k|        }
 1324|       |
 1325|   314k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   314k|        return result(unexpect, monostate{});
 1327|   314k|    }
 1328|   314k|    else {
 1329|   314k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   314k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   314k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 314k, False: 0]
  |  |  ------------------
  ------------------
 1331|   314k|                   ? result(*std::forward<Exp>(exp))
 1332|   314k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|   314k|    }
 1336|   314k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   314k|    {
 1426|   314k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   314k|    {
  433|   314k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   314k|    {
 1173|   314k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|   314k|    {
 1594|   314k|        return has_value();
 1595|   314k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   629k|    {
  481|   629k|        return m_has_value;
  482|   629k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1658|   314k|    {
 1659|   314k|        return std::move(value());
 1660|   314k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   314k|    {
 1623|   314k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   314k|        return this->get_value();
 1625|   314k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   314k|    {
  447|   314k|        return m_value;
  448|   314k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1818|   562k|    {
 1819|   562k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|   562k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1318|   562k|{
 1319|   562k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   562k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   562k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   562k|            return result(*std::forward<Exp>(exp));
 1323|   562k|        }
 1324|       |
 1325|   562k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   562k|        return result(unexpect, monostate{});
 1327|   562k|    }
 1328|   562k|    else {
 1329|   562k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   562k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   562k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 562k]
  |  |  ------------------
  ------------------
 1331|   562k|                   ? result(*std::forward<Exp>(exp))
 1332|   562k|                   : result(unexpect,
 1333|   562k|                            trivial_invoke(std::forward<F>(f),
 1334|   562k|                                           std::forward<Exp>(exp).error()));
 1335|   562k|    }
 1336|   562k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  47.2k|    {
 1649|  47.2k|        return value();
 1650|  47.2k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|  50.4k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1668|  2.90k|    {
 1669|  2.90k|        return &value();
 1670|  2.90k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2719|   264k|    {
 2720|   264k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   264k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2700|   264k|    {
 2701|   264k|        return decay_copy(t.begin());
 2702|   264k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1944|   264k|{
 1945|   264k|    return SCN_FWD(t);
  ------------------
  |  |  930|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   264k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   125k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|   314k|    {
 1833|   314k|        return detail::transform_error_impl(std::move(*this),
 1834|   314k|                                            std::forward<F>(f));
 1835|   314k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|   314k|{
 1319|   314k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   314k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   314k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   314k|            return result(*std::forward<Exp>(exp));
 1323|   314k|        }
 1324|       |
 1325|   314k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   314k|        return result(unexpect, monostate{});
 1327|   314k|    }
 1328|   314k|    else {
 1329|   314k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   314k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   314k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 314k, False: 0]
  |  |  ------------------
  ------------------
 1331|   314k|                   ? result(*std::forward<Exp>(exp))
 1332|   314k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|   314k|    }
 1336|   314k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   314k|    {
 1426|   314k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   314k|    {
  433|   314k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   314k|    {
 1173|   314k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|   314k|    {
 1594|   314k|        return has_value();
 1595|   314k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   629k|    {
  481|   629k|        return m_has_value;
  482|   629k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   314k|    {
 1659|   314k|        return std::move(value());
 1660|   314k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   314k|    {
 1623|   314k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   314k|        return this->get_value();
 1625|   314k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   314k|    {
  447|   314k|        return m_value;
  448|   314k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1818|   428k|    {
 1819|   428k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|   428k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|   428k|{
 1319|   428k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   428k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   428k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   428k|            return result(*std::forward<Exp>(exp));
 1323|   428k|        }
 1324|       |
 1325|   428k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   428k|        return result(unexpect, monostate{});
 1327|   428k|    }
 1328|   428k|    else {
 1329|   428k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   428k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   428k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 428k]
  |  |  ------------------
  ------------------
 1331|   428k|                   ? result(*std::forward<Exp>(exp))
 1332|   428k|                   : result(unexpect,
 1333|   428k|                            trivial_invoke(std::forward<F>(f),
 1334|   428k|                                           std::forward<Exp>(exp).error()));
 1335|   428k|    }
 1336|   428k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|   428k|    {
 3644|   428k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  47.3k|    {
 1649|  47.3k|        return value();
 1650|  47.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1668|  1.18k|    {
 1669|  1.18k|        return &value();
 1670|  1.18k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3643|   562k|    {
 3644|   562k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1425|   264k|    {
 1426|   264k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  432|   264k|    {
  433|   264k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|   175k|{
 3650|   175k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   175k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  2.24M|    {
 2851|  2.24M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  2.24M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  2.24M|    {
 2832|  2.24M|        return t.data();
 2833|  2.24M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5461|  4.55M|    {
 5462|  4.55M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.55M]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|  4.55M|        return static_cast<std::size_t>(m_desc &
 5467|  4.55M|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|  4.55M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5486|  9.10M|    {
 5487|  9.10M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|  9.10M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5429|  4.55M|    {
 5430|  4.55M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.55M]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  4.55M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.55M]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  4.55M|        const auto t = type(id);
 5442|  4.55M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.55M]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|  4.55M|        basic_scan_arg<Context> arg;
 5447|  4.55M|        arg.m_type = t;
 5448|  4.55M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 4.55M, False: 0]
  ------------------
 5449|  4.55M|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  4.55M|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  4.55M|        return arg;
 5455|  4.55M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5495|  4.55M|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  4.55M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  4.55M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  4.55M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  4.55M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5490|  4.55M|    {
 5491|  4.55M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  4.55M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5242|  8.61M|    {
 5243|  8.61M|        return m_type != detail::arg_type::none_type;
 5244|  8.61M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   756k|{
 8413|   756k|#define SCN_VISIT(Type)                                         \
 8414|   756k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   756k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   756k|    }                                                           \
 8417|   756k|    else {                                                      \
 8418|   756k|        return vis(monostate_val);                              \
 8419|   756k|    }
 8420|       |
 8421|   756k|    monostate monostate_val{};
 8422|       |
 8423|   756k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 756k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 756k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 756k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 756k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 756k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 756k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 756k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 756k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 756k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 756k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 756k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 756k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 756k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 756k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 756k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   234k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 234k, False: 522k]
  ------------------
 8455|   234k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   234k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   234k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   234k|    }                                                           \
  |  | 8417|   234k|    else {                                                      \
  |  | 8418|   234k|        return vis(monostate_val);                              \
  |  | 8419|   234k|    }
  ------------------
 8456|   258k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 258k, False: 497k]
  ------------------
 8457|   258k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   258k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   258k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   258k|    }                                                           \
  |  | 8417|   258k|    else {                                                      \
  |  | 8418|   258k|        return vis(monostate_val);                              \
  |  | 8419|   258k|    }
  ------------------
 8458|   263k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 263k, False: 492k]
  ------------------
 8459|   263k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   263k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   263k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   263k|    }                                                           \
  |  | 8417|   263k|    else {                                                      \
  |  | 8418|   263k|        return vis(monostate_val);                              \
  |  | 8419|   263k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 756k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 756k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 756k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 756k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 756k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 756k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 756k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 756k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 756k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   756k|            SCN_CLANG_POP
 8491|   756k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5540|  3.57M|    {
 5541|  3.57M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|  1.81M|    {
 8134|  1.81M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8051|  3.57M|    {
 8052|  3.57M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4339|  2.53M|{
 4340|  2.53M|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 2.53M]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|  2.53M|    return ranges::subrange{forward_iterator{this, 0},
 4345|  2.53M|                            ranges::default_sentinel};
 4346|  2.53M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4172|  2.53M|    {
 4173|  2.53M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|  2.53M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|  2.53M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   713k|{
 8413|   713k|#define SCN_VISIT(Type)                                         \
 8414|   713k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   713k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   713k|    }                                                           \
 8417|   713k|    else {                                                      \
 8418|   713k|        return vis(monostate_val);                              \
 8419|   713k|    }
 8420|       |
 8421|   713k|    monostate monostate_val{};
 8422|       |
 8423|   713k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 713k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 713k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 713k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 713k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 713k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 713k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 713k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 713k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 713k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 713k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 713k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 713k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 713k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 713k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 713k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   221k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 221k, False: 492k]
  ------------------
 8455|   221k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   221k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   221k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   221k|    }                                                           \
  |  | 8417|   221k|    else {                                                      \
  |  | 8418|   221k|        return vis(monostate_val);                              \
  |  | 8419|   221k|    }
  ------------------
 8456|   244k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 244k, False: 468k]
  ------------------
 8457|   244k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   244k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   244k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   244k|    }                                                           \
  |  | 8417|   244k|    else {                                                      \
  |  | 8418|   244k|        return vis(monostate_val);                              \
  |  | 8419|   244k|    }
  ------------------
 8458|   247k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 247k, False: 465k]
  ------------------
 8459|   247k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   247k|    }                                                           \
  |  | 8417|   247k|    else {                                                      \
  |  | 8418|   247k|        return vis(monostate_val);                              \
  |  | 8419|   247k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 713k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 713k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 713k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 713k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 713k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 713k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 713k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 713k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 713k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   713k|            SCN_CLANG_POP
 8491|   713k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  1.75M|{
 7040|  1.75M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  1.75M|    handler.check_args_exhausted();
 7042|  1.75M|    return handler.get_error();
 7043|  1.75M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  1.75M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  1.75M|    auto begin = format.data();
 7009|  1.75M|    auto it = begin;
 7010|  1.75M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  3.40M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 1.75M, False: 1.65M]
  ------------------
 7013|  1.75M|        const auto ch = *it++;
 7014|  1.75M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 1.75M, False: 0]
  ------------------
 7015|  1.75M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  1.75M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  1.75M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 97.0k, False: 1.65M]
  ------------------
 7019|  97.0k|                return;
 7020|  97.0k|            }
 7021|  1.75M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  1.75M|    }
 7032|       |
 7033|  1.65M|    handler.on_literal_text(begin, end);
 7034|  1.65M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6937|  1.75M|{
 6938|  1.75M|    struct id_adapter {
 6939|  1.75M|        constexpr void operator()()
 6940|  1.75M|        {
 6941|  1.75M|            arg_id = handler.on_arg_id();
 6942|  1.75M|        }
 6943|  1.75M|        constexpr void operator()(std::size_t id)
 6944|  1.75M|        {
 6945|  1.75M|            arg_id = handler.on_arg_id(id);
 6946|  1.75M|        }
 6947|       |
 6948|  1.75M|        constexpr void on_error(const char* msg)
 6949|  1.75M|        {
 6950|  1.75M|            SCN_UNLIKELY_ATTR
 6951|  1.75M|            handler.on_error(msg);
 6952|  1.75M|        }
 6953|       |
 6954|  1.75M|        Handler& handler;
 6955|  1.75M|        std::size_t arg_id;
 6956|  1.75M|    };
 6957|       |
 6958|  1.75M|    ++begin;
 6959|  1.75M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  1.75M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 1.75M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  1.75M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 1.75M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  1.75M|    else {
 6971|  1.75M|        auto adapter = id_adapter{handler, 0};
 6972|  1.75M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  1.75M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  1.75M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 1.75M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  1.75M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 1.75M, False: 0]
  ------------------
 6983|  1.75M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  1.75M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  1.75M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.75M]
  |  |  |  Branch (859:45): [True: 0, False: 1.75M]
  |  |  |  Branch (859:45): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|  1.75M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  1.75M|    }
 6999|  1.75M|    return begin + 1;
 7000|  1.75M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8034|  3.57M|    {
 8035|  3.57M|        return m_args.get(id);
 8036|  3.57M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8044|  3.57M|    {
 8045|  3.57M|        return m_locale;
 8046|  3.57M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5561|  3.57M|    {
 5562|  3.57M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.57M]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|  3.57M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  3.57M|        do_check_arg_id(id);
 5570|  3.57M|        return id;
 5571|  3.57M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6049|  3.57M|{
 6050|  3.57M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  3.57M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  3.57M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  1.75M|{
 6439|  1.75M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  1.75M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 1.75M, False: 0]
  |  Branch (6440:26): [True: 0, False: 1.75M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  1.75M|    handler();
 6445|  1.75M|    return begin;
 6446|  1.75M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  1.75M|        {
 6941|  1.75M|            arg_id = handler.on_arg_id();
 6942|  1.75M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5247|  7.14M|    {
 5248|  7.14M|        return m_type;
 5249|  7.14M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5556|  3.57M|    {
 5557|  3.57M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  3.57M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5545|  7.14M|    {
 5546|  7.14M|        return m_format.data();
 5547|  7.14M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  1.75M|    {
 7118|  1.75M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.75M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6853|  1.75M|{
 6854|  1.75M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.75M|        if (*begin == CharT{'['}) {
 6856|  1.75M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  1.75M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  1.75M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  1.75M|                return begin;
 6862|  1.75M|            }
 6863|  1.75M|            handler.on_character_set_string(set);
 6864|  1.75M|            return begin;
 6865|  1.75M|        }
 6866|  1.75M|        if (*begin == CharT{'/'}) {
 6867|  1.75M|            return parse_presentation_regex(begin, end, handler);
 6868|  1.75M|        }
 6869|  1.75M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.75M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  1.75M|            handler.on_error("Invalid type specifier in format string");
 6872|  1.75M|            return begin;
 6873|  1.75M|        }
 6874|  1.75M|        handler.on_type(type);
 6875|  1.75M|        return begin;
 6876|  1.75M|    };
 6877|       |
 6878|  1.75M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 1.75M, False: 0]
  |  Branch (6878:28): [True: 1.75M, False: 0]
  ------------------
 6879|  1.75M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 1.75M, False: 0]
  |  Branch (6879:36): [True: 1.24M, False: 504k]
  ------------------
 6880|  1.24M|        return do_presentation();
 6881|  1.24M|    }
 6882|       |
 6883|   504k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   504k|    begin = parse_align(begin, end, handler);
 6889|   504k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   504k|    begin = parse_width(begin, end, handler);
 6895|   504k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   504k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 504k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   504k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 504k, False: 0]
  ------------------
 6914|   504k|        handler.on_localized();
 6915|   504k|        ++begin;
 6916|   504k|    }
 6917|   504k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   504k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 504k, False: 0]
  |  Branch (6922:25): [True: 0, False: 504k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|   504k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   504k|    return begin;
 6931|   504k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6502|  3.57M|{
 6503|  3.57M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 2.54M, False: 1.02M]
  |  Branch (6503:33): [True: 2.54M, False: 0]
  ------------------
 6504|  3.57M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 1.02M, False: 0]
  |  Branch (6504:33): [True: 1.02M, False: 0]
  ------------------
 6505|  3.57M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  1.24M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.24M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 1.24M]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|  1.24M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 1.24M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  1.24M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.24M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|  1.24M|        handler.on_type(type);
 6875|  1.24M|        return begin;
 6876|  1.24M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6450|  2.54M|{
 6451|  2.54M|    switch (type) {
 6452|      0|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 0, False: 2.54M]
  ------------------
 6453|      0|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 0, False: 2.54M]
  ------------------
 6454|      0|            return presentation_type::int_binary;
 6455|      0|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 0, False: 2.54M]
  ------------------
 6456|      0|            return presentation_type::int_decimal;
 6457|      0|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 0, False: 2.54M]
  ------------------
 6458|      0|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 2.54M]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|      0|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 0, False: 2.54M]
  ------------------
 6462|      0|            return presentation_type::int_octal;
 6463|      0|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 0, False: 2.54M]
  ------------------
 6464|      0|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 2.54M]
  ------------------
 6465|      0|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 2.54M]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 2.54M]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|  1.15M|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 1.15M, False: 1.39M]
  ------------------
 6470|  1.15M|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 2.54M]
  ------------------
 6471|  1.15M|            return presentation_type::float_hex;
 6472|  69.4k|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 69.4k, False: 2.47M]
  ------------------
 6473|  69.4k|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 2.54M]
  ------------------
 6474|  69.4k|            return presentation_type::float_scientific;
 6475|   456k|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 456k, False: 2.08M]
  ------------------
 6476|   456k|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 2.54M]
  ------------------
 6477|   456k|            return presentation_type::float_fixed;
 6478|   864k|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 864k, False: 1.67M]
  ------------------
 6479|   864k|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 2.54M]
  ------------------
 6480|   864k|            return presentation_type::float_general;
 6481|      0|        case 's':
  ------------------
  |  Branch (6481:9): [True: 0, False: 2.54M]
  ------------------
 6482|      0|            return presentation_type::string;
 6483|      0|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 0, False: 2.54M]
  ------------------
 6484|      0|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 2.54M]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 2.54M]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.54M]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 2.54M]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|      0|        default:
  ------------------
  |  Branch (6495:9): [True: 0, False: 2.54M]
  ------------------
 6496|      0|            return presentation_type::none;
 6497|  2.54M|    }
 6498|  2.54M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6527|   504k|{
 6528|   504k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   504k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   504k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   504k|    auto check_align = [](wchar_t ch) {
 6531|   504k|        switch (ch) {
 6532|   504k|            case L'<':
 6533|   504k|                return align_type::left;
 6534|   504k|            case L'>':
 6535|   504k|                return align_type::right;
 6536|   504k|            case L'^':
 6537|   504k|                return align_type::center;
 6538|   504k|            default:
 6539|   504k|                return align_type::none;
 6540|   504k|        }
 6541|   504k|    };
 6542|       |
 6543|   504k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   504k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 504k]
  |  |  |  Branch (859:45): [True: 0, False: 504k]
  |  |  |  Branch (859:45): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 6545|   504k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   504k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   504k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   504k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   504k|    const auto begin_before_fill = begin;
 6555|   504k|    begin += potential_fill_len;
 6556|       |
 6557|   504k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 504k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   504k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   504k|    const auto begin_after_fill = begin;
 6563|   504k|    ++begin;
 6564|       |
 6565|   504k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 504k, False: 0]
  ------------------
 6566|   504k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   504k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 504k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   504k|    }
 6574|       |
 6575|   504k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 504k, False: 0]
  ------------------
 6576|   504k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 504k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   504k|        return begin_before_fill;
 6581|   504k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   504k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6509|  1.02M|{
 6510|  1.02M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  1.02M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  1.02M|        return 1;
 6513|  1.02M|    }
 6514|  1.02M|    else {
 6515|  1.02M|        const auto lengths =
 6516|  1.02M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  1.02M|            "\3\4";
 6518|  1.02M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  1.02M|        return len;
 6520|  1.02M|    }
 6521|  1.02M|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|  1.00M|    auto check_align = [](wchar_t ch) {
 6531|  1.00M|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 1.00M]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 1.00M]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.00M]
  ------------------
 6537|      0|                return align_type::center;
 6538|  1.00M|            default:
  ------------------
  |  Branch (6538:13): [True: 1.00M, False: 0]
  ------------------
 6539|  1.00M|                return align_type::none;
 6540|  1.00M|        }
 6541|  1.00M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6592|   504k|{
 6593|   504k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   504k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   504k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   504k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 504k, False: 0]
  |  Branch (6595:33): [True: 0, False: 504k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   504k|    return begin;
 6606|   504k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7122|   504k|    {
 7123|   504k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|   504k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 504k, False: 0]
  ------------------
 7125|   504k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 504k, False: 0]
  ------------------
 7126|   504k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 504k]
  ------------------
 7127|   504k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|   504k|        Handler::on_localized();
 7135|   504k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  1.75M|{
 8413|  1.75M|#define SCN_VISIT(Type)                                         \
 8414|  1.75M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  1.75M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  1.75M|    }                                                           \
 8417|  1.75M|    else {                                                      \
 8418|  1.75M|        return vis(monostate_val);                              \
 8419|  1.75M|    }
 8420|       |
 8421|  1.75M|    monostate monostate_val{};
 8422|       |
 8423|  1.75M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 1.75M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 1.75M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.75M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.75M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.75M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.75M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.75M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.75M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.75M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.75M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.75M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.75M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.75M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.75M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.75M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   555k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 555k, False: 1.19M]
  ------------------
 8455|   555k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   555k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   555k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   555k|    }                                                           \
  |  | 8417|   555k|    else {                                                      \
  |  | 8418|   555k|        return vis(monostate_val);                              \
  |  | 8419|   555k|    }
  ------------------
 8456|   595k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 595k, False: 1.15M]
  ------------------
 8457|   595k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   595k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   595k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   595k|    }                                                           \
  |  | 8417|   595k|    else {                                                      \
  |  | 8418|   595k|        return vis(monostate_val);                              \
  |  | 8419|   595k|    }
  ------------------
 8458|   601k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 601k, False: 1.15M]
  ------------------
 8459|   601k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   601k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   601k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   601k|    }                                                           \
  |  | 8417|   601k|    else {                                                      \
  |  | 8418|   601k|        return vis(monostate_val);                              \
  |  | 8419|   601k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.75M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.75M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.75M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.75M]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.75M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.75M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.75M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.75M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 1.75M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  1.75M|            SCN_CLANG_POP
 8491|  1.75M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  1.81M|{
 7040|  1.81M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  1.81M|    handler.check_args_exhausted();
 7042|  1.81M|    return handler.get_error();
 7043|  1.81M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  1.81M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  1.81M|    auto begin = format.data();
 7009|  1.81M|    auto it = begin;
 7010|  1.81M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  3.54M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 1.81M, False: 1.72M]
  ------------------
 7013|  1.81M|        const auto ch = *it++;
 7014|  1.81M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 1.81M, False: 0]
  ------------------
 7015|  1.81M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  1.81M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  1.81M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 97.0k, False: 1.72M]
  ------------------
 7019|  97.0k|                return;
 7020|  97.0k|            }
 7021|  1.81M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  1.81M|    }
 7032|       |
 7033|  1.72M|    handler.on_literal_text(begin, end);
 7034|  1.72M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8170|  1.72M|    {
 8171|  1.72M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.72M|    static_cast<    \
  |  |  929|  1.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  1.72M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6937|  1.81M|{
 6938|  1.81M|    struct id_adapter {
 6939|  1.81M|        constexpr void operator()()
 6940|  1.81M|        {
 6941|  1.81M|            arg_id = handler.on_arg_id();
 6942|  1.81M|        }
 6943|  1.81M|        constexpr void operator()(std::size_t id)
 6944|  1.81M|        {
 6945|  1.81M|            arg_id = handler.on_arg_id(id);
 6946|  1.81M|        }
 6947|       |
 6948|  1.81M|        constexpr void on_error(const char* msg)
 6949|  1.81M|        {
 6950|  1.81M|            SCN_UNLIKELY_ATTR
 6951|  1.81M|            handler.on_error(msg);
 6952|  1.81M|        }
 6953|       |
 6954|  1.81M|        Handler& handler;
 6955|  1.81M|        std::size_t arg_id;
 6956|  1.81M|    };
 6957|       |
 6958|  1.81M|    ++begin;
 6959|  1.81M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  1.81M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 1.81M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  1.81M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 1.81M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  1.81M|    else {
 6971|  1.81M|        auto adapter = id_adapter{handler, 0};
 6972|  1.81M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  1.81M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  1.81M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 1.81M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  1.81M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 1.81M, False: 0]
  ------------------
 6983|  1.81M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  1.81M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  1.81M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  |  Branch (859:45): [True: 0, False: 1.81M]
  |  |  |  Branch (859:45): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|  1.81M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  1.81M|    }
 6999|  1.81M|    return begin + 1;
 7000|  1.81M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  1.81M|{
 6439|  1.81M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  1.81M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 1.81M, False: 0]
  |  Branch (6440:26): [True: 0, False: 1.81M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  1.81M|    handler();
 6445|  1.81M|    return begin;
 6446|  1.81M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  1.81M|        {
 6941|  1.81M|            arg_id = handler.on_arg_id();
 6942|  1.81M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|  1.81M|    {
 7118|  1.81M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.81M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6853|  1.81M|{
 6854|  1.81M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.81M|        if (*begin == CharT{'['}) {
 6856|  1.81M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  1.81M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  1.81M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  1.81M|                return begin;
 6862|  1.81M|            }
 6863|  1.81M|            handler.on_character_set_string(set);
 6864|  1.81M|            return begin;
 6865|  1.81M|        }
 6866|  1.81M|        if (*begin == CharT{'/'}) {
 6867|  1.81M|            return parse_presentation_regex(begin, end, handler);
 6868|  1.81M|        }
 6869|  1.81M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.81M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  1.81M|            handler.on_error("Invalid type specifier in format string");
 6872|  1.81M|            return begin;
 6873|  1.81M|        }
 6874|  1.81M|        handler.on_type(type);
 6875|  1.81M|        return begin;
 6876|  1.81M|    };
 6877|       |
 6878|  1.81M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 1.81M, False: 0]
  |  Branch (6878:28): [True: 1.81M, False: 0]
  ------------------
 6879|  1.81M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 1.81M, False: 0]
  |  Branch (6879:36): [True: 1.29M, False: 524k]
  ------------------
 6880|  1.29M|        return do_presentation();
 6881|  1.29M|    }
 6882|       |
 6883|   524k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   524k|    begin = parse_align(begin, end, handler);
 6889|   524k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   524k|    begin = parse_width(begin, end, handler);
 6895|   524k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   524k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 524k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   524k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 524k, False: 0]
  ------------------
 6914|   524k|        handler.on_localized();
 6915|   524k|        ++begin;
 6916|   524k|    }
 6917|   524k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   524k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 524k, False: 0]
  |  Branch (6922:25): [True: 0, False: 524k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|   524k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   524k|    return begin;
 6931|   524k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|  1.29M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.29M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 1.29M]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|  1.29M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 1.29M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  1.29M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.29M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|  1.29M|        handler.on_type(type);
 6875|  1.29M|        return begin;
 6876|  1.29M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6527|   524k|{
 6528|   524k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   524k|    auto check_align = [](wchar_t ch) {
 6531|   524k|        switch (ch) {
 6532|   524k|            case L'<':
 6533|   524k|                return align_type::left;
 6534|   524k|            case L'>':
 6535|   524k|                return align_type::right;
 6536|   524k|            case L'^':
 6537|   524k|                return align_type::center;
 6538|   524k|            default:
 6539|   524k|                return align_type::none;
 6540|   524k|        }
 6541|   524k|    };
 6542|       |
 6543|   524k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   524k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  |  Branch (859:45): [True: 0, False: 524k]
  |  |  |  Branch (859:45): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 6545|   524k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   524k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   524k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   524k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   524k|    const auto begin_before_fill = begin;
 6555|   524k|    begin += potential_fill_len;
 6556|       |
 6557|   524k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 524k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   524k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   524k|    const auto begin_after_fill = begin;
 6563|   524k|    ++begin;
 6564|       |
 6565|   524k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 524k, False: 0]
  ------------------
 6566|   524k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   524k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 524k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   524k|    }
 6574|       |
 6575|   524k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 524k, False: 0]
  ------------------
 6576|   524k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 524k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   524k|        return begin_before_fill;
 6581|   524k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   524k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|  1.04M|    auto check_align = [](wchar_t ch) {
 6531|  1.04M|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 1.04M]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 1.04M]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.04M]
  ------------------
 6537|      0|                return align_type::center;
 6538|  1.04M|            default:
  ------------------
  |  Branch (6538:13): [True: 1.04M, False: 0]
  ------------------
 6539|  1.04M|                return align_type::none;
 6540|  1.04M|        }
 6541|  1.04M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6592|   524k|{
 6593|   524k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   524k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 524k, False: 0]
  |  Branch (6595:33): [True: 0, False: 524k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   524k|    return begin;
 6606|   524k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7122|   524k|    {
 7123|   524k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|   524k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 524k, False: 0]
  ------------------
 7125|   524k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 524k, False: 0]
  ------------------
 7126|   524k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 524k]
  ------------------
 7127|   524k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|   524k|        Handler::on_localized();
 7135|   524k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  1.81M|{
 8413|  1.81M|#define SCN_VISIT(Type)                                         \
 8414|  1.81M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  1.81M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  1.81M|    }                                                           \
 8417|  1.81M|    else {                                                      \
 8418|  1.81M|        return vis(monostate_val);                              \
 8419|  1.81M|    }
 8420|       |
 8421|  1.81M|    monostate monostate_val{};
 8422|       |
 8423|  1.81M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 1.81M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 1.81M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.81M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.81M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.81M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.81M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.81M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.81M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.81M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.81M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.81M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.81M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.81M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.81M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.81M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   576k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 576k, False: 1.24M]
  ------------------
 8455|   576k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   576k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   576k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   576k|    }                                                           \
  |  | 8417|   576k|    else {                                                      \
  |  | 8418|   576k|        return vis(monostate_val);                              \
  |  | 8419|   576k|    }
  ------------------
 8456|   617k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 617k, False: 1.20M]
  ------------------
 8457|   617k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   617k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   617k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   617k|    }                                                           \
  |  | 8417|   617k|    else {                                                      \
  |  | 8418|   617k|        return vis(monostate_val);                              \
  |  | 8419|   617k|    }
  ------------------
 8458|   624k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 624k, False: 1.19M]
  ------------------
 8459|   624k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   624k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   624k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   624k|    }                                                           \
  |  | 8417|   624k|    else {                                                      \
  |  | 8418|   624k|        return vis(monostate_val);                              \
  |  | 8419|   624k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.81M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.81M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.81M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.81M]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.81M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.81M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.81M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.81M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 1.81M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  1.81M|            SCN_CLANG_POP
 8491|  1.81M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4071|   126k|    {
 4072|   126k|        sync(0);
 4073|   126k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5461|   583k|    {
 5462|   583k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 583k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|   583k|        return static_cast<std::size_t>(m_desc &
 5467|   583k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|   583k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5486|  1.16M|    {
 5487|  1.16M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|  1.16M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5429|   583k|    {
 5430|   583k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 583k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|   583k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 583k]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   583k|        const auto t = type(id);
 5442|   583k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 583k]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|   583k|        basic_scan_arg<Context> arg;
 5447|   583k|        arg.m_type = t;
 5448|   583k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 583k, False: 0]
  ------------------
 5449|   583k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|   583k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|   583k|        return arg;
 5455|   583k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5495|   583k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|   583k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|   583k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|   583k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|   583k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5490|   583k|    {
 5491|   583k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|   583k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5242|  1.11M|    {
 5243|  1.11M|        return m_type != detail::arg_type::none_type;
 5244|  1.11M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  75.7k|{
 8413|  75.7k|#define SCN_VISIT(Type)                                         \
 8414|  75.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  75.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  75.7k|    }                                                           \
 8417|  75.7k|    else {                                                      \
 8418|  75.7k|        return vis(monostate_val);                              \
 8419|  75.7k|    }
 8420|       |
 8421|  75.7k|    monostate monostate_val{};
 8422|       |
 8423|  75.7k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 75.7k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 75.7k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 75.7k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 75.7k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 75.7k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 75.7k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 75.7k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 75.7k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 75.7k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 75.7k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 75.7k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 75.7k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 75.7k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 75.7k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 75.7k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  25.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 25.1k, False: 50.5k]
  ------------------
 8455|  25.1k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  25.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  25.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  25.1k|    }                                                           \
  |  | 8417|  25.1k|    else {                                                      \
  |  | 8418|  25.1k|        return vis(monostate_val);                              \
  |  | 8419|  25.1k|    }
  ------------------
 8456|  25.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 25.2k, False: 50.4k]
  ------------------
 8457|  25.2k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  25.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  25.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  25.2k|    }                                                           \
  |  | 8417|  25.2k|    else {                                                      \
  |  | 8418|  25.2k|        return vis(monostate_val);                              \
  |  | 8419|  25.2k|    }
  ------------------
 8458|  25.3k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 25.3k, False: 50.4k]
  ------------------
 8459|  25.3k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  25.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  25.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  25.3k|    }                                                           \
  |  | 8417|  25.3k|    else {                                                      \
  |  | 8418|  25.3k|        return vis(monostate_val);                              \
  |  | 8419|  25.3k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 75.7k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 75.7k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 75.7k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 75.7k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 75.7k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 75.7k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 75.7k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 75.7k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 75.7k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  75.7k|            SCN_CLANG_POP
 8491|  75.7k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5540|   482k|    {
 5541|   482k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|   241k|    {
 8134|   241k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8051|   482k|    {
 8052|   482k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   241k|{
 7040|   241k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   241k|    handler.check_args_exhausted();
 7042|   241k|    return handler.get_error();
 7043|   241k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   241k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   241k|    auto begin = format.data();
 7009|   241k|    auto it = begin;
 7010|   241k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   288k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 241k, False: 47.3k]
  ------------------
 7013|   241k|        const auto ch = *it++;
 7014|   241k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 241k, False: 0]
  ------------------
 7015|   241k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   241k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   241k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 194k, False: 47.3k]
  ------------------
 7019|   194k|                return;
 7020|   194k|            }
 7021|   241k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   241k|    }
 7032|       |
 7033|  47.3k|    handler.on_literal_text(begin, end);
 7034|  47.3k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6937|   241k|{
 6938|   241k|    struct id_adapter {
 6939|   241k|        constexpr void operator()()
 6940|   241k|        {
 6941|   241k|            arg_id = handler.on_arg_id();
 6942|   241k|        }
 6943|   241k|        constexpr void operator()(std::size_t id)
 6944|   241k|        {
 6945|   241k|            arg_id = handler.on_arg_id(id);
 6946|   241k|        }
 6947|       |
 6948|   241k|        constexpr void on_error(const char* msg)
 6949|   241k|        {
 6950|   241k|            SCN_UNLIKELY_ATTR
 6951|   241k|            handler.on_error(msg);
 6952|   241k|        }
 6953|       |
 6954|   241k|        Handler& handler;
 6955|   241k|        std::size_t arg_id;
 6956|   241k|    };
 6957|       |
 6958|   241k|    ++begin;
 6959|   241k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   241k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 241k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   241k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 241k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   241k|    else {
 6971|   241k|        auto adapter = id_adapter{handler, 0};
 6972|   241k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   241k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   241k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 241k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   241k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 241k, False: 0]
  ------------------
 6983|   241k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   241k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   241k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  |  Branch (859:45): [True: 0, False: 241k]
  |  |  |  Branch (859:45): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|   241k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   241k|    }
 6999|   241k|    return begin + 1;
 7000|   241k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8034|   482k|    {
 8035|   482k|        return m_args.get(id);
 8036|   482k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8044|   482k|    {
 8045|   482k|        return m_locale;
 8046|   482k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5561|   482k|    {
 5562|   482k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 482k]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|   482k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|   482k|        do_check_arg_id(id);
 5570|   482k|        return id;
 5571|   482k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6049|   482k|{
 6050|   482k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|   482k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|   482k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   241k|{
 6439|   241k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   241k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 241k, False: 0]
  |  Branch (6440:26): [True: 0, False: 241k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   241k|    handler();
 6445|   241k|    return begin;
 6446|   241k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   241k|        {
 6941|   241k|            arg_id = handler.on_arg_id();
 6942|   241k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5247|   965k|    {
 5248|   965k|        return m_type;
 5249|   965k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5556|   482k|    {
 5557|   482k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|   482k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4339|   316k|{
 4340|   316k|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 316k]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|   316k|    return ranges::subrange{forward_iterator{this, 0},
 4345|   316k|                            ranges::default_sentinel};
 4346|   316k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4172|   316k|    {
 4173|   316k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|   316k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|   316k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5545|   965k|    {
 5546|   965k|        return m_format.data();
 5547|   965k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|   241k|    {
 7118|   241k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   241k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6853|   241k|{
 6854|   241k|    auto do_presentation = [&]() -> const CharT* {
 6855|   241k|        if (*begin == CharT{'['}) {
 6856|   241k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   241k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   241k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   241k|                return begin;
 6862|   241k|            }
 6863|   241k|            handler.on_character_set_string(set);
 6864|   241k|            return begin;
 6865|   241k|        }
 6866|   241k|        if (*begin == CharT{'/'}) {
 6867|   241k|            return parse_presentation_regex(begin, end, handler);
 6868|   241k|        }
 6869|   241k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   241k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   241k|            handler.on_error("Invalid type specifier in format string");
 6872|   241k|            return begin;
 6873|   241k|        }
 6874|   241k|        handler.on_type(type);
 6875|   241k|        return begin;
 6876|   241k|    };
 6877|       |
 6878|   241k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 241k, False: 0]
  |  Branch (6878:28): [True: 241k, False: 0]
  ------------------
 6879|   241k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 241k, False: 0]
  |  Branch (6879:36): [True: 190k, False: 50.4k]
  ------------------
 6880|   190k|        return do_presentation();
 6881|   190k|    }
 6882|       |
 6883|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  50.4k|    begin = parse_align(begin, end, handler);
 6889|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  50.4k|    begin = parse_width(begin, end, handler);
 6895|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  50.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 50.4k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  50.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 50.4k, False: 0]
  ------------------
 6914|  50.4k|        handler.on_localized();
 6915|  50.4k|        ++begin;
 6916|  50.4k|    }
 6917|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  50.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 50.4k, False: 0]
  |  Branch (6922:25): [True: 0, False: 50.4k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  50.4k|    return begin;
 6931|  50.4k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6502|   482k|{
 6503|   482k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 381k, False: 100k]
  |  Branch (6503:33): [True: 381k, False: 0]
  ------------------
 6504|   482k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 100k, False: 0]
  |  Branch (6504:33): [True: 100k, False: 0]
  ------------------
 6505|   482k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|   190k|    auto do_presentation = [&]() -> const CharT* {
 6855|   190k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 190k]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|   190k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 190k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   190k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   190k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|   190k|        handler.on_type(type);
 6875|   190k|        return begin;
 6876|   190k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6450|   381k|{
 6451|   381k|    switch (type) {
 6452|      0|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 0, False: 381k]
  ------------------
 6453|      0|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 0, False: 381k]
  ------------------
 6454|      0|            return presentation_type::int_binary;
 6455|      0|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 0, False: 381k]
  ------------------
 6456|      0|            return presentation_type::int_decimal;
 6457|      0|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 0, False: 381k]
  ------------------
 6458|      0|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 381k]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|      0|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 0, False: 381k]
  ------------------
 6462|      0|            return presentation_type::int_octal;
 6463|      0|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 0, False: 381k]
  ------------------
 6464|      0|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 381k]
  ------------------
 6465|      0|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 381k]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 381k]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|   101k|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 101k, False: 280k]
  ------------------
 6470|   101k|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 381k]
  ------------------
 6471|   101k|            return presentation_type::float_hex;
 6472|  78.0k|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 78.0k, False: 303k]
  ------------------
 6473|  78.0k|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 381k]
  ------------------
 6474|  78.0k|            return presentation_type::float_scientific;
 6475|   101k|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 101k, False: 280k]
  ------------------
 6476|   101k|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 381k]
  ------------------
 6477|   101k|            return presentation_type::float_fixed;
 6478|   100k|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 100k, False: 280k]
  ------------------
 6479|   100k|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 381k]
  ------------------
 6480|   100k|            return presentation_type::float_general;
 6481|      0|        case 's':
  ------------------
  |  Branch (6481:9): [True: 0, False: 381k]
  ------------------
 6482|      0|            return presentation_type::string;
 6483|      0|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 0, False: 381k]
  ------------------
 6484|      0|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 381k]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 381k]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 381k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 381k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|      0|        default:
  ------------------
  |  Branch (6495:9): [True: 0, False: 381k]
  ------------------
 6496|      0|            return presentation_type::none;
 6497|   381k|    }
 6498|   381k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6527|  50.4k|{
 6528|  50.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  50.4k|    auto check_align = [](wchar_t ch) {
 6531|  50.4k|        switch (ch) {
 6532|  50.4k|            case L'<':
 6533|  50.4k|                return align_type::left;
 6534|  50.4k|            case L'>':
 6535|  50.4k|                return align_type::right;
 6536|  50.4k|            case L'^':
 6537|  50.4k|                return align_type::center;
 6538|  50.4k|            default:
 6539|  50.4k|                return align_type::none;
 6540|  50.4k|        }
 6541|  50.4k|    };
 6542|       |
 6543|  50.4k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  50.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  |  Branch (859:45): [True: 0, False: 50.4k]
  |  |  |  Branch (859:45): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6545|  50.4k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  50.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  50.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  50.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  50.4k|    const auto begin_before_fill = begin;
 6555|  50.4k|    begin += potential_fill_len;
 6556|       |
 6557|  50.4k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 50.4k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  50.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  50.4k|    const auto begin_after_fill = begin;
 6563|  50.4k|    ++begin;
 6564|       |
 6565|  50.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 50.4k, False: 0]
  ------------------
 6566|  50.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  50.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 50.4k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|  50.4k|    }
 6574|       |
 6575|  50.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 50.4k, False: 0]
  ------------------
 6576|  50.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 50.4k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  50.4k|        return begin_before_fill;
 6581|  50.4k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  50.4k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6509|   100k|{
 6510|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|   100k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|   100k|        return 1;
 6513|   100k|    }
 6514|   100k|    else {
 6515|   100k|        const auto lengths =
 6516|   100k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|   100k|            "\3\4";
 6518|   100k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|   100k|        return len;
 6520|   100k|    }
 6521|   100k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|   100k|    auto check_align = [](wchar_t ch) {
 6531|   100k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 100k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 100k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 100k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   100k|            default:
  ------------------
  |  Branch (6538:13): [True: 100k, False: 0]
  ------------------
 6539|   100k|                return align_type::none;
 6540|   100k|        }
 6541|   100k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6592|  50.4k|{
 6593|  50.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  50.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 50.4k, False: 0]
  |  Branch (6595:33): [True: 0, False: 50.4k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|  50.4k|    return begin;
 6606|  50.4k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7122|  50.4k|    {
 7123|  50.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  50.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 50.4k, False: 0]
  ------------------
 7125|  50.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 50.4k, False: 0]
  ------------------
 7126|  50.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 50.4k]
  ------------------
 7127|  50.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|  50.4k|        Handler::on_localized();
 7135|  50.4k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   241k|{
 8413|   241k|#define SCN_VISIT(Type)                                         \
 8414|   241k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   241k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   241k|    }                                                           \
 8417|   241k|    else {                                                      \
 8418|   241k|        return vis(monostate_val);                              \
 8419|   241k|    }
 8420|       |
 8421|   241k|    monostate monostate_val{};
 8422|       |
 8423|   241k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 241k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 241k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 241k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 241k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 241k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 241k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 241k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 241k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 241k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 241k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 241k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 241k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 241k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 241k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 241k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  80.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 80.3k, False: 160k]
  ------------------
 8455|  80.3k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  80.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  80.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  80.3k|    }                                                           \
  |  | 8417|  80.3k|    else {                                                      \
  |  | 8418|  80.3k|        return vis(monostate_val);                              \
  |  | 8419|  80.3k|    }
  ------------------
 8456|  80.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 80.4k, False: 160k]
  ------------------
 8457|  80.4k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  80.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  80.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  80.4k|    }                                                           \
  |  | 8417|  80.4k|    else {                                                      \
  |  | 8418|  80.4k|        return vis(monostate_val);                              \
  |  | 8419|  80.4k|    }
  ------------------
 8458|  80.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 80.5k, False: 160k]
  ------------------
 8459|  80.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  80.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  80.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  80.5k|    }                                                           \
  |  | 8417|  80.5k|    else {                                                      \
  |  | 8418|  80.5k|        return vis(monostate_val);                              \
  |  | 8419|  80.5k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 241k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 241k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 241k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 241k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 241k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 241k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 241k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 241k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 241k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   241k|            SCN_CLANG_POP
 8491|   241k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  75.6k|{
 8413|  75.6k|#define SCN_VISIT(Type)                                         \
 8414|  75.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  75.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  75.6k|    }                                                           \
 8417|  75.6k|    else {                                                      \
 8418|  75.6k|        return vis(monostate_val);                              \
 8419|  75.6k|    }
 8420|       |
 8421|  75.6k|    monostate monostate_val{};
 8422|       |
 8423|  75.6k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 75.6k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 75.6k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 75.6k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 75.6k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 75.6k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 75.6k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 75.6k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 75.6k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 75.6k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 75.6k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 75.6k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 75.6k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 75.6k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 75.6k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 75.6k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  25.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 25.1k, False: 50.4k]
  ------------------
 8455|  25.1k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  25.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  25.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  25.1k|    }                                                           \
  |  | 8417|  25.1k|    else {                                                      \
  |  | 8418|  25.1k|        return vis(monostate_val);                              \
  |  | 8419|  25.1k|    }
  ------------------
 8456|  25.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 25.2k, False: 50.4k]
  ------------------
 8457|  25.2k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  25.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  25.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  25.2k|    }                                                           \
  |  | 8417|  25.2k|    else {                                                      \
  |  | 8418|  25.2k|        return vis(monostate_val);                              \
  |  | 8419|  25.2k|    }
  ------------------
 8458|  25.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 25.2k, False: 50.3k]
  ------------------
 8459|  25.2k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  25.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  25.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  25.2k|    }                                                           \
  |  | 8417|  25.2k|    else {                                                      \
  |  | 8418|  25.2k|        return vis(monostate_val);                              \
  |  | 8419|  25.2k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 75.6k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 75.6k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 75.6k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 75.6k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 75.6k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 75.6k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 75.6k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 75.6k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 75.6k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  75.6k|            SCN_CLANG_POP
 8491|  75.6k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   241k|{
 7040|   241k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   241k|    handler.check_args_exhausted();
 7042|   241k|    return handler.get_error();
 7043|   241k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   241k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   241k|    auto begin = format.data();
 7009|   241k|    auto it = begin;
 7010|   241k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   288k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 241k, False: 47.2k]
  ------------------
 7013|   241k|        const auto ch = *it++;
 7014|   241k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 241k, False: 0]
  ------------------
 7015|   241k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   241k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   241k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 194k, False: 47.2k]
  ------------------
 7019|   194k|                return;
 7020|   194k|            }
 7021|   241k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   241k|    }
 7032|       |
 7033|  47.2k|    handler.on_literal_text(begin, end);
 7034|  47.2k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8170|  47.2k|    {
 8171|  47.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  47.2k|    static_cast<    \
  |  |  929|  47.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  47.2k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6937|   241k|{
 6938|   241k|    struct id_adapter {
 6939|   241k|        constexpr void operator()()
 6940|   241k|        {
 6941|   241k|            arg_id = handler.on_arg_id();
 6942|   241k|        }
 6943|   241k|        constexpr void operator()(std::size_t id)
 6944|   241k|        {
 6945|   241k|            arg_id = handler.on_arg_id(id);
 6946|   241k|        }
 6947|       |
 6948|   241k|        constexpr void on_error(const char* msg)
 6949|   241k|        {
 6950|   241k|            SCN_UNLIKELY_ATTR
 6951|   241k|            handler.on_error(msg);
 6952|   241k|        }
 6953|       |
 6954|   241k|        Handler& handler;
 6955|   241k|        std::size_t arg_id;
 6956|   241k|    };
 6957|       |
 6958|   241k|    ++begin;
 6959|   241k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   241k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 241k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   241k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 241k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   241k|    else {
 6971|   241k|        auto adapter = id_adapter{handler, 0};
 6972|   241k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   241k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   241k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 241k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   241k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 241k, False: 0]
  ------------------
 6983|   241k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   241k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   241k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  |  Branch (859:45): [True: 0, False: 241k]
  |  |  |  Branch (859:45): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|   241k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   241k|    }
 6999|   241k|    return begin + 1;
 7000|   241k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   241k|{
 6439|   241k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   241k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 241k, False: 0]
  |  Branch (6440:26): [True: 0, False: 241k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   241k|    handler();
 6445|   241k|    return begin;
 6446|   241k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   241k|        {
 6941|   241k|            arg_id = handler.on_arg_id();
 6942|   241k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|   241k|    {
 7118|   241k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   241k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6853|   241k|{
 6854|   241k|    auto do_presentation = [&]() -> const CharT* {
 6855|   241k|        if (*begin == CharT{'['}) {
 6856|   241k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   241k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   241k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   241k|                return begin;
 6862|   241k|            }
 6863|   241k|            handler.on_character_set_string(set);
 6864|   241k|            return begin;
 6865|   241k|        }
 6866|   241k|        if (*begin == CharT{'/'}) {
 6867|   241k|            return parse_presentation_regex(begin, end, handler);
 6868|   241k|        }
 6869|   241k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   241k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   241k|            handler.on_error("Invalid type specifier in format string");
 6872|   241k|            return begin;
 6873|   241k|        }
 6874|   241k|        handler.on_type(type);
 6875|   241k|        return begin;
 6876|   241k|    };
 6877|       |
 6878|   241k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 241k, False: 0]
  |  Branch (6878:28): [True: 241k, False: 0]
  ------------------
 6879|   241k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 241k, False: 0]
  |  Branch (6879:36): [True: 190k, False: 50.4k]
  ------------------
 6880|   190k|        return do_presentation();
 6881|   190k|    }
 6882|       |
 6883|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  50.4k|    begin = parse_align(begin, end, handler);
 6889|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  50.4k|    begin = parse_width(begin, end, handler);
 6895|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  50.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 50.4k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  50.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 50.4k, False: 0]
  ------------------
 6914|  50.4k|        handler.on_localized();
 6915|  50.4k|        ++begin;
 6916|  50.4k|    }
 6917|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  50.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 50.4k, False: 0]
  |  Branch (6922:25): [True: 0, False: 50.4k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  50.4k|    return begin;
 6931|  50.4k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|   190k|    auto do_presentation = [&]() -> const CharT* {
 6855|   190k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 190k]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|   190k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 190k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   190k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   190k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|   190k|        handler.on_type(type);
 6875|   190k|        return begin;
 6876|   190k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6527|  50.4k|{
 6528|  50.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  50.4k|    auto check_align = [](wchar_t ch) {
 6531|  50.4k|        switch (ch) {
 6532|  50.4k|            case L'<':
 6533|  50.4k|                return align_type::left;
 6534|  50.4k|            case L'>':
 6535|  50.4k|                return align_type::right;
 6536|  50.4k|            case L'^':
 6537|  50.4k|                return align_type::center;
 6538|  50.4k|            default:
 6539|  50.4k|                return align_type::none;
 6540|  50.4k|        }
 6541|  50.4k|    };
 6542|       |
 6543|  50.4k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  50.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  |  Branch (859:45): [True: 0, False: 50.4k]
  |  |  |  Branch (859:45): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6545|  50.4k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  50.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  50.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  50.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  50.4k|    const auto begin_before_fill = begin;
 6555|  50.4k|    begin += potential_fill_len;
 6556|       |
 6557|  50.4k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 50.4k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  50.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  50.4k|    const auto begin_after_fill = begin;
 6563|  50.4k|    ++begin;
 6564|       |
 6565|  50.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 50.4k, False: 0]
  ------------------
 6566|  50.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  50.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 50.4k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|  50.4k|    }
 6574|       |
 6575|  50.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 50.4k, False: 0]
  ------------------
 6576|  50.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 50.4k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  50.4k|        return begin_before_fill;
 6581|  50.4k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  50.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|   100k|    auto check_align = [](wchar_t ch) {
 6531|   100k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 100k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 100k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 100k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   100k|            default:
  ------------------
  |  Branch (6538:13): [True: 100k, False: 0]
  ------------------
 6539|   100k|                return align_type::none;
 6540|   100k|        }
 6541|   100k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6592|  50.4k|{
 6593|  50.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  50.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 50.4k, False: 0]
  |  Branch (6595:33): [True: 0, False: 50.4k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|  50.4k|    return begin;
 6606|  50.4k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7122|  50.4k|    {
 7123|  50.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  50.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 50.4k, False: 0]
  ------------------
 7125|  50.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 50.4k, False: 0]
  ------------------
 7126|  50.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 50.4k]
  ------------------
 7127|  50.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|  50.4k|        Handler::on_localized();
 7135|  50.4k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   241k|{
 8413|   241k|#define SCN_VISIT(Type)                                         \
 8414|   241k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   241k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   241k|    }                                                           \
 8417|   241k|    else {                                                      \
 8418|   241k|        return vis(monostate_val);                              \
 8419|   241k|    }
 8420|       |
 8421|   241k|    monostate monostate_val{};
 8422|       |
 8423|   241k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 241k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 241k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 241k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 241k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 241k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 241k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 241k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 241k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 241k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 241k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 241k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 241k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 241k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 241k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 241k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  80.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 80.3k, False: 160k]
  ------------------
 8455|  80.3k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  80.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  80.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  80.3k|    }                                                           \
  |  | 8417|  80.3k|    else {                                                      \
  |  | 8418|  80.3k|        return vis(monostate_val);                              \
  |  | 8419|  80.3k|    }
  ------------------
 8456|  80.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 80.4k, False: 160k]
  ------------------
 8457|  80.4k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  80.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  80.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  80.4k|    }                                                           \
  |  | 8417|  80.4k|    else {                                                      \
  |  | 8418|  80.4k|        return vis(monostate_val);                              \
  |  | 8419|  80.4k|    }
  ------------------
 8458|  80.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 80.5k, False: 160k]
  ------------------
 8459|  80.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  80.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  80.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  80.5k|    }                                                           \
  |  | 8417|  80.5k|    else {                                                      \
  |  | 8418|  80.5k|        return vis(monostate_val);                              \
  |  | 8419|  80.5k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 241k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 241k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 241k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 241k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 241k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 241k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 241k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 241k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 241k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   241k|            SCN_CLANG_POP
 8491|   241k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4071|   252k|    {
 4072|   252k|        sync(0);
 4073|   252k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5415|   490k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5415|  50.4k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  48.5k|{
   89|  48.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  48.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  48.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.5k|    static_cast<    \
  |  |  929|  48.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.5k|    static_cast<    \
  |  |  929|  48.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  48.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   145k|{
   44|   145k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   145k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  48.5k|{
  127|  48.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  48.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  48.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.5k|    static_cast<    \
  |  |  929|  48.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.5k|    static_cast<    \
  |  |  929|  48.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  48.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   145k|{
   60|   145k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   145k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  8.39k|{
  163|  8.39k|    T value;
  164|  8.39k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.39k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.46k, False: 1.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.46k|    }                                                  \
  |  |  |  | 3667|  8.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.92k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.92k|    static_cast<    \
  |  |  929|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.92k|    static_cast<    \
  |  |  929|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.39k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  25.2k|{
   72|  25.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  25.2k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  48.6k|{
   89|  48.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  48.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  48.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  48.6k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  48.6k|{
  127|  48.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  48.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  48.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  48.6k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  8.41k|{
  163|  8.41k|    T value;
  164|  8.41k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.41k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.46k, False: 1.94k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.46k|    }                                                  \
  |  |  |  | 3667|  8.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.94k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.94k|    static_cast<    \
  |  |  929|  1.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.94k|    static_cast<    \
  |  |  929|  1.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.41k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  48.7k|{
   89|  48.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  48.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  48.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.7k|    static_cast<    \
  |  |  929|  48.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.7k|    static_cast<    \
  |  |  929|  48.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  48.7k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  48.7k|{
  127|  48.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  48.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  48.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.7k|    static_cast<    \
  |  |  929|  48.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.7k|    static_cast<    \
  |  |  929|  48.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  48.7k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  8.43k|{
  163|  8.43k|    T value;
  164|  8.43k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.43k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.46k, False: 1.96k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.46k|    }                                                  \
  |  |  |  | 3667|  8.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.96k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.96k|    static_cast<    \
  |  |  929|  1.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.96k|    static_cast<    \
  |  |  929|  1.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.43k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  48.5k|{
   89|  48.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  48.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  48.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.5k|    static_cast<    \
  |  |  929|  48.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.5k|    static_cast<    \
  |  |  929|  48.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  48.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   145k|{
   44|   145k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   145k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  48.5k|{
  127|  48.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  48.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  48.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.5k|    static_cast<    \
  |  |  929|  48.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.5k|    static_cast<    \
  |  |  929|  48.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  48.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   145k|{
   60|   145k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   145k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  8.38k|{
  163|  8.38k|    T value;
  164|  8.38k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.38k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.46k, False: 1.91k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.46k|    }                                                  \
  |  |  |  | 3667|  8.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.91k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.91k|    static_cast<    \
  |  |  929|  1.91k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.91k|    static_cast<    \
  |  |  929|  1.91k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.38k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  25.2k|{
   72|  25.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  25.2k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  48.6k|{
   89|  48.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  48.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  48.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  48.6k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  48.6k|{
  127|  48.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  48.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  48.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  48.6k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  8.40k|{
  163|  8.40k|    T value;
  164|  8.40k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.46k, False: 1.93k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.46k|    }                                                  \
  |  |  |  | 3667|  8.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.93k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.93k|    static_cast<    \
  |  |  929|  1.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.93k|    static_cast<    \
  |  |  929|  1.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.40k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  48.6k|{
   89|  48.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  48.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  48.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  48.6k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  48.6k|{
  127|  48.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  48.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  48.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  48.6k|    static_cast<    \
  |  |  929|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  48.6k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  8.42k|{
  163|  8.42k|    T value;
  164|  8.42k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.42k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.46k, False: 1.96k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.46k|    }                                                  \
  |  |  |  | 3667|  8.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.96k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.96k|    static_cast<    \
  |  |  929|  1.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.96k|    static_cast<    \
  |  |  929|  1.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.42k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  2.56M|{
  653|  2.56M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.56M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.11M|{
  659|  1.11M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.11M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 559k, False: 559k]
  ------------------
  661|  1.11M|                    : std::locale{};
  662|  1.11M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.52M|{
 1221|  1.52M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.52M|                                  m_nan_payload_buffer, value);
 1223|  1.52M|    value = this->setsign(value);
 1224|  1.52M|    return n;
 1225|  1.52M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  88.1k|{
 1221|  88.1k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  88.1k|                                  m_nan_payload_buffer, value);
 1223|  88.1k|    value = this->setsign(value);
 1224|  88.1k|    return n;
 1225|  88.1k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.65M|{
 1221|  1.65M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.65M|                                  m_nan_payload_buffer, value);
 1223|  1.65M|    value = this->setsign(value);
 1224|  1.65M|    return n;
 1225|  1.65M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  88.1k|{
 1221|  88.1k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  88.1k|                                  m_nan_payload_buffer, value);
 1223|  88.1k|    value = this->setsign(value);
 1224|  88.1k|    return n;
 1225|  88.1k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.67M|{
 1221|  1.67M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.67M|                                  m_nan_payload_buffer, value);
 1223|  1.67M|    value = this->setsign(value);
 1224|  1.67M|    return n;
 1225|  1.67M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  88.3k|{
 1221|  88.3k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  88.3k|                                  m_nan_payload_buffer, value);
 1223|  88.3k|    value = this->setsign(value);
 1224|  88.3k|    return n;
 1225|  88.3k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  1.12M|{
 2176|  1.12M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  1.12M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.14M|{
 2184|  1.14M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.14M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.08M, False: 58.2k]
  |  |  ------------------
  ------------------
 2186|  1.08M|        source.sync(*n);
 2187|  1.08M|    }
 2188|  58.2k|    else {
 2189|  58.2k|        source.sync_all();
 2190|  58.2k|    }
 2191|  1.14M|    return n;
 2192|  1.14M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|   145k|{
 2200|   145k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|   145k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   145k|{
 2208|   145k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   145k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 29.4k, False: 116k]
  |  |  ------------------
  ------------------
 2210|  29.4k|        source.sync(*n);
 2211|  29.4k|    }
 2212|   116k|    else {
 2213|   116k|        source.sync_all();
 2214|   116k|    }
 2215|   145k|    return n;
 2216|   145k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.24M|{
  194|  2.24M|    return find_classic_impl(
  195|  2.24M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.24M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.24M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  5.03M|{
  202|  5.03M|    return find_classic_impl(
  203|  5.03M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  5.03M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  5.03M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  1.12M|{
 2133|  1.12M|    return vscan_internal(source, format, args);
 2134|  1.12M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  1.14M|{
 2139|  1.14M|    auto n = vscan_internal(source, format, args);
 2140|  1.14M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.08M, False: 58.2k]
  |  |  ------------------
  ------------------
 2141|  1.08M|        source.sync(*n);
 2142|  1.08M|    }
 2143|  58.2k|    else {
 2144|  58.2k|        source.sync_all();
 2145|  58.2k|    }
 2146|  1.14M|    return n;
 2147|  1.14M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|   145k|{
 2153|   145k|    return vscan_internal(source, format, args);
 2154|   145k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|   145k|{
 2159|   145k|    auto n = vscan_internal(source, format, args);
 2160|   145k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 29.4k, False: 116k]
  |  |  ------------------
  ------------------
 2161|  29.4k|        source.sync(*n);
 2162|  29.4k|    }
 2163|   116k|    else {
 2164|   116k|        source.sync_all();
 2165|   116k|    }
 2166|   145k|    return n;
 2167|   145k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|   252k|{
 2243|   252k|    return vscan_value_internal(source, arg);
 2244|   252k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|   237k|{
 2248|   237k|    auto n = vscan_value_internal(source, arg);
 2249|   237k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   237k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 228k, False: 9.70k]
  |  |  ------------------
  ------------------
 2250|   228k|        source.sync(*n);
 2251|   228k|    }
 2252|  9.70k|    else {
 2253|  9.70k|        source.sync_all();
 2254|  9.70k|    }
 2255|   237k|    return n;
 2256|   237k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  25.2k|{
 2262|  25.2k|    return vscan_value_internal(source, arg);
 2263|  25.2k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  25.2k|{
 2268|  25.2k|    auto n = vscan_value_internal(source, arg);
 2269|  25.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  25.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.81k, False: 19.4k]
  |  |  ------------------
  ------------------
 2270|  5.81k|        source.sync(*n);
 2271|  5.81k|    }
 2272|  19.4k|    else {
 2273|  19.4k|        source.sync_all();
 2274|  19.4k|    }
 2275|  25.2k|    return n;
 2276|  25.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.24M|{
  118|  2.24M|    auto it = source.begin();
  119|       |
  120|  9.10M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 7.74M, False: 1.35M]
  ------------------
  121|  7.74M|        auto sv =
  122|  7.74M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  7.74M|                .substr(0, 8);
  124|       |
  125|  7.74M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 7.56M, False: 184k]
  ------------------
  126|  7.56M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  7.56M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  7.56M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 806k, False: 6.75M]
  ------------------
  129|   806k|                break;
  130|   806k|            }
  131|  6.75M|            continue;
  132|  7.56M|        }
  133|       |
  134|   635k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 529k, False: 106k]
  ------------------
  135|   529k|            auto tmp =
  136|   529k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   529k|            auto res = get_next_code_point(tmp);
  138|   529k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 77.3k, False: 451k]
  ------------------
  139|  77.3k|                return it;
  140|  77.3k|            }
  141|   451k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   451k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   451k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   451k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   451k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   451k|        }
  145|   184k|    }
  146|       |
  147|  2.16M|    return detail::make_string_view_iterator(source, it);
  148|  2.24M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  10.9M|{
  105|  10.9M|    static_assert(sizeof(*source.data()) == 1);
  106|  10.9M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  10.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  10.9M|    uint64_t word{};
  108|  10.9M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  10.9M|    return has_byte_greater(word, 127) != 0;
  111|  10.9M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  49.8M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   529k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  5.03M|{
  118|  5.03M|    auto it = source.begin();
  119|       |
  120|  5.46M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.22M, False: 2.24M]
  ------------------
  121|  3.22M|        auto sv =
  122|  3.22M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.22M|                .substr(0, 8);
  124|       |
  125|  3.22M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.02M, False: 201k]
  ------------------
  126|  3.02M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.02M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.02M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.60M, False: 422k]
  ------------------
  129|  2.60M|                break;
  130|  2.60M|            }
  131|   422k|            continue;
  132|  3.02M|        }
  133|       |
  134|   386k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 370k, False: 16.1k]
  ------------------
  135|   370k|            auto tmp =
  136|   370k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   370k|            auto res = get_next_code_point(tmp);
  138|   370k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 185k, False: 184k]
  ------------------
  139|   185k|                return it;
  140|   185k|            }
  141|   184k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   184k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   184k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   184k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   184k|        }
  145|   201k|    }
  146|       |
  147|  4.84M|    return detail::make_string_view_iterator(source, it);
  148|  5.03M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  4.80M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   370k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.52M|{
 1138|  1.52M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 14.0k, False: 1.51M]
  ------------------
 1139|  14.0k|        value = std::numeric_limits<T>::infinity();
 1140|  14.0k|        return 3;
 1141|  14.0k|    }
 1142|  1.51M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.3k, False: 1.50M]
  ------------------
 1143|  10.3k|        value = std::numeric_limits<T>::infinity();
 1144|  10.3k|        return 8;
 1145|  10.3k|    }
 1146|  1.50M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 60.8k, False: 1.44M]
  ------------------
 1147|  60.8k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  60.8k|        return 3;
 1149|  60.8k|    }
 1150|  1.44M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.44M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.44M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.44M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 328k, False: 1.11M]
  ------------------
 1185|   328k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.39k, False: 325k]
  |  |  ------------------
  ------------------
 1186|  3.39k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.39k|                                         "Invalid floating-point digit");
 1188|  3.39k|        }
 1189|   328k|    }
 1190|  1.43M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.03k, False: 1.42M]
  |  |  ------------------
  ------------------
 1191|  9.03k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.03k|                                     "Invalid floating-point digit");
 1193|  9.03k|    }
 1194|       |
 1195|  1.42M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.42M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.42M|            double tmp{};
 1200|  1.42M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.42M|            value = tmp;
 1202|  1.42M|            return ret;
 1203|  1.42M|        }
 1204|  1.42M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.42M|            return fast_float_fallback(data, value);
 1208|  1.42M|        }
 1209|  1.42M|    }
 1210|  1.42M|    else {
 1211|       |        // Default to fast_float
 1212|  1.42M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.42M|    }
 1214|  1.42M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.42M|    {
 1078|  1.42M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  5.33M|    {
  712|  5.33M|        return {kind, options};
  713|  5.33M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.42M|    {
 1082|  1.42M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 324k, False: 1.10M]
  ------------------
 1083|  1.42M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 55.8k, False: 1.04M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   380k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   380k|                                              value);
 1087|   380k|        }
 1088|       |
 1089|  1.04M|        const auto flags = get_flags();
 1090|  1.04M|        const auto view = get_view();
 1091|  1.04M|        const auto result = fast_float::from_chars(
 1092|  1.04M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.04M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.04M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.88k, False: 1.03M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  9.88k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  9.88k|                                              value);
 1102|  9.88k|        }
 1103|       |
 1104|  1.03M|        return result.ptr - view.data();
 1105|  1.04M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   390k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   390k|    {
 1048|   390k|#if !SCN_DISABLE_STRTOD
 1049|   390k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   390k|    }
 1056|   390k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   390k|    {
  894|   390k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   399k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   390k|    {
  898|   390k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   390k|                           generic_strtod);
  900|   390k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   390k|    {
  732|   390k|        CharT* end{};
  733|   390k|        errno = 0;
  734|   390k|        value = strtod_cb(src, &end);
  735|   390k|        const auto saved_errno = errno;
  736|   390k|        auto chars_read = end - src;
  737|       |
  738|   390k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   390k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 378k]
  |  |  ------------------
  ------------------
  740|  11.7k|            return unexpected(e);
  741|  11.7k|        }
  742|       |
  743|   378k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 323k, False: 55.4k]
  ------------------
  744|   378k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 323k, False: 0]
  ------------------
  745|   323k|            chars_read -= 2;
  746|   323k|        }
  747|       |
  748|   378k|        return chars_read;
  749|   390k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   399k|    {
  778|   399k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 104k, False: 295k]
  |  Branch (778:37): [True: 0, False: 104k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   399k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 55.9k, False: 343k]
  ------------------
  785|   399k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 55.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   399k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 13.0k, False: 386k]
  |  Branch (791:34): [True: 1.79k, False: 11.2k]
  ------------------
  792|  1.79k|            SCN_UNLIKELY_ATTR
  793|  1.79k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.79k|        }
  795|       |
  796|   397k|        SCN_GCC_COMPAT_PUSH
  797|   397k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   397k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 397k, False: 0]
  ------------------
  800|   397k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 397k, False: 0]
  ------------------
  801|   397k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 10.6k, False: 387k]
  ------------------
  802|  10.6k|            SCN_UNLIKELY_ATTR
  803|  10.6k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  10.6k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   387k|            return {};
  809|   397k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   412k|{
  687|   412k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 105k, False: 306k]
  |  Branch (687:25): [True: 0, False: 306k]
  ------------------
  688|   412k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   390k|    {
  755|   390k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 383k, False: 6.89k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   383k|            auto first_space = read_until_classic_space(input.view());
  758|   383k|            input.assign(
  759|   383k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   383k|        }
  761|       |
  762|   390k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 324k, False: 65.7k]
  ------------------
  763|   324k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   324k|                input.get_allocated_string().insert(0, "0x");
  765|   324k|            }
  766|   324k|            else {
  767|   324k|                input.get_allocated_string().insert(0, L"0x");
  768|   324k|            }
  769|   324k|        }
  770|       |
  771|   390k|        return input.get_allocated_string().c_str();
  772|   390k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   390k|    {
  905|   390k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   390k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   390k|        }
  908|   390k|        else {
  909|   390k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   390k|        }
  911|   390k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   390k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   390k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   390k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   390k|            return std::strtof(str, str_end);
  839|   390k|        }
  840|   390k|        else if constexpr (std::is_same_v<T, double>) {
  841|   390k|            return std::strtod(str, str_end);
  842|   390k|        }
  843|   390k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   390k|            return std::strtold(str, str_end);
  845|   390k|        }
  846|   390k|#endif
  847|   390k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.26M|    {
 1061|  2.26M|        unsigned format_flags{};
 1062|  2.26M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.24M, False: 19.3k]
  ------------------
 1063|  2.24M|            format_flags |= fast_float::fixed;
 1064|  2.24M|        }
 1065|  2.26M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.97M, False: 284k]
  ------------------
 1066|  1.97M|            format_flags |= fast_float::scientific;
 1067|  1.97M|        }
 1068|       |
 1069|  2.26M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.26M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|  1.04M|    {
 1110|  1.04M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.04M|            return m_input.view();
 1112|  1.04M|        }
 1113|  1.04M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.04M|            return std::u16string_view{
 1115|  1.04M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.04M|                m_input.view().size()};
 1117|  1.04M|        }
 1118|  1.04M|        else {
 1119|  1.04M|            return std::u32string_view{
 1120|  1.04M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.04M|                m_input.view().size()};
 1122|  1.04M|        }
 1123|  1.04M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  88.1k|{
 1138|  88.1k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 88.1k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  88.1k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 88.1k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  88.1k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 88.1k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  88.1k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 88.1k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  88.1k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  88.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  88.1k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 20.7k, False: 67.3k]
  ------------------
 1185|  20.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.7k, False: 8.02k]
  |  |  ------------------
  ------------------
 1186|  12.7k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.7k|                                         "Invalid floating-point digit");
 1188|  12.7k|        }
 1189|  20.7k|    }
 1190|  75.3k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.8k, False: 43.4k]
  |  |  ------------------
  ------------------
 1191|  31.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  31.8k|                                     "Invalid floating-point digit");
 1193|  31.8k|    }
 1194|       |
 1195|  43.4k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  43.4k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  43.4k|            double tmp{};
 1200|  43.4k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  43.4k|            value = tmp;
 1202|  43.4k|            return ret;
 1203|  43.4k|        }
 1204|  43.4k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  43.4k|            return fast_float_fallback(data, value);
 1208|  43.4k|        }
 1209|  43.4k|    }
 1210|  43.4k|    else {
 1211|       |        // Default to fast_float
 1212|  43.4k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  43.4k|    }
 1214|  43.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|  43.4k|    {
 1078|  43.4k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   147k|    {
  712|   147k|        return {kind, options};
  713|   147k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|  43.4k|    {
 1082|  43.4k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 7.98k, False: 35.5k]
  ------------------
 1083|  43.4k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 105, False: 35.4k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  8.08k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  8.08k|                                              value);
 1087|  8.08k|        }
 1088|       |
 1089|  35.4k|        const auto flags = get_flags();
 1090|  35.4k|        const auto view = get_view();
 1091|  35.4k|        const auto result = fast_float::from_chars(
 1092|  35.4k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  35.4k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.4k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  35.4k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 646, False: 34.7k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    646|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    646|                                              value);
 1102|    646|        }
 1103|       |
 1104|  34.7k|        return result.ptr - view.data();
 1105|  35.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  8.73k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  8.73k|    {
 1048|  8.73k|#if !SCN_DISABLE_STRTOD
 1049|  8.73k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  8.73k|    }
 1056|  8.73k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  8.73k|    {
  894|  8.73k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  8.73k|    {
  898|  8.73k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  8.73k|                           generic_strtod);
  900|  8.73k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  8.73k|    {
  732|  8.73k|        CharT* end{};
  733|  8.73k|        errno = 0;
  734|  8.73k|        value = strtod_cb(src, &end);
  735|  8.73k|        const auto saved_errno = errno;
  736|  8.73k|        auto chars_read = end - src;
  737|       |
  738|  8.73k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  8.73k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 658, False: 8.07k]
  |  |  ------------------
  ------------------
  740|    658|            return unexpected(e);
  741|    658|        }
  742|       |
  743|  8.07k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 7.96k, False: 105]
  ------------------
  744|  8.07k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 7.96k, False: 0]
  ------------------
  745|  7.96k|            chars_read -= 2;
  746|  7.96k|        }
  747|       |
  748|  8.07k|        return chars_read;
  749|  8.73k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  8.73k|    {
  755|  8.73k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 8.23k, False: 501]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  8.23k|            auto first_space = read_until_classic_space(input.view());
  758|  8.23k|            input.assign(
  759|  8.23k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  8.23k|        }
  761|       |
  762|  8.73k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 7.98k, False: 751]
  ------------------
  763|  7.98k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  7.98k|                input.get_allocated_string().insert(0, "0x");
  765|  7.98k|            }
  766|  7.98k|            else {
  767|  7.98k|                input.get_allocated_string().insert(0, L"0x");
  768|  7.98k|            }
  769|  7.98k|        }
  770|       |
  771|  8.73k|        return input.get_allocated_string().c_str();
  772|  8.73k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  8.73k|    {
  905|  8.73k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  8.73k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  8.73k|        }
  908|  8.73k|        else {
  909|  8.73k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  8.73k|        }
  911|  8.73k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  8.73k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  8.73k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  8.73k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  8.73k|            return std::wcstof(str, str_end);
  877|  8.73k|        }
  878|  8.73k|        else if constexpr (std::is_same_v<T, double>) {
  879|  8.73k|            return std::wcstod(str, str_end);
  880|  8.73k|        }
  881|  8.73k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  8.73k|            return std::wcstold(str, str_end);
  883|  8.73k|        }
  884|  8.73k|#endif
  885|  8.73k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  35.4k|    {
 1110|  35.4k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  35.4k|            return m_input.view();
 1112|  35.4k|        }
 1113|  35.4k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  35.4k|            return std::u16string_view{
 1115|  35.4k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  35.4k|                m_input.view().size()};
 1117|  35.4k|        }
 1118|  35.4k|        else {
 1119|  35.4k|            return std::u32string_view{
 1120|  35.4k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  35.4k|                m_input.view().size()};
 1122|  35.4k|        }
 1123|  35.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.65M|{
 1138|  1.65M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.2k, False: 1.63M]
  ------------------
 1139|  15.2k|        value = std::numeric_limits<T>::infinity();
 1140|  15.2k|        return 3;
 1141|  15.2k|    }
 1142|  1.63M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.8k, False: 1.62M]
  ------------------
 1143|  10.8k|        value = std::numeric_limits<T>::infinity();
 1144|  10.8k|        return 8;
 1145|  10.8k|    }
 1146|  1.62M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 62.7k, False: 1.56M]
  ------------------
 1147|  62.7k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  62.7k|        return 3;
 1149|  62.7k|    }
 1150|  1.56M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.56M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.56M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.56M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 341k, False: 1.21M]
  ------------------
 1185|   341k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.67k, False: 338k]
  |  |  ------------------
  ------------------
 1186|  3.67k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.67k|                                         "Invalid floating-point digit");
 1188|  3.67k|        }
 1189|   341k|    }
 1190|  1.55M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 1.54M]
  |  |  ------------------
  ------------------
 1191|  10.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  10.3k|                                     "Invalid floating-point digit");
 1193|  10.3k|    }
 1194|       |
 1195|  1.54M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.54M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.54M|            double tmp{};
 1200|  1.54M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.54M|            value = tmp;
 1202|  1.54M|            return ret;
 1203|  1.54M|        }
 1204|  1.54M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.54M|            return fast_float_fallback(data, value);
 1208|  1.54M|        }
 1209|  1.54M|    }
 1210|  1.54M|    else {
 1211|       |        // Default to fast_float
 1212|  1.54M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.54M|    }
 1214|  1.54M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.54M|    {
 1078|  1.54M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.54M|    {
 1082|  1.54M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 337k, False: 1.20M]
  ------------------
 1083|  1.54M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 64.4k, False: 1.14M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   402k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   402k|                                              value);
 1087|   402k|        }
 1088|       |
 1089|  1.14M|        const auto flags = get_flags();
 1090|  1.14M|        const auto view = get_view();
 1091|  1.14M|        const auto result = fast_float::from_chars(
 1092|  1.14M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.14M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.14M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 1.14M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.34k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.34k|                                              value);
 1102|  4.34k|        }
 1103|       |
 1104|  1.14M|        return result.ptr - view.data();
 1105|  1.14M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   406k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   406k|    {
 1048|   406k|#if !SCN_DISABLE_STRTOD
 1049|   406k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   406k|    }
 1056|   406k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   406k|    {
  894|   406k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   415k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   406k|    {
  898|   406k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   406k|                           generic_strtod);
  900|   406k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   406k|    {
  732|   406k|        CharT* end{};
  733|   406k|        errno = 0;
  734|   406k|        value = strtod_cb(src, &end);
  735|   406k|        const auto saved_errno = errno;
  736|   406k|        auto chars_read = end - src;
  737|       |
  738|   406k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   406k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.96k, False: 401k]
  |  |  ------------------
  ------------------
  740|  4.96k|            return unexpected(e);
  741|  4.96k|        }
  742|       |
  743|   401k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 337k, False: 64.3k]
  ------------------
  744|   401k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 337k, False: 0]
  ------------------
  745|   337k|            chars_read -= 2;
  746|   337k|        }
  747|       |
  748|   401k|        return chars_read;
  749|   406k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   415k|    {
  778|   415k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 106k, False: 309k]
  |  Branch (778:37): [True: 0, False: 106k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   415k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 64.5k, False: 350k]
  ------------------
  785|   415k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 64.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   415k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 5.34k, False: 409k]
  |  Branch (791:34): [True: 526, False: 4.81k]
  ------------------
  792|    526|            SCN_UNLIKELY_ATTR
  793|    526|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    526|        }
  795|       |
  796|   414k|        SCN_GCC_COMPAT_PUSH
  797|   414k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   414k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 414k, False: 0]
  ------------------
  800|   414k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 414k, False: 0]
  ------------------
  801|   414k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 4.81k, False: 409k]
  ------------------
  802|  4.81k|            SCN_UNLIKELY_ATTR
  803|  4.81k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  4.81k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   409k|            return {};
  809|   414k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   420k|{
  691|   420k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 106k, False: 313k]
  |  Branch (691:24): [True: 0, False: 313k]
  ------------------
  692|   420k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   406k|    {
  755|   406k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 401k, False: 4.90k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   401k|            auto first_space = read_until_classic_space(input.view());
  758|   401k|            input.assign(
  759|   401k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   401k|        }
  761|       |
  762|   406k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 337k, False: 68.8k]
  ------------------
  763|   337k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   337k|                input.get_allocated_string().insert(0, "0x");
  765|   337k|            }
  766|   337k|            else {
  767|   337k|                input.get_allocated_string().insert(0, L"0x");
  768|   337k|            }
  769|   337k|        }
  770|       |
  771|   406k|        return input.get_allocated_string().c_str();
  772|   406k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   406k|    {
  905|   406k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   406k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   406k|        }
  908|   406k|        else {
  909|   406k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   406k|        }
  911|   406k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   406k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   406k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   406k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   406k|            return std::strtof(str, str_end);
  839|   406k|        }
  840|   406k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   406k|            return std::strtod(str, str_end);
  842|   406k|        }
  843|   406k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   406k|            return std::strtold(str, str_end);
  845|   406k|        }
  846|   406k|#endif
  847|   406k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.14M|    {
 1110|  1.14M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.14M|            return m_input.view();
 1112|  1.14M|        }
 1113|  1.14M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.14M|            return std::u16string_view{
 1115|  1.14M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.14M|                m_input.view().size()};
 1117|  1.14M|        }
 1118|  1.14M|        else {
 1119|  1.14M|            return std::u32string_view{
 1120|  1.14M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.14M|                m_input.view().size()};
 1122|  1.14M|        }
 1123|  1.14M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  88.1k|{
 1138|  88.1k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 88.1k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  88.1k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 88.1k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  88.1k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 88.1k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  88.1k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 88.1k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  88.1k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  88.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  88.1k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 20.7k, False: 67.4k]
  ------------------
 1185|  20.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.7k, False: 8.02k]
  |  |  ------------------
  ------------------
 1186|  12.7k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.7k|                                         "Invalid floating-point digit");
 1188|  12.7k|        }
 1189|  20.7k|    }
 1190|  75.4k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  75.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.9k, False: 43.5k]
  |  |  ------------------
  ------------------
 1191|  31.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  31.9k|                                     "Invalid floating-point digit");
 1193|  31.9k|    }
 1194|       |
 1195|  43.5k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  43.5k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  43.5k|            double tmp{};
 1200|  43.5k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  43.5k|            value = tmp;
 1202|  43.5k|            return ret;
 1203|  43.5k|        }
 1204|  43.5k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  43.5k|            return fast_float_fallback(data, value);
 1208|  43.5k|        }
 1209|  43.5k|    }
 1210|  43.5k|    else {
 1211|       |        // Default to fast_float
 1212|  43.5k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  43.5k|    }
 1214|  43.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|  43.5k|    {
 1078|  43.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|  43.5k|    {
 1082|  43.5k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 7.98k, False: 35.5k]
  ------------------
 1083|  43.5k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 105, False: 35.4k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  8.08k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  8.08k|                                              value);
 1087|  8.08k|        }
 1088|       |
 1089|  35.4k|        const auto flags = get_flags();
 1090|  35.4k|        const auto view = get_view();
 1091|  35.4k|        const auto result = fast_float::from_chars(
 1092|  35.4k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  35.4k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.4k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  35.4k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 368, False: 35.0k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    368|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    368|                                              value);
 1102|    368|        }
 1103|       |
 1104|  35.0k|        return result.ptr - view.data();
 1105|  35.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  8.45k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  8.45k|    {
 1048|  8.45k|#if !SCN_DISABLE_STRTOD
 1049|  8.45k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  8.45k|    }
 1056|  8.45k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  8.45k|    {
  894|  8.45k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  8.45k|    {
  898|  8.45k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  8.45k|                           generic_strtod);
  900|  8.45k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  8.45k|    {
  732|  8.45k|        CharT* end{};
  733|  8.45k|        errno = 0;
  734|  8.45k|        value = strtod_cb(src, &end);
  735|  8.45k|        const auto saved_errno = errno;
  736|  8.45k|        auto chars_read = end - src;
  737|       |
  738|  8.45k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  8.45k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 376, False: 8.07k]
  |  |  ------------------
  ------------------
  740|    376|            return unexpected(e);
  741|    376|        }
  742|       |
  743|  8.07k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 7.97k, False: 105]
  ------------------
  744|  8.07k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 7.97k, False: 0]
  ------------------
  745|  7.97k|            chars_read -= 2;
  746|  7.97k|        }
  747|       |
  748|  8.07k|        return chars_read;
  749|  8.45k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  8.45k|    {
  755|  8.45k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 8.09k, False: 362]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  8.09k|            auto first_space = read_until_classic_space(input.view());
  758|  8.09k|            input.assign(
  759|  8.09k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  8.09k|        }
  761|       |
  762|  8.45k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 7.98k, False: 473]
  ------------------
  763|  7.98k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  7.98k|                input.get_allocated_string().insert(0, "0x");
  765|  7.98k|            }
  766|  7.98k|            else {
  767|  7.98k|                input.get_allocated_string().insert(0, L"0x");
  768|  7.98k|            }
  769|  7.98k|        }
  770|       |
  771|  8.45k|        return input.get_allocated_string().c_str();
  772|  8.45k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  8.45k|    {
  905|  8.45k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  8.45k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  8.45k|        }
  908|  8.45k|        else {
  909|  8.45k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  8.45k|        }
  911|  8.45k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  8.45k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  8.45k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  8.45k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  8.45k|            return std::wcstof(str, str_end);
  877|  8.45k|        }
  878|  8.45k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  8.45k|            return std::wcstod(str, str_end);
  880|  8.45k|        }
  881|  8.45k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  8.45k|            return std::wcstold(str, str_end);
  883|  8.45k|        }
  884|  8.45k|#endif
  885|  8.45k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  35.4k|    {
 1110|  35.4k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  35.4k|            return m_input.view();
 1112|  35.4k|        }
 1113|  35.4k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  35.4k|            return std::u16string_view{
 1115|  35.4k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  35.4k|                m_input.view().size()};
 1117|  35.4k|        }
 1118|  35.4k|        else {
 1119|  35.4k|            return std::u32string_view{
 1120|  35.4k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  35.4k|                m_input.view().size()};
 1122|  35.4k|        }
 1123|  35.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.67M|{
 1138|  1.67M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.7k, False: 1.65M]
  ------------------
 1139|  15.7k|        value = std::numeric_limits<T>::infinity();
 1140|  15.7k|        return 3;
 1141|  15.7k|    }
 1142|  1.65M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 11.0k, False: 1.64M]
  ------------------
 1143|  11.0k|        value = std::numeric_limits<T>::infinity();
 1144|  11.0k|        return 8;
 1145|  11.0k|    }
 1146|  1.64M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 63.2k, False: 1.58M]
  ------------------
 1147|  63.2k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  63.2k|        return 3;
 1149|  63.2k|    }
 1150|  1.58M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.57M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.57M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.57M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 342k, False: 1.23M]
  ------------------
 1185|   342k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.81k, False: 338k]
  |  |  ------------------
  ------------------
 1186|  3.81k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.81k|                                         "Invalid floating-point digit");
 1188|  3.81k|        }
 1189|   342k|    }
 1190|  1.57M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 1.56M]
  |  |  ------------------
  ------------------
 1191|  11.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.0k|                                     "Invalid floating-point digit");
 1193|  11.0k|    }
 1194|       |
 1195|  1.56M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.56M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.56M|            double tmp{};
 1200|  1.56M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.56M|            value = tmp;
 1202|  1.56M|            return ret;
 1203|  1.56M|        }
 1204|  1.56M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.56M|            return fast_float_fallback(data, value);
 1208|  1.56M|        }
 1209|  1.56M|    }
 1210|  1.56M|    else {
 1211|       |        // Default to fast_float
 1212|  1.56M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.56M|    }
 1214|  1.56M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.56M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.56M|    {
 1048|  1.56M|#if !SCN_DISABLE_STRTOD
 1049|  1.56M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.56M|    }
 1056|  1.56M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.56M|    {
  894|  1.56M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.60M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.56M|    {
  898|  1.56M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.56M|                           generic_strtod);
  900|  1.56M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.56M|    {
  732|  1.56M|        CharT* end{};
  733|  1.56M|        errno = 0;
  734|  1.56M|        value = strtod_cb(src, &end);
  735|  1.56M|        const auto saved_errno = errno;
  736|  1.56M|        auto chars_read = end - src;
  737|       |
  738|  1.56M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.56M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.34k, False: 1.56M]
  |  |  ------------------
  ------------------
  740|  1.34k|            return unexpected(e);
  741|  1.34k|        }
  742|       |
  743|  1.56M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 338k, False: 1.22M]
  ------------------
  744|  1.56M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 338k, False: 0]
  ------------------
  745|   338k|            chars_read -= 2;
  746|   338k|        }
  747|       |
  748|  1.56M|        return chars_read;
  749|  1.56M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.60M|    {
  778|  1.60M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 452k, False: 1.15M]
  |  Branch (778:37): [True: 0, False: 452k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.60M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 64.5k, False: 1.54M]
  ------------------
  785|  1.60M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 64.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.60M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.38k, False: 1.60M]
  |  Branch (791:34): [True: 138, False: 1.24k]
  ------------------
  792|    138|            SCN_UNLIKELY_ATTR
  793|    138|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    138|        }
  795|       |
  796|  1.60M|        SCN_GCC_COMPAT_PUSH
  797|  1.60M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.60M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.60M, False: 0]
  ------------------
  800|  1.60M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.60M, False: 0]
  ------------------
  801|  1.60M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.24k, False: 1.60M]
  ------------------
  802|  1.24k|            SCN_UNLIKELY_ATTR
  803|  1.24k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.24k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.60M|            return {};
  809|  1.60M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.60M|{
  695|  1.60M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 453k, False: 1.15M]
  |  Branch (695:26): [True: 0, False: 1.15M]
  ------------------
  696|  1.60M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.56M|    {
  755|  1.56M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.45M, False: 107k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.45M|            auto first_space = read_until_classic_space(input.view());
  758|  1.45M|            input.assign(
  759|  1.45M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.45M|        }
  761|       |
  762|  1.56M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 338k, False: 1.22M]
  ------------------
  763|   338k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   338k|                input.get_allocated_string().insert(0, "0x");
  765|   338k|            }
  766|   338k|            else {
  767|   338k|                input.get_allocated_string().insert(0, L"0x");
  768|   338k|            }
  769|   338k|        }
  770|       |
  771|  1.56M|        return input.get_allocated_string().c_str();
  772|  1.56M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.56M|    {
  905|  1.56M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.56M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.56M|        }
  908|  1.56M|        else {
  909|  1.56M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.56M|        }
  911|  1.56M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.56M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.56M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.56M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.56M|            return std::strtof(str, str_end);
  839|  1.56M|        }
  840|  1.56M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.56M|            return std::strtod(str, str_end);
  842|  1.56M|        }
  843|  1.56M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.56M|            return std::strtold(str, str_end);
  845|  1.56M|        }
  846|  1.56M|#endif
  847|  1.56M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  88.3k|{
 1138|  88.3k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 88.3k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  88.3k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 88.3k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  88.3k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 88.3k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  88.3k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 88.3k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  88.3k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  88.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  88.3k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 20.7k, False: 67.5k]
  ------------------
 1185|  20.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.7k, False: 8.02k]
  |  |  ------------------
  ------------------
 1186|  12.7k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.7k|                                         "Invalid floating-point digit");
 1188|  12.7k|        }
 1189|  20.7k|    }
 1190|  75.5k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  75.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.0k, False: 43.5k]
  |  |  ------------------
  ------------------
 1191|  32.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  32.0k|                                     "Invalid floating-point digit");
 1193|  32.0k|    }
 1194|       |
 1195|  43.5k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  43.5k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  43.5k|            double tmp{};
 1200|  43.5k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  43.5k|            value = tmp;
 1202|  43.5k|            return ret;
 1203|  43.5k|        }
 1204|  43.5k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  43.5k|            return fast_float_fallback(data, value);
 1208|  43.5k|        }
 1209|  43.5k|    }
 1210|  43.5k|    else {
 1211|       |        // Default to fast_float
 1212|  43.5k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  43.5k|    }
 1214|  43.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  43.5k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  43.5k|    {
 1048|  43.5k|#if !SCN_DISABLE_STRTOD
 1049|  43.5k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  43.5k|    }
 1056|  43.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|  43.5k|    {
  894|  43.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|  43.5k|    {
  898|  43.5k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  43.5k|                           generic_strtod);
  900|  43.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  43.5k|    {
  732|  43.5k|        CharT* end{};
  733|  43.5k|        errno = 0;
  734|  43.5k|        value = strtod_cb(src, &end);
  735|  43.5k|        const auto saved_errno = errno;
  736|  43.5k|        auto chars_read = end - src;
  737|       |
  738|  43.5k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  43.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  43.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 43.5k]
  |  |  ------------------
  ------------------
  740|     36|            return unexpected(e);
  741|     36|        }
  742|       |
  743|  43.5k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 7.98k, False: 35.5k]
  ------------------
  744|  43.5k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 7.98k, False: 0]
  ------------------
  745|  7.98k|            chars_read -= 2;
  746|  7.98k|        }
  747|       |
  748|  43.5k|        return chars_read;
  749|  43.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  43.5k|    {
  755|  43.5k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 42.4k, False: 1.08k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  42.4k|            auto first_space = read_until_classic_space(input.view());
  758|  42.4k|            input.assign(
  759|  42.4k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  42.4k|        }
  761|       |
  762|  43.5k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 7.98k, False: 35.5k]
  ------------------
  763|  7.98k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  7.98k|                input.get_allocated_string().insert(0, "0x");
  765|  7.98k|            }
  766|  7.98k|            else {
  767|  7.98k|                input.get_allocated_string().insert(0, L"0x");
  768|  7.98k|            }
  769|  7.98k|        }
  770|       |
  771|  43.5k|        return input.get_allocated_string().c_str();
  772|  43.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|  43.5k|    {
  905|  43.5k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  43.5k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  43.5k|        }
  908|  43.5k|        else {
  909|  43.5k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  43.5k|        }
  911|  43.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|  43.5k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  43.5k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  43.5k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  43.5k|            return std::wcstof(str, str_end);
  877|  43.5k|        }
  878|  43.5k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  43.5k|            return std::wcstod(str, str_end);
  880|  43.5k|        }
  881|  43.5k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|  43.5k|            return std::wcstold(str, str_end);
  883|  43.5k|        }
  884|  43.5k|#endif
  885|  43.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  2.29M|{
 2065|  2.29M|    const auto argcount = args.size();
 2066|  2.29M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 475k, False: 1.81M]
  |  Branch (2066:60): [True: 475k, False: 0]
  ------------------
 2067|   475k|        auto arg = args.get(0);
 2068|   475k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   475k|    static_cast<    \
  |  |  929|   475k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|   475k|    }
 2070|       |
 2071|  1.81M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 1.81M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  1.81M|    SCN_UNLIKELY_ATTR
 2079|  1.81M|    {
 2080|  1.81M|        auto handler = format_handler<false, CharT>{
 2081|  1.81M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.81M|    static_cast<    \
  |  |  929|  1.81M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.81M|    static_cast<    \
  |  |  929|  1.81M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  1.81M|        return vscan_parse_format_string(format, handler);
 2083|  1.81M|    }
 2084|  1.81M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.55M|{
 1625|  4.55M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.57M, False: 980k]
  ------------------
 1626|  3.57M|        return false;
 1627|  3.57M|    }
 1628|   980k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 980k, False: 0]
  |  Branch (1628:39): [True: 980k, False: 0]
  ------------------
 1629|  4.55M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   713k|{
 1658|   713k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 713k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   713k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   713k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 713k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   713k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   713k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   713k|    static_cast<    \
  |  |  929|   713k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   713k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   713k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   713k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   713k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.1k, False: 684k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  29.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  29.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  29.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  29.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  29.1k|    }                                                  \
  |  |  |  | 3667|   713k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   684k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   684k|    return it.position();
 1675|   713k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  1.75M|    {
 1903|  1.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  4.05M|    {
 1722|  4.05M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  4.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.05M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  4.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  1.75M|    {
 1853|  1.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.75M|{
 2030|  1.75M|    const auto beg = handler.get_ctx().begin();
 2031|  1.75M|    detail::parse_format_string<false>(format, handler);
 2032|  1.75M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.0k, False: 1.65M]
  |  |  ------------------
  ------------------
 2033|  97.0k|        return unexpected(handler.error);
 2034|  97.0k|    }
 2035|  1.65M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.75M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|  12.0M|    {
 2014|  12.0M|        return ctx.get();
 2015|  12.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  12.0M|    {
 1857|  12.0M|        return contiguous_ctx;
 1858|  12.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.40M|    {
 1907|  3.40M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.40M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.40M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.75M|{
 1681|  1.75M|    auto arg = ctx.arg(id);
 1682|  1.75M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.75M|    return arg;
 1686|  1.75M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  4.05M|    {
 1797|  4.05M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.05M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  4.05M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  4.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.05M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  4.05M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.05M, False: 0]
  |  |  ------------------
  ------------------
 1807|  4.05M|            visited_args_lower64 |= (1ull << id);
 1808|  4.05M|            return;
 1809|  4.05M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  4.05M|    {
 1782|  4.05M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.05M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  4.05M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.05M, False: 0]
  |  |  ------------------
  ------------------
 1788|  4.05M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  4.05M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  4.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   582k|    {
 1766|   582k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 582k, False: 0]
  |  |  ------------------
  ------------------
 1767|   582k|            error = err;
 1768|   582k|        }
 1769|   582k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  1.75M|    {
 1936|  1.75M|        return parse_ctx.next_arg_id();
 1937|  1.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  1.75M|    {
 1977|  1.75M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.75M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.75M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.75M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.75M|        auto specs = detail::format_specs{};
 1990|  1.75M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.75M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.75M|            arg.type()};
 1993|       |
 1994|  1.75M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.75M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.75M]
  |  Branch (1995:29): [True: 0, False: 1.75M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.75M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.75M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.75M|        on_visit_scan_arg(
 2006|  1.75M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.75M|                                           get_ctx().locale()},
 2008|  1.75M|            arg);
 2009|  1.75M|        return parse_ctx.begin();
 2010|  1.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  1.75M|    {
 1701|  1.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  1.75M|    {
 1948|  1.75M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.75M]
  |  Branch (1948:23): [True: 0, False: 1.75M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.75M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.75M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.0k, False: 1.65M]
  |  |  ------------------
  ------------------
 1955|  97.0k|            on_error(r.error());
 1956|  97.0k|        }
 1957|  1.65M|        else {
 1958|  1.65M|            get_ctx().advance_to(*r);
 1959|  1.65M|        }
 1960|  1.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  4.05M|    {
 1729|  4.05M|        {
 1730|  4.05M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 4.05M]
  ------------------
 1731|  4.05M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 4.05M]
  ------------------
 1732|  4.05M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  4.05M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  4.05M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 4.05M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  4.05M|        }
 1739|       |
 1740|  4.05M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 4.05M, False: 0]
  ------------------
 1741|  4.05M|            return;
 1742|  4.05M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  4.05M|    {
 1777|  4.05M|        return error;
 1778|  4.05M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  12.1M|    {
 1773|  12.1M|        return static_cast<bool>(error);
 1774|  12.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  1.81M|    {
 1903|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  1.81M|    {
 1830|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.81M|{
 2030|  1.81M|    const auto beg = handler.get_ctx().begin();
 2031|  1.81M|    detail::parse_format_string<false>(format, handler);
 2032|  1.81M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.0k, False: 1.72M]
  |  |  ------------------
  ------------------
 2033|  97.0k|        return unexpected(handler.error);
 2034|  97.0k|    }
 2035|  1.72M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.81M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|  12.5M|    {
 2014|  12.5M|        return ctx.get();
 2015|  12.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  12.5M|    {
 1834|  12.5M|        return ctx;
 1835|  12.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.54M|    {
 1907|  3.54M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.54M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.81M|{
 1681|  1.81M|    auto arg = ctx.arg(id);
 1682|  1.81M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.81M|    return arg;
 1686|  1.81M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  1.81M|    {
 1936|  1.81M|        return parse_ctx.next_arg_id();
 1937|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  1.81M|    {
 1977|  1.81M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.81M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.81M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.81M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.81M|        auto specs = detail::format_specs{};
 1990|  1.81M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.81M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.81M|            arg.type()};
 1993|       |
 1994|  1.81M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.81M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.81M]
  |  Branch (1995:29): [True: 0, False: 1.81M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.81M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.81M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.81M|        on_visit_scan_arg(
 2006|  1.81M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.81M|                                           get_ctx().locale()},
 2008|  1.81M|            arg);
 2009|  1.81M|        return parse_ctx.begin();
 2010|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  1.81M|    {
 1701|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  1.81M|    {
 1948|  1.81M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.81M]
  |  Branch (1948:23): [True: 0, False: 1.81M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.81M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.81M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.0k, False: 1.72M]
  |  |  ------------------
  ------------------
 1955|  97.0k|            on_error(r.error());
 1956|  97.0k|        }
 1957|  1.72M|        else {
 1958|  1.72M|            get_ctx().advance_to(*r);
 1959|  1.72M|        }
 1960|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  2.25M|{
 2045|  2.25M|    const auto argcount = args.size();
 2046|  2.25M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 504k, False: 1.75M]
  |  Branch (2046:60): [True: 504k, False: 0]
  ------------------
 2047|   504k|        auto arg = args.get(0);
 2048|   504k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   504k|    static_cast<    \
  |  |  929|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   504k|    }
 2050|       |
 2051|  1.75M|    auto handler = format_handler<true, CharT>{
 2052|  1.75M|        ranges::subrange<const CharT*>{source.data(),
 2053|  1.75M|                                       source.data() + source.size()},
 2054|  1.75M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.75M|    static_cast<    \
  |  |  929|  1.75M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.75M|    static_cast<    \
  |  |  929|  1.75M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  1.75M|    return vscan_parse_format_string(format, handler);
 2056|  2.25M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   756k|{
 1638|   756k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   756k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 756k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   756k|    auto reader =
 1644|   756k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   756k|            ranges::subrange<const CharT*>{source.data(),
 1646|   756k|                                           source.data() + source.size()},
 1647|   756k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   756k|    static_cast<    \
  |  |  929|   756k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   756k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   756k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   756k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   756k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   756k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.1k, False: 727k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  29.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  29.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  29.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  29.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  29.1k|    }                                                  \
  |  |  |  | 3667|   756k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   727k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   727k|    return ranges::distance(source.data(), it);
 1650|   756k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   291k|{
 2045|   291k|    const auto argcount = args.size();
 2046|   291k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 50.4k, False: 241k]
  |  Branch (2046:60): [True: 50.4k, False: 0]
  ------------------
 2047|  50.4k|        auto arg = args.get(0);
 2048|  50.4k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  50.4k|    static_cast<    \
  |  |  929|  50.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  50.4k|    }
 2050|       |
 2051|   241k|    auto handler = format_handler<true, CharT>{
 2052|   241k|        ranges::subrange<const CharT*>{source.data(),
 2053|   241k|                                       source.data() + source.size()},
 2054|   241k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   241k|    return vscan_parse_format_string(format, handler);
 2056|   291k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   583k|{
 1625|   583k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 482k, False: 100k]
  ------------------
 1626|   482k|        return false;
 1627|   482k|    }
 1628|   100k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 100k, False: 0]
  |  Branch (1628:39): [True: 100k, False: 0]
  ------------------
 1629|   583k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  75.7k|{
 1638|  75.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  75.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 75.7k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  75.7k|    auto reader =
 1644|  75.7k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  75.7k|            ranges::subrange<const CharT*>{source.data(),
 1646|  75.7k|                                           source.data() + source.size()},
 1647|  75.7k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  75.7k|    static_cast<    \
  |  |  929|  75.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  75.7k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  75.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 58.2k, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  58.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  58.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  58.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  58.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  58.2k|    }                                                  \
  |  |  |  | 3667|  75.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  17.5k|    return ranges::distance(source.data(), it);
 1650|  75.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   241k|    {
 1903|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   241k|    {
 1853|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   241k|{
 2030|   241k|    const auto beg = handler.get_ctx().begin();
 2031|   241k|    detail::parse_format_string<false>(format, handler);
 2032|   241k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 194k, False: 47.3k]
  |  |  ------------------
  ------------------
 2033|   194k|        return unexpected(handler.error);
 2034|   194k|    }
 2035|  47.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   241k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  1.30M|    {
 2014|  1.30M|        return ctx.get();
 2015|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.30M|    {
 1857|  1.30M|        return contiguous_ctx;
 1858|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   288k|    {
 1907|   288k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 288k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   288k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   241k|{
 1681|   241k|    auto arg = ctx.arg(id);
 1682|   241k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   241k|    return arg;
 1686|   241k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|   241k|    {
 1936|   241k|        return parse_ctx.next_arg_id();
 1937|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|   241k|    {
 1977|   241k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   241k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   241k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 241k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   241k|        auto specs = detail::format_specs{};
 1990|   241k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   241k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   241k|            arg.type()};
 1993|       |
 1994|   241k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   241k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 241k]
  |  Branch (1995:29): [True: 0, False: 241k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   241k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   241k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   241k|        on_visit_scan_arg(
 2006|   241k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   241k|                                           get_ctx().locale()},
 2008|   241k|            arg);
 2009|   241k|        return parse_ctx.begin();
 2010|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   241k|    {
 1701|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|   241k|    {
 1948|   241k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 241k]
  |  Branch (1948:23): [True: 0, False: 241k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   241k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   241k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 194k, False: 47.3k]
  |  |  ------------------
  ------------------
 1955|   194k|            on_error(r.error());
 1956|   194k|        }
 1957|  47.3k|        else {
 1958|  47.3k|            get_ctx().advance_to(*r);
 1959|  47.3k|        }
 1960|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   291k|{
 2065|   291k|    const auto argcount = args.size();
 2066|   291k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 50.4k, False: 241k]
  |  Branch (2066:60): [True: 50.4k, False: 0]
  ------------------
 2067|  50.4k|        auto arg = args.get(0);
 2068|  50.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  50.4k|    static_cast<    \
  |  |  929|  50.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  50.4k|    }
 2070|       |
 2071|   241k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 241k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|   241k|    SCN_UNLIKELY_ATTR
 2079|   241k|    {
 2080|   241k|        auto handler = format_handler<false, CharT>{
 2081|   241k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|   241k|        return vscan_parse_format_string(format, handler);
 2083|   241k|    }
 2084|   241k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  75.6k|{
 1658|  75.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  75.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  75.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  75.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  75.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  75.6k|    static_cast<    \
  |  |  929|  75.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  75.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  75.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 58.2k, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  58.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  58.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  58.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  58.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  58.2k|    }                                                  \
  |  |  |  | 3667|  75.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  17.4k|    return it.position();
 1675|  75.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   241k|    {
 1903|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   241k|    {
 1830|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   241k|{
 2030|   241k|    const auto beg = handler.get_ctx().begin();
 2031|   241k|    detail::parse_format_string<false>(format, handler);
 2032|   241k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 194k, False: 47.2k]
  |  |  ------------------
  ------------------
 2033|   194k|        return unexpected(handler.error);
 2034|   194k|    }
 2035|  47.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   241k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  1.30M|    {
 2014|  1.30M|        return ctx.get();
 2015|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.30M|    {
 1834|  1.30M|        return ctx;
 1835|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   288k|    {
 1907|   288k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 288k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   288k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   241k|{
 1681|   241k|    auto arg = ctx.arg(id);
 1682|   241k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   241k|    return arg;
 1686|   241k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|   241k|    {
 1936|   241k|        return parse_ctx.next_arg_id();
 1937|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|   241k|    {
 1977|   241k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   241k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   241k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 241k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   241k|        auto specs = detail::format_specs{};
 1990|   241k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   241k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   241k|            arg.type()};
 1993|       |
 1994|   241k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   241k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 241k]
  |  Branch (1995:29): [True: 0, False: 241k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   241k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   241k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   241k|        on_visit_scan_arg(
 2006|   241k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   241k|                                           get_ctx().locale()},
 2008|   241k|            arg);
 2009|   241k|        return parse_ctx.begin();
 2010|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   241k|    {
 1701|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|   241k|    {
 1948|   241k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 241k]
  |  Branch (1948:23): [True: 0, False: 241k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   241k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   241k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 194k, False: 47.2k]
  |  |  ------------------
  ------------------
 1955|   194k|            on_error(r.error());
 1956|   194k|        }
 1957|  47.2k|        else {
 1958|  47.2k|            get_ctx().advance_to(*r);
 1959|  47.2k|        }
 1960|   241k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   252k|{
 2091|   252k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   252k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   237k|{
 2091|   237k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   237k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  25.2k|{
 2091|  25.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  25.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  25.2k|{
 2091|  25.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  25.2k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  3.23k|{
 1363|  3.23k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  3.23k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  3.23k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  3.23k|            std::u32string tmp;
 1368|  3.23k|            transcode_to_string_impl_to32(src, tmp);
 1369|  3.23k|            return transcode_to_string_impl_32to16<false>(
 1370|  3.23k|                std::u32string_view{tmp}, dest);
 1371|  3.23k|        }
 1372|  3.23k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  3.23k|            return transcode_to_string_impl_to32(src, dest);
 1374|  3.23k|        }
 1375|  3.23k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  3.23k|{
 1256|  3.23k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  3.23k|    auto it = src.begin();
 1259|  1.15M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.15M, False: 3.23k]
  ------------------
 1260|  1.15M|        auto res = get_next_code_point(
 1261|  1.15M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.15M|                                                                 src.end()));
 1263|  1.15M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.87k, False: 1.14M]
  |  |  ------------------
  ------------------
 1264|  2.87k|            dest.push_back(DestCharT{0xfffd});
 1265|  2.87k|        }
 1266|  1.14M|        else {
 1267|  1.14M|            dest.push_back(res.value);
 1268|  1.14M|        }
 1269|  1.15M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.15M|    }
 1271|  3.23k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.04M|{
 1169|  2.04M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.04M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.04M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.6k, False: 2.01M]
  |  |  ------------------
  ------------------
 1173|  33.6k|        return {get_start_for_next_code_point(input),
 1174|  33.6k|                detail::invalid_code_point};
 1175|  33.6k|    }
 1176|  2.01M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.04k, False: 2.00M]
  |  |  ------------------
  ------------------
 1177|  6.04k|        return {input.end(), detail::invalid_code_point};
 1178|  6.04k|    }
 1179|       |
 1180|  2.00M|    return {input.begin() + len,
 1181|  2.00M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  2.01M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  33.6k|{
 1155|  33.6k|    auto it = input.begin();
 1156|   279k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 269k, False: 9.25k]
  ------------------
 1157|   269k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 24.4k, False: 245k]
  ------------------
 1158|  24.4k|            break;
 1159|  24.4k|        }
 1160|   269k|    }
 1161|  33.6k|    return it;
 1162|  33.6k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  43.0M|    {
  809|  43.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  43.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  43.0M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  16.0M|    {
  823|  16.0M|        return a.m_code == b.m_code;
  824|  16.0M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  2.42M|    {
 1728|  2.42M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.42M|        std::strcpy(m_locbuf, loc);
 1730|  2.42M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.42M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.42M|        std::setlocale(m_category, m_locbuf);
 1735|  2.42M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  2.42M|    {
 1757|  2.42M|        std::setlocale(cat, "C");
 1758|  2.42M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  4.05M|    {
 2936|  4.05M|        return m_msg == nullptr;
 2937|  4.05M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  4.01M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  54.6M|{
  458|  54.6M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  54.6M|        static_cast<unsigned char>(ch))];
  460|  54.6M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  47.7k|{
  469|  47.7k|    return static_cast<unsigned char>(ch) <= 127;
  470|  47.7k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  10.9M|{
  539|  10.9M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  10.9M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  19.0M|{
  784|  19.0M|    return e != eof_error::good;
  785|  19.0M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  59.2k|{
  798|  59.2k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  59.2k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  59.2k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   246k|{
  845|   246k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   246k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   246k|    return parse_error::eof;
  847|   246k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.80M|{
  854|  5.80M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.80M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.80M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 88.1k, False: 5.71M]
  ------------------
  859|  88.1k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  88.1k|    }
  861|       |
  862|  5.71M|    return scan_error{code, msg};
  863|  5.80M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.80M|{
  868|  5.80M|    return [code, msg](parse_error err) {
  869|  5.80M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.80M|    };
  871|  5.80M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  5.99M|{
 1200|       |    // Pattern_White_Space property
 1201|  5.99M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 5.71M, False: 278k]
  |  Branch (1201:27): [True: 1.96M, False: 3.74M]
  ------------------
 1202|  5.99M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 132k, False: 3.89M]
  ------------------
 1203|  5.99M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 181k, False: 3.71M]
  ------------------
 1204|  5.99M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 5.08k, False: 3.70M]
  ------------------
 1205|  5.99M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 19.7k, False: 3.68M]
  ------------------
 1206|  5.99M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 115k, False: 3.57M]
  ------------------
 1207|  5.99M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 3.57M]
  ------------------
 1208|  5.99M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  6.61M|{
 2220|  6.61M|    unsigned char running_diff{0};
 2221|  24.8M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 18.2M, False: 6.61M]
  ------------------
 2222|  18.2M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  18.2M|    }
 2224|  6.61M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 212k, False: 6.40M]
  |  Branch (2224:33): [True: 33.6k, False: 6.37M]
  ------------------
 2225|  6.61M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  40.8M|{
 3123|  40.8M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  40.8M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|   941k|{
 3127|   941k|#if WCHAR_MIN < 0
 3128|   941k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 928k, False: 13.5k]
  |  Branch (3128:20): [True: 536k, False: 391k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   536k|        return char_to_int(static_cast<char>(ch));
 3133|   536k|    }
 3134|   405k|    return 255;
 3135|   941k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  3.47M|{
 6008|  3.47M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 3.47M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  3.47M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 3.47M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  3.47M|    return {};
 6023|  3.47M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  7.37M|    {
  304|  7.37M|        ranges::advance(x, n);
  305|  7.37M|        return x;
  306|  7.37M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  7.37M|    {
  268|  7.37M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  7.37M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  7.37M|    {
  151|  7.37M|        i += n;
  152|  7.37M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.77M|    {
  108|  8.77M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.77M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.77M|    {
   87|  8.77M|        return s - i;
   88|  8.77M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   820k|    {
  304|   820k|        ranges::advance(x, n);
  305|   820k|        return x;
  306|   820k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   820k|    {
  268|   820k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   820k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   820k|    {
  151|   820k|        i += n;
  152|   820k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  90.1k|    {
  108|  90.1k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  90.1k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  90.1k|    {
   87|  90.1k|        return s - i;
   88|  90.1k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.53M|{
  981|  2.53M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.53M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.53M|        return true;
  984|  2.53M|    }
  985|  2.53M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.53M|                           ranges::const_iterator_t<Range>,
  987|  2.53M|                           typename detail::basic_scan_buffer<
  988|  2.53M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.53M|        auto beg = r.begin();
  990|  2.53M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.53M, False: 0]
  ------------------
  991|  2.53M|            return false;
  992|  2.53M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.53M|    else {
 1006|  2.53M|        return false;
 1007|  2.53M|    }
 1008|  2.53M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.81M|    {
 6037|  1.81M|        const bool need_skipped_width =
 6038|  1.81M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.81M]
  |  Branch (6038:33): [True: 0, False: 1.81M]
  ------------------
 6039|  1.81M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.81M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.81M]
  ------------------
 6043|  1.81M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.81M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.81M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.81M, False: 0]
  |  Branch (6047:56): [True: 1.81M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.81M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.81M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.61M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.81M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.81M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.81M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.7k, False: 1.79M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  21.7k|    }                                                  \
  |  |  |  | 3667|  1.81M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.61M|                            make_eof_scan_error));
 6058|       |
 6059|  3.61M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.79M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.79M|            return result_type{it, 0};
 6067|  3.61M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.81M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  4.92M|{
 1976|  4.92M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.92M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  4.92M|{
 1957|  4.92M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.92M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.92M|    }
 1960|  4.92M|    else {
 1961|  4.92M|        auto first = range.begin();
 1962|  26.9M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 26.9M, False: 38.9k]
  ------------------
 1963|  26.9M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 4.88M, False: 22.0M]
  ------------------
 1964|  4.88M|                return first;
 1965|  4.88M|            }
 1966|  26.9M|        }
 1967|  38.9k|        return first;
 1968|  4.92M|    }
 1969|  4.92M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  69.6M|    {
  763|  69.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  69.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  69.6M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  6.25M|    {
  754|  6.25M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  34.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.8M|              cvref<T> obj = *get<T>(fn);
  745|  34.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  34.8M|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.8M|              }
  748|  34.8M|              else {
  749|  34.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.8M|              }
  751|  34.8M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  34.8M|    {
  684|  34.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  34.8M|            return static_cast<T*>(s.m_cp);
  686|  34.8M|        }
  687|  34.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  34.8M|            return static_cast<T*>(s.m_p);
  689|  34.8M|        }
  690|  34.8M|        else {
  691|  34.8M|            return reinterpret_cast<T*>(s.m_fp);
  692|  34.8M|        }
  693|  34.8M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  6.25M|        {
  662|  6.25M|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  4.32M|    {
  108|  4.32M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.32M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  4.32M|    {
   94|  4.32M|        iter_difference_t<I> counter{0};
   95|  43.6M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 39.3M, False: 4.32M]
  ------------------
   96|  39.3M|            ++i;
   97|  39.3M|            ++counter;
   98|  39.3M|        }
   99|  4.32M|        return counter;
  100|  4.32M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  6.71M|{
 1857|  6.71M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.71M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.71M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.71M|        if (sz < count) {
 1862|  6.71M|            return unexpected(eof_error::eof);
 1863|  6.71M|        }
 1864|       |
 1865|  6.71M|        return ranges::next(range.begin(), count);
 1866|  6.71M|    }
 1867|  6.71M|    else {
 1868|  6.71M|        auto it = range.begin();
 1869|  6.71M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 4.14M, False: 2.56M]
  ------------------
 1870|  4.14M|            return ranges::next(it, count);
 1871|  4.14M|        }
 1872|       |
 1873|  10.2M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 7.74M, False: 2.51M]
  ------------------
 1874|  7.74M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 52.4k, False: 7.69M]
  ------------------
 1875|  52.4k|                return unexpected(eof_error::eof);
 1876|  52.4k|            }
 1877|  7.74M|        }
 1878|       |
 1879|  2.51M|        return it;
 1880|  2.56M|    }
 1881|  6.71M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  6.71M|{
 1095|  6.71M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  6.71M|        return r.size();
 1097|  6.71M|    }
 1098|  6.71M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  6.71M|                           ranges::const_iterator_t<Range>,
 1100|  6.71M|                           typename detail::basic_scan_buffer<
 1101|  6.71M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  6.71M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  6.71M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  6.71M|        }
 1105|  6.71M|        else {
 1106|  6.71M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 6.71M, False: 0]
  ------------------
 1107|  6.71M|                return static_cast<size_t>(
 1108|  6.71M|                    r.begin().parent()->chars_available() -
 1109|  6.71M|                    r.begin().position());
 1110|  6.71M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  6.71M|        }
 1113|  6.71M|    }
 1114|  6.71M|    else {
 1115|  6.71M|        return 0;
 1116|  6.71M|    }
 1117|  6.71M|}
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  10.0M|    {
  763|  10.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  10.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  10.0M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.85M|    {
  754|  2.85M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  4.96M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.96M|              cvref<T> obj = *get<T>(fn);
  745|  4.96M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.96M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.96M|              }
  748|  4.96M|              else {
  749|  4.96M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.96M|              }
  751|  4.96M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  4.96M|    {
  684|  4.96M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.96M|            return static_cast<T*>(s.m_cp);
  686|  4.96M|        }
  687|  4.96M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.96M|            return static_cast<T*>(s.m_p);
  689|  4.96M|        }
  690|  4.96M|        else {
  691|  4.96M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.96M|        }
  693|  4.96M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.85M|        {
  662|  2.85M|        }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.80M|    return [code, msg](parse_error err) {
  869|  5.80M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.80M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|  1.01M|    {
 1780|  1.01M|        auto stdloc = loc.get<std::locale>();
 1781|  1.01M|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  1.01M|        grouping = numpunct.grouping();
 1783|  1.01M|        thousands_sep =
 1784|  1.01M|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 1.01M]
  ------------------
 1785|  1.01M|        decimal_point = numpunct.decimal_point();
 1786|  1.01M|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|  1.01M|{
 1717|  1.01M|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 1.01M, False: 0]
  ------------------
 1718|  1.01M|        return std::use_facet<Facet>(stdloc);
 1719|  1.01M|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  1.01M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  7.24M|{
 1846|  7.24M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.5k, False: 7.21M]
  |  |  ------------------
  ------------------
 1847|  29.5k|        return unexpected(e);
 1848|  29.5k|    }
 1849|       |
 1850|  7.21M|    return ranges::next(range.begin());
 1851|  7.24M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  10.4M|{
  950|  10.4M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  10.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.5k, False: 10.4M]
  |  |  ------------------
  ------------------
  951|  58.5k|        return eof_error::eof;
  952|  58.5k|    }
  953|  10.4M|    return eof_error::good;
  954|  10.4M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  14.7M|{
  944|  14.7M|    return is_range_eof(r.begin(), r.end());
  945|  14.7M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  14.7M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  14.7M|    {
  937|  14.7M|        return begin == end;
  938|  14.7M|    }
  939|  14.7M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  7.21M|    {
  296|  7.21M|        ++x;
  297|  7.21M|        return x;
  298|  7.21M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.75M|{
 3141|  2.75M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.75M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.98M, False: 768k]
  ------------------
 3143|  1.98M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.98M, False: 512]
  ------------------
 3144|  1.98M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.98M|        }
 3146|    512|        return unexpected(eof_error::eof);
 3147|  1.98M|    }
 3148|       |
 3149|   768k|    auto& it = *r;
 3150|   768k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 307k, False: 461k]
  ------------------
 3151|   307k|        return std::pair{it, sign_type::minus_sign};
 3152|   307k|    }
 3153|   461k|    return std::pair{it, sign_type::plus_sign};
 3154|   768k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  4.84M|{
 2272|  4.84M|    auto it = read_code_unit(range);
 2273|  4.84M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 4.82M]
  |  |  ------------------
  ------------------
 2274|  17.2k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  17.2k|    }
 2276|       |
 2277|  9.01M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 9.01M, False: 3.81M]
  ------------------
 2278|  9.01M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.01M, False: 7.99M]
  ------------------
 2279|  1.01M|            return *it;
 2280|  1.01M|        }
 2281|  9.01M|    }
 2282|       |
 2283|  3.81M|    return unexpected(parse_error::error);
 2284|  4.82M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  6.71M|{
 2231|  6.71M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.71M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.71M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.71M|        if (range.size() < str.size()) {
 2236|  6.71M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  6.71M|        }
 2238|  6.71M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  6.71M|            return unexpected(parse_error::error);
 2240|  6.71M|        }
 2241|  6.71M|        return ranges::next(range.begin(), str.size());
 2242|  6.71M|    }
 2243|  6.71M|    else {
 2244|  6.71M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.71M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.71M|                return ch;
 2247|  6.71M|            }
 2248|  6.71M|            return static_cast<char_type>(ch +
 2249|  6.71M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.71M|        };
 2251|       |
 2252|  6.71M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  6.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 52.4k, False: 6.66M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  52.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  52.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  52.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  52.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  52.4k|    }                                                  \
  |  |  |  | 3667|  6.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  6.66M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.66M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.66M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  6.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.41M, False: 244k]
  |  |  ------------------
  ------------------
 2257|  6.66M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.66M|                    return ascii_tolower(a) ==
 2259|  6.66M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.66M|                }))) {
 2261|  6.41M|            return unexpected(parse_error::error);
 2262|  6.41M|        }
 2263|       |
 2264|   244k|        return it;
 2265|  6.66M|    }
 2266|  6.71M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  7.78M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.78M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 7.00M, False: 778k]
  |  Branch (2245:29): [True: 661k, False: 117k]
  ------------------
 2246|  7.67M|                return ch;
 2247|  7.67M|            }
 2248|   117k|            return static_cast<char_type>(ch +
 2249|   117k|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.78M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  2.39M|{
 2146|  2.39M|    auto it = read_code_unit(range);
 2147|  2.39M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.2k, False: 2.38M]
  |  |  ------------------
  ------------------
 2148|  12.2k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  12.2k|    }
 2150|       |
 2151|  2.38M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.01M, False: 373k]
  |  |  ------------------
  ------------------
 2152|  2.38M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.01M|        return unexpected(parse_error::error);
 2154|  2.01M|    }
 2155|       |
 2156|   373k|    return *it;
 2157|  2.38M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  4.91M|{
 1996|  4.91M|    auto it = read_while_code_unit(range, pred);
 1997|  4.91M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 2.06M, False: 2.85M]
  ------------------
 1998|  2.06M|        return unexpected(parse_error::error);
 1999|  2.06M|    }
 2000|  2.85M|    return it;
 2001|  4.91M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  2.28M|    {
 1621|  2.28M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.28M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.28M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.28M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.28M|            m_storage.reset();
 1627|  2.28M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.28M|        }
 1629|  2.28M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.28M|                                          std::basic_string<CharT>>) {
 1631|  2.28M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.28M|            m_view = string_view_type{*m_storage};
 1633|  2.28M|        }
 1634|  2.28M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.28M|                                          typename detail::basic_scan_buffer<
 1636|  2.28M|                                              value_t>::forward_iterator> &&
 1637|  2.28M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.28M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.28M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.28M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 306k, False: 1.97M]
  |  |  ------------------
  ------------------
 1641|  2.28M|                             detail::to_address(end_seg.end()))) {
 1642|   306k|                auto& str = m_storage.emplace();
 1643|   306k|                str.reserve(range.end().position() - range.begin().position());
 1644|   306k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   306k|                m_view = string_view_type{str};
 1646|   306k|                return;
 1647|   306k|            }
 1648|       |
 1649|  1.97M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.97M|                                                            end_seg.data());
 1651|  1.97M|            m_storage.reset();
 1652|  1.97M|        }
 1653|  2.28M|        else {
 1654|  2.28M|            auto& str = m_storage.emplace();
 1655|  2.28M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.28M|                str.reserve(range.size());
 1657|  2.28M|            }
 1658|  2.28M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.28M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.28M|                          std::back_inserter(str));
 1661|  2.28M|            }
 1662|  2.28M|            else {
 1663|  2.28M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.28M|                     ++it) {
 1665|  2.28M|                    str.push_back(*it);
 1666|  2.28M|                }
 1667|  2.28M|            }
 1668|  2.28M|            m_view = string_view_type{str};
 1669|  2.28M|        }
 1670|  2.28M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  16.8M|    {
 1582|  16.8M|        return m_view;
 1583|  16.8M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  9.97M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.70M|    {
 6079|  1.70M|        const bool need_skipped_width =
 6080|  1.70M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.70M]
  |  Branch (6080:33): [True: 0, False: 1.70M]
  ------------------
 6081|  1.70M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.70M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.70M]
  ------------------
 6084|  1.70M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.70M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  1.70M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 1.70M, False: 0]
  ------------------
 6089|  1.70M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 1.70M]
  ------------------
 6090|  1.70M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  1.70M|        return result_type{rng.begin(), 0};
 6114|  1.70M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  3.68M|{
 1846|  3.68M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.92k, False: 3.67M]
  |  |  ------------------
  ------------------
 1847|  6.92k|        return unexpected(e);
 1848|  6.92k|    }
 1849|       |
 1850|  3.67M|    return ranges::next(range.begin());
 1851|  3.68M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  6.94M|{
  950|  6.94M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  6.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.8k, False: 6.91M]
  |  |  ------------------
  ------------------
  951|  32.8k|        return eof_error::eof;
  952|  32.8k|    }
  953|  6.91M|    return eof_error::good;
  954|  6.94M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  6.94M|{
  944|  6.94M|    return is_range_eof(r.begin(), r.end());
  945|  6.94M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  6.94M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.94M|    {
  937|  6.94M|        return begin == end;
  938|  6.94M|    }
  939|  6.94M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  3.67M|    {
  296|  3.67M|        ++x;
  297|  3.67M|        return x;
  298|  3.67M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.56M|{
 3141|  2.56M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.56M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.83M, False: 730k]
  ------------------
 3143|  1.83M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.83M, False: 162]
  ------------------
 3144|  1.83M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.83M|        }
 3146|    162|        return unexpected(eof_error::eof);
 3147|  1.83M|    }
 3148|       |
 3149|   730k|    auto& it = *r;
 3150|   730k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 294k, False: 436k]
  ------------------
 3151|   294k|        return std::pair{it, sign_type::minus_sign};
 3152|   294k|    }
 3153|   436k|    return std::pair{it, sign_type::plus_sign};
 3154|   730k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  2.97M|{
 2272|  2.97M|    auto it = read_code_unit(range);
 2273|  2.97M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.23k, False: 2.97M]
  |  |  ------------------
  ------------------
 2274|  3.23k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.23k|    }
 2276|       |
 2277|  5.44M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.44M, False: 2.16M]
  ------------------
 2278|  5.44M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 810k, False: 4.63M]
  ------------------
 2279|   810k|            return *it;
 2280|   810k|        }
 2281|  5.44M|    }
 2282|       |
 2283|  2.16M|    return unexpected(parse_error::error);
 2284|  2.97M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  6.67M|{
 2231|  6.67M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.67M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.67M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.67M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 56.7k, False: 6.61M]
  ------------------
 2236|  56.7k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  56.7k|        }
 2238|  6.61M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 6.37M, False: 246k]
  ------------------
 2239|  6.37M|            return unexpected(parse_error::error);
 2240|  6.37M|        }
 2241|   246k|        return ranges::next(range.begin(), str.size());
 2242|  6.61M|    }
 2243|  6.67M|    else {
 2244|  6.67M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.67M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.67M|                return ch;
 2247|  6.67M|            }
 2248|  6.67M|            return static_cast<char_type>(ch +
 2249|  6.67M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.67M|        };
 2251|       |
 2252|  6.67M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  6.67M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.67M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.67M|        if (SCN_UNLIKELY(!std::equal(
 2257|  6.67M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.67M|                    return ascii_tolower(a) ==
 2259|  6.67M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.67M|                }))) {
 2261|  6.67M|            return unexpected(parse_error::error);
 2262|  6.67M|        }
 2263|       |
 2264|  6.67M|        return it;
 2265|  6.67M|    }
 2266|  6.67M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   709k|{
 2146|   709k|    auto it = read_code_unit(range);
 2147|   709k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.69k, False: 705k]
  |  |  ------------------
  ------------------
 2148|  3.69k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.69k|    }
 2150|       |
 2151|   705k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 588k, False: 117k]
  |  |  ------------------
  ------------------
 2152|   705k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   588k|        return unexpected(parse_error::error);
 2154|   588k|    }
 2155|       |
 2156|   117k|    return *it;
 2157|   705k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  9.48M|    {
 1503|  9.48M|        return sv;
 1504|  9.48M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.33M|{
 1976|  1.33M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.33M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.33M|{
 1957|  1.33M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.33M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.33M|    }
 1960|  1.33M|    else {
 1961|  1.33M|        auto first = range.begin();
 1962|  1.33M|        for (; first != range.end(); ++first) {
 1963|  1.33M|            if (pred(*first)) {
 1964|  1.33M|                return first;
 1965|  1.33M|            }
 1966|  1.33M|        }
 1967|  1.33M|        return first;
 1968|  1.33M|    }
 1969|  1.33M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.50M|{
 2951|  2.50M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.50M, False: 0]
  ------------------
 2952|  2.50M|        auto it = read_while_classic_space(range);
 2953|  2.50M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.50M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.7k, False: 2.48M]
  |  |  ------------------
  ------------------
 2955|  19.7k|            return unexpected(e);
 2956|  19.7k|        }
 2957|       |
 2958|  2.48M|        return it;
 2959|  2.50M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.50M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.50M|{
 2117|  2.50M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.50M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.50M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.50M|        auto buf = make_contiguous_buffer(range);
 2121|  2.50M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.50M|        return ranges::next(range.begin(),
 2123|  2.50M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.50M|    }
 2125|  2.50M|    else {
 2126|  2.50M|        auto it = range.begin();
 2127|       |
 2128|  2.50M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.50M|            auto seg = get_contiguous_beginning(range);
 2130|  2.50M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.50M|                seg_it != seg.end()) {
 2132|  2.50M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.50M|            }
 2134|  2.50M|            ranges::advance(it, seg.size());
 2135|  2.50M|        }
 2136|       |
 2137|  2.50M|        return read_while_code_point(
 2138|  2.50M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.50M|    }
 2140|  2.50M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.50M|{
 1683|  2.50M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.50M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.50M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.50M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.50M|    }
 1688|  2.50M|    else {
 1689|  2.50M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.50M|    }
 1691|  2.50M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.50M|    {
 1490|  2.50M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  6.85M|    {
  304|  6.85M|        ranges::advance(x, n);
  305|  6.85M|        return x;
  306|  6.85M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  9.08M|    {
  268|  9.08M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  9.08M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  9.08M|    {
  181|  43.2M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 34.2M, False: 9.08M]
  ------------------
  182|  34.2M|            ++i;
  183|  34.2M|        }
  184|  9.08M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   576k|    {
 6178|   576k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   576k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   576k|            auto rd = make_reader<T, char_type>();
 6183|   576k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   576k|                return unexpected(e);
 6185|   576k|            }
 6186|       |
 6187|   576k|            return impl(rd, range, value);
 6188|   576k|        }
 6189|   576k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   576k|            auto rd = make_reader<T, char_type>();
 6191|   576k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 576k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   576k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 576k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   576k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   576k|                return impl(rd, range, value);
 6198|   576k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   576k|        else {
 6206|   576k|            SCN_EXPECT(false);
 6207|   576k|            SCN_UNREACHABLE;
 6208|   576k|        }
 6209|   576k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.57M|    {
 3040|  3.57M|        reader_error_handler eh{};
 3041|  3.57M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.57M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.57M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.57M|        return {};
 3046|  3.57M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  3.57M|    {
 3051|  3.57M|        return static_cast<Derived&>(*this);
 3052|  3.57M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  3.57M|    {
 4145|  3.57M|        detail::check_float_type_specs(specs, eh);
 4146|  3.57M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   576k|    {
 6120|   576k|        const bool need_skipped_width =
 6121|   576k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 576k]
  |  Branch (6121:33): [True: 0, False: 576k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   576k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   576k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   576k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   576k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.52k, False: 570k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.52k|    }                                                  \
  |  |  |  | 3667|   576k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   570k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   570k|        auto [it, prefix_width] = prefix_result;
 6126|   570k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   570k|        std::ptrdiff_t value_width = 0;
 6130|   570k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 570k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   570k|        else {
 6146|   570k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   570k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   570k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   570k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 25.8k, False: 544k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  25.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  25.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  25.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  25.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  25.8k|    }                                                  \
  |  | 3667|   570k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   570k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   544k|                                             specs, value, loc));
 6148|       |
 6149|   544k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 544k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   544k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   544k|        std::ptrdiff_t postfix_width = 0;
 6158|   544k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 539k, False: 5.00k]
  ------------------
 6159|   539k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   539k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   539k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   539k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   539k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 539k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   539k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   539k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   539k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   539k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   539k|                                 value_width));
 6163|   539k|            std::tie(it, postfix_width) = postfix_result;
 6164|   539k|        }
 6165|       |
 6166|   544k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   544k|                                                 value_width, postfix_width);
 6168|   544k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 544k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   544k|        return it;
 6173|   544k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  8.38M|    {
 3035|  8.38M|        return true;
 3036|  8.38M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  3.53M|    {
 4217|  3.53M|        unsigned options{};
 4218|  3.53M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 1.01M, False: 2.51M]
  ------------------
 4219|  1.01M|            options |= float_reader_base::allow_thsep;
 4220|  1.01M|        }
 4221|       |
 4222|  3.53M|        SCN_GCC_COMPAT_PUSH
 4223|  3.53M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  3.53M|        switch (specs.type) {
 4226|   452k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 452k, False: 3.07M]
  ------------------
 4227|   452k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  67.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 67.3k, False: 3.46M]
  ------------------
 4230|  67.3k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  1.13M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 1.13M, False: 2.39M]
  ------------------
 4233|  1.13M|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   855k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 855k, False: 2.67M]
  ------------------
 4236|   855k|                return options | float_reader_base::allow_scientific |
 4237|   855k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|  1.01M|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 1.01M, False: 2.51M]
  ------------------
 4240|  1.01M|                return options | float_reader_base::allow_scientific |
 4241|  1.01M|                       float_reader_base::allow_fixed |
 4242|  1.01M|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 3.53M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  3.53M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  3.53M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  3.53M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  3.53M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  4.98M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  9.97M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  1.52M|    {
 3691|  1.52M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.52M|        const std::ptrdiff_t sign_len =
 3694|  1.52M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 443k, False: 1.08M]
  ------------------
 3695|       |
 3696|  1.52M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.52M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.52M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.52M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.1k, False: 1.50M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  24.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  24.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  24.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  24.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  24.1k|    }                                                  \
  |  |  |  | 3667|  1.52M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.50M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.52M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  4.84M|    {
 4057|  4.84M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 4.84M, False: 0]
  ------------------
 4058|  4.84M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 4.84M, False: 0]
  ------------------
 4059|  4.84M|            return;
 4060|  4.84M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  5.72M|    {
 1587|  5.72M|        return m_storage.has_value();
 1588|  5.72M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.36M|    {
 1592|  3.36M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.36M|        return *m_storage;
 1594|  3.36M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   570k|    {
 4170|   570k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   570k|#if !SCN_DISABLE_LOCALE
 4173|   570k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 160k, False: 409k]
  ------------------
 4174|   160k|            return read_impl<Range>(
 4175|   160k|                range, rd,
 4176|   160k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   160k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   160k|                },
 4179|   160k|                value, loc);
 4180|   160k|        }
 4181|   409k|#endif
 4182|       |
 4183|   409k|        return read_impl<Range>(
 4184|   409k|            range, rd,
 4185|   409k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   409k|                return r.read_source(SCN_FWD(args)...);
 4187|   409k|            },
 4188|   409k|            value);
 4189|   570k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   789k|    {
 4206|   789k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   789k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.2k, False: 762k]
  |  |  ------------------
  ------------------
 4208|  27.2k|            return unexpected(r.error());
 4209|  27.2k|        }
 4210|       |
 4211|   762k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   762k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   762k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   762k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   762k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.10k, False: 756k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.10k|    }                                                  \
  |  |  |  | 3667|   762k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   756k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   756k|        return ranges::next(range.begin(), n);
 4213|   762k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.50M|    {
  763|  2.50M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.50M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   160k|    {
  684|   160k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   160k|            return static_cast<T*>(s.m_cp);
  686|   160k|        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   160k|            return static_cast<T*>(s.m_p);
  689|   160k|        }
  690|   160k|        else {
  691|   160k|            return reinterpret_cast<T*>(s.m_fp);
  692|   160k|        }
  693|   160k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   160k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   160k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   160k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   518k|    {
 3679|   518k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   518k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   518k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 518k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   518k|        return read_source_impl(range);
 3685|   518k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  2.50M|    {
 3705|  2.50M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  2.50M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.50M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.50M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.50M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.50M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.50M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.50M|        auto it = sign_result.first;
 3708|  2.50M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.50M|        auto digits_begin = it;
 3711|  2.50M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.50M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.50M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.50M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  2.50M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  2.50M|                SCN_TRY_ASSIGN(
 3717|  2.50M|                    it,
 3718|  2.50M|                    do_read_source_impl(
 3719|  2.50M|                        r,
 3720|  2.50M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  2.50M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  2.50M|            }
 3723|  2.50M|            else {
 3724|  2.50M|                auto cb = [&](const auto& rr)
 3725|  2.50M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.50M|                    auto res = read_all(rr);
 3727|  2.50M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.50M|                        return unexpected_scan_error(
 3729|  2.50M|                            scan_error::invalid_scanned_value,
 3730|  2.50M|                            "Invalid float value");
 3731|  2.50M|                    }
 3732|  2.50M|                    return res;
 3733|  2.50M|                };
 3734|  2.50M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  2.50M|            }
 3736|  2.50M|        }
 3737|  2.50M|        else {
 3738|  2.50M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|  2.50M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.50M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 87.5k, False: 2.41M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  87.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  87.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  87.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  87.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  87.5k|    }                                                  \
  |  | 3667|  2.50M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  2.41M|                it,
 3740|  2.41M|                do_read_source_impl(
 3741|  2.41M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.41M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.41M|        }
 3744|       |
 3745|  2.41M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.41M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.39M, False: 22.7k]
  |  Branch (3747:48): [True: 2.37M, False: 16.1k]
  ------------------
 3748|  2.41M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.28M, False: 93.4k]
  ------------------
 3749|  2.41M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.28M, False: 2.66k]
  ------------------
 3750|  2.28M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.28M|        }
 3752|       |
 3753|  2.41M|        handle_separators();
 3754|       |
 3755|  2.41M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.41M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.41M|        return it;
 3768|  2.41M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  2.50M|    {
 4000|  2.50M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.50M|        const bool allowed_nonhex =
 4002|  2.50M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.50M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.50M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.46M, False: 38.9k]
  |  Branch (4005:45): [True: 0, False: 2.46M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.50M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 38.9k, False: 2.46M]
  ------------------
 4011|  38.9k|            return *r;
 4012|  38.9k|        }
 4013|       |
 4014|  2.46M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.36M, False: 96.1k]
  |  Branch (4014:45): [True: 1.18k, False: 2.36M]
  ------------------
 4015|  1.18k|            return unexpected(r.error());
 4016|  1.18k|        }
 4017|  2.46M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 96.1k, False: 2.36M]
  ------------------
 4018|  96.1k|            return *r;
 4019|  96.1k|        }
 4020|       |
 4021|  2.36M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.70M, False: 662k]
  |  Branch (4021:28): [True: 549k, False: 1.15M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   549k|            auto it = range.begin();
 4025|       |
 4026|   549k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 28.2k, False: 521k]
  ------------------
 4027|  28.2k|                m_kind = float_kind::hex_with_prefix;
 4028|  28.2k|                it = *r;
 4029|  28.2k|            }
 4030|   521k|            else {
 4031|   521k|                m_kind = float_kind::hex_without_prefix;
 4032|   521k|            }
 4033|       |
 4034|   549k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   549k|        }
 4036|  1.81M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 662k, False: 1.15M]
  |  Branch (4036:29): [True: 662k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   662k|            m_kind = float_kind::generic;
 4040|   662k|            return read_regular_float(range);
 4041|   662k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.15M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63.4k, False: 1.09M]
  |  |  ------------------
  ------------------
 4047|  63.4k|            m_kind = float_kind::hex_with_prefix;
 4048|  63.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  63.4k|        }
 4050|       |
 4051|  1.09M|        m_kind = float_kind::generic;
 4052|  1.09M|        return read_regular(range);
 4053|  1.15M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  2.50M|    {
 3811|  2.50M|        auto it = range.begin();
 3812|  2.50M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.46M, False: 38.9k]
  ------------------
 3813|  2.46M|            return unexpected(r.error());
 3814|  2.46M|        }
 3815|  38.9k|        else {
 3816|  38.9k|            it = *r;
 3817|  38.9k|        }
 3818|       |
 3819|  38.9k|        if (auto r = read_matching_string_classic_nocase(
 3820|  38.9k|                ranges::subrange{it, range.end()}, "inity");
 3821|  38.9k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 22.7k, False: 16.1k]
  ------------------
 3822|  22.7k|            m_kind = float_kind::inf_short;
 3823|  22.7k|            return it;
 3824|  22.7k|        }
 3825|  16.1k|        else {
 3826|  16.1k|            m_kind = float_kind::inf_long;
 3827|  16.1k|            return *r;
 3828|  16.1k|        }
 3829|  38.9k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  2.46M|    {
 3834|  2.46M|        auto it = range.begin();
 3835|  2.46M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.36M, False: 97.3k]
  ------------------
 3836|  2.36M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.36M|                scan_error::invalid_scanned_value,
 3838|  2.36M|                "Invalid floating-point NaN value"));
 3839|  2.36M|        }
 3840|  97.3k|        else {
 3841|  97.3k|            it = *r;
 3842|  97.3k|        }
 3843|       |
 3844|  97.3k|        if (auto r =
 3845|  97.3k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  97.3k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 93.4k, False: 3.84k]
  ------------------
 3847|  93.4k|            m_kind = float_kind::nan_simple;
 3848|  93.4k|            return it;
 3849|  93.4k|        }
 3850|  3.84k|        else {
 3851|  3.84k|            it = *r;
 3852|  3.84k|        }
 3853|       |
 3854|  3.84k|        auto payload_beg_it = it;
 3855|  3.84k|        it = read_while_code_unit(
 3856|  3.84k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.84k|                return is_ascii_char(ch) &&
 3858|  3.84k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.84k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.84k|            });
 3861|  3.84k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.84k|        m_kind = float_kind::nan_with_payload;
 3864|  3.84k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.66k, False: 1.18k]
  ------------------
 3865|  3.84k|                                             ')')) {
 3866|  2.66k|            return *r;
 3867|  2.66k|        }
 3868|  1.18k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.18k|                                     "Invalid floating-point NaN payload");
 3870|  3.84k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  3.84k|    {
  754|  3.84k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  24.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.1k|              cvref<T> obj = *get<T>(fn);
  745|  24.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.1k|              }
  748|  24.1k|              else {
  749|  24.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.1k|              }
  751|  24.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  24.1k|    {
  684|  24.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.1k|            return static_cast<T*>(s.m_cp);
  686|  24.1k|        }
  687|  24.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.1k|            return static_cast<T*>(s.m_p);
  689|  24.1k|        }
  690|  24.1k|        else {
  691|  24.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.1k|        }
  693|  24.1k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  24.1k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  24.1k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 23.9k, False: 231]
  ------------------
 3858|  24.1k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 21.1k, False: 2.76k]
  |  Branch (3858:39): [True: 13.3k, False: 7.79k]
  |  Branch (3858:54): [True: 2.55k, False: 8.00k]
  |  Branch (3858:67): [True: 2.47k, False: 83]
  ------------------
 3859|  23.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.85k]
  ------------------
 3860|  24.1k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  3.84k|        {
  662|  3.84k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  1.70M|    {
 3804|  1.70M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.70M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   613k|    {
 3904|   613k|        auto it = range.begin();
 3905|       |
 3906|   613k|        std::ptrdiff_t digits_count = 0;
 3907|   613k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   613k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   613k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.7k, False: 602k]
  |  |  ------------------
  ------------------
 3909|  10.7k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  10.7k|                scan_error::invalid_scanned_value,
 3911|  10.7k|                "Invalid hexadecimal floating-point value"));
 3912|  10.7k|        }
 3913|   602k|        else {
 3914|   602k|            digits_count += ranges::distance(it, *r);
 3915|   602k|            it = *r;
 3916|   602k|        }
 3917|       |
 3918|   602k|        m_integral_part_length = digits_count;
 3919|   602k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 78.9k, False: 523k]
  ------------------
 3920|   602k|                                             m_locale_options.decimal_point)) {
 3921|  78.9k|            it = *r;
 3922|  78.9k|        }
 3923|       |
 3924|   602k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 63.1k, False: 539k]
  ------------------
 3925|   602k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  63.1k|            digits_count += ranges::distance(it, *r);
 3927|  63.1k|            it = *r;
 3928|  63.1k|        }
 3929|       |
 3930|   602k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 602k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   602k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   602k|        return it;
 3938|   602k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  1.21M|    {
 3789|  1.21M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21M]
  |  |  |  Branch (859:45): [True: 0, False: 1.21M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  1.21M|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  1.21M|        return read_while1_code_unit(
 3798|  1.21M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  1.21M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.21M|    {
  754|  1.21M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  6.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.28M|              cvref<T> obj = *get<T>(fn);
  745|  6.28M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.28M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.28M|              }
  748|  6.28M|              else {
  749|  6.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.28M|              }
  751|  6.28M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  6.28M|    {
  684|  6.28M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.28M|            return static_cast<T*>(s.m_cp);
  686|  6.28M|        }
  687|  6.28M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.28M|            return static_cast<T*>(s.m_p);
  689|  6.28M|        }
  690|  6.28M|        else {
  691|  6.28M|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.28M|        }
  693|  6.28M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  6.28M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.21M|        {
  662|  1.21M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  2.09M|    {
 3876|  2.09M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 249k, False: 1.84M]
  ------------------
 3877|   249k|            auto beg_exp_it = range.begin();
 3878|   249k|            auto it = *r;
 3879|       |
 3880|   249k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 248k, False: 512]
  ------------------
 3881|   249k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   248k|                it = r_sign->first;
 3883|   248k|            }
 3884|       |
 3885|   249k|            if (auto r_exp = read_while1_code_unit(
 3886|   249k|                    ranges::subrange{it, range.end()},
 3887|   249k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   249k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 246k]
  |  |  ------------------
  ------------------
 3889|  2.96k|                it = beg_exp_it;
 3890|  2.96k|            }
 3891|   246k|            else {
 3892|   246k|                it = *r_exp;
 3893|   246k|            }
 3894|       |
 3895|   249k|            return it;
 3896|   249k|        }
 3897|  1.84M|        return range.begin();
 3898|  2.09M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   249k|    {
  754|   249k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   795k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   795k|              cvref<T> obj = *get<T>(fn);
  745|   795k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   795k|                  obj(static_cast<decltype(args)>(args)...);
  747|   795k|              }
  748|   795k|              else {
  749|   795k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   795k|              }
  751|   795k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   795k|    {
  684|   795k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   795k|            return static_cast<T*>(s.m_cp);
  686|   795k|        }
  687|   795k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   795k|            return static_cast<T*>(s.m_p);
  689|   795k|        }
  690|   795k|        else {
  691|   795k|            return reinterpret_cast<T*>(s.m_fp);
  692|   795k|        }
  693|   795k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   795k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   249k|        {
  662|   249k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  1.75M|    {
 3944|  1.75M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  1.75M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 1.53M, False: 222k]
  |  Branch (3945:50): [True: 32.0k, False: 1.50M]
  ------------------
 3946|       |
 3947|  1.75M|        auto it = ranges::begin(range);
 3948|  1.75M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  1.75M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  1.75M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.8k, False: 1.69M]
  |  |  ------------------
  ------------------
 3952|  58.8k|            return r.transform_error(
 3953|  58.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  58.8k|                                              "Invalid floating-point value"));
 3955|  58.8k|        }
 3956|  1.69M|        else {
 3957|  1.69M|            digits_count += ranges::distance(it, *r);
 3958|  1.69M|            it = *r;
 3959|  1.69M|        }
 3960|       |
 3961|  1.69M|        m_integral_part_length = digits_count;
 3962|  1.69M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 287k, False: 1.40M]
  ------------------
 3963|  1.69M|                                             m_locale_options.decimal_point)) {
 3964|   287k|            it = *r;
 3965|   287k|        }
 3966|       |
 3967|  1.69M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 245k, False: 1.45M]
  ------------------
 3968|  1.69M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   245k|            digits_count += ranges::distance(it, *r);
 3970|   245k|            it = *r;
 3971|   245k|        }
 3972|       |
 3973|  1.69M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.69M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  1.69M|        auto beg_exp_it = it;
 3979|  1.69M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.48M, False: 206k]
  ------------------
 3980|  1.48M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.48M|        }
 3982|  1.69M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 31.0k, False: 1.66M]
  |  Branch (3982:29): [True: 16.7k, False: 14.3k]
  ------------------
 3983|  16.7k|            return unexpected_scan_error(
 3984|  16.7k|                scan_error::invalid_scanned_value,
 3985|  16.7k|                "No exponent given to scientific float");
 3986|  16.7k|        }
 3987|       |
 3988|  1.67M|        m_kind =
 3989|  1.67M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.43M, False: 245k]
  ------------------
 3990|       |
 3991|  1.67M|        return it;
 3992|  1.69M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  3.45M|    {
 3774|  3.45M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  3.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.45M]
  |  |  |  Branch (859:45): [True: 0, False: 3.45M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  3.45M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  3.45M|        return read_while1_code_unit(
 3783|  3.45M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  3.45M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  3.45M|    {
  754|  3.45M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  19.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.8M|              cvref<T> obj = *get<T>(fn);
  745|  19.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.8M|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.8M|              }
  748|  19.8M|              else {
  749|  19.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.8M|              }
  751|  19.8M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  19.8M|    {
  684|  19.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.8M|            return static_cast<T*>(s.m_cp);
  686|  19.8M|        }
  687|  19.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.8M|            return static_cast<T*>(s.m_p);
  689|  19.8M|        }
  690|  19.8M|        else {
  691|  19.8M|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.8M|        }
  693|  19.8M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  19.8M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  3.45M|        {
  662|  3.45M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  2.28M|    {
 1577|  2.28M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.28M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   409k|    {
  754|   409k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   409k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   409k|              cvref<T> obj = *get<T>(fn);
  745|   409k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   409k|                  obj(static_cast<decltype(args)>(args)...);
  747|   409k|              }
  748|   409k|              else {
  749|   409k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   409k|              }
  751|   409k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   409k|    {
  684|   409k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   409k|            return static_cast<T*>(s.m_cp);
  686|   409k|        }
  687|   409k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   409k|            return static_cast<T*>(s.m_p);
  689|   409k|        }
  690|   409k|        else {
  691|   409k|            return reinterpret_cast<T*>(s.m_fp);
  692|   409k|        }
  693|   409k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   409k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   409k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   409k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  1.98M|    {
 3665|  1.98M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.98M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.98M|        return read_source_impl(range);
 3671|  1.98M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   409k|        {
  662|   409k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   550k|    {
 4170|   550k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   550k|#if !SCN_DISABLE_LOCALE
 4173|   550k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 154k, False: 395k]
  ------------------
 4174|   154k|            return read_impl<Range>(
 4175|   154k|                range, rd,
 4176|   154k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   154k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   154k|                },
 4179|   154k|                value, loc);
 4180|   154k|        }
 4181|   395k|#endif
 4182|       |
 4183|   395k|        return read_impl<Range>(
 4184|   395k|            range, rd,
 4185|   395k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   395k|                return r.read_source(SCN_FWD(args)...);
 4187|   395k|            },
 4188|   395k|            value);
 4189|   550k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   782k|    {
 4206|   782k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   782k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.1k, False: 765k]
  |  |  ------------------
  ------------------
 4208|  16.1k|            return unexpected(r.error());
 4209|  16.1k|        }
 4210|       |
 4211|   765k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   765k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   765k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   765k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.0k, False: 747k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.0k|    }                                                  \
  |  |  |  | 3667|   765k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   747k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   747k|        return ranges::next(range.begin(), n);
 4213|   765k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.48M|    {
  763|  2.48M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.48M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   154k|    {
  754|   154k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|   154k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   154k|                  obj(static_cast<decltype(args)>(args)...);
  747|   154k|              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   154k|    {
  684|   154k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   154k|            return static_cast<T*>(s.m_cp);
  686|   154k|        }
  687|   154k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   154k|            return static_cast<T*>(s.m_p);
  689|   154k|        }
  690|   154k|        else {
  691|   154k|            return reinterpret_cast<T*>(s.m_fp);
  692|   154k|        }
  693|   154k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   154k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   154k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   154k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   499k|    {
 3679|   499k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   499k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   499k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 499k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   499k|        return read_source_impl(range);
 3685|   499k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  2.48M|    {
 3705|  2.48M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  2.48M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.48M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.48M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.48M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.48M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.48M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.48M|        auto it = sign_result.first;
 3708|  2.48M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.48M|        auto digits_begin = it;
 3711|  2.48M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.48M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.48M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.48M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  4.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.48M]
  |  |  |  Branch (859:45): [True: 0, False: 2.48M]
  |  |  |  Branch (859:45): [True: 0, False: 2.48M]
  |  |  ------------------
  ------------------
 3715|  2.48M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  2.48M|            else {
 3724|  2.48M|                auto cb = [&](const auto& rr)
 3725|  2.48M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.48M|                    auto res = read_all(rr);
 3727|  2.48M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.48M|                        return unexpected_scan_error(
 3729|  2.48M|                            scan_error::invalid_scanned_value,
 3730|  2.48M|                            "Invalid float value");
 3731|  2.48M|                    }
 3732|  2.48M|                    return res;
 3733|  2.48M|                };
 3734|  2.48M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|  2.48M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.48M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 50.3k, False: 2.43M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  50.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  50.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  50.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  50.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  50.3k|    }                                                  \
  |  | 3667|  2.48M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  2.43M|            }
 3736|  2.48M|        }
 3737|  2.43M|        else {
 3738|  2.43M|            SCN_TRY_ASSIGN(
 3739|  2.43M|                it,
 3740|  2.43M|                do_read_source_impl(
 3741|  2.43M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.43M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.43M|        }
 3744|       |
 3745|  2.43M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.43M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.41M, False: 22.3k]
  |  Branch (3747:48): [True: 2.39M, False: 16.0k]
  ------------------
 3748|  2.43M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.30M, False: 93.3k]
  ------------------
 3749|  2.43M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.29M, False: 2.65k]
  ------------------
 3750|  2.29M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.29M|        }
 3752|       |
 3753|  2.43M|        handle_separators();
 3754|       |
 3755|  2.43M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.43M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.43M|        return it;
 3768|  2.43M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  2.48M|    {
 3811|  2.48M|        auto it = range.begin();
 3812|  2.48M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.44M, False: 38.4k]
  ------------------
 3813|  2.44M|            return unexpected(r.error());
 3814|  2.44M|        }
 3815|  38.4k|        else {
 3816|  38.4k|            it = *r;
 3817|  38.4k|        }
 3818|       |
 3819|  38.4k|        if (auto r = read_matching_string_classic_nocase(
 3820|  38.4k|                ranges::subrange{it, range.end()}, "inity");
 3821|  38.4k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 22.3k, False: 16.0k]
  ------------------
 3822|  22.3k|            m_kind = float_kind::inf_short;
 3823|  22.3k|            return it;
 3824|  22.3k|        }
 3825|  16.0k|        else {
 3826|  16.0k|            m_kind = float_kind::inf_long;
 3827|  16.0k|            return *r;
 3828|  16.0k|        }
 3829|  38.4k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  2.44M|    {
 3834|  2.44M|        auto it = range.begin();
 3835|  2.44M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.34M, False: 97.1k]
  ------------------
 3836|  2.34M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.34M|                scan_error::invalid_scanned_value,
 3838|  2.34M|                "Invalid floating-point NaN value"));
 3839|  2.34M|        }
 3840|  97.1k|        else {
 3841|  97.1k|            it = *r;
 3842|  97.1k|        }
 3843|       |
 3844|  97.1k|        if (auto r =
 3845|  97.1k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  97.1k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 93.3k, False: 3.79k]
  ------------------
 3847|  93.3k|            m_kind = float_kind::nan_simple;
 3848|  93.3k|            return it;
 3849|  93.3k|        }
 3850|  3.79k|        else {
 3851|  3.79k|            it = *r;
 3852|  3.79k|        }
 3853|       |
 3854|  3.79k|        auto payload_beg_it = it;
 3855|  3.79k|        it = read_while_code_unit(
 3856|  3.79k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.79k|                return is_ascii_char(ch) &&
 3858|  3.79k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.79k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.79k|            });
 3861|  3.79k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.79k|        m_kind = float_kind::nan_with_payload;
 3864|  3.79k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.65k, False: 1.13k]
  ------------------
 3865|  3.79k|                                             ')')) {
 3866|  2.65k|            return *r;
 3867|  2.65k|        }
 3868|  1.13k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.13k|                                     "Invalid floating-point NaN payload");
 3870|  3.79k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.79k|    {
  754|  3.79k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  23.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.6k|              cvref<T> obj = *get<T>(fn);
  745|  23.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.6k|              }
  748|  23.6k|              else {
  749|  23.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.6k|              }
  751|  23.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  23.6k|    {
  684|  23.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.6k|            return static_cast<T*>(s.m_cp);
  686|  23.6k|        }
  687|  23.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.6k|            return static_cast<T*>(s.m_p);
  689|  23.6k|        }
  690|  23.6k|        else {
  691|  23.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.6k|        }
  693|  23.6k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  23.6k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  23.6k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 23.4k, False: 179]
  ------------------
 3858|  23.6k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 20.6k, False: 2.76k]
  |  Branch (3858:39): [True: 12.9k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 8.00k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  23.4k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.84k]
  ------------------
 3860|  23.6k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.79k|        {
  662|  3.79k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.70M|    {
 3804|  1.70M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.70M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.32M|{
 1996|  1.32M|    auto it = read_while_code_unit(range, pred);
 1997|  1.32M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 545k, False: 783k]
  ------------------
 1998|   545k|        return unexpected(parse_error::error);
 1999|   545k|    }
 2000|   783k|    return it;
 2001|  1.32M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   411k|    {
 3876|   411k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 80.1k, False: 330k]
  ------------------
 3877|  80.1k|            auto beg_exp_it = range.begin();
 3878|  80.1k|            auto it = *r;
 3879|       |
 3880|  80.1k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 79.9k, False: 162]
  ------------------
 3881|  80.1k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  79.9k|                it = r_sign->first;
 3883|  79.9k|            }
 3884|       |
 3885|  80.1k|            if (auto r_exp = read_while1_code_unit(
 3886|  80.1k|                    ranges::subrange{it, range.end()},
 3887|  80.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  80.1k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.05k, False: 79.0k]
  |  |  ------------------
  ------------------
 3889|  1.05k|                it = beg_exp_it;
 3890|  1.05k|            }
 3891|  79.0k|            else {
 3892|  79.0k|                it = *r_exp;
 3893|  79.0k|            }
 3894|       |
 3895|  80.1k|            return it;
 3896|  80.1k|        }
 3897|   330k|        return range.begin();
 3898|   411k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  80.1k|    {
  754|  80.1k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   248k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   248k|              cvref<T> obj = *get<T>(fn);
  745|   248k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   248k|                  obj(static_cast<decltype(args)>(args)...);
  747|   248k|              }
  748|   248k|              else {
  749|   248k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   248k|              }
  751|   248k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   248k|    {
  684|   248k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   248k|            return static_cast<T*>(s.m_cp);
  686|   248k|        }
  687|   248k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   248k|            return static_cast<T*>(s.m_p);
  689|   248k|        }
  690|   248k|        else {
  691|   248k|            return reinterpret_cast<T*>(s.m_fp);
  692|   248k|        }
  693|   248k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   248k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  80.1k|        {
  662|  80.1k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   639k|    {
 3944|   639k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   639k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 425k, False: 214k]
  |  Branch (3945:50): [True: 32.1k, False: 393k]
  ------------------
 3946|       |
 3947|   639k|        auto it = ranges::begin(range);
 3948|   639k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   639k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   639k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.1k, False: 608k]
  |  |  ------------------
  ------------------
 3952|  31.1k|            return r.transform_error(
 3953|  31.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  31.1k|                                              "Invalid floating-point value"));
 3955|  31.1k|        }
 3956|   608k|        else {
 3957|   608k|            digits_count += ranges::distance(it, *r);
 3958|   608k|            it = *r;
 3959|   608k|        }
 3960|       |
 3961|   608k|        m_integral_part_length = digits_count;
 3962|   608k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 110k, False: 497k]
  ------------------
 3963|   608k|                                             m_locale_options.decimal_point)) {
 3964|   110k|            it = *r;
 3965|   110k|        }
 3966|       |
 3967|   608k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 95.7k, False: 512k]
  ------------------
 3968|   608k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  95.7k|            digits_count += ranges::distance(it, *r);
 3970|  95.7k|            it = *r;
 3971|  95.7k|        }
 3972|       |
 3973|   608k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 608k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   608k|        auto beg_exp_it = it;
 3979|   608k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 411k, False: 197k]
  ------------------
 3980|   411k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   411k|        }
 3982|   608k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 31.0k, False: 577k]
  |  Branch (3982:29): [True: 16.7k, False: 14.3k]
  ------------------
 3983|  16.7k|            return unexpected_scan_error(
 3984|  16.7k|                scan_error::invalid_scanned_value,
 3985|  16.7k|                "No exponent given to scientific float");
 3986|  16.7k|        }
 3987|       |
 3988|   591k|        m_kind =
 3989|   591k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 512k, False: 79.0k]
  ------------------
 3990|       |
 3991|   591k|        return it;
 3992|   608k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|  1.24M|    {
 3774|  1.24M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.24M]
  |  |  |  Branch (859:45): [True: 0, False: 1.24M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.24M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.24M|        return read_while1_code_unit(
 3783|  1.24M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.24M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.24M|    {
  754|  1.24M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  7.59M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.59M|              cvref<T> obj = *get<T>(fn);
  745|  7.59M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.59M|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.59M|              }
  748|  7.59M|              else {
  749|  7.59M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.59M|              }
  751|  7.59M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  7.59M|    {
  684|  7.59M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.59M|            return static_cast<T*>(s.m_cp);
  686|  7.59M|        }
  687|  7.59M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.59M|            return static_cast<T*>(s.m_p);
  689|  7.59M|        }
  690|  7.59M|        else {
  691|  7.59M|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.59M|        }
  693|  7.59M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  7.59M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.24M|        {
  662|  1.24M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  2.48M|    {
 4000|  2.48M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.48M|        const bool allowed_nonhex =
 4002|  2.48M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.48M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.48M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.44M, False: 38.4k]
  |  Branch (4005:45): [True: 0, False: 2.44M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.48M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 38.4k, False: 2.44M]
  ------------------
 4011|  38.4k|            return *r;
 4012|  38.4k|        }
 4013|       |
 4014|  2.44M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.34M, False: 95.9k]
  |  Branch (4014:45): [True: 1.13k, False: 2.34M]
  ------------------
 4015|  1.13k|            return unexpected(r.error());
 4016|  1.13k|        }
 4017|  2.44M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 95.9k, False: 2.34M]
  ------------------
 4018|  95.9k|            return *r;
 4019|  95.9k|        }
 4020|       |
 4021|  2.34M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.70M, False: 639k]
  |  Branch (4021:28): [True: 528k, False: 1.17M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   528k|            auto it = range.begin();
 4025|       |
 4026|   528k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 27.3k, False: 501k]
  ------------------
 4027|  27.3k|                m_kind = float_kind::hex_with_prefix;
 4028|  27.3k|                it = *r;
 4029|  27.3k|            }
 4030|   501k|            else {
 4031|   501k|                m_kind = float_kind::hex_without_prefix;
 4032|   501k|            }
 4033|       |
 4034|   528k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   528k|        }
 4036|  1.81M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 639k, False: 1.17M]
  |  Branch (4036:29): [True: 639k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   639k|            m_kind = float_kind::generic;
 4040|   639k|            return read_regular_float(range);
 4041|   639k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.17M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.1k, False: 1.11M]
  |  |  ------------------
  ------------------
 4047|  67.1k|            m_kind = float_kind::hex_with_prefix;
 4048|  67.1k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  67.1k|        }
 4050|       |
 4051|  1.11M|        m_kind = float_kind::generic;
 4052|  1.11M|        return read_regular(range);
 4053|  1.17M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.70M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.70M|                    auto res = read_all(rr);
 3727|  1.70M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.28k, False: 1.70M]
  |  |  ------------------
  ------------------
 3728|  1.28k|                        return unexpected_scan_error(
 3729|  1.28k|                            scan_error::invalid_scanned_value,
 3730|  1.28k|                            "Invalid float value");
 3731|  1.28k|                    }
 3732|  1.70M|                    return res;
 3733|  1.70M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.70M|{
 1839|  1.70M|    return ranges::next(range.begin(), range.end());
 1840|  1.70M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.70M|    {
  313|  1.70M|        ranges::advance(x, bound);
  314|  1.70M|        return x;
  315|  1.70M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.70M|    {
  275|  1.70M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.70M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.70M|    {
  190|  1.70M|        i = std::move(bound);
  191|  1.70M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.30M|    {
 1577|  2.30M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.30M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.30M|    {
 1621|  2.30M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.30M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.30M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.30M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.30M|            m_storage.reset();
 1627|  2.30M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.30M|        }
 1629|  2.30M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.30M|                                          std::basic_string<CharT>>) {
 1631|  2.30M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.30M|            m_view = string_view_type{*m_storage};
 1633|  2.30M|        }
 1634|  2.30M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.30M|                                          typename detail::basic_scan_buffer<
 1636|  2.30M|                                              value_t>::forward_iterator> &&
 1637|  2.30M|                           ranges::common_range<Range>) {
 1638|  2.30M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.30M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.30M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.30M|                             detail::to_address(end_seg.end()))) {
 1642|  2.30M|                auto& str = m_storage.emplace();
 1643|  2.30M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.30M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.30M|                m_view = string_view_type{str};
 1646|  2.30M|                return;
 1647|  2.30M|            }
 1648|       |
 1649|  2.30M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.30M|                                                            end_seg.data());
 1651|  2.30M|            m_storage.reset();
 1652|  2.30M|        }
 1653|  2.30M|        else {
 1654|  2.30M|            auto& str = m_storage.emplace();
 1655|  2.30M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.30M|                str.reserve(range.size());
 1657|  2.30M|            }
 1658|  2.30M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.30M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.30M|                          std::back_inserter(str));
 1661|  2.30M|            }
 1662|  2.30M|            else {
 1663|  2.30M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.30M|                     ++it) {
 1665|  2.30M|                    str.push_back(*it);
 1666|  2.30M|                }
 1667|  2.30M|            }
 1668|  2.30M|            m_view = string_view_type{str};
 1669|  2.30M|        }
 1670|  2.30M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   154k|        {
  662|   154k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   395k|    {
  754|   395k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   395k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   395k|              cvref<T> obj = *get<T>(fn);
  745|   395k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   395k|                  obj(static_cast<decltype(args)>(args)...);
  747|   395k|              }
  748|   395k|              else {
  749|   395k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   395k|              }
  751|   395k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   395k|    {
  684|   395k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   395k|            return static_cast<T*>(s.m_cp);
  686|   395k|        }
  687|   395k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   395k|            return static_cast<T*>(s.m_p);
  689|   395k|        }
  690|   395k|        else {
  691|   395k|            return reinterpret_cast<T*>(s.m_fp);
  692|   395k|        }
  693|   395k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   395k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   395k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   395k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.98M|    {
 3665|  1.98M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.98M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.98M|        return read_source_impl(range);
 3671|  1.98M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   395k|        {
  662|   395k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   617k|    {
 6178|   617k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   617k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   617k|            auto rd = make_reader<T, char_type>();
 6183|   617k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   617k|                return unexpected(e);
 6185|   617k|            }
 6186|       |
 6187|   617k|            return impl(rd, range, value);
 6188|   617k|        }
 6189|   617k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   617k|            auto rd = make_reader<T, char_type>();
 6191|   617k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   617k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 617k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   617k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   617k|                return impl(rd, range, value);
 6198|   617k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   617k|        else {
 6206|   617k|            SCN_EXPECT(false);
 6207|   617k|            SCN_UNREACHABLE;
 6208|   617k|        }
 6209|   617k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   617k|    {
 6120|   617k|        const bool need_skipped_width =
 6121|   617k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 617k]
  |  Branch (6121:33): [True: 0, False: 617k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   617k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   617k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   617k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   617k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.38k, False: 610k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.38k|    }                                                  \
  |  |  |  | 3667|   617k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   610k|        auto [it, prefix_width] = prefix_result;
 6126|   610k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   610k|        std::ptrdiff_t value_width = 0;
 6130|   610k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 610k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   610k|        else {
 6146|   610k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   610k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   610k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24.9k, False: 585k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  24.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  24.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  24.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  24.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  24.9k|    }                                                  \
  |  | 3667|   610k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   585k|                                             specs, value, loc));
 6148|       |
 6149|   585k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 585k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   585k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   585k|        std::ptrdiff_t postfix_width = 0;
 6158|   585k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 579k, False: 5.69k]
  ------------------
 6159|   579k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   579k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   579k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   579k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   579k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 579k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   579k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   579k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   579k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   579k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   579k|                                 value_width));
 6163|   579k|            std::tie(it, postfix_width) = postfix_result;
 6164|   579k|        }
 6165|       |
 6166|   585k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   585k|                                                 value_width, postfix_width);
 6168|   585k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 585k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   585k|        return it;
 6173|   585k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.65M|    {
 3691|  1.65M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.65M|        const std::ptrdiff_t sign_len =
 3694|  1.65M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 475k, False: 1.17M]
  ------------------
 3695|       |
 3696|  1.65M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.65M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.65M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.65M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.0k, False: 1.63M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.0k|    }                                                  \
  |  |  |  | 3667|  1.65M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.63M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.65M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   610k|    {
 4170|   610k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   610k|#if !SCN_DISABLE_LOCALE
 4173|   610k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 177k, False: 432k]
  ------------------
 4174|   177k|            return read_impl<Range>(
 4175|   177k|                range, rd,
 4176|   177k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   177k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   177k|                },
 4179|   177k|                value, loc);
 4180|   177k|        }
 4181|   432k|#endif
 4182|       |
 4183|   432k|        return read_impl<Range>(
 4184|   432k|            range, rd,
 4185|   432k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   432k|                return r.read_source(SCN_FWD(args)...);
 4187|   432k|            },
 4188|   432k|            value);
 4189|   610k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   852k|    {
 4206|   852k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   852k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   852k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.5k, False: 823k]
  |  |  ------------------
  ------------------
 4208|  29.5k|            return unexpected(r.error());
 4209|  29.5k|        }
 4210|       |
 4211|   823k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   823k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   823k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   823k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   823k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.64k, False: 820k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.64k|    }                                                  \
  |  |  |  | 3667|   823k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   820k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   820k|        return ranges::next(range.begin(), n);
 4213|   823k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   177k|    {
  754|   177k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   177k|              cvref<T> obj = *get<T>(fn);
  745|   177k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   177k|                  obj(static_cast<decltype(args)>(args)...);
  747|   177k|              }
  748|   177k|              else {
  749|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   177k|              }
  751|   177k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   177k|    {
  684|   177k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   177k|            return static_cast<T*>(s.m_cp);
  686|   177k|        }
  687|   177k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   177k|            return static_cast<T*>(s.m_p);
  689|   177k|        }
  690|   177k|        else {
  691|   177k|            return reinterpret_cast<T*>(s.m_fp);
  692|   177k|        }
  693|   177k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   177k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   177k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   177k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   177k|        {
  662|   177k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   432k|    {
  754|   432k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   432k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   432k|              cvref<T> obj = *get<T>(fn);
  745|   432k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   432k|                  obj(static_cast<decltype(args)>(args)...);
  747|   432k|              }
  748|   432k|              else {
  749|   432k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   432k|              }
  751|   432k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   432k|    {
  684|   432k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   432k|            return static_cast<T*>(s.m_cp);
  686|   432k|        }
  687|   432k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   432k|            return static_cast<T*>(s.m_p);
  689|   432k|        }
  690|   432k|        else {
  691|   432k|            return reinterpret_cast<T*>(s.m_fp);
  692|   432k|        }
  693|   432k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   432k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   432k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   432k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   432k|        {
  662|   432k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   588k|    {
 4170|   588k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   588k|#if !SCN_DISABLE_LOCALE
 4173|   588k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 170k, False: 417k]
  ------------------
 4174|   170k|            return read_impl<Range>(
 4175|   170k|                range, rd,
 4176|   170k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   170k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   170k|                },
 4179|   170k|                value, loc);
 4180|   170k|        }
 4181|   417k|#endif
 4182|       |
 4183|   417k|        return read_impl<Range>(
 4184|   417k|            range, rd,
 4185|   417k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   417k|                return r.read_source(SCN_FWD(args)...);
 4187|   417k|            },
 4188|   417k|            value);
 4189|   588k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   845k|    {
 4206|   845k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   845k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   845k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 828k]
  |  |  ------------------
  ------------------
 4208|  16.8k|            return unexpected(r.error());
 4209|  16.8k|        }
 4210|       |
 4211|   828k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   828k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   828k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   828k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   828k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.3k, False: 811k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  16.3k|    }                                                  \
  |  |  |  | 3667|   828k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   811k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   811k|        return ranges::next(range.begin(), n);
 4213|   828k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   170k|    {
  754|   170k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   170k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   170k|              cvref<T> obj = *get<T>(fn);
  745|   170k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   170k|                  obj(static_cast<decltype(args)>(args)...);
  747|   170k|              }
  748|   170k|              else {
  749|   170k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   170k|              }
  751|   170k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   170k|    {
  684|   170k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   170k|            return static_cast<T*>(s.m_cp);
  686|   170k|        }
  687|   170k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   170k|            return static_cast<T*>(s.m_p);
  689|   170k|        }
  690|   170k|        else {
  691|   170k|            return reinterpret_cast<T*>(s.m_fp);
  692|   170k|        }
  693|   170k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   170k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   170k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   170k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   170k|        {
  662|   170k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   417k|    {
  754|   417k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   417k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   417k|              cvref<T> obj = *get<T>(fn);
  745|   417k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   417k|                  obj(static_cast<decltype(args)>(args)...);
  747|   417k|              }
  748|   417k|              else {
  749|   417k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   417k|              }
  751|   417k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   417k|    {
  684|   417k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   417k|            return static_cast<T*>(s.m_cp);
  686|   417k|        }
  687|   417k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   417k|            return static_cast<T*>(s.m_p);
  689|   417k|        }
  690|   417k|        else {
  691|   417k|            return reinterpret_cast<T*>(s.m_fp);
  692|   417k|        }
  693|   417k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   417k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   417k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   417k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   417k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   417k|        {
  662|   417k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   624k|    {
 6178|   624k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   624k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   624k|            auto rd = make_reader<T, char_type>();
 6183|   624k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   624k|                return unexpected(e);
 6185|   624k|            }
 6186|       |
 6187|   624k|            return impl(rd, range, value);
 6188|   624k|        }
 6189|   624k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   624k|            auto rd = make_reader<T, char_type>();
 6191|   624k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 624k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   624k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 624k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   624k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   624k|                return impl(rd, range, value);
 6198|   624k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   624k|        else {
 6206|   624k|            SCN_EXPECT(false);
 6207|   624k|            SCN_UNREACHABLE;
 6208|   624k|        }
 6209|   624k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   624k|    {
 6120|   624k|        const bool need_skipped_width =
 6121|   624k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 624k]
  |  Branch (6121:33): [True: 0, False: 624k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   624k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   624k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   624k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   624k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.80k, False: 617k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.80k|    }                                                  \
  |  |  |  | 3667|   624k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   617k|        auto [it, prefix_width] = prefix_result;
 6126|   617k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   617k|        std::ptrdiff_t value_width = 0;
 6130|   617k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 617k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   617k|        else {
 6146|   617k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   617k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   617k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24.5k, False: 592k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  24.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  24.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  24.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  24.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  24.5k|    }                                                  \
  |  | 3667|   617k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   592k|                                             specs, value, loc));
 6148|       |
 6149|   592k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 592k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   592k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   592k|        std::ptrdiff_t postfix_width = 0;
 6158|   592k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 586k, False: 6.05k]
  ------------------
 6159|   586k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   586k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   586k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   586k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   586k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 586k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   586k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   586k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   586k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   586k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   586k|                                 value_width));
 6163|   586k|            std::tie(it, postfix_width) = postfix_result;
 6164|   586k|        }
 6165|       |
 6166|   592k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   592k|                                                 value_width, postfix_width);
 6168|   592k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 592k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   592k|        return it;
 6173|   592k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  1.67M|    {
 3691|  1.67M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.67M|        const std::ptrdiff_t sign_len =
 3694|  1.67M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 487k, False: 1.18M]
  ------------------
 3695|       |
 3696|  1.67M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.67M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.67M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.67M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.2k, False: 1.65M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  16.2k|    }                                                  \
  |  |  |  | 3667|  1.67M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.65M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.67M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   617k|    {
 4170|   617k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   617k|#if !SCN_DISABLE_LOCALE
 4173|   617k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 180k, False: 436k]
  ------------------
 4174|   180k|            return read_impl<Range>(
 4175|   180k|                range, rd,
 4176|   180k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   180k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   180k|                },
 4179|   180k|                value, loc);
 4180|   180k|        }
 4181|   436k|#endif
 4182|       |
 4183|   436k|        return read_impl<Range>(
 4184|   436k|            range, rd,
 4185|   436k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   436k|                return r.read_source(SCN_FWD(args)...);
 4187|   436k|            },
 4188|   436k|            value);
 4189|   617k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   862k|    {
 4206|   862k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   862k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   862k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.7k, False: 831k]
  |  |  ------------------
  ------------------
 4208|  30.7k|            return unexpected(r.error());
 4209|  30.7k|        }
 4210|       |
 4211|   831k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   831k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   831k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   831k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 820, False: 830k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    820|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    820|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    820|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    820|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    820|    }                                                  \
  |  |  |  | 3667|   831k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   830k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   830k|        return ranges::next(range.begin(), n);
 4213|   831k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   180k|    {
  754|   180k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   180k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   180k|              cvref<T> obj = *get<T>(fn);
  745|   180k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   180k|                  obj(static_cast<decltype(args)>(args)...);
  747|   180k|              }
  748|   180k|              else {
  749|   180k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   180k|              }
  751|   180k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   180k|    {
  684|   180k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   180k|            return static_cast<T*>(s.m_cp);
  686|   180k|        }
  687|   180k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   180k|            return static_cast<T*>(s.m_p);
  689|   180k|        }
  690|   180k|        else {
  691|   180k|            return reinterpret_cast<T*>(s.m_fp);
  692|   180k|        }
  693|   180k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   180k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   180k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   180k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   180k|        {
  662|   180k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   436k|    {
  754|   436k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   436k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   436k|              cvref<T> obj = *get<T>(fn);
  745|   436k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   436k|                  obj(static_cast<decltype(args)>(args)...);
  747|   436k|              }
  748|   436k|              else {
  749|   436k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   436k|              }
  751|   436k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   436k|    {
  684|   436k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   436k|            return static_cast<T*>(s.m_cp);
  686|   436k|        }
  687|   436k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   436k|            return static_cast<T*>(s.m_p);
  689|   436k|        }
  690|   436k|        else {
  691|   436k|            return reinterpret_cast<T*>(s.m_fp);
  692|   436k|        }
  693|   436k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   436k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   436k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   436k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   436k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   436k|        {
  662|   436k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   595k|    {
 4170|   595k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   595k|#if !SCN_DISABLE_LOCALE
 4173|   595k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 173k, False: 421k]
  ------------------
 4174|   173k|            return read_impl<Range>(
 4175|   173k|                range, rd,
 4176|   173k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   173k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   173k|                },
 4179|   173k|                value, loc);
 4180|   173k|        }
 4181|   421k|#endif
 4182|       |
 4183|   421k|        return read_impl<Range>(
 4184|   421k|            range, rd,
 4185|   421k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   421k|                return r.read_source(SCN_FWD(args)...);
 4187|   421k|            },
 4188|   421k|            value);
 4189|   595k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   855k|    {
 4206|   855k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   855k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   855k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 838k]
  |  |  ------------------
  ------------------
 4208|  17.3k|            return unexpected(r.error());
 4209|  17.3k|        }
 4210|       |
 4211|   838k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   838k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   838k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   838k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.4k, False: 823k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.4k|    }                                                  \
  |  |  |  | 3667|   838k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   823k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   823k|        return ranges::next(range.begin(), n);
 4213|   838k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   173k|    {
  754|   173k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|   173k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   173k|                  obj(static_cast<decltype(args)>(args)...);
  747|   173k|              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   173k|    {
  684|   173k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   173k|            return static_cast<T*>(s.m_cp);
  686|   173k|        }
  687|   173k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   173k|            return static_cast<T*>(s.m_p);
  689|   173k|        }
  690|   173k|        else {
  691|   173k|            return reinterpret_cast<T*>(s.m_fp);
  692|   173k|        }
  693|   173k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   173k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   173k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   173k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   173k|        {
  662|   173k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   421k|    {
  754|   421k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   421k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   421k|              cvref<T> obj = *get<T>(fn);
  745|   421k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   421k|                  obj(static_cast<decltype(args)>(args)...);
  747|   421k|              }
  748|   421k|              else {
  749|   421k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   421k|              }
  751|   421k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   421k|    {
  684|   421k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   421k|            return static_cast<T*>(s.m_cp);
  686|   421k|        }
  687|   421k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   421k|            return static_cast<T*>(s.m_p);
  689|   421k|        }
  690|   421k|        else {
  691|   421k|            return reinterpret_cast<T*>(s.m_fp);
  692|   421k|        }
  693|   421k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   421k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   421k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   421k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   421k|        {
  662|   421k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.52M|{
 1039|  2.52M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.52M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.52M|        return r;
 1042|  2.52M|    }
 1043|  2.52M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.52M|                           ranges::const_iterator_t<Range>,
 1045|  2.52M|                           typename detail::basic_scan_buffer<
 1046|  2.52M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.52M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  2.52M|            auto seg = r.begin().contiguous_segment();
 1049|  2.52M|            auto dist =
 1050|  2.52M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.52M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.52M|        }
 1053|  2.52M|        else {
 1054|  2.52M|            return r.begin().contiguous_segment();
 1055|  2.52M|        }
 1056|  2.52M|    }
 1057|  2.52M|    else {
 1058|  2.52M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.52M|    }
 1060|  2.52M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.22M|{
 2061|  2.22M|    auto it = range.begin();
 2062|  4.24M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 4.22M, False: 22.8k]
  ------------------
 2063|  4.22M|        const auto val =
 2064|  4.22M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  4.22M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  4.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.21M, False: 8.36k]
  |  |  ------------------
  ------------------
 2066|  4.21M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  4.21M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  4.21M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.20M, False: 2.01M]
  ------------------
 2069|  2.20M|                return it;
 2070|  2.20M|            }
 2071|  4.21M|        }
 2072|  2.02M|        it = val.iterator;
 2073|  2.02M|    }
 2074|       |
 2075|  22.8k|    return it;
 2076|  2.22M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  4.22M|{
 1899|  4.22M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  4.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  4.22M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  4.22M|    auto it = range.begin();
 1903|  4.22M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  4.22M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.36k, False: 4.21M]
  |  |  ------------------
  ------------------
 1906|  8.36k|        ++it;
 1907|  8.36k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  8.36k|        return {it, {}};
 1909|  8.36k|    }
 1910|       |
 1911|  4.21M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 4.15M, False: 60.5k]
  ------------------
 1912|  4.15M|        ++it;
 1913|  4.15M|        return {it, string_type(1, *range.begin())};
 1914|  4.15M|    }
 1915|       |
 1916|  60.5k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  60.5k|    return {it, string_type{range.begin(), it}};
 1918|  4.21M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  8.36k|{
 1155|  8.36k|    auto it = input.begin();
 1156|  81.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 79.5k, False: 1.59k]
  ------------------
 1157|  79.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 6.77k, False: 72.8k]
  ------------------
 1158|  6.77k|            break;
 1159|  6.77k|        }
 1160|  79.5k|    }
 1161|  8.36k|    return it;
 1162|  8.36k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  60.5k|    {
  283|  60.5k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  60.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  60.5k|    {
  252|  60.5k|        constexpr iter_difference_t<I> zero{0};
  253|  60.5k|        iter_difference_t<I> counter{0};
  254|       |
  255|   184k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 125k, False: 59.4k]
  |  Branch (255:30): [True: 124k, False: 1.11k]
  ------------------
  256|   124k|            ++i;
  257|   124k|            ++counter;
  258|   124k|        }
  259|       |
  260|  60.5k|        return counter;
  261|  60.5k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  4.22M|    {
 1890|  4.22M|        return !codepoint.empty();
 1891|  4.22M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.22M|{
 2082|  2.22M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.22M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.52M|{
 2951|  2.52M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.52M, False: 0]
  ------------------
 2952|  2.52M|        auto it = read_while_classic_space(range);
 2953|  2.52M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.52M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.8k, False: 2.50M]
  |  |  ------------------
  ------------------
 2955|  22.8k|            return unexpected(e);
 2956|  22.8k|        }
 2957|       |
 2958|  2.50M|        return it;
 2959|  2.52M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.52M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.52M|{
 2117|  2.52M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.52M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.52M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.52M|        auto buf = make_contiguous_buffer(range);
 2121|  2.52M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.52M|        return ranges::next(range.begin(),
 2123|  2.52M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.52M|    }
 2125|  2.52M|    else {
 2126|  2.52M|        auto it = range.begin();
 2127|       |
 2128|  2.52M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.52M|            auto seg = get_contiguous_beginning(range);
 2130|  2.52M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.52M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 304k, False: 2.22M]
  ------------------
 2132|   304k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   304k|            }
 2134|  2.22M|            ranges::advance(it, seg.size());
 2135|  2.22M|        }
 2136|       |
 2137|  2.22M|        return read_while_code_point(
 2138|  2.22M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.52M|    }
 2140|  2.52M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.22M|    {
  754|  2.22M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  4.21M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.21M|              cvref<T> obj = *get<T>(fn);
  745|  4.21M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.21M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.21M|              }
  748|  4.21M|              else {
  749|  4.21M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.21M|              }
  751|  4.21M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.21M|    {
  684|  4.21M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.21M|            return static_cast<T*>(s.m_cp);
  686|  4.21M|        }
  687|  4.21M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.21M|            return static_cast<T*>(s.m_p);
  689|  4.21M|        }
  690|  4.21M|        else {
  691|  4.21M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.21M|        }
  693|  4.21M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  4.21M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.22M|        {
  662|  2.22M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   316k|{
  981|   316k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   316k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   316k|        return true;
  984|   316k|    }
  985|   316k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   316k|                           ranges::const_iterator_t<Range>,
  987|   316k|                           typename detail::basic_scan_buffer<
  988|   316k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   316k|        auto beg = r.begin();
  990|   316k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 316k, False: 0]
  ------------------
  991|   316k|            return false;
  992|   316k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   316k|    else {
 1006|   316k|        return false;
 1007|   316k|    }
 1008|   316k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   241k|    {
 6037|   241k|        const bool need_skipped_width =
 6038|   241k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 241k]
  |  Branch (6038:33): [True: 0, False: 241k]
  ------------------
 6039|   241k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   241k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 241k]
  ------------------
 6043|   241k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 241k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   241k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 241k, False: 0]
  |  Branch (6047:56): [True: 241k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   241k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 241k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   480k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.65k, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.65k|    }                                                  \
  |  |  |  | 3667|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   480k|                            make_eof_scan_error));
 6058|       |
 6059|   480k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 239k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   239k|            return result_type{it, 0};
 6067|   480k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   241k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   384k|{
 1976|   384k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   384k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   384k|{
 1957|   384k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   384k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   384k|    }
 1960|   384k|    else {
 1961|   384k|        auto first = range.begin();
 1962|   460k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 459k, False: 1.18k]
  ------------------
 1963|   459k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 383k, False: 75.9k]
  ------------------
 1964|   383k|                return first;
 1965|   383k|            }
 1966|   459k|        }
 1967|  1.18k|        return first;
 1968|   384k|    }
 1969|   384k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  1.30M|    {
  763|  1.30M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.30M|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   550k|    {
  754|   550k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|   652k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   652k|              cvref<T> obj = *get<T>(fn);
  745|   652k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   652k|                  obj(static_cast<decltype(args)>(args)...);
  747|   652k|              }
  748|   652k|              else {
  749|   652k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   652k|              }
  751|   652k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   652k|    {
  684|   652k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   652k|            return static_cast<T*>(s.m_cp);
  686|   652k|        }
  687|   652k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   652k|            return static_cast<T*>(s.m_p);
  689|   652k|        }
  690|   652k|        else {
  691|   652k|            return reinterpret_cast<T*>(s.m_fp);
  692|   652k|        }
  693|   652k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   550k|        {
  662|   550k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   114k|    {
  108|   114k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   114k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   114k|    {
   94|   114k|        iter_difference_t<I> counter{0};
   95|   281k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 167k, False: 114k]
  ------------------
   96|   167k|            ++i;
   97|   167k|            ++counter;
   98|   167k|        }
   99|   114k|        return counter;
  100|   114k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   804k|{
 1857|   804k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   804k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   804k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   804k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   804k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   804k|        if (sz < count) {
 1862|   804k|            return unexpected(eof_error::eof);
 1863|   804k|        }
 1864|       |
 1865|   804k|        return ranges::next(range.begin(), count);
 1866|   804k|    }
 1867|   804k|    else {
 1868|   804k|        auto it = range.begin();
 1869|   804k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 461k, False: 343k]
  ------------------
 1870|   461k|            return ranges::next(it, count);
 1871|   461k|        }
 1872|       |
 1873|  1.29M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 997k, False: 293k]
  ------------------
 1874|   997k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 49.8k, False: 947k]
  ------------------
 1875|  49.8k|                return unexpected(eof_error::eof);
 1876|  49.8k|            }
 1877|   997k|        }
 1878|       |
 1879|   293k|        return it;
 1880|   343k|    }
 1881|   804k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   804k|{
 1095|   804k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   804k|        return r.size();
 1097|   804k|    }
 1098|   804k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   804k|                           ranges::const_iterator_t<Range>,
 1100|   804k|                           typename detail::basic_scan_buffer<
 1101|   804k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   804k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   804k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   804k|        }
 1105|   804k|        else {
 1106|   804k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 804k, False: 0]
  ------------------
 1107|   804k|                return static_cast<size_t>(
 1108|   804k|                    r.begin().parent()->chars_available() -
 1109|   804k|                    r.begin().position());
 1110|   804k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   804k|        }
 1113|   804k|    }
 1114|   804k|    else {
 1115|   804k|        return 0;
 1116|   804k|    }
 1117|   804k|}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   100k|    {
 1780|   100k|        auto stdloc = loc.get<std::locale>();
 1781|   100k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   100k|        grouping = numpunct.grouping();
 1783|   100k|        thousands_sep =
 1784|   100k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 100k]
  ------------------
 1785|   100k|        decimal_point = numpunct.decimal_point();
 1786|   100k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   100k|{
 1717|   100k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 100k, False: 0]
  ------------------
 1718|   100k|        return std::use_facet<Facet>(stdloc);
 1719|   100k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   100k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   439k|{
 1846|   439k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   439k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 813, False: 438k]
  |  |  ------------------
  ------------------
 1847|    813|        return unexpected(e);
 1848|    813|    }
 1849|       |
 1850|   438k|    return ranges::next(range.begin());
 1851|   439k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   832k|{
  950|   832k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   832k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.01k, False: 829k]
  |  |  ------------------
  ------------------
  951|  3.01k|        return eof_error::eof;
  952|  3.01k|    }
  953|   829k|    return eof_error::good;
  954|   832k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.20M|{
  944|  1.20M|    return is_range_eof(r.begin(), r.end());
  945|  1.20M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.20M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.20M|    {
  937|  1.20M|        return begin == end;
  938|  1.20M|    }
  939|  1.20M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   438k|    {
  296|   438k|        ++x;
  297|   438k|        return x;
  298|   438k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   317k|{
 3141|   317k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   317k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 317k, False: 459]
  ------------------
 3143|   317k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 317k, False: 27]
  ------------------
 3144|   317k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   317k|        }
 3146|     27|        return unexpected(eof_error::eof);
 3147|   317k|    }
 3148|       |
 3149|    459|    auto& it = *r;
 3150|    459|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 414, False: 45]
  ------------------
 3151|    414|        return std::pair{it, sign_type::minus_sign};
 3152|    414|    }
 3153|     45|    return std::pair{it, sign_type::plus_sign};
 3154|    459|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   372k|{
 2272|   372k|    auto it = read_code_unit(range);
 2273|   372k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 396, False: 372k]
  |  |  ------------------
  ------------------
 2274|    396|        return unexpected(make_eof_parse_error(it.error()));
 2275|    396|    }
 2276|       |
 2277|   744k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 744k, False: 368k]
  ------------------
 2278|   744k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 3.39k, False: 741k]
  ------------------
 2279|  3.39k|            return *it;
 2280|  3.39k|        }
 2281|   744k|    }
 2282|       |
 2283|   368k|    return unexpected(parse_error::error);
 2284|   372k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   804k|{
 2231|   804k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   804k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   804k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   804k|        if (range.size() < str.size()) {
 2236|   804k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   804k|        }
 2238|   804k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   804k|            return unexpected(parse_error::error);
 2240|   804k|        }
 2241|   804k|        return ranges::next(range.begin(), str.size());
 2242|   804k|    }
 2243|   804k|    else {
 2244|   804k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   804k|            if (ch < 'A' || ch > 'Z') {
 2246|   804k|                return ch;
 2247|   804k|            }
 2248|   804k|            return static_cast<char_type>(ch +
 2249|   804k|                                          static_cast<char_type>('a' - 'A'));
 2250|   804k|        };
 2251|       |
 2252|   804k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   804k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   804k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   804k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   804k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.8k, False: 755k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  49.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  49.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  49.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  49.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  49.8k|    }                                                  \
  |  |  |  | 3667|   804k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   755k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   755k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   755k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   755k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 754k, False: 231]
  |  |  ------------------
  ------------------
 2257|   755k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   755k|                    return ascii_tolower(a) ==
 2259|   755k|                           static_cast<detail::char_t<Range>>(b);
 2260|   755k|                }))) {
 2261|   754k|            return unexpected(parse_error::error);
 2262|   754k|        }
 2263|       |
 2264|    231|        return it;
 2265|   755k|    }
 2266|   804k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   792k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   792k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 503k, False: 288k]
  |  Branch (2245:29): [True: 282k, False: 6.17k]
  ------------------
 2246|   785k|                return ch;
 2247|   785k|            }
 2248|  6.17k|            return static_cast<char_type>(ch +
 2249|  6.17k|                                          static_cast<char_type>('a' - 'A'));
 2250|   792k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  66.8k|{
 2146|  66.8k|    auto it = read_code_unit(range);
 2147|  66.8k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 417, False: 66.4k]
  |  |  ------------------
  ------------------
 2148|    417|        return unexpected(make_eof_parse_error(it.error()));
 2149|    417|    }
 2150|       |
 2151|  66.4k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.3k, False: 84]
  |  |  ------------------
  ------------------
 2152|  66.4k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  66.3k|        return unexpected(parse_error::error);
 2154|  66.3k|    }
 2155|       |
 2156|     84|    return *it;
 2157|  66.4k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   384k|{
 1996|   384k|    auto it = read_while_code_unit(range, pred);
 1997|   384k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 315k, False: 68.5k]
  ------------------
 1998|   315k|        return unexpected(parse_error::error);
 1999|   315k|    }
 2000|  68.5k|    return it;
 2001|   384k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  65.2k|    {
 1621|  65.2k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  65.2k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  65.2k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  65.2k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  65.2k|            m_storage.reset();
 1627|  65.2k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  65.2k|        }
 1629|  65.2k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  65.2k|                                          std::basic_string<CharT>>) {
 1631|  65.2k|            m_storage.emplace(SCN_FWD(range));
 1632|  65.2k|            m_view = string_view_type{*m_storage};
 1633|  65.2k|        }
 1634|  65.2k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  65.2k|                                          typename detail::basic_scan_buffer<
 1636|  65.2k|                                              value_t>::forward_iterator> &&
 1637|  65.2k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  65.2k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  65.2k|            auto end_seg = range.end().contiguous_segment();
 1640|  65.2k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  65.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.24k, False: 62.0k]
  |  |  ------------------
  ------------------
 1641|  65.2k|                             detail::to_address(end_seg.end()))) {
 1642|  3.24k|                auto& str = m_storage.emplace();
 1643|  3.24k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.24k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.24k|                m_view = string_view_type{str};
 1646|  3.24k|                return;
 1647|  3.24k|            }
 1648|       |
 1649|  62.0k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  62.0k|                                                            end_seg.data());
 1651|  62.0k|            m_storage.reset();
 1652|  62.0k|        }
 1653|  65.2k|        else {
 1654|  65.2k|            auto& str = m_storage.emplace();
 1655|  65.2k|            if constexpr (ranges::sized_range<Range>) {
 1656|  65.2k|                str.reserve(range.size());
 1657|  65.2k|            }
 1658|  65.2k|            if constexpr (ranges::common_range<Range>) {
 1659|  65.2k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  65.2k|                          std::back_inserter(str));
 1661|  65.2k|            }
 1662|  65.2k|            else {
 1663|  65.2k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  65.2k|                     ++it) {
 1665|  65.2k|                    str.push_back(*it);
 1666|  65.2k|                }
 1667|  65.2k|            }
 1668|  65.2k|            m_view = string_view_type{str};
 1669|  65.2k|        }
 1670|  65.2k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|   812k|    {
 1582|   812k|        return m_view;
 1583|   812k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.25M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  46.8k|    {
 6079|  46.8k|        const bool need_skipped_width =
 6080|  46.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 46.8k]
  |  Branch (6080:33): [True: 0, False: 46.8k]
  ------------------
 6081|  46.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  46.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 46.8k]
  ------------------
 6084|  46.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 46.8k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  46.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 46.8k, False: 0]
  ------------------
 6089|  46.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 46.8k]
  ------------------
 6090|  46.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  46.8k|        return result_type{rng.begin(), 0};
 6114|  46.8k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   805k|{
 1857|   805k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   805k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   805k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   805k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   805k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   805k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 49.8k, False: 755k]
  ------------------
 1862|  49.8k|            return unexpected(eof_error::eof);
 1863|  49.8k|        }
 1864|       |
 1865|   755k|        return ranges::next(range.begin(), count);
 1866|   805k|    }
 1867|   805k|    else {
 1868|   805k|        auto it = range.begin();
 1869|   805k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   805k|            return ranges::next(it, count);
 1871|   805k|        }
 1872|       |
 1873|   805k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   805k|            if (it == range.end()) {
 1875|   805k|                return unexpected(eof_error::eof);
 1876|   805k|            }
 1877|   805k|        }
 1878|       |
 1879|   805k|        return it;
 1880|   805k|    }
 1881|   805k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   500k|{
 1899|   500k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   500k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   500k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   500k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   500k|    auto it = range.begin();
 1903|   500k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   500k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 500k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   500k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 500k, False: 0]
  ------------------
 1912|   500k|        ++it;
 1913|   500k|        return {it, string_type(1, *range.begin())};
 1914|   500k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   500k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.24M|{
  944|  1.24M|    return is_range_eof(r.begin(), r.end());
  945|  1.24M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.24M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.24M|    {
  937|  1.24M|        return begin == end;
  938|  1.24M|    }
  939|  1.24M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   175k|    {
  190|   175k|        i = std::move(bound);
  191|   175k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   500k|    {
 1890|   500k|        return !codepoint.empty();
 1891|   500k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   747k|{
  950|   747k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.44k, False: 745k]
  |  |  ------------------
  ------------------
  951|  2.44k|        return eof_error::eof;
  952|  2.44k|    }
  953|   745k|    return eof_error::good;
  954|   747k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   355k|{
 1846|   355k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 248, False: 354k]
  |  |  ------------------
  ------------------
 1847|    248|        return unexpected(e);
 1848|    248|    }
 1849|       |
 1850|   354k|    return ranges::next(range.begin());
 1851|   355k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   354k|    {
  296|   354k|        ++x;
  297|   354k|        return x;
  298|   354k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   316k|{
 3141|   316k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   316k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 315k, False: 339]
  ------------------
 3143|   315k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 315k, False: 12]
  ------------------
 3144|   315k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   315k|        }
 3146|     12|        return unexpected(eof_error::eof);
 3147|   315k|    }
 3148|       |
 3149|    339|    auto& it = *r;
 3150|    339|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 294, False: 45]
  ------------------
 3151|    294|        return std::pair{it, sign_type::minus_sign};
 3152|    294|    }
 3153|     45|    return std::pair{it, sign_type::plus_sign};
 3154|    339|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   329k|{
 2272|   329k|    auto it = read_code_unit(range);
 2273|   329k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 329k]
  |  |  ------------------
  ------------------
 2274|    106|        return unexpected(make_eof_parse_error(it.error()));
 2275|    106|    }
 2276|       |
 2277|   659k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 659k, False: 328k]
  ------------------
 2278|   659k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.53k, False: 657k]
  ------------------
 2279|  1.53k|            return *it;
 2280|  1.53k|        }
 2281|   659k|    }
 2282|       |
 2283|   328k|    return unexpected(parse_error::error);
 2284|   329k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   805k|{
 2231|   805k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   805k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   805k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   805k|        if (range.size() < str.size()) {
 2236|   805k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   805k|        }
 2238|   805k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   805k|            return unexpected(parse_error::error);
 2240|   805k|        }
 2241|   805k|        return ranges::next(range.begin(), str.size());
 2242|   805k|    }
 2243|   805k|    else {
 2244|   805k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   805k|            if (ch < 'A' || ch > 'Z') {
 2246|   805k|                return ch;
 2247|   805k|            }
 2248|   805k|            return static_cast<char_type>(ch +
 2249|   805k|                                          static_cast<char_type>('a' - 'A'));
 2250|   805k|        };
 2251|       |
 2252|   805k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   805k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   805k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   805k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   805k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.8k, False: 755k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  49.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  49.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  49.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  49.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  49.8k|    }                                                  \
  |  |  |  | 3667|   805k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   755k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   755k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   755k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   755k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 755k, False: 231]
  |  |  ------------------
  ------------------
 2257|   755k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   755k|                    return ascii_tolower(a) ==
 2259|   755k|                           static_cast<detail::char_t<Range>>(b);
 2260|   755k|                }))) {
 2261|   755k|            return unexpected(parse_error::error);
 2262|   755k|        }
 2263|       |
 2264|    231|        return it;
 2265|   755k|    }
 2266|   805k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   792k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   792k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 503k, False: 288k]
  |  Branch (2245:29): [True: 282k, False: 6.17k]
  ------------------
 2246|   786k|                return ch;
 2247|   786k|            }
 2248|  6.17k|            return static_cast<char_type>(ch +
 2249|  6.17k|                                          static_cast<char_type>('a' - 'A'));
 2250|   792k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  25.3k|{
 2146|  25.3k|    auto it = read_code_unit(range);
 2147|  25.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 25.2k]
  |  |  ------------------
  ------------------
 2148|    142|        return unexpected(make_eof_parse_error(it.error()));
 2149|    142|    }
 2150|       |
 2151|  25.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.2k, False: 36]
  |  |  ------------------
  ------------------
 2152|  25.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  25.2k|        return unexpected(parse_error::error);
 2154|  25.2k|    }
 2155|       |
 2156|     36|    return *it;
 2157|  25.2k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   165k|{
 1976|   165k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   165k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   165k|{
 1957|   165k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   165k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   165k|    }
 1960|   165k|    else {
 1961|   165k|        auto first = range.begin();
 1962|   165k|        for (; first != range.end(); ++first) {
 1963|   165k|            if (pred(*first)) {
 1964|   165k|                return first;
 1965|   165k|            }
 1966|   165k|        }
 1967|   165k|        return first;
 1968|   165k|    }
 1969|   165k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   316k|{
 2951|   316k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 316k, False: 0]
  ------------------
 2952|   316k|        auto it = read_while_classic_space(range);
 2953|   316k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   316k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 314k]
  |  |  ------------------
  ------------------
 2955|  2.06k|            return unexpected(e);
 2956|  2.06k|        }
 2957|       |
 2958|   314k|        return it;
 2959|   316k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   316k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   316k|{
 2117|   316k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   316k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   316k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   316k|        auto buf = make_contiguous_buffer(range);
 2121|   316k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   316k|        return ranges::next(range.begin(),
 2123|   316k|                            ranges::distance(buf.view().begin(), it));
 2124|   316k|    }
 2125|   316k|    else {
 2126|   316k|        auto it = range.begin();
 2127|       |
 2128|   316k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   316k|            auto seg = get_contiguous_beginning(range);
 2130|   316k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   316k|                seg_it != seg.end()) {
 2132|   316k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   316k|            }
 2134|   316k|            ranges::advance(it, seg.size());
 2135|   316k|        }
 2136|       |
 2137|   316k|        return read_while_code_point(
 2138|   316k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   316k|    }
 2140|   316k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   316k|{
 2082|   316k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   316k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   375k|{
 2061|   375k|    auto it = range.begin();
 2062|   540k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 500k, False: 40.2k]
  ------------------
 2063|   500k|        const auto val =
 2064|   500k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   500k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   500k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 500k, False: 0]
  |  |  ------------------
  ------------------
 2066|   500k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   500k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   500k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 335k, False: 165k]
  ------------------
 2069|   335k|                return it;
 2070|   335k|            }
 2071|   500k|        }
 2072|   165k|        it = val.iterator;
 2073|   165k|    }
 2074|       |
 2075|  40.2k|    return it;
 2076|   375k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   316k|    {
  754|   316k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   375k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   375k|              cvref<T> obj = *get<T>(fn);
  745|   375k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   375k|                  obj(static_cast<decltype(args)>(args)...);
  747|   375k|              }
  748|   375k|              else {
  749|   375k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   375k|              }
  751|   375k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   375k|    {
  684|   375k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   375k|            return static_cast<T*>(s.m_cp);
  686|   375k|        }
  687|   375k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   375k|            return static_cast<T*>(s.m_p);
  689|   375k|        }
  690|   375k|        else {
  691|   375k|            return reinterpret_cast<T*>(s.m_fp);
  692|   375k|        }
  693|   375k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   375k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   316k|        {
  662|   316k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   526k|    {
  304|   526k|        ranges::advance(x, n);
  305|   526k|        return x;
  306|   526k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   526k|    {
  268|   526k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   526k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   526k|    {
  181|  1.81M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.29M, False: 526k]
  ------------------
  182|  1.29M|            ++i;
  183|  1.29M|        }
  184|   526k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  80.3k|    {
 6178|  80.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  80.3k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  80.3k|            auto rd = make_reader<T, char_type>();
 6183|  80.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  80.3k|                return unexpected(e);
 6185|  80.3k|            }
 6186|       |
 6187|  80.3k|            return impl(rd, range, value);
 6188|  80.3k|        }
 6189|  80.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  80.3k|            auto rd = make_reader<T, char_type>();
 6191|  80.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.3k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  80.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 80.3k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  80.3k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  80.3k|                return impl(rd, range, value);
 6198|  80.3k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  80.3k|        else {
 6206|  80.3k|            SCN_EXPECT(false);
 6207|  80.3k|            SCN_UNREACHABLE;
 6208|  80.3k|        }
 6209|  80.3k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   482k|    {
 3040|   482k|        reader_error_handler eh{};
 3041|   482k|        get_derived().check_specs_impl(specs, eh);
 3042|   482k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 482k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   482k|        return {};
 3046|   482k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   482k|    {
 3051|   482k|        return static_cast<Derived&>(*this);
 3052|   482k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   482k|    {
 4145|   482k|        detail::check_float_type_specs(specs, eh);
 4146|   482k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  80.3k|    {
 6120|  80.3k|        const bool need_skipped_width =
 6121|  80.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 80.3k]
  |  Branch (6121:33): [True: 0, False: 80.3k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  80.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  80.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  80.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  80.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 530, False: 79.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    530|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    530|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    530|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    530|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    530|    }                                                  \
  |  |  |  | 3667|  80.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  79.7k|        auto [it, prefix_width] = prefix_result;
 6126|  79.7k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  79.7k|        std::ptrdiff_t value_width = 0;
 6130|  79.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 79.7k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  79.7k|        else {
 6146|  79.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  79.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  79.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.1k, False: 15.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.1k|    }                                                  \
  |  | 3667|  79.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  15.6k|                                             specs, value, loc));
 6148|       |
 6149|  15.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 15.6k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  15.6k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  15.6k|        std::ptrdiff_t postfix_width = 0;
 6158|  15.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 15.5k, False: 114]
  ------------------
 6159|  15.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  15.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  15.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  15.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  15.5k|                                 value_width));
 6163|  15.5k|            std::tie(it, postfix_width) = postfix_result;
 6164|  15.5k|        }
 6165|       |
 6166|  15.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  15.6k|                                                 value_width, postfix_width);
 6168|  15.6k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 15.6k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  15.6k|        return it;
 6173|  15.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|   727k|    {
 3035|   727k|        return true;
 3036|   727k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   479k|    {
 4217|   479k|        unsigned options{};
 4218|   479k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 100k, False: 379k]
  ------------------
 4219|   100k|            options |= float_reader_base::allow_thsep;
 4220|   100k|        }
 4221|       |
 4222|   479k|        SCN_GCC_COMPAT_PUSH
 4223|   479k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   479k|        switch (specs.type) {
 4226|   100k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 100k, False: 378k]
  ------------------
 4227|   100k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  77.7k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 77.7k, False: 401k]
  ------------------
 4230|  77.7k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   100k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 100k, False: 378k]
  ------------------
 4233|   100k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   100k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 100k, False: 379k]
  ------------------
 4236|   100k|                return options | float_reader_base::allow_scientific |
 4237|   100k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   100k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 100k, False: 379k]
  ------------------
 4240|   100k|                return options | float_reader_base::allow_scientific |
 4241|   100k|                       float_reader_base::allow_fixed |
 4242|   100k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 479k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   479k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   479k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   479k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   479k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   629k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.25M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  88.1k|    {
 3691|  88.1k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  88.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  88.1k|        const std::ptrdiff_t sign_len =
 3694|  88.1k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 61, False: 88.0k]
  ------------------
 3695|       |
 3696|  88.1k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  88.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  88.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  88.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.2k, False: 42.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.2k|    }                                                  \
  |  |  |  | 3667|  88.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  42.8k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  88.1k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   264k|    {
 4057|   264k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 264k, False: 0]
  ------------------
 4058|   264k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 264k, False: 0]
  ------------------
 4059|   264k|            return;
 4060|   264k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   145k|    {
 1587|   145k|        return m_storage.has_value();
 1588|   145k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  84.6k|    {
 1592|  84.6k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  84.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  84.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  84.6k|        return *m_storage;
 1594|  84.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  79.7k|    {
 4170|  79.7k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  79.7k|#if !SCN_DISABLE_LOCALE
 4173|  79.7k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 16.6k, False: 63.1k]
  ------------------
 4174|  16.6k|            return read_impl<Range>(
 4175|  16.6k|                range, rd,
 4176|  16.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  16.6k|                },
 4179|  16.6k|                value, loc);
 4180|  16.6k|        }
 4181|  63.1k|#endif
 4182|       |
 4183|  63.1k|        return read_impl<Range>(
 4184|  63.1k|            range, rd,
 4185|  63.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.1k|                return r.read_source(SCN_FWD(args)...);
 4187|  63.1k|            },
 4188|  63.1k|            value);
 4189|  79.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   104k|    {
 4206|   104k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   104k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.0k, False: 21.7k]
  |  |  ------------------
  ------------------
 4208|  83.0k|            return unexpected(r.error());
 4209|  83.0k|        }
 4210|       |
 4211|  21.7k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  21.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  21.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  21.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 351, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    351|    }                                                  \
  |  |  |  | 3667|  21.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  21.3k|        return ranges::next(range.begin(), n);
 4213|  21.7k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   314k|    {
  763|   314k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   314k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  16.6k|    {
  754|  16.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  16.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.6k|              cvref<T> obj = *get<T>(fn);
  745|  16.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  16.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.6k|              }
  748|  16.6k|              else {
  749|  16.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.6k|              }
  751|  16.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  16.6k|    {
  684|  16.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  16.6k|            return static_cast<T*>(s.m_cp);
  686|  16.6k|        }
  687|  16.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  16.6k|            return static_cast<T*>(s.m_p);
  689|  16.6k|        }
  690|  16.6k|        else {
  691|  16.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  16.6k|        }
  693|  16.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  16.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  16.6k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  50.0k|    {
 3679|  50.0k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  50.0k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  50.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 50.0k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  50.0k|        return read_source_impl(range);
 3685|  50.0k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   314k|    {
 3705|   314k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   314k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   314k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   314k|        auto it = sign_result.first;
 3708|   314k|        m_sign = sign_result.second;
 3709|       |
 3710|   314k|        auto digits_begin = it;
 3711|   314k|        auto r = ranges::subrange{it, range.end()};
 3712|   314k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   314k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   314k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   314k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   314k|                SCN_TRY_ASSIGN(
 3717|   314k|                    it,
 3718|   314k|                    do_read_source_impl(
 3719|   314k|                        r,
 3720|   314k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   314k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   314k|            }
 3723|   314k|            else {
 3724|   314k|                auto cb = [&](const auto& rr)
 3725|   314k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   314k|                    auto res = read_all(rr);
 3727|   314k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   314k|                        return unexpected_scan_error(
 3729|   314k|                            scan_error::invalid_scanned_value,
 3730|   314k|                            "Invalid float value");
 3731|   314k|                    }
 3732|   314k|                    return res;
 3733|   314k|                };
 3734|   314k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   314k|            }
 3736|   314k|        }
 3737|   314k|        else {
 3738|   314k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 249k, False: 65.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   249k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   249k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   249k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   249k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   249k|    }                                                  \
  |  | 3667|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  65.2k|                it,
 3740|  65.2k|                do_read_source_impl(
 3741|  65.2k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  65.2k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  65.2k|        }
 3744|       |
 3745|  65.2k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  65.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  65.2k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 65.2k, False: 0]
  |  Branch (3747:48): [True: 65.2k, False: 0]
  ------------------
 3748|  65.2k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 65.2k, False: 0]
  ------------------
 3749|  65.2k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 65.2k, False: 0]
  ------------------
 3750|  65.2k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  65.2k|        }
 3752|       |
 3753|  65.2k|        handle_separators();
 3754|       |
 3755|  65.2k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 65.2k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  65.2k|        return it;
 3768|  65.2k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   314k|    {
 4000|   314k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   314k|        const bool allowed_nonhex =
 4002|   314k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   314k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   314k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 314k, False: 0]
  |  Branch (4005:45): [True: 0, False: 314k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   314k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 314k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   314k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 314k, False: 0]
  |  Branch (4014:45): [True: 0, False: 314k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   314k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 314k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   314k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 175k, False: 139k]
  |  Branch (4021:28): [True: 50.2k, False: 125k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  50.2k|            auto it = range.begin();
 4025|       |
 4026|  50.2k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 66, False: 50.2k]
  ------------------
 4027|     66|                m_kind = float_kind::hex_with_prefix;
 4028|     66|                it = *r;
 4029|     66|            }
 4030|  50.2k|            else {
 4031|  50.2k|                m_kind = float_kind::hex_without_prefix;
 4032|  50.2k|            }
 4033|       |
 4034|  50.2k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  50.2k|        }
 4036|   264k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 139k, False: 125k]
  |  Branch (4036:29): [True: 139k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   139k|            m_kind = float_kind::generic;
 4040|   139k|            return read_regular_float(range);
 4041|   139k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   125k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 165, False: 125k]
  |  |  ------------------
  ------------------
 4047|    165|            m_kind = float_kind::hex_with_prefix;
 4048|    165|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    165|        }
 4050|       |
 4051|   125k|        m_kind = float_kind::generic;
 4052|   125k|        return read_regular(range);
 4053|   125k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   314k|    {
 3811|   314k|        auto it = range.begin();
 3812|   314k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 314k, False: 0]
  ------------------
 3813|   314k|            return unexpected(r.error());
 3814|   314k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   314k|    {
 3834|   314k|        auto it = range.begin();
 3835|   314k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 314k, False: 0]
  ------------------
 3836|   314k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   314k|                scan_error::invalid_scanned_value,
 3838|   314k|                "Invalid floating-point NaN value"));
 3839|   314k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   175k|    {
 3804|   175k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   175k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  50.4k|    {
 3904|  50.4k|        auto it = range.begin();
 3905|       |
 3906|  50.4k|        std::ptrdiff_t digits_count = 0;
 3907|  50.4k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  50.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.3k, False: 12.1k]
  |  |  ------------------
  ------------------
 3909|  38.3k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  38.3k|                scan_error::invalid_scanned_value,
 3911|  38.3k|                "Invalid hexadecimal floating-point value"));
 3912|  38.3k|        }
 3913|  12.1k|        else {
 3914|  12.1k|            digits_count += ranges::distance(it, *r);
 3915|  12.1k|            it = *r;
 3916|  12.1k|        }
 3917|       |
 3918|  12.1k|        m_integral_part_length = digits_count;
 3919|  12.1k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 18, False: 12.1k]
  ------------------
 3920|  12.1k|                                             m_locale_options.decimal_point)) {
 3921|     18|            it = *r;
 3922|     18|        }
 3923|       |
 3924|  12.1k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 12.1k]
  ------------------
 3925|  12.1k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|  12.1k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  12.1k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  12.1k|        return it;
 3938|  12.1k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  62.5k|    {
 3789|  62.5k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  62.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 62.5k]
  |  |  |  Branch (859:45): [True: 0, False: 62.5k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  62.5k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  62.5k|        return read_while1_code_unit(
 3798|  62.5k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  62.5k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  62.5k|    {
  754|  62.5k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  76.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.6k|              cvref<T> obj = *get<T>(fn);
  745|  76.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  76.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.6k|              }
  748|  76.6k|              else {
  749|  76.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.6k|              }
  751|  76.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  76.6k|    {
  684|  76.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  76.6k|            return static_cast<T*>(s.m_cp);
  686|  76.6k|        }
  687|  76.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  76.6k|            return static_cast<T*>(s.m_p);
  689|  76.6k|        }
  690|  76.6k|        else {
  691|  76.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  76.6k|        }
  693|  76.6k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|  76.6k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  62.5k|        {
  662|  62.5k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  55.1k|    {
 3876|  55.1k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.93k, False: 52.1k]
  ------------------
 3877|  2.93k|            auto beg_exp_it = range.begin();
 3878|  2.93k|            auto it = *r;
 3879|       |
 3880|  2.93k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.90k, False: 27]
  ------------------
 3881|  2.93k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.90k|                it = r_sign->first;
 3883|  2.90k|            }
 3884|       |
 3885|  2.93k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.93k|                    ranges::subrange{it, range.end()},
 3887|  2.93k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.93k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.18k, False: 1.75k]
  |  |  ------------------
  ------------------
 3889|  1.18k|                it = beg_exp_it;
 3890|  1.18k|            }
 3891|  1.75k|            else {
 3892|  1.75k|                it = *r_exp;
 3893|  1.75k|            }
 3894|       |
 3895|  2.93k|            return it;
 3896|  2.93k|        }
 3897|  52.1k|        return range.begin();
 3898|  55.1k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  2.93k|    {
  754|  2.93k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  6.42k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.42k|              cvref<T> obj = *get<T>(fn);
  745|  6.42k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.42k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.42k|              }
  748|  6.42k|              else {
  749|  6.42k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.42k|              }
  751|  6.42k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  6.42k|    {
  684|  6.42k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.42k|            return static_cast<T*>(s.m_cp);
  686|  6.42k|        }
  687|  6.42k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.42k|            return static_cast<T*>(s.m_p);
  689|  6.42k|        }
  690|  6.42k|        else {
  691|  6.42k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.42k|        }
  693|  6.42k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  6.42k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  2.93k|        {
  662|  2.93k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   264k|    {
 3944|   264k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   264k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 214k, False: 50.2k]
  |  Branch (3945:50): [True: 38.8k, False: 175k]
  ------------------
 3946|       |
 3947|   264k|        auto it = ranges::begin(range);
 3948|   264k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   264k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   264k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 209k, False: 54.7k]
  |  |  ------------------
  ------------------
 3952|   209k|            return r.transform_error(
 3953|   209k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   209k|                                              "Invalid floating-point value"));
 3955|   209k|        }
 3956|  54.7k|        else {
 3957|  54.7k|            digits_count += ranges::distance(it, *r);
 3958|  54.7k|            it = *r;
 3959|  54.7k|        }
 3960|       |
 3961|  54.7k|        m_integral_part_length = digits_count;
 3962|  54.7k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 66, False: 54.6k]
  ------------------
 3963|  54.7k|                                             m_locale_options.decimal_point)) {
 3964|     66|            it = *r;
 3965|     66|        }
 3966|       |
 3967|  54.7k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 54.7k]
  ------------------
 3968|  54.7k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  54.7k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.7k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  54.7k|        auto beg_exp_it = it;
 3979|  54.7k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 42.9k, False: 11.7k]
  ------------------
 3980|  42.9k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  42.9k|        }
 3982|  54.7k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 1.85k, False: 52.8k]
  |  Branch (3982:29): [True: 1.56k, False: 288]
  ------------------
 3983|  1.56k|            return unexpected_scan_error(
 3984|  1.56k|                scan_error::invalid_scanned_value,
 3985|  1.56k|                "No exponent given to scientific float");
 3986|  1.56k|        }
 3987|       |
 3988|  53.1k|        m_kind =
 3989|  53.1k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 51.4k, False: 1.69k]
  ------------------
 3990|       |
 3991|  53.1k|        return it;
 3992|  54.7k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   318k|    {
 3774|   318k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 318k]
  |  |  |  Branch (859:45): [True: 0, False: 318k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   318k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   318k|        return read_while1_code_unit(
 3783|   318k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   318k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   318k|    {
  754|   318k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   376k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   376k|              cvref<T> obj = *get<T>(fn);
  745|   376k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   376k|                  obj(static_cast<decltype(args)>(args)...);
  747|   376k|              }
  748|   376k|              else {
  749|   376k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   376k|              }
  751|   376k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   376k|    {
  684|   376k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   376k|            return static_cast<T*>(s.m_cp);
  686|   376k|        }
  687|   376k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   376k|            return static_cast<T*>(s.m_p);
  689|   376k|        }
  690|   376k|        else {
  691|   376k|            return reinterpret_cast<T*>(s.m_fp);
  692|   376k|        }
  693|   376k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   376k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   318k|        {
  662|   318k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  65.2k|    {
 1577|  65.2k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  65.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  65.2k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  16.6k|        {
  662|  16.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  63.1k|    {
  754|  63.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  63.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.1k|              cvref<T> obj = *get<T>(fn);
  745|  63.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  63.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  63.1k|              }
  748|  63.1k|              else {
  749|  63.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.1k|              }
  751|  63.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  63.1k|    {
  684|  63.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  63.1k|            return static_cast<T*>(s.m_cp);
  686|  63.1k|        }
  687|  63.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  63.1k|            return static_cast<T*>(s.m_p);
  689|  63.1k|        }
  690|  63.1k|        else {
  691|  63.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  63.1k|        }
  693|  63.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  63.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  63.1k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   264k|    {
 3665|   264k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 264k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   264k|        return read_source_impl(range);
 3671|   264k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  63.1k|        {
  662|  63.1k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  79.8k|    {
 4170|  79.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  79.8k|#if !SCN_DISABLE_LOCALE
 4173|  79.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 16.6k, False: 63.1k]
  ------------------
 4174|  16.6k|            return read_impl<Range>(
 4175|  16.6k|                range, rd,
 4176|  16.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  16.6k|                },
 4179|  16.6k|                value, loc);
 4180|  16.6k|        }
 4181|  63.1k|#endif
 4182|       |
 4183|  63.1k|        return read_impl<Range>(
 4184|  63.1k|            range, rd,
 4185|  63.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.1k|                return r.read_source(SCN_FWD(args)...);
 4187|  63.1k|            },
 4188|  63.1k|            value);
 4189|  79.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   104k|    {
 4206|   104k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   104k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 66.3k]
  |  |  ------------------
  ------------------
 4208|  38.4k|            return unexpected(r.error());
 4209|  38.4k|        }
 4210|       |
 4211|  66.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  66.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  66.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  66.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44.9k, False: 21.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  44.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  44.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  44.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  44.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  44.9k|    }                                                  \
  |  |  |  | 3667|  66.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  21.4k|        return ranges::next(range.begin(), n);
 4213|  66.3k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   314k|    {
  763|   314k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   314k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  16.6k|    {
  754|  16.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  16.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.6k|              cvref<T> obj = *get<T>(fn);
  745|  16.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  16.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.6k|              }
  748|  16.6k|              else {
  749|  16.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.6k|              }
  751|  16.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  16.6k|    {
  684|  16.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  16.6k|            return static_cast<T*>(s.m_cp);
  686|  16.6k|        }
  687|  16.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  16.6k|            return static_cast<T*>(s.m_p);
  689|  16.6k|        }
  690|  16.6k|        else {
  691|  16.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  16.6k|        }
  693|  16.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  16.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  16.6k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  50.1k|    {
 3679|  50.1k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  50.1k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 50.1k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  50.1k|        return read_source_impl(range);
 3685|  50.1k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   314k|    {
 3705|   314k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   314k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   314k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   314k|        auto it = sign_result.first;
 3708|   314k|        m_sign = sign_result.second;
 3709|       |
 3710|   314k|        auto digits_begin = it;
 3711|   314k|        auto r = ranges::subrange{it, range.end()};
 3712|   314k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   314k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   314k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  |  Branch (859:45): [True: 0, False: 314k]
  |  |  |  Branch (859:45): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 3715|   314k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   314k|            else {
 3724|   314k|                auto cb = [&](const auto& rr)
 3725|   314k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   314k|                    auto res = read_all(rr);
 3727|   314k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   314k|                        return unexpected_scan_error(
 3729|   314k|                            scan_error::invalid_scanned_value,
 3730|   314k|                            "Invalid float value");
 3731|   314k|                    }
 3732|   314k|                    return res;
 3733|   314k|                };
 3734|   314k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 115k, False: 199k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   115k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   115k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   115k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   115k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   115k|    }                                                  \
  |  | 3667|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   199k|            }
 3736|   314k|        }
 3737|   199k|        else {
 3738|   199k|            SCN_TRY_ASSIGN(
 3739|   199k|                it,
 3740|   199k|                do_read_source_impl(
 3741|   199k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   199k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   199k|        }
 3744|       |
 3745|   199k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   199k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 199k, False: 0]
  |  Branch (3747:48): [True: 199k, False: 0]
  ------------------
 3748|   199k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 199k, False: 0]
  ------------------
 3749|   199k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 199k, False: 0]
  ------------------
 3750|   199k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   199k|        }
 3752|       |
 3753|   199k|        handle_separators();
 3754|       |
 3755|   199k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 199k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   199k|        return it;
 3768|   199k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   314k|    {
 3811|   314k|        auto it = range.begin();
 3812|   314k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 314k, False: 0]
  ------------------
 3813|   314k|            return unexpected(r.error());
 3814|   314k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   314k|    {
 3834|   314k|        auto it = range.begin();
 3835|   314k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 314k, False: 0]
  ------------------
 3836|   314k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   314k|                scan_error::invalid_scanned_value,
 3838|   314k|                "Invalid floating-point NaN value"));
 3839|   314k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   175k|    {
 3804|   175k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   175k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   165k|{
 1996|   165k|    auto it = read_while_code_unit(range, pred);
 1997|   165k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 139k, False: 26.0k]
  ------------------
 1998|   139k|        return unexpected(parse_error::error);
 1999|   139k|    }
 2000|  26.0k|    return it;
 2001|   165k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  13.6k|    {
 3876|  13.6k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 1.19k, False: 12.4k]
  ------------------
 3877|  1.19k|            auto beg_exp_it = range.begin();
 3878|  1.19k|            auto it = *r;
 3879|       |
 3880|  1.19k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 1.18k, False: 12]
  ------------------
 3881|  1.19k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  1.18k|                it = r_sign->first;
 3883|  1.18k|            }
 3884|       |
 3885|  1.19k|            if (auto r_exp = read_while1_code_unit(
 3886|  1.19k|                    ranges::subrange{it, range.end()},
 3887|  1.19k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  1.19k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 506, False: 690]
  |  |  ------------------
  ------------------
 3889|    506|                it = beg_exp_it;
 3890|    506|            }
 3891|    690|            else {
 3892|    690|                it = *r_exp;
 3893|    690|            }
 3894|       |
 3895|  1.19k|            return it;
 3896|  1.19k|        }
 3897|  12.4k|        return range.begin();
 3898|  13.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  1.19k|    {
  754|  1.19k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  2.53k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.53k|              cvref<T> obj = *get<T>(fn);
  745|  2.53k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.53k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.53k|              }
  748|  2.53k|              else {
  749|  2.53k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.53k|              }
  751|  2.53k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  2.53k|    {
  684|  2.53k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.53k|            return static_cast<T*>(s.m_cp);
  686|  2.53k|        }
  687|  2.53k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.53k|            return static_cast<T*>(s.m_p);
  689|  2.53k|        }
  690|  2.53k|        else {
  691|  2.53k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.53k|        }
  693|  2.53k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  2.53k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  1.19k|        {
  662|  1.19k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   139k|    {
 3944|   139k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   139k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 89.0k, False: 50.2k]
  |  Branch (3945:50): [True: 38.8k, False: 50.1k]
  ------------------
 3946|       |
 3947|   139k|        auto it = ranges::begin(range);
 3948|   139k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   139k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   139k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 113k, False: 25.3k]
  |  |  ------------------
  ------------------
 3952|   113k|            return r.transform_error(
 3953|   113k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   113k|                                              "Invalid floating-point value"));
 3955|   113k|        }
 3956|  25.3k|        else {
 3957|  25.3k|            digits_count += ranges::distance(it, *r);
 3958|  25.3k|            it = *r;
 3959|  25.3k|        }
 3960|       |
 3961|  25.3k|        m_integral_part_length = digits_count;
 3962|  25.3k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 36, False: 25.3k]
  ------------------
 3963|  25.3k|                                             m_locale_options.decimal_point)) {
 3964|     36|            it = *r;
 3965|     36|        }
 3966|       |
 3967|  25.3k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 25.3k]
  ------------------
 3968|  25.3k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  25.3k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  25.3k|        auto beg_exp_it = it;
 3979|  25.3k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 13.6k, False: 11.7k]
  ------------------
 3980|  13.6k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  13.6k|        }
 3982|  25.3k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 1.85k, False: 23.5k]
  |  Branch (3982:29): [True: 1.56k, False: 288]
  ------------------
 3983|  1.56k|            return unexpected_scan_error(
 3984|  1.56k|                scan_error::invalid_scanned_value,
 3985|  1.56k|                "No exponent given to scientific float");
 3986|  1.56k|        }
 3987|       |
 3988|  23.8k|        m_kind =
 3989|  23.8k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 23.1k, False: 690]
  ------------------
 3990|       |
 3991|  23.8k|        return it;
 3992|  25.3k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   164k|    {
 3774|   164k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  |  Branch (859:45): [True: 0, False: 164k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   164k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   164k|        return read_while1_code_unit(
 3783|   164k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   164k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   164k|    {
  754|   164k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   191k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   191k|              cvref<T> obj = *get<T>(fn);
  745|   191k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   191k|                  obj(static_cast<decltype(args)>(args)...);
  747|   191k|              }
  748|   191k|              else {
  749|   191k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   191k|              }
  751|   191k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   191k|    {
  684|   191k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   191k|            return static_cast<T*>(s.m_cp);
  686|   191k|        }
  687|   191k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   191k|            return static_cast<T*>(s.m_p);
  689|   191k|        }
  690|   191k|        else {
  691|   191k|            return reinterpret_cast<T*>(s.m_fp);
  692|   191k|        }
  693|   191k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   191k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   164k|        {
  662|   164k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   314k|    {
 4000|   314k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   314k|        const bool allowed_nonhex =
 4002|   314k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   314k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   314k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 314k, False: 0]
  |  Branch (4005:45): [True: 0, False: 314k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   314k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 314k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   314k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 314k, False: 0]
  |  Branch (4014:45): [True: 0, False: 314k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   314k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 314k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   314k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 175k, False: 139k]
  |  Branch (4021:28): [True: 50.3k, False: 125k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  50.3k|            auto it = range.begin();
 4025|       |
 4026|  50.3k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 66, False: 50.2k]
  ------------------
 4027|     66|                m_kind = float_kind::hex_with_prefix;
 4028|     66|                it = *r;
 4029|     66|            }
 4030|  50.2k|            else {
 4031|  50.2k|                m_kind = float_kind::hex_without_prefix;
 4032|  50.2k|            }
 4033|       |
 4034|  50.3k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  50.3k|        }
 4036|   264k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 139k, False: 125k]
  |  Branch (4036:29): [True: 139k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   139k|            m_kind = float_kind::generic;
 4040|   139k|            return read_regular_float(range);
 4041|   139k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   125k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 165, False: 125k]
  |  |  ------------------
  ------------------
 4047|    165|            m_kind = float_kind::hex_with_prefix;
 4048|    165|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    165|        }
 4050|       |
 4051|   125k|        m_kind = float_kind::generic;
 4052|   125k|        return read_regular(range);
 4053|   125k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   175k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   175k|                    auto res = read_all(rr);
 3727|   175k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63, False: 175k]
  |  |  ------------------
  ------------------
 3728|     63|                        return unexpected_scan_error(
 3729|     63|                            scan_error::invalid_scanned_value,
 3730|     63|                            "Invalid float value");
 3731|     63|                    }
 3732|   175k|                    return res;
 3733|   175k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   175k|{
 1839|   175k|    return ranges::next(range.begin(), range.end());
 1840|   175k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   175k|    {
  313|   175k|        ranges::advance(x, bound);
  314|   175k|        return x;
  315|   175k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   175k|    {
  275|   175k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   175k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   199k|    {
 1577|   199k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   199k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   199k|    {
 1621|   199k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   199k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   199k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   199k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   199k|            m_storage.reset();
 1627|   199k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   199k|        }
 1629|   199k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   199k|                                          std::basic_string<CharT>>) {
 1631|   199k|            m_storage.emplace(SCN_FWD(range));
 1632|   199k|            m_view = string_view_type{*m_storage};
 1633|   199k|        }
 1634|   199k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   199k|                                          typename detail::basic_scan_buffer<
 1636|   199k|                                              value_t>::forward_iterator> &&
 1637|   199k|                           ranges::common_range<Range>) {
 1638|   199k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   199k|            auto end_seg = range.end().contiguous_segment();
 1640|   199k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   199k|                             detail::to_address(end_seg.end()))) {
 1642|   199k|                auto& str = m_storage.emplace();
 1643|   199k|                str.reserve(range.end().position() - range.begin().position());
 1644|   199k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   199k|                m_view = string_view_type{str};
 1646|   199k|                return;
 1647|   199k|            }
 1648|       |
 1649|   199k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   199k|                                                            end_seg.data());
 1651|   199k|            m_storage.reset();
 1652|   199k|        }
 1653|   199k|        else {
 1654|   199k|            auto& str = m_storage.emplace();
 1655|   199k|            if constexpr (ranges::sized_range<Range>) {
 1656|   199k|                str.reserve(range.size());
 1657|   199k|            }
 1658|   199k|            if constexpr (ranges::common_range<Range>) {
 1659|   199k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   199k|                          std::back_inserter(str));
 1661|   199k|            }
 1662|   199k|            else {
 1663|   199k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   199k|                     ++it) {
 1665|   199k|                    str.push_back(*it);
 1666|   199k|                }
 1667|   199k|            }
 1668|   199k|            m_view = string_view_type{str};
 1669|   199k|        }
 1670|   199k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  16.6k|        {
  662|  16.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  63.1k|    {
  754|  63.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  63.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.1k|              cvref<T> obj = *get<T>(fn);
  745|  63.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  63.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  63.1k|              }
  748|  63.1k|              else {
  749|  63.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.1k|              }
  751|  63.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  63.1k|    {
  684|  63.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  63.1k|            return static_cast<T*>(s.m_cp);
  686|  63.1k|        }
  687|  63.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  63.1k|            return static_cast<T*>(s.m_p);
  689|  63.1k|        }
  690|  63.1k|        else {
  691|  63.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  63.1k|        }
  693|  63.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  63.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  63.1k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   264k|    {
 3665|   264k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 264k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   264k|        return read_source_impl(range);
 3671|   264k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  63.1k|        {
  662|  63.1k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  80.4k|    {
 6178|  80.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  80.4k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  80.4k|            auto rd = make_reader<T, char_type>();
 6183|  80.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  80.4k|                return unexpected(e);
 6185|  80.4k|            }
 6186|       |
 6187|  80.4k|            return impl(rd, range, value);
 6188|  80.4k|        }
 6189|  80.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  80.4k|            auto rd = make_reader<T, char_type>();
 6191|  80.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.4k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  80.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 80.4k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  80.4k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  80.4k|                return impl(rd, range, value);
 6198|  80.4k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  80.4k|        else {
 6206|  80.4k|            SCN_EXPECT(false);
 6207|  80.4k|            SCN_UNREACHABLE;
 6208|  80.4k|        }
 6209|  80.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  80.4k|    {
 6120|  80.4k|        const bool need_skipped_width =
 6121|  80.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 80.4k]
  |  Branch (6121:33): [True: 0, False: 80.4k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  80.4k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  80.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  80.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  80.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 556, False: 79.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    556|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    556|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    556|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    556|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    556|    }                                                  \
  |  |  |  | 3667|  80.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  79.8k|        auto [it, prefix_width] = prefix_result;
 6126|  79.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  79.8k|        std::ptrdiff_t value_width = 0;
 6130|  79.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 79.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  79.8k|        else {
 6146|  79.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  79.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  79.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  79.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.1k, False: 15.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.1k|    }                                                  \
  |  | 3667|  79.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  15.7k|                                             specs, value, loc));
 6148|       |
 6149|  15.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 15.7k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  15.7k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  15.7k|        std::ptrdiff_t postfix_width = 0;
 6158|  15.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 15.6k, False: 124]
  ------------------
 6159|  15.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  15.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  15.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  15.6k|                                 value_width));
 6163|  15.6k|            std::tie(it, postfix_width) = postfix_result;
 6164|  15.6k|        }
 6165|       |
 6166|  15.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  15.7k|                                                 value_width, postfix_width);
 6168|  15.7k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 15.7k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  15.7k|        return it;
 6173|  15.7k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  88.1k|    {
 3691|  88.1k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  88.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  88.1k|        const std::ptrdiff_t sign_len =
 3694|  88.1k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 61, False: 88.1k]
  ------------------
 3695|       |
 3696|  88.1k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  88.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  88.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  88.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.0k, False: 43.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.0k|    }                                                  \
  |  |  |  | 3667|  88.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  43.1k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  88.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  79.8k|    {
 4170|  79.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  79.8k|#if !SCN_DISABLE_LOCALE
 4173|  79.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 16.6k, False: 63.1k]
  ------------------
 4174|  16.6k|            return read_impl<Range>(
 4175|  16.6k|                range, rd,
 4176|  16.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  16.6k|                },
 4179|  16.6k|                value, loc);
 4180|  16.6k|        }
 4181|  63.1k|#endif
 4182|       |
 4183|  63.1k|        return read_impl<Range>(
 4184|  63.1k|            range, rd,
 4185|  63.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.1k|                return r.read_source(SCN_FWD(args)...);
 4187|  63.1k|            },
 4188|  63.1k|            value);
 4189|  79.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   104k|    {
 4206|   104k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   104k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.1k, False: 21.7k]
  |  |  ------------------
  ------------------
 4208|  83.1k|            return unexpected(r.error());
 4209|  83.1k|        }
 4210|       |
 4211|  21.7k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  21.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  21.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  21.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 210, False: 21.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    210|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    210|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    210|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    210|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    210|    }                                                  \
  |  |  |  | 3667|  21.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  21.5k|        return ranges::next(range.begin(), n);
 4213|  21.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  16.6k|    {
  754|  16.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  16.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.6k|              cvref<T> obj = *get<T>(fn);
  745|  16.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  16.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.6k|              }
  748|  16.6k|              else {
  749|  16.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.6k|              }
  751|  16.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  16.6k|    {
  684|  16.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  16.6k|            return static_cast<T*>(s.m_cp);
  686|  16.6k|        }
  687|  16.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  16.6k|            return static_cast<T*>(s.m_p);
  689|  16.6k|        }
  690|  16.6k|        else {
  691|  16.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  16.6k|        }
  693|  16.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  16.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  16.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  16.6k|        {
  662|  16.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  63.1k|    {
  754|  63.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  63.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.1k|              cvref<T> obj = *get<T>(fn);
  745|  63.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  63.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  63.1k|              }
  748|  63.1k|              else {
  749|  63.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.1k|              }
  751|  63.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  63.1k|    {
  684|  63.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  63.1k|            return static_cast<T*>(s.m_cp);
  686|  63.1k|        }
  687|  63.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  63.1k|            return static_cast<T*>(s.m_p);
  689|  63.1k|        }
  690|  63.1k|        else {
  691|  63.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  63.1k|        }
  693|  63.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  63.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  63.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  63.1k|        {
  662|  63.1k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  79.8k|    {
 4170|  79.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  79.8k|#if !SCN_DISABLE_LOCALE
 4173|  79.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 16.7k, False: 63.1k]
  ------------------
 4174|  16.7k|            return read_impl<Range>(
 4175|  16.7k|                range, rd,
 4176|  16.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  16.7k|                },
 4179|  16.7k|                value, loc);
 4180|  16.7k|        }
 4181|  63.1k|#endif
 4182|       |
 4183|  63.1k|        return read_impl<Range>(
 4184|  63.1k|            range, rd,
 4185|  63.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.1k|                return r.read_source(SCN_FWD(args)...);
 4187|  63.1k|            },
 4188|  63.1k|            value);
 4189|  79.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   104k|    {
 4206|   104k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   104k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 66.4k]
  |  |  ------------------
  ------------------
 4208|  38.4k|            return unexpected(r.error());
 4209|  38.4k|        }
 4210|       |
 4211|  66.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  66.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  66.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  66.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44.8k, False: 21.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  44.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  44.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  44.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  44.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  44.8k|    }                                                  \
  |  |  |  | 3667|  66.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  21.5k|        return ranges::next(range.begin(), n);
 4213|  66.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  16.7k|    {
  754|  16.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  16.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.7k|              cvref<T> obj = *get<T>(fn);
  745|  16.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  16.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.7k|              }
  748|  16.7k|              else {
  749|  16.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.7k|              }
  751|  16.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  16.7k|    {
  684|  16.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  16.7k|            return static_cast<T*>(s.m_cp);
  686|  16.7k|        }
  687|  16.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  16.7k|            return static_cast<T*>(s.m_p);
  689|  16.7k|        }
  690|  16.7k|        else {
  691|  16.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  16.7k|        }
  693|  16.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  16.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  16.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  16.7k|        {
  662|  16.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  63.1k|    {
  754|  63.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  63.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.1k|              cvref<T> obj = *get<T>(fn);
  745|  63.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  63.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  63.1k|              }
  748|  63.1k|              else {
  749|  63.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.1k|              }
  751|  63.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  63.1k|    {
  684|  63.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  63.1k|            return static_cast<T*>(s.m_cp);
  686|  63.1k|        }
  687|  63.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  63.1k|            return static_cast<T*>(s.m_p);
  689|  63.1k|        }
  690|  63.1k|        else {
  691|  63.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  63.1k|        }
  693|  63.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  63.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  63.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  63.1k|        {
  662|  63.1k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  80.5k|    {
 6178|  80.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  80.5k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  80.5k|            auto rd = make_reader<T, char_type>();
 6183|  80.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  80.5k|                return unexpected(e);
 6185|  80.5k|            }
 6186|       |
 6187|  80.5k|            return impl(rd, range, value);
 6188|  80.5k|        }
 6189|  80.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  80.5k|            auto rd = make_reader<T, char_type>();
 6191|  80.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  80.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.5k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  80.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 80.5k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  80.5k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  80.5k|                return impl(rd, range, value);
 6198|  80.5k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  80.5k|        else {
 6206|  80.5k|            SCN_EXPECT(false);
 6207|  80.5k|            SCN_UNREACHABLE;
 6208|  80.5k|        }
 6209|  80.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  80.5k|    {
 6120|  80.5k|        const bool need_skipped_width =
 6121|  80.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 80.5k]
  |  Branch (6121:33): [True: 0, False: 80.5k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  80.5k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  80.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  80.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  80.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 566, False: 79.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    566|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    566|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    566|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    566|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    566|    }                                                  \
  |  |  |  | 3667|  80.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  79.9k|        auto [it, prefix_width] = prefix_result;
 6126|  79.9k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  79.9k|        std::ptrdiff_t value_width = 0;
 6130|  79.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 79.9k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  79.9k|        else {
 6146|  79.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  79.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  79.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  79.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.1k, False: 15.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.1k|    }                                                  \
  |  | 3667|  79.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  79.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  15.8k|                                             specs, value, loc));
 6148|       |
 6149|  15.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 15.8k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  15.8k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  15.8k|        std::ptrdiff_t postfix_width = 0;
 6158|  15.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 15.7k, False: 128]
  ------------------
 6159|  15.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  15.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  15.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  15.7k|                                 value_width));
 6163|  15.7k|            std::tie(it, postfix_width) = postfix_result;
 6164|  15.7k|        }
 6165|       |
 6166|  15.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  15.8k|                                                 value_width, postfix_width);
 6168|  15.8k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 15.8k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  15.8k|        return it;
 6173|  15.8k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  88.3k|    {
 3691|  88.3k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  88.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  88.3k|        const std::ptrdiff_t sign_len =
 3694|  88.3k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 61, False: 88.2k]
  ------------------
 3695|       |
 3696|  88.3k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  88.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  88.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  88.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44.8k, False: 43.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  44.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  44.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  44.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  44.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  44.8k|    }                                                  \
  |  |  |  | 3667|  88.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  43.5k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  88.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  79.9k|    {
 4170|  79.9k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  79.9k|#if !SCN_DISABLE_LOCALE
 4173|  79.9k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 16.7k, False: 63.2k]
  ------------------
 4174|  16.7k|            return read_impl<Range>(
 4175|  16.7k|                range, rd,
 4176|  16.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  16.7k|                },
 4179|  16.7k|                value, loc);
 4180|  16.7k|        }
 4181|  63.2k|#endif
 4182|       |
 4183|  63.2k|        return read_impl<Range>(
 4184|  63.2k|            range, rd,
 4185|  63.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.2k|                return r.read_source(SCN_FWD(args)...);
 4187|  63.2k|            },
 4188|  63.2k|            value);
 4189|  79.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   105k|    {
 4206|   105k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   105k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.2k, False: 21.7k]
  |  |  ------------------
  ------------------
 4208|  83.2k|            return unexpected(r.error());
 4209|  83.2k|        }
 4210|       |
 4211|  21.7k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  21.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  21.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  21.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 21.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|  21.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  21.7k|        return ranges::next(range.begin(), n);
 4213|  21.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  16.7k|    {
  754|  16.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  16.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.7k|              cvref<T> obj = *get<T>(fn);
  745|  16.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  16.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.7k|              }
  748|  16.7k|              else {
  749|  16.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.7k|              }
  751|  16.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  16.7k|    {
  684|  16.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  16.7k|            return static_cast<T*>(s.m_cp);
  686|  16.7k|        }
  687|  16.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  16.7k|            return static_cast<T*>(s.m_p);
  689|  16.7k|        }
  690|  16.7k|        else {
  691|  16.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  16.7k|        }
  693|  16.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  16.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  16.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  16.7k|        {
  662|  16.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  63.2k|    {
  754|  63.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  63.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.2k|              cvref<T> obj = *get<T>(fn);
  745|  63.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  63.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  63.2k|              }
  748|  63.2k|              else {
  749|  63.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.2k|              }
  751|  63.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  63.2k|    {
  684|  63.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  63.2k|            return static_cast<T*>(s.m_cp);
  686|  63.2k|        }
  687|  63.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  63.2k|            return static_cast<T*>(s.m_p);
  689|  63.2k|        }
  690|  63.2k|        else {
  691|  63.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  63.2k|        }
  693|  63.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  63.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  63.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  63.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  63.2k|        {
  662|  63.2k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  79.9k|    {
 4170|  79.9k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  79.9k|#if !SCN_DISABLE_LOCALE
 4173|  79.9k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 16.7k, False: 63.2k]
  ------------------
 4174|  16.7k|            return read_impl<Range>(
 4175|  16.7k|                range, rd,
 4176|  16.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  16.7k|                },
 4179|  16.7k|                value, loc);
 4180|  16.7k|        }
 4181|  63.2k|#endif
 4182|       |
 4183|  63.2k|        return read_impl<Range>(
 4184|  63.2k|            range, rd,
 4185|  63.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.2k|                return r.read_source(SCN_FWD(args)...);
 4187|  63.2k|            },
 4188|  63.2k|            value);
 4189|  79.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   105k|    {
 4206|   105k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   105k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.5k, False: 66.5k]
  |  |  ------------------
  ------------------
 4208|  38.5k|            return unexpected(r.error());
 4209|  38.5k|        }
 4210|       |
 4211|  66.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  66.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  66.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  66.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44.7k, False: 21.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  44.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  44.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  44.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  44.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  44.7k|    }                                                  \
  |  |  |  | 3667|  66.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  21.7k|        return ranges::next(range.begin(), n);
 4213|  66.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  16.7k|    {
  754|  16.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  16.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.7k|              cvref<T> obj = *get<T>(fn);
  745|  16.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  16.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.7k|              }
  748|  16.7k|              else {
  749|  16.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.7k|              }
  751|  16.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  16.7k|    {
  684|  16.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  16.7k|            return static_cast<T*>(s.m_cp);
  686|  16.7k|        }
  687|  16.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  16.7k|            return static_cast<T*>(s.m_p);
  689|  16.7k|        }
  690|  16.7k|        else {
  691|  16.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  16.7k|        }
  693|  16.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  16.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  16.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  16.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  16.7k|        {
  662|  16.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  63.2k|    {
  754|  63.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  63.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.2k|              cvref<T> obj = *get<T>(fn);
  745|  63.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  63.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  63.2k|              }
  748|  63.2k|              else {
  749|  63.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.2k|              }
  751|  63.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  63.2k|    {
  684|  63.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  63.2k|            return static_cast<T*>(s.m_cp);
  686|  63.2k|        }
  687|  63.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  63.2k|            return static_cast<T*>(s.m_p);
  689|  63.2k|        }
  690|  63.2k|        else {
  691|  63.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  63.2k|        }
  693|  63.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  63.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  63.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  63.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  63.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  63.2k|        {
  662|  63.2k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   316k|{
 2061|   316k|    auto it = range.begin();
 2062|   377k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 375k, False: 2.06k]
  ------------------
 2063|   375k|        const auto val =
 2064|   375k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   375k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   375k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 375k, False: 0]
  |  |  ------------------
  ------------------
 2066|   375k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   375k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   375k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 314k, False: 60.4k]
  ------------------
 2069|   314k|                return it;
 2070|   314k|            }
 2071|   375k|        }
 2072|  60.4k|        it = val.iterator;
 2073|  60.4k|    }
 2074|       |
 2075|  2.06k|    return it;
 2076|   316k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   375k|{
 1899|   375k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   375k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   375k|    auto it = range.begin();
 1903|   375k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   375k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   375k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 375k, False: 0]
  ------------------
 1912|   375k|        ++it;
 1913|   375k|        return {it, string_type(1, *range.begin())};
 1914|   375k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   375k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   375k|    {
 1890|   375k|        return !codepoint.empty();
 1891|   375k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   316k|{
 2082|   316k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   316k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   316k|{
 2951|   316k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 316k, False: 0]
  ------------------
 2952|   316k|        auto it = read_while_classic_space(range);
 2953|   316k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   316k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 314k]
  |  |  ------------------
  ------------------
 2955|  2.06k|            return unexpected(e);
 2956|  2.06k|        }
 2957|       |
 2958|   314k|        return it;
 2959|   316k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   316k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   316k|{
 2117|   316k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   316k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   316k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   316k|        auto buf = make_contiguous_buffer(range);
 2121|   316k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   316k|        return ranges::next(range.begin(),
 2123|   316k|                            ranges::distance(buf.view().begin(), it));
 2124|   316k|    }
 2125|   316k|    else {
 2126|   316k|        auto it = range.begin();
 2127|       |
 2128|   316k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   316k|            auto seg = get_contiguous_beginning(range);
 2130|   316k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   316k|                seg_it != seg.end()) {
 2132|   316k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   316k|            }
 2134|   316k|            ranges::advance(it, seg.size());
 2135|   316k|        }
 2136|       |
 2137|   316k|        return read_while_code_point(
 2138|   316k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   316k|    }
 2140|   316k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   316k|    {
  754|   316k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   375k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   375k|              cvref<T> obj = *get<T>(fn);
  745|   375k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   375k|                  obj(static_cast<decltype(args)>(args)...);
  747|   375k|              }
  748|   375k|              else {
  749|   375k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   375k|              }
  751|   375k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   375k|    {
  684|   375k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   375k|            return static_cast<T*>(s.m_cp);
  686|   375k|        }
  687|   375k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   375k|            return static_cast<T*>(s.m_p);
  689|   375k|        }
  690|   375k|        else {
  691|   375k|            return reinterpret_cast<T*>(s.m_fp);
  692|   375k|        }
  693|   375k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   375k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   316k|        {
  662|   316k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.24M|{
 2088|  2.24M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.24M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.24M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.24M|        auto buf = make_contiguous_buffer(range);
 2092|  2.24M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.24M|        return ranges::next(range.begin(),
 2094|  2.24M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.24M|    }
 2096|  2.24M|    else {
 2097|  2.24M|        auto it = range.begin();
 2098|       |
 2099|  2.24M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.24M|            auto seg = get_contiguous_beginning(range);
 2101|  2.24M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.24M|                seg_it != seg.end()) {
 2103|  2.24M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.24M|            }
 2105|  2.24M|            ranges::advance(it, seg.size());
 2106|  2.24M|        }
 2107|       |
 2108|  2.24M|        return read_until_code_point(
 2109|  2.24M|            ranges::subrange{it, range.end()},
 2110|  2.24M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.24M|    }
 2112|  2.24M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.24M|{
 1683|  2.24M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.24M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.24M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.24M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.24M|    }
 1688|  2.24M|    else {
 1689|  2.24M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.24M|    }
 1691|  2.24M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.24M|    {
 1490|  2.24M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.24M|    {
 1577|  2.24M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.24M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.24M|    {
 1621|  2.24M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.24M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.24M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.24M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.24M|            m_storage.reset();
 1627|  2.24M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.24M|        }
 1629|  2.24M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.24M|                                          std::basic_string<CharT>>) {
 1631|  2.24M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.24M|            m_view = string_view_type{*m_storage};
 1633|  2.24M|        }
 1634|  2.24M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.24M|                                          typename detail::basic_scan_buffer<
 1636|  2.24M|                                              value_t>::forward_iterator> &&
 1637|  2.24M|                           ranges::common_range<Range>) {
 1638|  2.24M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.24M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.24M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.24M|                             detail::to_address(end_seg.end()))) {
 1642|  2.24M|                auto& str = m_storage.emplace();
 1643|  2.24M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.24M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.24M|                m_view = string_view_type{str};
 1646|  2.24M|                return;
 1647|  2.24M|            }
 1648|       |
 1649|  2.24M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.24M|                                                            end_seg.data());
 1651|  2.24M|            m_storage.reset();
 1652|  2.24M|        }
 1653|  2.24M|        else {
 1654|  2.24M|            auto& str = m_storage.emplace();
 1655|  2.24M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.24M|                str.reserve(range.size());
 1657|  2.24M|            }
 1658|  2.24M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.24M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.24M|                          std::back_inserter(str));
 1661|  2.24M|            }
 1662|  2.24M|            else {
 1663|  2.24M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.24M|                     ++it) {
 1665|  2.24M|                    str.push_back(*it);
 1666|  2.24M|                }
 1667|  2.24M|            }
 1668|  2.24M|            m_view = string_view_type{str};
 1669|  2.24M|        }
 1670|  2.24M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|  1.52M|    {
 4100|  1.52M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 179k, False: 1.34M]
  ------------------
 4101|   179k|            return std::copysign(value, T{-1.0});
 4102|   179k|        }
 4103|  1.34M|        return std::copysign(value, T{1.0});
 4104|  1.52M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  58.7k|{
 2088|  58.7k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  58.7k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  58.7k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  58.7k|        auto buf = make_contiguous_buffer(range);
 2092|  58.7k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  58.7k|        return ranges::next(range.begin(),
 2094|  58.7k|                            ranges::distance(buf.view().begin(), it));
 2095|  58.7k|    }
 2096|  58.7k|    else {
 2097|  58.7k|        auto it = range.begin();
 2098|       |
 2099|  58.7k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  58.7k|            auto seg = get_contiguous_beginning(range);
 2101|  58.7k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  58.7k|                seg_it != seg.end()) {
 2103|  58.7k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  58.7k|            }
 2105|  58.7k|            ranges::advance(it, seg.size());
 2106|  58.7k|        }
 2107|       |
 2108|  58.7k|        return read_until_code_point(
 2109|  58.7k|            ranges::subrange{it, range.end()},
 2110|  58.7k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  58.7k|    }
 2112|  58.7k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  58.7k|    {
  754|  58.7k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   125k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   125k|              cvref<T> obj = *get<T>(fn);
  745|   125k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   125k|                  obj(static_cast<decltype(args)>(args)...);
  747|   125k|              }
  748|   125k|              else {
  749|   125k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   125k|              }
  751|   125k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   125k|    {
  684|   125k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   125k|            return static_cast<T*>(s.m_cp);
  686|   125k|        }
  687|   125k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   125k|            return static_cast<T*>(s.m_p);
  689|   125k|        }
  690|   125k|        else {
  691|   125k|            return reinterpret_cast<T*>(s.m_fp);
  692|   125k|        }
  693|   125k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   125k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  58.7k|        {
  662|  58.7k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|  58.7k|    {
 1577|  58.7k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  58.7k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|  58.7k|    {
 1621|  58.7k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  58.7k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  58.7k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  58.7k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  58.7k|            m_storage.reset();
 1627|  58.7k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  58.7k|        }
 1629|  58.7k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  58.7k|                                          std::basic_string<CharT>>) {
 1631|  58.7k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  58.7k|            m_view = string_view_type{*m_storage};
 1633|  58.7k|        }
 1634|  58.7k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  58.7k|                                          typename detail::basic_scan_buffer<
 1636|  58.7k|                                              value_t>::forward_iterator> &&
 1637|  58.7k|                           ranges::common_range<Range>) {
 1638|  58.7k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  58.7k|            auto end_seg = range.end().contiguous_segment();
 1640|  58.7k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  58.7k|                             detail::to_address(end_seg.end()))) {
 1642|  58.7k|                auto& str = m_storage.emplace();
 1643|  58.7k|                str.reserve(range.end().position() - range.begin().position());
 1644|  58.7k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  58.7k|                m_view = string_view_type{str};
 1646|  58.7k|                return;
 1647|  58.7k|            }
 1648|       |
 1649|  58.7k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  58.7k|                                                            end_seg.data());
 1651|  58.7k|            m_storage.reset();
 1652|  58.7k|        }
 1653|  58.7k|        else {
 1654|  58.7k|            auto& str = m_storage.emplace();
 1655|  58.7k|            if constexpr (ranges::sized_range<Range>) {
 1656|  58.7k|                str.reserve(range.size());
 1657|  58.7k|            }
 1658|  58.7k|            if constexpr (ranges::common_range<Range>) {
 1659|  58.7k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  58.7k|                          std::back_inserter(str));
 1661|  58.7k|            }
 1662|  58.7k|            else {
 1663|  58.7k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  58.7k|                     ++it) {
 1665|  58.7k|                    str.push_back(*it);
 1666|  58.7k|                }
 1667|  58.7k|            }
 1668|  58.7k|            m_view = string_view_type{str};
 1669|  58.7k|        }
 1670|  58.7k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|  88.1k|    {
 4100|  88.1k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 59, False: 88.0k]
  ------------------
 4101|     59|            return std::copysign(value, T{-1.0});
 4102|     59|        }
 4103|  88.0k|        return std::copysign(value, T{1.0});
 4104|  88.1k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.65M|    {
 4100|  1.65M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 192k, False: 1.45M]
  ------------------
 4101|   192k|            return std::copysign(value, T{-1.0});
 4102|   192k|        }
 4103|  1.45M|        return std::copysign(value, T{1.0});
 4104|  1.65M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|  88.1k|    {
 4100|  88.1k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 59, False: 88.1k]
  ------------------
 4101|     59|            return std::copysign(value, T{-1.0});
 4102|     59|        }
 4103|  88.1k|        return std::copysign(value, T{1.0});
 4104|  88.1k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  1.67M|    {
 4100|  1.67M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 198k, False: 1.47M]
  ------------------
 4101|   198k|            return std::copysign(value, T{-1.0});
 4102|   198k|        }
 4103|  1.47M|        return std::copysign(value, T{1.0});
 4104|  1.67M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|  88.3k|    {
 4100|  88.3k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 59, False: 88.2k]
  ------------------
 4101|     59|            return std::copysign(value, T{-1.0});
 4102|     59|        }
 4103|  88.2k|        return std::copysign(value, T{1.0});
 4104|  88.3k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   756k|{
 5795|   756k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   756k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.12k, False: 750k]
  |  |  ------------------
  ------------------
 5796|  6.12k|        return unexpected(e);
 5797|  6.12k|    }
 5798|       |
 5799|   750k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 750k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   750k|    return skip_classic_whitespace(range);
 5804|   750k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   234k|    {
 5871|   234k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   234k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   234k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   234k|            auto rd = make_reader<T, char_type>();
 5876|   234k|            return impl(rd, range, value);
 5877|   234k|        }
 5878|   234k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   234k|            auto rd = make_reader<T, char_type>();
 5880|   234k|            if (!is_segment_contiguous(range)) {
 5881|   234k|                return impl(rd, range, value);
 5882|   234k|            }
 5883|   234k|            auto crange = get_as_contiguous(range);
 5884|   234k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   234k|            return ranges::next(range.begin(),
 5886|   234k|                                ranges::distance(crange.begin(), it));
 5887|   234k|        }
 5888|   234k|        else {
 5889|   234k|            SCN_EXPECT(false);
 5890|   234k|            SCN_UNREACHABLE;
 5891|   234k|        }
 5892|   234k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   234k|    {
 5863|   234k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   234k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.16k, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.16k|    }                                                  \
  |  |  |  | 3667|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   231k|                        .transform_error(make_eof_scan_error));
 5865|   231k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   234k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   231k|    {
 4152|   231k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   231k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   231k|        float_reader<CharT> rd{};
 4155|   231k|        return read_impl<Range>(
 4156|   231k|            range, rd,
 4157|   231k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   231k|                return r.read_source(SCN_FWD(args)...);
 4159|   231k|            },
 4160|   231k|            value);
 4161|   231k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|  1.45M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.60M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   231k|    {
  754|   231k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   231k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   231k|              cvref<T> obj = *get<T>(fn);
  745|   231k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   231k|                  obj(static_cast<decltype(args)>(args)...);
  747|   231k|              }
  748|   231k|              else {
  749|   231k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   231k|              }
  751|   231k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   231k|    {
  684|   231k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   231k|            return static_cast<T*>(s.m_cp);
  686|   231k|        }
  687|   231k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   231k|            return static_cast<T*>(s.m_p);
  689|   231k|        }
  690|   231k|        else {
  691|   231k|            return reinterpret_cast<T*>(s.m_fp);
  692|   231k|        }
  693|   231k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   231k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   231k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   231k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   231k|        {
  662|   231k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   258k|    {
 5871|   258k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   258k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   258k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   258k|            auto rd = make_reader<T, char_type>();
 5876|   258k|            return impl(rd, range, value);
 5877|   258k|        }
 5878|   258k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   258k|            auto rd = make_reader<T, char_type>();
 5880|   258k|            if (!is_segment_contiguous(range)) {
 5881|   258k|                return impl(rd, range, value);
 5882|   258k|            }
 5883|   258k|            auto crange = get_as_contiguous(range);
 5884|   258k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   258k|            return ranges::next(range.begin(),
 5886|   258k|                                ranges::distance(crange.begin(), it));
 5887|   258k|        }
 5888|   258k|        else {
 5889|   258k|            SCN_EXPECT(false);
 5890|   258k|            SCN_UNREACHABLE;
 5891|   258k|        }
 5892|   258k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   258k|    {
 5863|   258k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   258k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.49k, False: 256k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.49k|    }                                                  \
  |  |  |  | 3667|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   256k|                        .transform_error(make_eof_scan_error));
 5865|   256k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   258k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   256k|    {
 4152|   256k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   256k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   256k|        float_reader<CharT> rd{};
 4155|   256k|        return read_impl<Range>(
 4156|   256k|            range, rd,
 4157|   256k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   256k|                return r.read_source(SCN_FWD(args)...);
 4159|   256k|            },
 4160|   256k|            value);
 4161|   256k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   256k|    {
  754|   256k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   256k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   256k|              cvref<T> obj = *get<T>(fn);
  745|   256k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   256k|                  obj(static_cast<decltype(args)>(args)...);
  747|   256k|              }
  748|   256k|              else {
  749|   256k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   256k|              }
  751|   256k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   256k|    {
  684|   256k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   256k|            return static_cast<T*>(s.m_cp);
  686|   256k|        }
  687|   256k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   256k|            return static_cast<T*>(s.m_p);
  689|   256k|        }
  690|   256k|        else {
  691|   256k|            return reinterpret_cast<T*>(s.m_fp);
  692|   256k|        }
  693|   256k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   256k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   256k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   256k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   256k|        {
  662|   256k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   263k|    {
 5871|   263k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   263k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   263k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   263k|            auto rd = make_reader<T, char_type>();
 5876|   263k|            return impl(rd, range, value);
 5877|   263k|        }
 5878|   263k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   263k|            auto rd = make_reader<T, char_type>();
 5880|   263k|            if (!is_segment_contiguous(range)) {
 5881|   263k|                return impl(rd, range, value);
 5882|   263k|            }
 5883|   263k|            auto crange = get_as_contiguous(range);
 5884|   263k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   263k|            return ranges::next(range.begin(),
 5886|   263k|                                ranges::distance(crange.begin(), it));
 5887|   263k|        }
 5888|   263k|        else {
 5889|   263k|            SCN_EXPECT(false);
 5890|   263k|            SCN_UNREACHABLE;
 5891|   263k|        }
 5892|   263k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   263k|    {
 5863|   263k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   263k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   263k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   263k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.65k, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.65k|    }                                                  \
  |  |  |  | 3667|   263k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   260k|                        .transform_error(make_eof_scan_error));
 5865|   260k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   263k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   260k|    {
 4152|   260k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   260k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   260k|        float_reader<CharT> rd{};
 4155|   260k|        return read_impl<Range>(
 4156|   260k|            range, rd,
 4157|   260k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   260k|                return r.read_source(SCN_FWD(args)...);
 4159|   260k|            },
 4160|   260k|            value);
 4161|   260k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   260k|    {
  754|   260k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   260k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   260k|              cvref<T> obj = *get<T>(fn);
  745|   260k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   260k|                  obj(static_cast<decltype(args)>(args)...);
  747|   260k|              }
  748|   260k|              else {
  749|   260k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   260k|              }
  751|   260k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   260k|    {
  684|   260k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   260k|            return static_cast<T*>(s.m_cp);
  686|   260k|        }
  687|   260k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   260k|            return static_cast<T*>(s.m_p);
  689|   260k|        }
  690|   260k|        else {
  691|   260k|            return reinterpret_cast<T*>(s.m_fp);
  692|   260k|        }
  693|   260k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   260k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   260k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   260k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   260k|        {
  662|   260k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   713k|{
 5795|   713k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.15k, False: 707k]
  |  |  ------------------
  ------------------
 5796|  6.15k|        return unexpected(e);
 5797|  6.15k|    }
 5798|       |
 5799|   707k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 707k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   707k|    return skip_classic_whitespace(range);
 5804|   707k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   221k|    {
 5871|   221k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   221k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   221k|            auto rd = make_reader<T, char_type>();
 5876|   221k|            return impl(rd, range, value);
 5877|   221k|        }
 5878|   221k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   221k|            auto rd = make_reader<T, char_type>();
 5880|   221k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 221k, False: 0]
  ------------------
 5881|   221k|                return impl(rd, range, value);
 5882|   221k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   221k|        else {
 5889|   221k|            SCN_EXPECT(false);
 5890|   221k|            SCN_UNREACHABLE;
 5891|   221k|        }
 5892|   221k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   221k|    {
 5863|   221k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   221k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.15k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.15k|    }                                                  \
  |  |  |  | 3667|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   218k|                        .transform_error(make_eof_scan_error));
 5865|   218k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   221k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   218k|    {
 4152|   218k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   218k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   218k|        float_reader<CharT> rd{};
 4155|   218k|        return read_impl<Range>(
 4156|   218k|            range, rd,
 4157|   218k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   218k|                return r.read_source(SCN_FWD(args)...);
 4159|   218k|            },
 4160|   218k|            value);
 4161|   218k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   218k|    {
  754|   218k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   218k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   218k|              cvref<T> obj = *get<T>(fn);
  745|   218k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   218k|                  obj(static_cast<decltype(args)>(args)...);
  747|   218k|              }
  748|   218k|              else {
  749|   218k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   218k|              }
  751|   218k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   218k|    {
  684|   218k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   218k|            return static_cast<T*>(s.m_cp);
  686|   218k|        }
  687|   218k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   218k|            return static_cast<T*>(s.m_p);
  689|   218k|        }
  690|   218k|        else {
  691|   218k|            return reinterpret_cast<T*>(s.m_fp);
  692|   218k|        }
  693|   218k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   218k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   218k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   218k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   218k|        {
  662|   218k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   244k|    {
 5871|   244k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   244k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   244k|            auto rd = make_reader<T, char_type>();
 5876|   244k|            return impl(rd, range, value);
 5877|   244k|        }
 5878|   244k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   244k|            auto rd = make_reader<T, char_type>();
 5880|   244k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 244k, False: 0]
  ------------------
 5881|   244k|                return impl(rd, range, value);
 5882|   244k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   244k|        else {
 5889|   244k|            SCN_EXPECT(false);
 5890|   244k|            SCN_UNREACHABLE;
 5891|   244k|        }
 5892|   244k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   244k|    {
 5863|   244k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   244k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.47k, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.47k|    }                                                  \
  |  |  |  | 3667|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   242k|                        .transform_error(make_eof_scan_error));
 5865|   242k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   244k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   242k|    {
 4152|   242k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   242k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   242k|        float_reader<CharT> rd{};
 4155|   242k|        return read_impl<Range>(
 4156|   242k|            range, rd,
 4157|   242k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   242k|                return r.read_source(SCN_FWD(args)...);
 4159|   242k|            },
 4160|   242k|            value);
 4161|   242k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   242k|    {
  754|   242k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   242k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   242k|              cvref<T> obj = *get<T>(fn);
  745|   242k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   242k|                  obj(static_cast<decltype(args)>(args)...);
  747|   242k|              }
  748|   242k|              else {
  749|   242k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   242k|              }
  751|   242k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   242k|    {
  684|   242k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   242k|            return static_cast<T*>(s.m_cp);
  686|   242k|        }
  687|   242k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   242k|            return static_cast<T*>(s.m_p);
  689|   242k|        }
  690|   242k|        else {
  691|   242k|            return reinterpret_cast<T*>(s.m_fp);
  692|   242k|        }
  693|   242k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   242k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   242k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   242k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   242k|        {
  662|   242k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   247k|    {
 5871|   247k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   247k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   247k|            auto rd = make_reader<T, char_type>();
 5876|   247k|            return impl(rd, range, value);
 5877|   247k|        }
 5878|   247k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   247k|            auto rd = make_reader<T, char_type>();
 5880|   247k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 247k, False: 0]
  ------------------
 5881|   247k|                return impl(rd, range, value);
 5882|   247k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   247k|        else {
 5889|   247k|            SCN_EXPECT(false);
 5890|   247k|            SCN_UNREACHABLE;
 5891|   247k|        }
 5892|   247k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   247k|    {
 5863|   247k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.63k, False: 245k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.63k|    }                                                  \
  |  |  |  | 3667|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   245k|                        .transform_error(make_eof_scan_error));
 5865|   245k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   247k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   245k|    {
 4152|   245k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   245k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   245k|        float_reader<CharT> rd{};
 4155|   245k|        return read_impl<Range>(
 4156|   245k|            range, rd,
 4157|   245k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   245k|                return r.read_source(SCN_FWD(args)...);
 4159|   245k|            },
 4160|   245k|            value);
 4161|   245k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   245k|    {
  754|   245k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   245k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   245k|              cvref<T> obj = *get<T>(fn);
  745|   245k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   245k|                  obj(static_cast<decltype(args)>(args)...);
  747|   245k|              }
  748|   245k|              else {
  749|   245k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   245k|              }
  751|   245k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   245k|    {
  684|   245k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   245k|            return static_cast<T*>(s.m_cp);
  686|   245k|        }
  687|   245k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   245k|            return static_cast<T*>(s.m_p);
  689|   245k|        }
  690|   245k|        else {
  691|   245k|            return reinterpret_cast<T*>(s.m_fp);
  692|   245k|        }
  693|   245k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   245k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   245k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   245k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   245k|        {
  662|   245k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  1.75M|    {
 2879|  1.75M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  5.16M|    {
 2883|  5.16M|        return m_current;
 2884|  5.16M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.40M|    {
 2888|  3.40M|        return m_range.end();
 2889|  3.40M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.65M|    {
 2903|  1.65M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.65M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.65M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.65M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.65M|        }
 2909|  1.65M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.65M|    static_cast<    \
  |  |  929|  1.65M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.65M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.75M|    {
 2893|  1.75M|        return ranges::subrange{begin(), end()};
 2894|  1.75M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.75M|    {
 6037|  1.75M|        const bool need_skipped_width =
 6038|  1.75M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.75M]
  |  Branch (6038:33): [True: 0, False: 1.75M]
  ------------------
 6039|  1.75M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.75M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.75M]
  ------------------
 6043|  1.75M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.75M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.75M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.75M, False: 0]
  |  Branch (6047:56): [True: 1.75M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.75M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.75M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.48M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.75M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.75M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.75M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.5k, False: 1.73M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.5k|    }                                                  \
  |  |  |  | 3667|  1.75M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.48M|                            make_eof_scan_error));
 6058|       |
 6059|  3.48M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.73M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.73M|            return result_type{it, 0};
 6067|  3.48M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.75M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.64M|    {
 6079|  1.64M|        const bool need_skipped_width =
 6080|  1.64M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.64M]
  |  Branch (6080:33): [True: 0, False: 1.64M]
  ------------------
 6081|  1.64M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.64M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.64M]
  ------------------
 6084|  1.64M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.64M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  1.64M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 1.64M, False: 0]
  ------------------
 6089|  1.64M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 1.64M]
  ------------------
 6090|  1.64M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  1.64M|        return result_type{rng.begin(), 0};
 6114|  1.64M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6177|   555k|    {
 6178|   555k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   555k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   555k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   555k|            auto rd = make_reader<T, char_type>();
 6183|   555k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 555k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   555k|            return impl(rd, range, value);
 6188|   555k|        }
 6189|   555k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   555k|            auto rd = make_reader<T, char_type>();
 6191|   555k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   555k|                return unexpected(e);
 6193|   555k|            }
 6194|       |
 6195|   555k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   555k|                specs.width != 0) {
 6197|   555k|                return impl(rd, range, value);
 6198|   555k|            }
 6199|       |
 6200|   555k|            auto crange = get_as_contiguous(range);
 6201|   555k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   555k|            return ranges::next(range.begin(),
 6203|   555k|                                ranges::distance(crange.begin(), it));
 6204|   555k|        }
 6205|   555k|        else {
 6206|   555k|            SCN_EXPECT(false);
 6207|   555k|            SCN_UNREACHABLE;
 6208|   555k|        }
 6209|   555k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   555k|    {
 6120|   555k|        const bool need_skipped_width =
 6121|   555k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 555k]
  |  Branch (6121:33): [True: 0, False: 555k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   555k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   555k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   555k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   555k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.64k, False: 550k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.64k|    }                                                  \
  |  |  |  | 3667|   555k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   550k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   550k|        auto [it, prefix_width] = prefix_result;
 6126|   550k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   550k|        std::ptrdiff_t value_width = 0;
 6130|   550k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 550k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   550k|        else {
 6146|   550k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   550k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   550k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.6k, False: 523k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  26.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  26.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  26.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  26.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  26.6k|    }                                                  \
  |  | 3667|   550k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   550k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   523k|                                             specs, value, loc));
 6148|       |
 6149|   523k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 523k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   523k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   523k|        std::ptrdiff_t postfix_width = 0;
 6158|   523k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 518k, False: 4.68k]
  ------------------
 6159|   518k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   518k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   518k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   518k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   518k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 518k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   518k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   518k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   518k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   518k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   518k|                                 value_width));
 6163|   518k|            std::tie(it, postfix_width) = postfix_result;
 6164|   518k|        }
 6165|       |
 6166|   523k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   523k|                                                 value_width, postfix_width);
 6168|   523k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 523k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   523k|        return it;
 6173|   523k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6177|   595k|    {
 6178|   595k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   595k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   595k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   595k|            auto rd = make_reader<T, char_type>();
 6183|   595k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 595k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   595k|            return impl(rd, range, value);
 6188|   595k|        }
 6189|   595k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   595k|            auto rd = make_reader<T, char_type>();
 6191|   595k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   595k|                return unexpected(e);
 6193|   595k|            }
 6194|       |
 6195|   595k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   595k|                specs.width != 0) {
 6197|   595k|                return impl(rd, range, value);
 6198|   595k|            }
 6199|       |
 6200|   595k|            auto crange = get_as_contiguous(range);
 6201|   595k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   595k|            return ranges::next(range.begin(),
 6203|   595k|                                ranges::distance(crange.begin(), it));
 6204|   595k|        }
 6205|   595k|        else {
 6206|   595k|            SCN_EXPECT(false);
 6207|   595k|            SCN_UNREACHABLE;
 6208|   595k|        }
 6209|   595k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   595k|    {
 6120|   595k|        const bool need_skipped_width =
 6121|   595k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 595k]
  |  Branch (6121:33): [True: 0, False: 595k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   595k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   595k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   595k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   595k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.30k, False: 588k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.30k|    }                                                  \
  |  |  |  | 3667|   595k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   588k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   588k|        auto [it, prefix_width] = prefix_result;
 6126|   588k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   588k|        std::ptrdiff_t value_width = 0;
 6130|   588k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 588k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   588k|        else {
 6146|   588k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   588k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   588k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   588k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.0k, False: 562k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  26.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  26.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  26.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  26.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  26.0k|    }                                                  \
  |  | 3667|   588k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   588k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   562k|                                             specs, value, loc));
 6148|       |
 6149|   562k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 562k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   562k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   562k|        std::ptrdiff_t postfix_width = 0;
 6158|   562k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 557k, False: 5.23k]
  ------------------
 6159|   557k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   557k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   557k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   557k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 557k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   557k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   557k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   557k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   557k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   557k|                                 value_width));
 6163|   557k|            std::tie(it, postfix_width) = postfix_result;
 6164|   557k|        }
 6165|       |
 6166|   562k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   562k|                                                 value_width, postfix_width);
 6168|   562k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 562k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   562k|        return it;
 6173|   562k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6177|   601k|    {
 6178|   601k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   601k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   601k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   601k|            auto rd = make_reader<T, char_type>();
 6183|   601k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 601k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   601k|            return impl(rd, range, value);
 6188|   601k|        }
 6189|   601k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   601k|            auto rd = make_reader<T, char_type>();
 6191|   601k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   601k|                return unexpected(e);
 6193|   601k|            }
 6194|       |
 6195|   601k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   601k|                specs.width != 0) {
 6197|   601k|                return impl(rd, range, value);
 6198|   601k|            }
 6199|       |
 6200|   601k|            auto crange = get_as_contiguous(range);
 6201|   601k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   601k|            return ranges::next(range.begin(),
 6203|   601k|                                ranges::distance(crange.begin(), it));
 6204|   601k|        }
 6205|   601k|        else {
 6206|   601k|            SCN_EXPECT(false);
 6207|   601k|            SCN_UNREACHABLE;
 6208|   601k|        }
 6209|   601k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   601k|    {
 6120|   601k|        const bool need_skipped_width =
 6121|   601k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 601k]
  |  Branch (6121:33): [True: 0, False: 601k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   601k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   601k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   601k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   601k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.65k, False: 595k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.65k|    }                                                  \
  |  |  |  | 3667|   601k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   595k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   595k|        auto [it, prefix_width] = prefix_result;
 6126|   595k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   595k|        std::ptrdiff_t value_width = 0;
 6130|   595k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 595k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   595k|        else {
 6146|   595k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   595k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   595k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 25.6k, False: 569k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  25.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  25.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  25.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  25.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  25.6k|    }                                                  \
  |  | 3667|   595k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   595k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   569k|                                             specs, value, loc));
 6148|       |
 6149|   569k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 569k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   569k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   569k|        std::ptrdiff_t postfix_width = 0;
 6158|   569k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 563k, False: 5.55k]
  ------------------
 6159|   563k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   563k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   563k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   563k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 563k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   563k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   563k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   563k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   563k|                                 value_width));
 6163|   563k|            std::tie(it, postfix_width) = postfix_result;
 6164|   563k|        }
 6165|       |
 6166|   569k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   569k|                                                 value_width, postfix_width);
 6168|   569k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 569k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   569k|        return it;
 6173|   569k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  75.7k|{
 5795|  75.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  75.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132, False: 75.5k]
  |  |  ------------------
  ------------------
 5796|    132|        return unexpected(e);
 5797|    132|    }
 5798|       |
 5799|  75.5k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 75.5k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  75.5k|    return skip_classic_whitespace(range);
 5804|  75.5k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  25.1k|    {
 5871|  25.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  25.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  25.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  25.1k|            auto rd = make_reader<T, char_type>();
 5876|  25.1k|            return impl(rd, range, value);
 5877|  25.1k|        }
 5878|  25.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  25.1k|            auto rd = make_reader<T, char_type>();
 5880|  25.1k|            if (!is_segment_contiguous(range)) {
 5881|  25.1k|                return impl(rd, range, value);
 5882|  25.1k|            }
 5883|  25.1k|            auto crange = get_as_contiguous(range);
 5884|  25.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  25.1k|            return ranges::next(range.begin(),
 5886|  25.1k|                                ranges::distance(crange.begin(), it));
 5887|  25.1k|        }
 5888|  25.1k|        else {
 5889|  25.1k|            SCN_EXPECT(false);
 5890|  25.1k|            SCN_UNREACHABLE;
 5891|  25.1k|        }
 5892|  25.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  25.1k|    {
 5863|  25.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  25.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  25.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  25.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 171, False: 25.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    171|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    171|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    171|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    171|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    171|    }                                                  \
  |  |  |  | 3667|  25.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  25.0k|                        .transform_error(make_eof_scan_error));
 5865|  25.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  25.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  25.0k|    {
 4152|  25.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  25.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  25.0k|        float_reader<CharT> rd{};
 4155|  25.0k|        return read_impl<Range>(
 4156|  25.0k|            range, rd,
 4157|  25.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  25.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  25.0k|            },
 4160|  25.0k|            value);
 4161|  25.0k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   150k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  25.0k|    {
  754|  25.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  25.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.0k|              cvref<T> obj = *get<T>(fn);
  745|  25.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.0k|              }
  748|  25.0k|              else {
  749|  25.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.0k|              }
  751|  25.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  25.0k|    {
  684|  25.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.0k|            return static_cast<T*>(s.m_cp);
  686|  25.0k|        }
  687|  25.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.0k|            return static_cast<T*>(s.m_p);
  689|  25.0k|        }
  690|  25.0k|        else {
  691|  25.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.0k|        }
  693|  25.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  25.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  25.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  25.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  25.0k|        {
  662|  25.0k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  25.2k|    {
 5871|  25.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  25.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  25.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  25.2k|            auto rd = make_reader<T, char_type>();
 5876|  25.2k|            return impl(rd, range, value);
 5877|  25.2k|        }
 5878|  25.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  25.2k|            auto rd = make_reader<T, char_type>();
 5880|  25.2k|            if (!is_segment_contiguous(range)) {
 5881|  25.2k|                return impl(rd, range, value);
 5882|  25.2k|            }
 5883|  25.2k|            auto crange = get_as_contiguous(range);
 5884|  25.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  25.2k|            return ranges::next(range.begin(),
 5886|  25.2k|                                ranges::distance(crange.begin(), it));
 5887|  25.2k|        }
 5888|  25.2k|        else {
 5889|  25.2k|            SCN_EXPECT(false);
 5890|  25.2k|            SCN_UNREACHABLE;
 5891|  25.2k|        }
 5892|  25.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  25.2k|    {
 5863|  25.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  25.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  25.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  25.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 186, False: 25.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    186|    }                                                  \
  |  |  |  | 3667|  25.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  25.0k|                        .transform_error(make_eof_scan_error));
 5865|  25.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  25.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  25.0k|    {
 4152|  25.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  25.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  25.0k|        float_reader<CharT> rd{};
 4155|  25.0k|        return read_impl<Range>(
 4156|  25.0k|            range, rd,
 4157|  25.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  25.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  25.0k|            },
 4160|  25.0k|            value);
 4161|  25.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  25.0k|    {
  754|  25.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  25.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.0k|              cvref<T> obj = *get<T>(fn);
  745|  25.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.0k|              }
  748|  25.0k|              else {
  749|  25.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.0k|              }
  751|  25.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  25.0k|    {
  684|  25.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.0k|            return static_cast<T*>(s.m_cp);
  686|  25.0k|        }
  687|  25.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.0k|            return static_cast<T*>(s.m_p);
  689|  25.0k|        }
  690|  25.0k|        else {
  691|  25.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.0k|        }
  693|  25.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  25.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  25.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  25.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  25.0k|        {
  662|  25.0k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  25.3k|    {
 5871|  25.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  25.3k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  25.3k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  25.3k|            auto rd = make_reader<T, char_type>();
 5876|  25.3k|            return impl(rd, range, value);
 5877|  25.3k|        }
 5878|  25.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  25.3k|            auto rd = make_reader<T, char_type>();
 5880|  25.3k|            if (!is_segment_contiguous(range)) {
 5881|  25.3k|                return impl(rd, range, value);
 5882|  25.3k|            }
 5883|  25.3k|            auto crange = get_as_contiguous(range);
 5884|  25.3k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  25.3k|            return ranges::next(range.begin(),
 5886|  25.3k|                                ranges::distance(crange.begin(), it));
 5887|  25.3k|        }
 5888|  25.3k|        else {
 5889|  25.3k|            SCN_EXPECT(false);
 5890|  25.3k|            SCN_UNREACHABLE;
 5891|  25.3k|        }
 5892|  25.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  25.3k|    {
 5863|  25.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  25.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  25.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  25.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 25.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    192|    }                                                  \
  |  |  |  | 3667|  25.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  25.1k|                        .transform_error(make_eof_scan_error));
 5865|  25.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  25.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  25.1k|    {
 4152|  25.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  25.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  25.1k|        float_reader<CharT> rd{};
 4155|  25.1k|        return read_impl<Range>(
 4156|  25.1k|            range, rd,
 4157|  25.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  25.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  25.1k|            },
 4160|  25.1k|            value);
 4161|  25.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  25.1k|    {
  754|  25.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  25.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.1k|              cvref<T> obj = *get<T>(fn);
  745|  25.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.1k|              }
  748|  25.1k|              else {
  749|  25.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.1k|              }
  751|  25.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  25.1k|    {
  684|  25.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.1k|            return static_cast<T*>(s.m_cp);
  686|  25.1k|        }
  687|  25.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.1k|            return static_cast<T*>(s.m_p);
  689|  25.1k|        }
  690|  25.1k|        else {
  691|  25.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.1k|        }
  693|  25.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  25.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  25.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  25.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  25.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  25.1k|        {
  662|  25.1k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   241k|    {
 2879|   241k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   529k|    {
 2883|   529k|        return m_current;
 2884|   529k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   288k|    {
 2888|   288k|        return m_range.end();
 2889|   288k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  47.3k|    {
 2903|  47.3k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  47.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  47.3k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  47.3k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 47.3k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  47.3k|        }
 2909|  47.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  47.3k|    static_cast<    \
  |  |  929|  47.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  47.3k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   241k|    {
 2893|   241k|        return ranges::subrange{begin(), end()};
 2894|   241k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   241k|    {
 6037|   241k|        const bool need_skipped_width =
 6038|   241k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 241k]
  |  Branch (6038:33): [True: 0, False: 241k]
  ------------------
 6039|   241k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   241k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 241k]
  ------------------
 6043|   241k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 241k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   241k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 241k, False: 0]
  |  Branch (6047:56): [True: 241k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   241k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 241k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   481k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.65k, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.65k|    }                                                  \
  |  |  |  | 3667|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   481k|                            make_eof_scan_error));
 6058|       |
 6059|   481k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 239k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   239k|            return result_type{it, 0};
 6067|   481k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   241k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  46.9k|    {
 6079|  46.9k|        const bool need_skipped_width =
 6080|  46.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 46.9k]
  |  Branch (6080:33): [True: 0, False: 46.9k]
  ------------------
 6081|  46.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  46.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 46.9k]
  ------------------
 6084|  46.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 46.9k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  46.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 46.9k, False: 0]
  ------------------
 6089|  46.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 46.9k]
  ------------------
 6090|  46.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  46.9k|        return result_type{rng.begin(), 0};
 6114|  46.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6177|  80.3k|    {
 6178|  80.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  80.3k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  80.3k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  80.3k|            auto rd = make_reader<T, char_type>();
 6183|  80.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.3k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  80.3k|            return impl(rd, range, value);
 6188|  80.3k|        }
 6189|  80.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  80.3k|            auto rd = make_reader<T, char_type>();
 6191|  80.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  80.3k|                return unexpected(e);
 6193|  80.3k|            }
 6194|       |
 6195|  80.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  80.3k|                specs.width != 0) {
 6197|  80.3k|                return impl(rd, range, value);
 6198|  80.3k|            }
 6199|       |
 6200|  80.3k|            auto crange = get_as_contiguous(range);
 6201|  80.3k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  80.3k|            return ranges::next(range.begin(),
 6203|  80.3k|                                ranges::distance(crange.begin(), it));
 6204|  80.3k|        }
 6205|  80.3k|        else {
 6206|  80.3k|            SCN_EXPECT(false);
 6207|  80.3k|            SCN_UNREACHABLE;
 6208|  80.3k|        }
 6209|  80.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  80.3k|    {
 6120|  80.3k|        const bool need_skipped_width =
 6121|  80.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 80.3k]
  |  Branch (6121:33): [True: 0, False: 80.3k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  80.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  80.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  80.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  80.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 530, False: 79.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    530|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    530|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    530|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    530|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    530|    }                                                  \
  |  |  |  | 3667|  80.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  79.8k|        auto [it, prefix_width] = prefix_result;
 6126|  79.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  79.8k|        std::ptrdiff_t value_width = 0;
 6130|  79.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 79.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  79.8k|        else {
 6146|  79.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  79.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  79.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  79.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.1k, False: 15.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.1k|    }                                                  \
  |  | 3667|  79.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  15.6k|                                             specs, value, loc));
 6148|       |
 6149|  15.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 15.6k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  15.6k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  15.6k|        std::ptrdiff_t postfix_width = 0;
 6158|  15.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 15.5k, False: 114]
  ------------------
 6159|  15.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  15.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  15.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  15.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  15.5k|                                 value_width));
 6163|  15.5k|            std::tie(it, postfix_width) = postfix_result;
 6164|  15.5k|        }
 6165|       |
 6166|  15.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  15.6k|                                                 value_width, postfix_width);
 6168|  15.6k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 15.6k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  15.6k|        return it;
 6173|  15.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6177|  80.4k|    {
 6178|  80.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  80.4k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  80.4k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  80.4k|            auto rd = make_reader<T, char_type>();
 6183|  80.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.4k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  80.4k|            return impl(rd, range, value);
 6188|  80.4k|        }
 6189|  80.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  80.4k|            auto rd = make_reader<T, char_type>();
 6191|  80.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  80.4k|                return unexpected(e);
 6193|  80.4k|            }
 6194|       |
 6195|  80.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  80.4k|                specs.width != 0) {
 6197|  80.4k|                return impl(rd, range, value);
 6198|  80.4k|            }
 6199|       |
 6200|  80.4k|            auto crange = get_as_contiguous(range);
 6201|  80.4k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  80.4k|            return ranges::next(range.begin(),
 6203|  80.4k|                                ranges::distance(crange.begin(), it));
 6204|  80.4k|        }
 6205|  80.4k|        else {
 6206|  80.4k|            SCN_EXPECT(false);
 6207|  80.4k|            SCN_UNREACHABLE;
 6208|  80.4k|        }
 6209|  80.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  80.4k|    {
 6120|  80.4k|        const bool need_skipped_width =
 6121|  80.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 80.4k]
  |  Branch (6121:33): [True: 0, False: 80.4k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  80.4k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  80.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  80.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  80.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 556, False: 79.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    556|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    556|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    556|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    556|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    556|    }                                                  \
  |  |  |  | 3667|  80.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  79.8k|        auto [it, prefix_width] = prefix_result;
 6126|  79.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  79.8k|        std::ptrdiff_t value_width = 0;
 6130|  79.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 79.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  79.8k|        else {
 6146|  79.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  79.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  79.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  79.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.1k, False: 15.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.1k|    }                                                  \
  |  | 3667|  79.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  15.7k|                                             specs, value, loc));
 6148|       |
 6149|  15.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 15.7k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  15.7k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  15.7k|        std::ptrdiff_t postfix_width = 0;
 6158|  15.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 15.6k, False: 124]
  ------------------
 6159|  15.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  15.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  15.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  15.6k|                                 value_width));
 6163|  15.6k|            std::tie(it, postfix_width) = postfix_result;
 6164|  15.6k|        }
 6165|       |
 6166|  15.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  15.7k|                                                 value_width, postfix_width);
 6168|  15.7k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 15.7k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  15.7k|        return it;
 6173|  15.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6177|  80.5k|    {
 6178|  80.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  80.5k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  80.5k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  80.5k|            auto rd = make_reader<T, char_type>();
 6183|  80.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  80.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.5k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  80.5k|            return impl(rd, range, value);
 6188|  80.5k|        }
 6189|  80.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  80.5k|            auto rd = make_reader<T, char_type>();
 6191|  80.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  80.5k|                return unexpected(e);
 6193|  80.5k|            }
 6194|       |
 6195|  80.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  80.5k|                specs.width != 0) {
 6197|  80.5k|                return impl(rd, range, value);
 6198|  80.5k|            }
 6199|       |
 6200|  80.5k|            auto crange = get_as_contiguous(range);
 6201|  80.5k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  80.5k|            return ranges::next(range.begin(),
 6203|  80.5k|                                ranges::distance(crange.begin(), it));
 6204|  80.5k|        }
 6205|  80.5k|        else {
 6206|  80.5k|            SCN_EXPECT(false);
 6207|  80.5k|            SCN_UNREACHABLE;
 6208|  80.5k|        }
 6209|  80.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  80.5k|    {
 6120|  80.5k|        const bool need_skipped_width =
 6121|  80.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 80.5k]
  |  Branch (6121:33): [True: 0, False: 80.5k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  80.5k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  80.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  80.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  80.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 566, False: 79.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    566|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    566|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    566|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    566|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    566|    }                                                  \
  |  |  |  | 3667|  80.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  79.9k|        auto [it, prefix_width] = prefix_result;
 6126|  79.9k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  79.9k|        std::ptrdiff_t value_width = 0;
 6130|  79.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 79.9k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  79.9k|        else {
 6146|  79.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  79.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  79.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  79.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.1k, False: 15.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.1k|    }                                                  \
  |  | 3667|  79.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  79.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  15.8k|                                             specs, value, loc));
 6148|       |
 6149|  15.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 15.8k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  15.8k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  15.8k|        std::ptrdiff_t postfix_width = 0;
 6158|  15.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 15.7k, False: 128]
  ------------------
 6159|  15.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  15.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  15.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  15.7k|                                 value_width));
 6163|  15.7k|            std::tie(it, postfix_width) = postfix_result;
 6164|  15.7k|        }
 6165|       |
 6166|  15.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  15.8k|                                                 value_width, postfix_width);
 6168|  15.8k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 15.8k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  15.8k|        return it;
 6173|  15.8k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  75.6k|{
 5795|  75.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132, False: 75.5k]
  |  |  ------------------
  ------------------
 5796|    132|        return unexpected(e);
 5797|    132|    }
 5798|       |
 5799|  75.5k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 75.5k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  75.5k|    return skip_classic_whitespace(range);
 5804|  75.5k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  25.1k|    {
 5871|  25.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  25.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  25.1k|            auto rd = make_reader<T, char_type>();
 5876|  25.1k|            return impl(rd, range, value);
 5877|  25.1k|        }
 5878|  25.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  25.1k|            auto rd = make_reader<T, char_type>();
 5880|  25.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 25.1k, False: 0]
  ------------------
 5881|  25.1k|                return impl(rd, range, value);
 5882|  25.1k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  25.1k|        else {
 5889|  25.1k|            SCN_EXPECT(false);
 5890|  25.1k|            SCN_UNREACHABLE;
 5891|  25.1k|        }
 5892|  25.1k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  25.1k|    {
 5863|  25.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  25.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  25.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  25.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 171, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    171|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    171|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    171|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    171|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    171|    }                                                  \
  |  |  |  | 3667|  25.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  24.9k|                        .transform_error(make_eof_scan_error));
 5865|  24.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  25.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  24.9k|    {
 4152|  24.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  24.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  24.9k|        float_reader<CharT> rd{};
 4155|  24.9k|        return read_impl<Range>(
 4156|  24.9k|            range, rd,
 4157|  24.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  24.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  24.9k|            },
 4160|  24.9k|            value);
 4161|  24.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  24.9k|    {
  754|  24.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  24.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.9k|              cvref<T> obj = *get<T>(fn);
  745|  24.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.9k|              }
  748|  24.9k|              else {
  749|  24.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.9k|              }
  751|  24.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  24.9k|    {
  684|  24.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.9k|            return static_cast<T*>(s.m_cp);
  686|  24.9k|        }
  687|  24.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.9k|            return static_cast<T*>(s.m_p);
  689|  24.9k|        }
  690|  24.9k|        else {
  691|  24.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.9k|        }
  693|  24.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  24.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  24.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  24.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  24.9k|        {
  662|  24.9k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  25.2k|    {
 5871|  25.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  25.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  25.2k|            auto rd = make_reader<T, char_type>();
 5876|  25.2k|            return impl(rd, range, value);
 5877|  25.2k|        }
 5878|  25.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  25.2k|            auto rd = make_reader<T, char_type>();
 5880|  25.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 25.2k, False: 0]
  ------------------
 5881|  25.2k|                return impl(rd, range, value);
 5882|  25.2k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  25.2k|        else {
 5889|  25.2k|            SCN_EXPECT(false);
 5890|  25.2k|            SCN_UNREACHABLE;
 5891|  25.2k|        }
 5892|  25.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  25.2k|    {
 5863|  25.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  25.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  25.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  25.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 186, False: 25.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    186|    }                                                  \
  |  |  |  | 3667|  25.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  25.0k|                        .transform_error(make_eof_scan_error));
 5865|  25.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  25.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  25.0k|    {
 4152|  25.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  25.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  25.0k|        float_reader<CharT> rd{};
 4155|  25.0k|        return read_impl<Range>(
 4156|  25.0k|            range, rd,
 4157|  25.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  25.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  25.0k|            },
 4160|  25.0k|            value);
 4161|  25.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  25.0k|    {
  754|  25.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  25.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.0k|              cvref<T> obj = *get<T>(fn);
  745|  25.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.0k|              }
  748|  25.0k|              else {
  749|  25.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.0k|              }
  751|  25.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  25.0k|    {
  684|  25.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.0k|            return static_cast<T*>(s.m_cp);
  686|  25.0k|        }
  687|  25.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.0k|            return static_cast<T*>(s.m_p);
  689|  25.0k|        }
  690|  25.0k|        else {
  691|  25.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.0k|        }
  693|  25.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  25.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  25.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  25.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  25.0k|        {
  662|  25.0k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  25.2k|    {
 5871|  25.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  25.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  25.2k|            auto rd = make_reader<T, char_type>();
 5876|  25.2k|            return impl(rd, range, value);
 5877|  25.2k|        }
 5878|  25.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  25.2k|            auto rd = make_reader<T, char_type>();
 5880|  25.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 25.2k, False: 0]
  ------------------
 5881|  25.2k|                return impl(rd, range, value);
 5882|  25.2k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  25.2k|        else {
 5889|  25.2k|            SCN_EXPECT(false);
 5890|  25.2k|            SCN_UNREACHABLE;
 5891|  25.2k|        }
 5892|  25.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  25.2k|    {
 5863|  25.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  25.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  25.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  25.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 25.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    192|    }                                                  \
  |  |  |  | 3667|  25.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  25.0k|                        .transform_error(make_eof_scan_error));
 5865|  25.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  25.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  25.0k|    {
 4152|  25.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  25.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  25.0k|        float_reader<CharT> rd{};
 4155|  25.0k|        return read_impl<Range>(
 4156|  25.0k|            range, rd,
 4157|  25.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  25.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  25.0k|            },
 4160|  25.0k|            value);
 4161|  25.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  25.0k|    {
  754|  25.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  25.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.0k|              cvref<T> obj = *get<T>(fn);
  745|  25.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.0k|              }
  748|  25.0k|              else {
  749|  25.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.0k|              }
  751|  25.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  25.0k|    {
  684|  25.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.0k|            return static_cast<T*>(s.m_cp);
  686|  25.0k|        }
  687|  25.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.0k|            return static_cast<T*>(s.m_p);
  689|  25.0k|        }
  690|  25.0k|        else {
  691|  25.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.0k|        }
  693|  25.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  25.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  25.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  25.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  25.0k|        {
  662|  25.0k|        }

LLVMFuzzerTestOneInput:
   54|  3.23k|{
   55|  3.23k|    scn::fuzz::run(data, size);
   56|  3.23k|    return 0;
   57|  3.23k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.23k|{
   33|  3.23k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.23k]
  |  Branch (33:35): [True: 0, False: 3.23k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.23k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.23k|    const auto& f =
   40|  3.23k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.23k|    do_basic_run(sv, f);
   42|       |
   43|  3.23k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.23k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.23k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.23k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.23k, False: 0]
  ------------------
   47|  3.23k|        do_basic_run(wsv_transcode, wf);
   48|  3.23k|    }
   49|  3.23k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.23k|{
   25|  3.23k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.23k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.23k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.23k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.23k|{
   25|  3.23k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.23k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.23k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.23k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  6.46k|{
   25|  6.46k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.46k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.46k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.46k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  6.46k|{
   25|  6.46k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.46k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.46k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.46k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.23k|{
   52|  3.23k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.23k|    string_buffer.resize(size);
   56|  3.23k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.23k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.23k|    const auto wsv_reinterpret_size =
   61|  3.23k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 70, False: 3.16k]
  ------------------
   62|  3.23k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.23k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.23k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.23k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.23k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.23k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.23k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.23k|{
  122|  3.23k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.23k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.23k|    buf.resize(sizeof...(Args));
  125|  3.23k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.23k|    return buf;
  127|  3.23k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.23k|{
  108|  3.23k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.23k|        return format_string_view_buffer;
  110|  3.23k|    }
  111|  3.23k|    else {
  112|  3.23k|        return wformat_string_view_buffer;
  113|  3.23k|    }
  114|  3.23k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.23k|{
  185|  3.23k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.23k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.23k|                                   format_strings);
  188|  3.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.23k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 3.23k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   355k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   355k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   355k|            auto result = scn::scan<T>(
  139|   355k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   355k|                scn::runtime_format(f));
  141|   355k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 336k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   336k|            it = result->begin();
  145|   336k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 3.23k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   355k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   355k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   355k|            auto result = scn::scan<T>(
  154|   355k|                global_locale,
  155|   355k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   355k|                scn::runtime_format(f));
  157|   355k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 336k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   336k|            it = result->begin();
  161|   336k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.23k|    {
  166|  3.23k|        auto it = scn::ranges::begin(source);
  167|  78.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  78.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  78.0k|            auto result = scn::scan_value<T>(
  170|  78.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  78.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.23k, False: 74.7k]
  ------------------
  172|  3.23k|                break;
  173|  3.23k|            }
  174|  74.7k|            it = result->begin();
  175|  74.7k|        }
  176|  3.23k|    }
  177|  3.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.23k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 3.23k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   383k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   383k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   383k|            auto result = scn::scan<T>(
  139|   383k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   383k|                scn::runtime_format(f));
  141|   383k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 364k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   364k|            it = result->begin();
  145|   364k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 3.23k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   383k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   383k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   383k|            auto result = scn::scan<T>(
  154|   383k|                global_locale,
  155|   383k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   383k|                scn::runtime_format(f));
  157|   383k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 364k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   364k|            it = result->begin();
  161|   364k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.23k|    {
  166|  3.23k|        auto it = scn::ranges::begin(source);
  167|  86.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  86.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  86.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  86.2k|            auto result = scn::scan_value<T>(
  170|  86.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  86.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.23k, False: 83.0k]
  ------------------
  172|  3.23k|                break;
  173|  3.23k|            }
  174|  83.0k|            it = result->begin();
  175|  83.0k|        }
  176|  3.23k|    }
  177|  3.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.23k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 3.23k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   388k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   388k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   388k|            auto result = scn::scan<T>(
  139|   388k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   388k|                scn::runtime_format(f));
  141|   388k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 369k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   369k|            it = result->begin();
  145|   369k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 3.23k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   388k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   388k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   388k|            auto result = scn::scan<T>(
  154|   388k|                global_locale,
  155|   388k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   388k|                scn::runtime_format(f));
  157|   388k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 369k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   369k|            it = result->begin();
  161|   369k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.23k|    {
  166|  3.23k|        auto it = scn::ranges::begin(source);
  167|  87.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  87.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  87.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  87.8k|            auto result = scn::scan_value<T>(
  170|  87.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  87.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.23k, False: 84.6k]
  ------------------
  172|  3.23k|                break;
  173|  3.23k|            }
  174|  84.6k|            it = result->begin();
  175|  84.6k|        }
  176|  3.23k|    }
  177|  3.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.23k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 3.23k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   362k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   362k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   362k|            auto result = scn::scan<T>(
  139|   362k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   362k|                scn::runtime_format(f));
  141|   362k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 342k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   342k|            it = result->begin();
  145|   342k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 3.23k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   362k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   362k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   362k|            auto result = scn::scan<T>(
  154|   362k|                global_locale,
  155|   362k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   362k|                scn::runtime_format(f));
  157|   362k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 342k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   342k|            it = result->begin();
  161|   342k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.23k|    {
  166|  3.23k|        auto it = scn::ranges::begin(source);
  167|  73.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  73.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  73.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  73.7k|            auto result = scn::scan_value<T>(
  170|  73.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  73.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.23k, False: 70.4k]
  ------------------
  172|  3.23k|                break;
  173|  3.23k|            }
  174|  70.4k|            it = result->begin();
  175|  70.4k|        }
  176|  3.23k|    }
  177|  3.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.23k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 3.23k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   390k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   390k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   390k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   390k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   390k|            auto result = scn::scan<T>(
  139|   390k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   390k|                scn::runtime_format(f));
  141|   390k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 371k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   371k|            it = result->begin();
  145|   371k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 3.23k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   390k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   390k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   390k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   390k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   390k|            auto result = scn::scan<T>(
  154|   390k|                global_locale,
  155|   390k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   390k|                scn::runtime_format(f));
  157|   390k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 371k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   371k|            it = result->begin();
  161|   371k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.23k|    {
  166|  3.23k|        auto it = scn::ranges::begin(source);
  167|  81.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  81.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  81.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  81.5k|            auto result = scn::scan_value<T>(
  170|  81.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  81.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.23k, False: 78.3k]
  ------------------
  172|  3.23k|                break;
  173|  3.23k|            }
  174|  78.3k|            it = result->begin();
  175|  78.3k|        }
  176|  3.23k|    }
  177|  3.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.23k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 3.23k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   395k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   395k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   395k|            auto result = scn::scan<T>(
  139|   395k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   395k|                scn::runtime_format(f));
  141|   395k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 375k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   375k|            it = result->begin();
  145|   375k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 3.23k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   395k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   395k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   395k|            auto result = scn::scan<T>(
  154|   395k|                global_locale,
  155|   395k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   395k|                scn::runtime_format(f));
  157|   395k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 375k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   375k|            it = result->begin();
  161|   375k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.23k|    {
  166|  3.23k|        auto it = scn::ranges::begin(source);
  167|  82.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  82.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  82.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  82.6k|            auto result = scn::scan_value<T>(
  170|  82.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  82.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.23k, False: 79.3k]
  ------------------
  172|  3.23k|                break;
  173|  3.23k|            }
  174|  79.3k|            it = result->begin();
  175|  79.3k|        }
  176|  3.23k|    }
  177|  3.23k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.23k|{
   90|  3.23k|    using char_type = ranges::range_value_t<Source>;
   91|  3.23k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.23k|    deque.clear();
   93|  3.23k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.23k|              std::back_inserter(deque));
   95|  3.23k|    return deque;
   96|  3.23k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.23k|{
   79|  3.23k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  3.23k|        return noncontiguous_buffer;
   81|  3.23k|    }
   82|  3.23k|    else {
   83|  3.23k|        return wnoncontiguous_buffer;
   84|  3.23k|    }
   85|  3.23k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.23k|{
  122|  3.23k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.23k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.23k|    buf.resize(sizeof...(Args));
  125|  3.23k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.23k|    return buf;
  127|  3.23k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.23k|{
  108|  3.23k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.23k|        return format_string_view_buffer;
  110|  3.23k|    }
  111|  3.23k|    else {
  112|  3.23k|        return wformat_string_view_buffer;
  113|  3.23k|    }
  114|  3.23k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  6.46k|{
  185|  6.46k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  6.46k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  6.46k|                                   format_strings);
  188|  6.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.46k|{
  133|       |    // Regular scan
  134|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.8k, False: 6.46k]
  ------------------
  135|  38.8k|        auto it = scn::ranges::begin(source);
  136|  48.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  48.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  48.5k|            auto result = scn::scan<T>(
  139|  48.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  48.5k|                scn::runtime_format(f));
  141|  48.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.8k, False: 9.75k]
  ------------------
  142|  38.8k|                break;
  143|  38.8k|            }
  144|  9.75k|            it = result->begin();
  145|  9.75k|        }
  146|  38.8k|    }
  147|       |
  148|       |    // scan localized
  149|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.8k, False: 6.46k]
  ------------------
  150|  38.8k|        auto it = scn::ranges::begin(source);
  151|  48.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  48.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  48.5k|            auto result = scn::scan<T>(
  154|  48.5k|                global_locale,
  155|  48.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  48.5k|                scn::runtime_format(f));
  157|  48.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.8k, False: 9.75k]
  ------------------
  158|  38.8k|                break;
  159|  38.8k|            }
  160|  9.75k|            it = result->begin();
  161|  9.75k|        }
  162|  38.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.46k|    {
  166|  6.46k|        auto it = scn::ranges::begin(source);
  167|  8.39k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.39k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.39k|            auto result = scn::scan_value<T>(
  170|  8.39k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.39k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.46k, False: 1.92k]
  ------------------
  172|  6.46k|                break;
  173|  6.46k|            }
  174|  1.92k|            it = result->begin();
  175|  1.92k|        }
  176|  6.46k|    }
  177|  6.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.46k|{
  133|       |    // Regular scan
  134|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.8k, False: 6.46k]
  ------------------
  135|  38.8k|        auto it = scn::ranges::begin(source);
  136|  48.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  48.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  48.6k|            auto result = scn::scan<T>(
  139|  48.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  48.6k|                scn::runtime_format(f));
  141|  48.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.8k, False: 9.82k]
  ------------------
  142|  38.8k|                break;
  143|  38.8k|            }
  144|  9.82k|            it = result->begin();
  145|  9.82k|        }
  146|  38.8k|    }
  147|       |
  148|       |    // scan localized
  149|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.8k, False: 6.46k]
  ------------------
  150|  38.8k|        auto it = scn::ranges::begin(source);
  151|  48.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  48.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  48.6k|            auto result = scn::scan<T>(
  154|  48.6k|                global_locale,
  155|  48.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  48.6k|                scn::runtime_format(f));
  157|  48.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.8k, False: 9.82k]
  ------------------
  158|  38.8k|                break;
  159|  38.8k|            }
  160|  9.82k|            it = result->begin();
  161|  9.82k|        }
  162|  38.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.46k|    {
  166|  6.46k|        auto it = scn::ranges::begin(source);
  167|  8.41k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.41k|            auto result = scn::scan_value<T>(
  170|  8.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.41k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.46k, False: 1.94k]
  ------------------
  172|  6.46k|                break;
  173|  6.46k|            }
  174|  1.94k|            it = result->begin();
  175|  1.94k|        }
  176|  6.46k|    }
  177|  6.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.46k|{
  133|       |    // Regular scan
  134|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.8k, False: 6.46k]
  ------------------
  135|  38.8k|        auto it = scn::ranges::begin(source);
  136|  48.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  48.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  48.7k|            auto result = scn::scan<T>(
  139|  48.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  48.7k|                scn::runtime_format(f));
  141|  48.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.8k, False: 9.90k]
  ------------------
  142|  38.8k|                break;
  143|  38.8k|            }
  144|  9.90k|            it = result->begin();
  145|  9.90k|        }
  146|  38.8k|    }
  147|       |
  148|       |    // scan localized
  149|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.8k, False: 6.46k]
  ------------------
  150|  38.8k|        auto it = scn::ranges::begin(source);
  151|  48.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  48.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  48.7k|            auto result = scn::scan<T>(
  154|  48.7k|                global_locale,
  155|  48.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  48.7k|                scn::runtime_format(f));
  157|  48.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.8k, False: 9.90k]
  ------------------
  158|  38.8k|                break;
  159|  38.8k|            }
  160|  9.90k|            it = result->begin();
  161|  9.90k|        }
  162|  38.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.46k|    {
  166|  6.46k|        auto it = scn::ranges::begin(source);
  167|  8.43k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.43k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.43k|            auto result = scn::scan_value<T>(
  170|  8.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.43k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.46k, False: 1.96k]
  ------------------
  172|  6.46k|                break;
  173|  6.46k|            }
  174|  1.96k|            it = result->begin();
  175|  1.96k|        }
  176|  6.46k|    }
  177|  6.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.46k|{
  133|       |    // Regular scan
  134|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.8k, False: 6.46k]
  ------------------
  135|  38.8k|        auto it = scn::ranges::begin(source);
  136|  48.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  48.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  48.5k|            auto result = scn::scan<T>(
  139|  48.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  48.5k|                scn::runtime_format(f));
  141|  48.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.8k, False: 9.73k]
  ------------------
  142|  38.8k|                break;
  143|  38.8k|            }
  144|  9.73k|            it = result->begin();
  145|  9.73k|        }
  146|  38.8k|    }
  147|       |
  148|       |    // scan localized
  149|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.8k, False: 6.46k]
  ------------------
  150|  38.8k|        auto it = scn::ranges::begin(source);
  151|  48.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  48.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  48.5k|            auto result = scn::scan<T>(
  154|  48.5k|                global_locale,
  155|  48.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  48.5k|                scn::runtime_format(f));
  157|  48.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.8k, False: 9.73k]
  ------------------
  158|  38.8k|                break;
  159|  38.8k|            }
  160|  9.73k|            it = result->begin();
  161|  9.73k|        }
  162|  38.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.46k|    {
  166|  6.46k|        auto it = scn::ranges::begin(source);
  167|  8.38k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.38k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.38k|            auto result = scn::scan_value<T>(
  170|  8.38k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.38k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.46k, False: 1.91k]
  ------------------
  172|  6.46k|                break;
  173|  6.46k|            }
  174|  1.91k|            it = result->begin();
  175|  1.91k|        }
  176|  6.46k|    }
  177|  6.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.46k|{
  133|       |    // Regular scan
  134|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.8k, False: 6.46k]
  ------------------
  135|  38.8k|        auto it = scn::ranges::begin(source);
  136|  48.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  48.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  48.6k|            auto result = scn::scan<T>(
  139|  48.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  48.6k|                scn::runtime_format(f));
  141|  48.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.8k, False: 9.80k]
  ------------------
  142|  38.8k|                break;
  143|  38.8k|            }
  144|  9.80k|            it = result->begin();
  145|  9.80k|        }
  146|  38.8k|    }
  147|       |
  148|       |    // scan localized
  149|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.8k, False: 6.46k]
  ------------------
  150|  38.8k|        auto it = scn::ranges::begin(source);
  151|  48.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  48.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  48.6k|            auto result = scn::scan<T>(
  154|  48.6k|                global_locale,
  155|  48.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  48.6k|                scn::runtime_format(f));
  157|  48.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.8k, False: 9.80k]
  ------------------
  158|  38.8k|                break;
  159|  38.8k|            }
  160|  9.80k|            it = result->begin();
  161|  9.80k|        }
  162|  38.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.46k|    {
  166|  6.46k|        auto it = scn::ranges::begin(source);
  167|  8.40k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.40k|            auto result = scn::scan_value<T>(
  170|  8.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.40k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.46k, False: 1.93k]
  ------------------
  172|  6.46k|                break;
  173|  6.46k|            }
  174|  1.93k|            it = result->begin();
  175|  1.93k|        }
  176|  6.46k|    }
  177|  6.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.46k|{
  133|       |    // Regular scan
  134|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.8k, False: 6.46k]
  ------------------
  135|  38.8k|        auto it = scn::ranges::begin(source);
  136|  48.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  48.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  48.6k|            auto result = scn::scan<T>(
  139|  48.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  48.6k|                scn::runtime_format(f));
  141|  48.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.8k, False: 9.88k]
  ------------------
  142|  38.8k|                break;
  143|  38.8k|            }
  144|  9.88k|            it = result->begin();
  145|  9.88k|        }
  146|  38.8k|    }
  147|       |
  148|       |    // scan localized
  149|  38.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.8k, False: 6.46k]
  ------------------
  150|  38.8k|        auto it = scn::ranges::begin(source);
  151|  48.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  48.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  48.6k|            auto result = scn::scan<T>(
  154|  48.6k|                global_locale,
  155|  48.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  48.6k|                scn::runtime_format(f));
  157|  48.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.8k, False: 9.88k]
  ------------------
  158|  38.8k|                break;
  159|  38.8k|            }
  160|  9.88k|            it = result->begin();
  161|  9.88k|        }
  162|  38.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.46k|    {
  166|  6.46k|        auto it = scn::ranges::begin(source);
  167|  8.42k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.42k|            auto result = scn::scan_value<T>(
  170|  8.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.42k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.46k, False: 1.96k]
  ------------------
  172|  6.46k|                break;
  173|  6.46k|            }
  174|  1.96k|            it = result->begin();
  175|  1.96k|        }
  176|  6.46k|    }
  177|  6.46k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  6.46k|{
   90|  6.46k|    using char_type = ranges::range_value_t<Source>;
   91|  6.46k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  6.46k|    deque.clear();
   93|  6.46k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  6.46k|              std::back_inserter(deque));
   95|  6.46k|    return deque;
   96|  6.46k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  6.46k|{
   79|  6.46k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  6.46k|        return noncontiguous_buffer;
   81|  6.46k|    }
   82|  6.46k|    else {
   83|  6.46k|        return wnoncontiguous_buffer;
   84|  6.46k|    }
   85|  6.46k|}

