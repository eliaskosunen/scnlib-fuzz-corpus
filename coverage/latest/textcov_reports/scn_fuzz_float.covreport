_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   866k|                    parse_options_t<UC> options) noexcept {
  286|   866k|  chars_format const fmt = options.format;
  287|   866k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   866k|  parsed_number_string_t<UC> answer;
  290|   866k|  answer.valid = false;
  291|   866k|  answer.too_many_digits = false;
  292|   866k|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|   866k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 866k]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   866k|  UC const *const start_digits = p;
  318|       |
  319|   866k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|  4.47M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 4.04M, False: 430k]
  |  Branch (321:25): [True: 3.60M, False: 435k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|  3.60M|    i = 10 * i +
  325|  3.60M|        uint64_t(*p -
  326|  3.60M|                 UC('0')); // might overflow, we will handle the overflow later
  327|  3.60M|    ++p;
  328|  3.60M|  }
  329|   866k|  UC const *const end_of_integer_part = p;
  330|   866k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   866k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|   866k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   866k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 866k]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|   866k|  int64_t exponent = 0;
  344|   866k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 435k, False: 430k]
  |  Branch (344:49): [True: 162k, False: 273k]
  ------------------
  345|   866k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 162k, False: 703k]
  ------------------
  346|   162k|    ++p;
  347|   162k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|   162k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|   686k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 587k, False: 99.7k]
  |  Branch (352:27): [True: 524k, False: 62.8k]
  ------------------
  353|   524k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|   524k|      ++p;
  355|   524k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|   524k|    }
  357|   162k|    exponent = before - p;
  358|   162k|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|   162k|    digit_count -= exponent;
  360|   162k|  }
  361|   866k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   866k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 866k]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|   866k|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 866k]
  ------------------
  368|   866k|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   866k|  int64_t exp_number = 0; // explicit exponential part
  372|   866k|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 745k, False: 120k]
  |  Branch (372:44): [True: 335k, False: 409k]
  ------------------
  373|   866k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 75.5k, False: 260k]
  |  Branch (373:28): [True: 44.8k, False: 215k]
  ------------------
  374|   866k|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|   745k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 745k]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|   745k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|   120k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|   120k|    UC const *location_of_e = p;
  378|   120k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 75.5k, False: 44.8k]
  |  Branch (378:28): [True: 44.8k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|   120k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|   120k|      ++p;
  381|   120k|    }
  382|   120k|    bool neg_exp = false;
  383|   120k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 120k, False: 105]
  |  Branch (383:24): [True: 7.03k, False: 113k]
  ------------------
  384|  7.03k|      neg_exp = true;
  385|  7.03k|      ++p;
  386|   113k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 113k, False: 105]
  ------------------
  387|   113k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 28.8k, False: 84.3k]
  ------------------
  388|   113k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|  28.8k|      ++p;
  390|  28.8k|    }
  391|   120k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 165, False: 120k]
  |  Branch (391:24): [True: 495, False: 119k]
  ------------------
  392|    660|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 660]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    660|      p = location_of_e;
  400|   119k|    } else {
  401|   374k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 285k, False: 88.9k]
  |  Branch (401:29): [True: 254k, False: 30.7k]
  ------------------
  402|   254k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|   254k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 235k, False: 18.8k]
  ------------------
  404|   235k|          exp_number = 10 * exp_number + digit;
  405|   235k|        }
  406|   254k|        ++p;
  407|   254k|      }
  408|   119k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 6.97k, False: 112k]
  ------------------
  409|  6.97k|        exp_number = -exp_number;
  410|  6.97k|      }
  411|   119k|      exponent += exp_number;
  412|   119k|    }
  413|   745k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   745k|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 625k, False: 120k]
  |  Branch (415:45): [True: 0, False: 625k]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|   745k|  }
  419|   866k|  answer.lastmatch = p;
  420|   866k|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|   866k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 146k, False: 719k]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|   146k|    UC const *start = start_digits;
  433|   605k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 603k, False: 1.22k]
  |  Branch (433:32): [True: 450k, False: 153k]
  |  Branch (433:53): [True: 7.97k, False: 145k]
  ------------------
  434|   458k|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 450k, False: 7.97k]
  ------------------
  435|   450k|        digit_count--;
  436|   450k|      }
  437|   458k|      start++;
  438|   458k|    }
  439|       |
  440|   146k|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 142k, False: 4.31k]
  ------------------
  441|   142k|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|   142k|      i = 0;
  446|   142k|      p = answer.integer.ptr;
  447|   142k|      UC const *int_end = p + answer.integer.len();
  448|   142k|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|  1.37M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 1.33M, False: 34.7k]
  |  Branch (449:54): [True: 1.23M, False: 107k]
  ------------------
  450|  1.23M|        i = i * 10 + uint64_t(*p - UC('0'));
  451|  1.23M|        ++p;
  452|  1.23M|      }
  453|   142k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 34.7k, False: 107k]
  ------------------
  454|  34.7k|        exponent = end_of_integer_part - p + exp_number;
  455|   107k|      } else { // We have a value with a fractional component.
  456|   107k|        p = answer.fraction.ptr;
  457|   107k|        UC const *frac_end = p + answer.fraction.len();
  458|  1.93M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 1.82M, False: 107k]
  |  Branch (458:56): [True: 1.82M, False: 0]
  ------------------
  459|  1.82M|          i = i * 10 + uint64_t(*p - UC('0'));
  460|  1.82M|          ++p;
  461|  1.82M|        }
  462|   107k|        exponent = answer.fraction.ptr - p + exp_number;
  463|   107k|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|   142k|    }
  466|   146k|  }
  467|   866k|  answer.exponent = exponent;
  468|   866k|  answer.mantissa = i;
  469|   866k|  return answer;
  470|   866k|}
_ZN10fast_float10is_integerIcEEbT_:
   34|  5.03M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|  5.03M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 137k, False: 4.89M]
  |  Branch (35:27): [True: 392k, False: 4.50M]
  ------------------
   36|  5.03M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  224|   162k|                           uint64_t &i) {
  225|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  226|   618k|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (226:10): [True: 506k, False: 112k]
  ------------------
  227|   618k|         is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (227:10): [True: 456k, False: 50.4k]
  ------------------
  228|   456k|    i = i * 100000000 +
  229|   456k|        parse_eight_digits_unrolled(read8_to_u64(
  230|   456k|            p)); // in rare cases, this will overflow, but that's ok
  231|   456k|    p += 8;
  232|   456k|  }
  233|   162k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  142|   506k|is_made_of_eight_digits_fast(uint64_t val) noexcept {
  143|   506k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  144|   506k|            0x8080808080808080));
  145|   506k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   48|  1.16M|read8_to_u64(const UC *chars) {
   49|  1.16M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|      0|    uint64_t val = 0;
   51|      0|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 0, False: 0]
  ------------------
   52|      0|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|      0|      ++chars;
   54|      0|    }
   55|      0|    return val;
   56|      0|  }
   57|  1.16M|  uint64_t val;
   58|  1.16M|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|  1.16M|  return val;
   64|  1.16M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  120|   655k|parse_eight_digits_unrolled(uint64_t val) {
  121|   655k|  const uint64_t mask = 0x000000FF000000FF;
  122|   655k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  123|   655k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  124|   655k|  val -= 0x3030303030303030;
  125|   655k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  126|   655k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  127|   655k|  return uint32_t(val);
  128|   655k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  133|   198k|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|   198k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|   198k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|   198k|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|   198k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   437k|                    parse_options_t<UC> options) noexcept {
  286|   437k|  chars_format const fmt = options.format;
  287|   437k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   437k|  parsed_number_string_t<UC> answer;
  290|   437k|  answer.valid = false;
  291|   437k|  answer.too_many_digits = false;
  292|   437k|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|   437k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 437k]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   437k|  UC const *const start_digits = p;
  318|       |
  319|   437k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|   952k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 661k, False: 290k]
  |  Branch (321:25): [True: 515k, False: 146k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|   515k|    i = 10 * i +
  325|   515k|        uint64_t(*p -
  326|   515k|                 UC('0')); // might overflow, we will handle the overflow later
  327|   515k|    ++p;
  328|   515k|  }
  329|   437k|  UC const *const end_of_integer_part = p;
  330|   437k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   437k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|   437k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   437k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 437k]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|   437k|  int64_t exponent = 0;
  344|   437k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 146k, False: 290k]
  |  Branch (344:49): [True: 4.42k, False: 141k]
  ------------------
  345|   437k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 4.42k, False: 432k]
  ------------------
  346|  4.42k|    ++p;
  347|  4.42k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|  4.42k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|  42.8k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 39.8k, False: 2.99k]
  |  Branch (352:27): [True: 38.4k, False: 1.42k]
  ------------------
  353|  38.4k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|  38.4k|      ++p;
  355|  38.4k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|  38.4k|    }
  357|  4.42k|    exponent = before - p;
  358|  4.42k|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|  4.42k|    digit_count -= exponent;
  360|  4.42k|  }
  361|   437k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   437k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 437k]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|   437k|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 437k]
  ------------------
  368|   437k|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   437k|  int64_t exp_number = 0; // explicit exponential part
  372|   437k|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 361k, False: 75.9k]
  |  Branch (372:44): [True: 143k, False: 218k]
  ------------------
  373|   437k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 215, False: 143k]
  |  Branch (373:28): [True: 16.9k, False: 126k]
  ------------------
  374|   437k|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|   420k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 420k]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|   420k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|  17.2k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|  17.2k|    UC const *location_of_e = p;
  378|  17.2k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 215, False: 16.9k]
  |  Branch (378:28): [True: 16.9k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|  17.2k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|  17.2k|      ++p;
  381|  17.2k|    }
  382|  17.2k|    bool neg_exp = false;
  383|  17.2k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 17.1k, False: 20]
  |  Branch (383:24): [True: 3.24k, False: 13.9k]
  ------------------
  384|  3.24k|      neg_exp = true;
  385|  3.24k|      ++p;
  386|  13.9k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 13.9k, False: 20]
  ------------------
  387|  13.9k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 339, False: 13.6k]
  ------------------
  388|  13.9k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|    339|      ++p;
  390|    339|    }
  391|  17.2k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 50, False: 17.1k]
  |  Branch (391:24): [True: 380, False: 16.7k]
  ------------------
  392|    430|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 430]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    430|      p = location_of_e;
  400|  16.7k|    } else {
  401|  58.0k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 46.2k, False: 11.7k]
  |  Branch (401:29): [True: 41.2k, False: 5.05k]
  ------------------
  402|  41.2k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|  41.2k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 39.3k, False: 1.93k]
  ------------------
  404|  39.3k|          exp_number = 10 * exp_number + digit;
  405|  39.3k|        }
  406|  41.2k|        ++p;
  407|  41.2k|      }
  408|  16.7k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 3.22k, False: 13.5k]
  ------------------
  409|  3.22k|        exp_number = -exp_number;
  410|  3.22k|      }
  411|  16.7k|      exponent += exp_number;
  412|  16.7k|    }
  413|   420k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   420k|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 344k, False: 75.9k]
  |  Branch (415:45): [True: 0, False: 344k]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|   420k|  }
  419|   437k|  answer.lastmatch = p;
  420|   437k|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|   437k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 2.22k, False: 434k]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|  2.22k|    UC const *start = start_digits;
  433|  3.54k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 3.54k, False: 0]
  |  Branch (433:32): [True: 908, False: 2.63k]
  |  Branch (433:53): [True: 416, False: 2.22k]
  ------------------
  434|  1.32k|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 908, False: 416]
  ------------------
  435|    908|        digit_count--;
  436|    908|      }
  437|  1.32k|      start++;
  438|  1.32k|    }
  439|       |
  440|  2.22k|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 1.95k, False: 264]
  ------------------
  441|  1.95k|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|  1.95k|      i = 0;
  446|  1.95k|      p = answer.integer.ptr;
  447|  1.95k|      UC const *int_end = p + answer.integer.len();
  448|  1.95k|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|  26.0k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 25.2k, False: 870]
  |  Branch (449:54): [True: 24.1k, False: 1.08k]
  ------------------
  450|  24.1k|        i = i * 10 + uint64_t(*p - UC('0'));
  451|  24.1k|        ++p;
  452|  24.1k|      }
  453|  1.95k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 870, False: 1.08k]
  ------------------
  454|    870|        exponent = end_of_integer_part - p + exp_number;
  455|  1.08k|      } else { // We have a value with a fractional component.
  456|  1.08k|        p = answer.fraction.ptr;
  457|  1.08k|        UC const *frac_end = p + answer.fraction.len();
  458|  14.7k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 13.6k, False: 1.08k]
  |  Branch (458:56): [True: 13.6k, False: 0]
  ------------------
  459|  13.6k|          i = i * 10 + uint64_t(*p - UC('0'));
  460|  13.6k|          ++p;
  461|  13.6k|        }
  462|  1.08k|        exponent = answer.fraction.ptr - p + exp_number;
  463|  1.08k|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|  1.95k|    }
  466|  2.22k|  }
  467|   437k|  answer.exponent = exponent;
  468|   437k|  answer.mantissa = i;
  469|   437k|  return answer;
  470|   437k|}
_ZN10fast_float10is_integerIDiEEbT_:
   34|   764k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|   764k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 147k, False: 617k]
  |  Branch (35:27): [True: 5.74k, False: 611k]
  ------------------
   36|   764k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  211|  4.42k|loop_parse_if_eight_digits(const UC *&p, const UC *const pend, uint64_t &i) {
  212|  4.42k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (212:7): [Folded - Ignored]
  ------------------
  213|  4.42k|    return;
  214|  4.42k|  }
  215|      0|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (215:10): [True: 0, False: 0]
  ------------------
  216|      0|         simd_parse_if_eight_digits_unrolled(
  ------------------
  |  Branch (216:10): [True: 0, False: 0]
  ------------------
  217|      0|             p, i)) { // in rare cases, this will overflow, but that's ok
  218|      0|    p += 8;
  219|      0|  }
  220|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  133|    270|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|    270|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|    270|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|    270|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|    270|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   48|    270|read8_to_u64(const UC *chars) {
   49|    270|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|    270|    uint64_t val = 0;
   51|  2.43k|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 2.16k, False: 270]
  ------------------
   52|  2.16k|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|  2.16k|      ++chars;
   54|  2.16k|    }
   55|    270|    return val;
   56|    270|  }
   57|      0|  uint64_t val;
   58|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|      0|  return val;
   64|    270|}

_ZN10fast_float6bigintC2Ev:
  425|  50.6k|  FASTFLOAT_CONSTEXPR20 bigint() : vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   45|   112k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  577|   176k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept { return small_mul(vec, y); }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   261k|                                            limb y) noexcept {
  276|   261k|  limb carry = 0;
  277|  1.09M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (277:26): [True: 836k, False: 261k]
  ------------------
  278|   836k|    vec[index] = scalar_mul(vec[index], y, carry);
  279|   836k|  }
  280|   261k|  if (carry != 0) {
  ------------------
  |  Branch (280:7): [True: 154k, False: 106k]
  ------------------
  281|   154k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   154k|  {                                                                            \
  |  |  179|   154k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 154k]
  |  |  ------------------
  |  |  180|   154k|      return false;                                                            \
  |  |  181|   154k|  }
  ------------------
  282|   154k|  }
  283|   261k|  return true;
  284|   261k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   75|  2.06M|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float10scalar_mulEmmRm:
  222|   836k|scalar_mul(limb x, limb y, limb &carry) noexcept {
  223|   836k|#ifdef FASTFLOAT_64BIT_LIMB
  224|   836k|#if defined(__SIZEOF_INT128__)
  225|       |  // GCC and clang both define it as an extension.
  226|   836k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  227|   836k|  carry = limb(z >> limb_bits);
  228|   836k|  return limb(z);
  229|       |#else
  230|       |  // fallback, no native 128-bit integer multiplication with carry.
  231|       |  // on msvc, this optimizes identically, somehow.
  232|       |  value128 z = full_multiplication(x, y);
  233|       |  bool overflow;
  234|       |  z.low = scalar_add(z.low, carry, overflow);
  235|       |  z.high += uint64_t(overflow); // cannot overflow
  236|       |  carry = z.high;
  237|       |  return z.low;
  238|       |#endif
  239|       |#else
  240|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  241|       |  carry = limb(z >> limb_bits);
  242|       |  return limb(z);
  243|       |#endif
  244|   836k|}
_ZN10fast_float8stackvecILt62EEixEm:
   56|  2.28M|  FASTFLOAT_CONSTEXPR14 limb &operator[](size_t index) noexcept {
   57|  2.28M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|  2.28M|  { ((void)(x)); }
  ------------------
   58|  2.28M|    return data[index];
   59|  2.28M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   84|   215k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   85|   215k|    if (len() < capacity()) {
  ------------------
  |  Branch (85:9): [True: 215k, False: 0]
  ------------------
   86|   215k|      push_unchecked(value);
   87|   215k|      return true;
   88|   215k|    } else {
   89|      0|      return false;
   90|      0|    }
   91|   215k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   77|   253k|  constexpr size_t capacity() const noexcept { return size; }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   79|   262k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   80|   262k|    data[length] = value;
   81|   262k|    length++;
   82|   262k|  }
_ZN10fast_float6bigint3addEm:
  579|   176k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept { return small_add(vec, y); }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  268|   176k|small_add(stackvec<size> &vec, limb y) noexcept {
  269|   176k|  return small_add_from(vec, y, 0);
  270|   176k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  250|   176k|                                                 size_t start) noexcept {
  251|   176k|  size_t index = start;
  252|   176k|  limb carry = y;
  253|   176k|  bool overflow;
  254|   266k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (254:10): [True: 140k, False: 125k]
  |  Branch (254:24): [True: 90.2k, False: 50.6k]
  ------------------
  255|  90.2k|    vec[index] = scalar_add(vec[index], carry, overflow);
  256|  90.2k|    carry = limb(overflow);
  257|  90.2k|    index += 1;
  258|  90.2k|  }
  259|   176k|  if (carry != 0) {
  ------------------
  |  Branch (259:7): [True: 50.6k, False: 125k]
  ------------------
  260|  50.6k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  50.6k|  {                                                                            \
  |  |  179|  50.6k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 50.6k]
  |  |  ------------------
  |  |  180|  50.6k|      return false;                                                            \
  |  |  181|  50.6k|  }
  ------------------
  261|  50.6k|  }
  262|   176k|  return true;
  263|   176k|}
_ZN10fast_float10scalar_addEmmRb:
  202|   234k|scalar_add(limb x, limb y, bool &overflow) noexcept {
  203|   234k|  limb z;
  204|       |// gcc and clang
  205|   234k|#if defined(__has_builtin)
  206|   234k|#if __has_builtin(__builtin_add_overflow)
  207|   234k|  if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (207:7): [Folded - Ignored]
  ------------------
  208|   234k|    overflow = __builtin_add_overflow(x, y, &z);
  209|   234k|    return z;
  210|   234k|  }
  211|      0|#endif
  212|      0|#endif
  213|       |
  214|       |  // generic, this still optimizes correctly on MSVC.
  215|      0|  z = x + y;
  216|      0|  overflow = z < x;
  217|      0|  return z;
  218|   234k|}
_ZN10fast_float6bigint5pow10Ej:
  616|  3.24k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  617|  3.24k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  3.24k|  {                                                                            \
  |  |  179|  3.24k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.24k]
  |  |  ------------------
  |  |  180|  3.24k|      return false;                                                            \
  |  |  181|  3.24k|  }
  ------------------
  618|  3.24k|    return pow2(exp);
  619|  3.24k|  }
_ZN10fast_float6bigint4pow5Ej:
  585|  50.6k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  586|       |    // multiply by a power of 5
  587|  50.6k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  588|  50.6k|    limb_span large = limb_span(large_power_of_5, large_length);
  589|  54.1k|    while (exp >= large_step) {
  ------------------
  |  Branch (589:12): [True: 3.51k, False: 50.6k]
  ------------------
  590|  3.51k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.51k|  {                                                                            \
  |  |  179|  3.51k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.51k]
  |  |  ------------------
  |  |  180|  3.51k|      return false;                                                            \
  |  |  181|  3.51k|  }
  ------------------
  591|  3.51k|      exp -= large_step;
  592|  3.51k|    }
  593|  50.6k|#ifdef FASTFLOAT_64BIT_LIMB
  594|  50.6k|    uint32_t small_step = 27;
  595|  50.6k|    limb max_native = 7450580596923828125UL;
  596|       |#else
  597|       |    uint32_t small_step = 13;
  598|       |    limb max_native = 1220703125U;
  599|       |#endif
  600|  74.1k|    while (exp >= small_step) {
  ------------------
  |  Branch (600:12): [True: 23.5k, False: 50.6k]
  ------------------
  601|  23.5k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  23.5k|  {                                                                            \
  |  |  179|  23.5k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 23.5k]
  |  |  ------------------
  |  |  180|  23.5k|      return false;                                                            \
  |  |  181|  23.5k|  }
  ------------------
  602|  23.5k|      exp -= small_step;
  603|  23.5k|    }
  604|  50.6k|    if (exp != 0) {
  ------------------
  |  Branch (604:9): [True: 44.4k, False: 6.17k]
  ------------------
  605|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  606|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  607|       |      // except the workaround described there don't work here
  608|  44.4k|      FASTFLOAT_TRY(small_mul(
  ------------------
  |  |  178|  44.4k|  {                                                                            \
  |  |  179|  44.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 44.4k]
  |  |  ------------------
  |  |  180|  44.4k|      return false;                                                            \
  |  |  181|  44.4k|  }
  ------------------
  609|  44.4k|          vec, limb(((void)small_power_of_5[0], small_power_of_5[exp]))));
  610|  44.4k|    }
  611|       |
  612|  50.6k|    return true;
  613|  50.6k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  355|  3.51k|FASTFLOAT_CONSTEXPR20 bool large_mul(stackvec<size> &x, limb_span y) noexcept {
  356|  3.51k|  if (y.len() == 1) {
  ------------------
  |  Branch (356:7): [True: 0, False: 3.51k]
  ------------------
  357|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|  {                                                                            \
  |  |  179|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  180|      0|      return false;                                                            \
  |  |  181|      0|  }
  ------------------
  358|  3.51k|  } else {
  359|  3.51k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.51k|  {                                                                            \
  |  |  179|  3.51k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.51k]
  |  |  ------------------
  |  |  180|  3.51k|      return false;                                                            \
  |  |  181|  3.51k|  }
  ------------------
  360|  3.51k|  }
  361|  3.51k|  return true;
  362|  3.51k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  327|  3.51k|FASTFLOAT_CONSTEXPR20 bool long_mul(stackvec<size> &x, limb_span y) noexcept {
  328|  3.51k|  limb_span xs = limb_span(x.data, x.len());
  329|  3.51k|  stackvec<size> z(xs);
  330|  3.51k|  limb_span zs = limb_span(z.data, z.len());
  331|       |
  332|  3.51k|  if (y.len() != 0) {
  ------------------
  |  Branch (332:7): [True: 3.51k, False: 0]
  ------------------
  333|  3.51k|    limb y0 = y[0];
  334|  3.51k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.51k|  {                                                                            \
  |  |  179|  3.51k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.51k]
  |  |  ------------------
  |  |  180|  3.51k|      return false;                                                            \
  |  |  181|  3.51k|  }
  ------------------
  335|  17.5k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (335:28): [True: 14.0k, False: 3.51k]
  ------------------
  336|  14.0k|      limb yi = y[index];
  337|  14.0k|      stackvec<size> zi;
  338|  14.0k|      if (yi != 0) {
  ------------------
  |  Branch (338:11): [True: 14.0k, False: 0]
  ------------------
  339|       |        // re-use the same buffer throughout
  340|  14.0k|        zi.set_len(0);
  341|  14.0k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  14.0k|  {                                                                            \
  |  |  179|  14.0k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 14.0k]
  |  |  ------------------
  |  |  180|  14.0k|      return false;                                                            \
  |  |  181|  14.0k|  }
  ------------------
  342|  14.0k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  14.0k|  {                                                                            \
  |  |  179|  14.0k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 14.0k]
  |  |  ------------------
  |  |  180|  14.0k|      return false;                                                            \
  |  |  181|  14.0k|  }
  ------------------
  343|  14.0k|        limb_span zis = limb_span(zi.data, zi.len());
  344|  14.0k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  14.0k|  {                                                                            \
  |  |  179|  14.0k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 14.0k]
  |  |  ------------------
  |  |  180|  14.0k|      return false;                                                            \
  |  |  181|  14.0k|  }
  ------------------
  345|  14.0k|      }
  346|  14.0k|    }
  347|  3.51k|  }
  348|       |
  349|  3.51k|  x.normalize();
  350|  3.51k|  return true;
  351|  3.51k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   52|  3.51k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   53|  3.51k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  168|  3.51k|  { ((void)(x)); }
  ------------------
   54|  3.51k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   72|  51.8k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   73|  51.8k|    length = uint16_t(len);
   74|  51.8k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
   99|  17.5k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  100|  17.5k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (100:9): [True: 17.5k, False: 0]
  ------------------
  101|  17.5k|      extend_unchecked(s);
  102|  17.5k|      return true;
  103|  17.5k|    } else {
  104|      0|      return false;
  105|      0|    }
  106|  17.5k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
   93|  17.5k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
   94|  17.5k|    limb *ptr = data + length;
   95|  17.5k|    std::copy_n(s.ptr, s.len(), ptr);
   96|  17.5k|    set_len(len() + s.len());
   97|  17.5k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  290|  14.0k|                                          size_t start) noexcept {
  291|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  292|       |  // if we can't get that current range.
  293|  14.0k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (293:7): [True: 0, False: 14.0k]
  |  Branch (293:26): [True: 13.7k, False: 273]
  ------------------
  294|  13.7k|    FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  13.7k|  {                                                                            \
  |  |  179|  13.7k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 13.7k]
  |  |  ------------------
  |  |  180|  13.7k|      return false;                                                            \
  |  |  181|  13.7k|  }
  ------------------
  295|  13.7k|  }
  296|       |
  297|  14.0k|  bool carry = false;
  298|   119k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (298:26): [True: 104k, False: 14.0k]
  ------------------
  299|   104k|    limb xi = x[index + start];
  300|   104k|    limb yi = y[index];
  301|   104k|    bool c1 = false;
  302|   104k|    bool c2 = false;
  303|   104k|    xi = scalar_add(xi, yi, c1);
  304|   104k|    if (carry) {
  ------------------
  |  Branch (304:9): [True: 39.6k, False: 65.3k]
  ------------------
  305|  39.6k|      xi = scalar_add(xi, 1, c2);
  306|  39.6k|    }
  307|   104k|    x[index + start] = xi;
  308|   104k|    carry = c1 | c2;
  309|   104k|  }
  310|       |
  311|       |  // handle overflow
  312|  14.0k|  if (carry) {
  ------------------
  |  Branch (312:7): [True: 0, False: 14.0k]
  ------------------
  313|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|  {                                                                            \
  |  |  179|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  180|      0|      return false;                                                            \
  |  |  181|      0|  }
  ------------------
  314|      0|  }
  315|  14.0k|  return true;
  316|  14.0k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  123|  13.7k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  124|  13.7k|    if (new_len > capacity()) {
  ------------------
  |  Branch (124:9): [True: 0, False: 13.7k]
  ------------------
  125|      0|      return false;
  126|  13.7k|    } else {
  127|  13.7k|      resize_unchecked(new_len, value);
  128|  13.7k|      return true;
  129|  13.7k|    }
  130|  13.7k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  111|  13.7k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  112|  13.7k|    if (new_len > len()) {
  ------------------
  |  Branch (112:9): [True: 13.7k, False: 0]
  ------------------
  113|  13.7k|      size_t count = new_len - len();
  114|  13.7k|      limb *first = data + len();
  115|  13.7k|      limb *last = first + count;
  116|  13.7k|      ::std::fill(first, last, value);
  117|  13.7k|      set_len(new_len);
  118|  13.7k|    } else {
  119|      0|      set_len(new_len);
  120|      0|    }
  121|  13.7k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  144|  50.8k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  145|  50.8k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (145:12): [True: 50.8k, False: 0]
  |  Branch (145:25): [True: 0, False: 50.8k]
  ------------------
  146|      0|      length--;
  147|      0|    }
  148|  50.8k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   65|  60.2k|  FASTFLOAT_CONSTEXPR14 const limb &rindex(size_t index) const noexcept {
   66|  60.2k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|  60.2k|  { ((void)(x)); }
  ------------------
   67|  60.2k|    size_t rindex = length - index - 1;
   68|  60.2k|    return data[rindex];
   69|  60.2k|  }
_ZN10fast_float6bigint4pow2Ej:
  582|  50.5k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept { return shl(exp); }
_ZN10fast_float6bigint3shlEm:
  544|  50.5k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  545|  50.5k|    size_t rem = n % limb_bits;
  546|  50.5k|    size_t div = n / limb_bits;
  547|  50.5k|    if (rem != 0) {
  ------------------
  |  Branch (547:9): [True: 47.4k, False: 3.07k]
  ------------------
  548|  47.4k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  47.4k|  {                                                                            \
  |  |  179|  47.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 47.4k]
  |  |  ------------------
  |  |  180|  47.4k|      return false;                                                            \
  |  |  181|  47.4k|  }
  ------------------
  549|  47.4k|    }
  550|  50.5k|    if (div != 0) {
  ------------------
  |  Branch (550:9): [True: 6.40k, False: 44.1k]
  ------------------
  551|  6.40k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  6.40k|  {                                                                            \
  |  |  179|  6.40k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 6.40k]
  |  |  ------------------
  |  |  180|  6.40k|      return false;                                                            \
  |  |  181|  6.40k|  }
  ------------------
  552|  6.40k|    }
  553|  50.5k|    return true;
  554|  50.5k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  497|  47.4k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  498|       |    // Internally, for each item, we shift left by n, and add the previous
  499|       |    // right shifted limb-bits.
  500|       |    // For example, we transform (for u8) shifted left 2, to:
  501|       |    //      b10100100 b01000010
  502|       |    //      b10 b10010001 b00001000
  503|  47.4k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  173|  47.4k|  { ((void)(x)); }
  ------------------
  504|  47.4k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  173|  47.4k|  { ((void)(x)); }
  ------------------
  505|       |
  506|  47.4k|    size_t shl = n;
  507|  47.4k|    size_t shr = limb_bits - shl;
  508|  47.4k|    limb prev = 0;
  509|   160k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (509:28): [True: 112k, False: 47.4k]
  ------------------
  510|   112k|      limb xi = vec[index];
  511|   112k|      vec[index] = (xi << shl) | (prev >> shr);
  512|   112k|      prev = xi;
  513|   112k|    }
  514|       |
  515|  47.4k|    limb carry = prev >> shr;
  516|  47.4k|    if (carry != 0) {
  ------------------
  |  Branch (516:9): [True: 9.94k, False: 37.5k]
  ------------------
  517|  9.94k|      return vec.try_push(carry);
  518|  9.94k|    }
  519|  37.5k|    return true;
  520|  47.4k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  523|  6.40k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  524|  6.40k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  173|  6.40k|  { ((void)(x)); }
  ------------------
  525|  6.40k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (525:9): [True: 0, False: 6.40k]
  ------------------
  526|      0|      return false;
  527|  6.40k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (527:16): [True: 6.40k, False: 0]
  ------------------
  528|       |      // move limbs
  529|  6.40k|      limb *dst = vec.data + n;
  530|  6.40k|      const limb *src = vec.data;
  531|  6.40k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  532|       |      // fill in empty limbs
  533|  6.40k|      limb *first = vec.data;
  534|  6.40k|      limb *last = first + n;
  535|  6.40k|      ::std::fill(first, last, 0);
  536|  6.40k|      vec.set_len(n + vec.len());
  537|  6.40k|      return true;
  538|  6.40k|    } else {
  539|      0|      return true;
  540|      0|    }
  541|  6.40k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   76|  9.64k|  constexpr bool is_empty() const noexcept { return length == 0; }
_ZNK10fast_float6bigint4hi64ERb:
  443|  3.24k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool &truncated) const noexcept {
  444|  3.24k|#ifdef FASTFLOAT_64BIT_LIMB
  445|  3.24k|    if (vec.len() == 0) {
  ------------------
  |  Branch (445:9): [True: 0, False: 3.24k]
  ------------------
  446|      0|      return empty_hi64(truncated);
  447|  3.24k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (447:16): [True: 949, False: 2.29k]
  ------------------
  448|    949|      return uint64_hi64(vec.rindex(0), truncated);
  449|  2.29k|    } else {
  450|  2.29k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  451|  2.29k|      truncated |= vec.nonzero(2);
  452|  2.29k|      return result;
  453|  2.29k|    }
  454|       |#else
  455|       |    if (vec.len() == 0) {
  456|       |      return empty_hi64(truncated);
  457|       |    } else if (vec.len() == 1) {
  458|       |      return uint32_hi64(vec.rindex(0), truncated);
  459|       |    } else if (vec.len() == 2) {
  460|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  461|       |    } else {
  462|       |      uint64_t result =
  463|       |          uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  464|       |      truncated |= vec.nonzero(3);
  465|       |      return result;
  466|       |    }
  467|       |#endif
  468|  3.24k|  }
_ZN10fast_float11uint64_hi64EmRb:
  158|    949|uint64_hi64(uint64_t r0, bool &truncated) noexcept {
  159|    949|  truncated = false;
  160|    949|  int shl = leading_zeroes(r0);
  161|    949|  return r0 << shl;
  162|    949|}
_ZN10fast_float11uint64_hi64EmmRb:
  165|  2.29k|uint64_hi64(uint64_t r0, uint64_t r1, bool &truncated) noexcept {
  166|  2.29k|  int shl = leading_zeroes(r0);
  167|  2.29k|  if (shl == 0) {
  ------------------
  |  Branch (167:7): [True: 38, False: 2.25k]
  ------------------
  168|     38|    truncated = r1 != 0;
  169|     38|    return r0;
  170|  2.25k|  } else {
  171|  2.25k|    int shr = 64 - shl;
  172|  2.25k|    truncated = (r1 << shl) != 0;
  173|  2.25k|    return (r0 << shl) | (r1 >> shr);
  174|  2.25k|  }
  175|  2.29k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  134|  2.29k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  135|  2.33k|    while (index < len()) {
  ------------------
  |  Branch (135:12): [True: 557, False: 1.78k]
  ------------------
  136|    557|      if (rindex(index) != 0) {
  ------------------
  |  Branch (136:11): [True: 517, False: 40]
  ------------------
  137|    517|        return true;
  138|    517|      }
  139|     40|      index++;
  140|     40|    }
  141|  1.78k|    return false;
  142|  2.29k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  572|  3.24k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  573|  3.24k|    int lz = ctlz();
  574|  3.24k|    return int(limb_bits * vec.len()) - lz;
  575|  3.24k|  }
_ZNK10fast_float6bigint4ctlzEv:
  557|  3.24k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  558|  3.24k|    if (vec.is_empty()) {
  ------------------
  |  Branch (558:9): [True: 0, False: 3.24k]
  ------------------
  559|      0|      return 0;
  560|  3.24k|    } else {
  561|  3.24k|#ifdef FASTFLOAT_64BIT_LIMB
  562|  3.24k|      return leading_zeroes(vec.rindex(0));
  563|       |#else
  564|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  565|       |      uint64_t r0 = vec.rindex(0);
  566|       |      return leading_zeroes(r0 << 32);
  567|       |#endif
  568|  3.24k|    }
  569|  3.24k|  }
_ZN10fast_float6bigintC2Em:
  431|  47.3k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value) : vec() {
  432|  47.3k|#ifdef FASTFLOAT_64BIT_LIMB
  433|  47.3k|    vec.push_unchecked(value);
  434|       |#else
  435|       |    vec.push_unchecked(uint32_t(value));
  436|       |    vec.push_unchecked(uint32_t(value >> 32));
  437|       |#endif
  438|  47.3k|    vec.normalize();
  439|  47.3k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  476|  47.3k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint &other) const noexcept {
  477|  47.3k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (477:9): [True: 0, False: 47.3k]
  ------------------
  478|      0|      return 1;
  479|  47.3k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (479:16): [True: 0, False: 47.3k]
  ------------------
  480|      0|      return -1;
  481|  47.3k|    } else {
  482|  93.1k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (482:38): [True: 89.1k, False: 4.06k]
  ------------------
  483|  89.1k|        limb xi = vec[index - 1];
  484|  89.1k|        limb yi = other.vec[index - 1];
  485|  89.1k|        if (xi > yi) {
  ------------------
  |  Branch (485:13): [True: 11.7k, False: 77.3k]
  ------------------
  486|  11.7k|          return 1;
  487|  77.3k|        } else if (xi < yi) {
  ------------------
  |  Branch (487:20): [True: 31.5k, False: 45.8k]
  ------------------
  488|  31.5k|          return -1;
  489|  31.5k|        }
  490|  89.1k|      }
  491|  4.06k|      return 0;
  492|  47.3k|    }
  493|  47.3k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   60|   178k|  FASTFLOAT_CONSTEXPR14 const limb &operator[](size_t index) const noexcept {
   61|   178k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   178k|  { ((void)(x)); }
  ------------------
   62|   178k|    return data[index];
   63|   178k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
  103|   193k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   193k|  adjusted_mantissa answer;
  105|   193k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.42k, False: 190k]
  |  Branch (105:19): [True: 1.28k, False: 188k]
  ------------------
  106|  4.70k|    answer.power2 = 0;
  107|  4.70k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  4.70k|    return answer;
  110|  4.70k|  }
  111|   188k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 7.41k, False: 181k]
  ------------------
  112|       |    // we want to get infinity:
  113|  7.41k|    answer.power2 = binary::infinite_power();
  114|  7.41k|    answer.mantissa = 0;
  115|  7.41k|    return answer;
  116|  7.41k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   181k|  int lz = leading_zeroes(w);
  122|   181k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   181k|  value128 product =
  131|   181k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   181k|  int upperbit = int(product.high >> 63);
  142|   181k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   181k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   181k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   181k|                          binary::minimum_exponent());
  148|   181k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 966, False: 180k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|    966|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 88, False: 878]
  ------------------
  151|    966|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|     88|      answer.power2 = 0;
  154|     88|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|     88|      return answer;
  157|     88|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|    878|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0.
  162|    878|    answer.mantissa += (answer.mantissa & 1); // round up
  163|    878|    answer.mantissa >>= 1;
  164|       |    // There is a weird scenario where we don't have a subnormal but just.
  165|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  166|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  167|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  168|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  169|       |    // subnormal, but we can only know this after rounding.
  170|       |    // So we only declare a subnormal if we are smaller than the threshold.
  171|    878|    answer.power2 =
  172|    878|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (172:9): [True: 878, False: 0]
  ------------------
  173|    878|            ? 0
  174|    878|            : 1;
  175|    878|    return answer;
  176|    966|  }
  177|       |
  178|       |  // usually, we round *up*, but if we fall right in between and and we have an
  179|       |  // even basis, we need to round down
  180|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  181|   180k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (181:7): [True: 59.8k, False: 120k]
  |  Branch (181:29): [True: 58.1k, False: 1.69k]
  ------------------
  182|   180k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 53.5k, False: 4.63k]
  ------------------
  183|   180k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (183:7): [True: 8.20k, False: 45.3k]
  ------------------
  184|       |    // To be in-between two floats we need that in doing
  185|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  186|       |    //   binary::mantissa_explicit_bits() - 3);
  187|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  188|       |    // back!!!
  189|  8.20k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (189:9): [True: 4.20k, False: 4.00k]
  ------------------
  190|  4.20k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  191|  4.20k|    }
  192|  8.20k|  }
  193|       |
  194|   180k|  answer.mantissa += (answer.mantissa & 1); // round up
  195|   180k|  answer.mantissa >>= 1;
  196|   180k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (196:7): [True: 10.7k, False: 169k]
  ------------------
  197|  10.7k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  198|  10.7k|    answer.power2++; // undo previous addition
  199|  10.7k|  }
  200|       |
  201|   180k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  202|   180k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (202:7): [True: 1.18k, False: 179k]
  ------------------
  203|  1.18k|    answer.power2 = binary::infinite_power();
  204|  1.18k|    answer.mantissa = 0;
  205|  1.18k|  }
  206|   180k|  return answer;
  207|   181k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   22|   201k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   201k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   201k|  value128 firstproduct =
   28|   201k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   201k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   201k|                " precision should  be in (0,64]");
   31|   201k|  constexpr uint64_t precision_mask =
   32|   201k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   201k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   201k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 39.5k, False: 161k]
  ------------------
   35|   201k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  39.5k|    value128 secondproduct =
   40|  39.5k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  39.5k|    firstproduct.low += secondproduct.high;
   42|  39.5k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 28.3k, False: 11.2k]
  ------------------
   43|  28.3k|      firstproduct.high++;
   44|  28.3k|    }
   45|  39.5k|  }
   46|   201k|  return firstproduct;
   47|   201k|}
_ZN10fast_float6detail5powerEi:
   65|   406k|constexpr fastfloat_really_inline int32_t power(int32_t q) noexcept {
   66|   406k|  return (((152170 + 65536) * q) >> 16) + 63;
   67|   406k|}
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   88|  19.9k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  19.9k|  int lz = leading_zeroes(w);
   90|  19.9k|  w <<= lz;
   91|  19.9k|  value128 product =
   92|  19.9k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  19.9k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  19.9k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   74|  19.9k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  19.9k|  int hilz = int(w >> 63) ^ 1;
   76|  19.9k|  adjusted_mantissa answer;
   77|  19.9k|  answer.mantissa = w << hilz;
   78|  19.9k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  19.9k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  19.9k|                          invalid_am_bias);
   81|  19.9k|  return answer;
   82|  19.9k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
  103|   181k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   181k|  adjusted_mantissa answer;
  105|   181k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.21k, False: 178k]
  |  Branch (105:19): [True: 378, False: 177k]
  ------------------
  106|  3.59k|    answer.power2 = 0;
  107|  3.59k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  3.59k|    return answer;
  110|  3.59k|  }
  111|   177k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 3.73k, False: 174k]
  ------------------
  112|       |    // we want to get infinity:
  113|  3.73k|    answer.power2 = binary::infinite_power();
  114|  3.73k|    answer.mantissa = 0;
  115|  3.73k|    return answer;
  116|  3.73k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   174k|  int lz = leading_zeroes(w);
  122|   174k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   174k|  value128 product =
  131|   174k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   174k|  int upperbit = int(product.high >> 63);
  142|   174k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   174k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   174k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   174k|                          binary::minimum_exponent());
  148|   174k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 3.06k, False: 171k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|  3.06k|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 110, False: 2.95k]
  ------------------
  151|  3.06k|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|    110|      answer.power2 = 0;
  154|    110|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|    110|      return answer;
  157|    110|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|  2.95k|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0.
  162|  2.95k|    answer.mantissa += (answer.mantissa & 1); // round up
  163|  2.95k|    answer.mantissa >>= 1;
  164|       |    // There is a weird scenario where we don't have a subnormal but just.
  165|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  166|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  167|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  168|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  169|       |    // subnormal, but we can only know this after rounding.
  170|       |    // So we only declare a subnormal if we are smaller than the threshold.
  171|  2.95k|    answer.power2 =
  172|  2.95k|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (172:9): [True: 2.95k, False: 0]
  ------------------
  173|  2.95k|            ? 0
  174|  2.95k|            : 1;
  175|  2.95k|    return answer;
  176|  3.06k|  }
  177|       |
  178|       |  // usually, we round *up*, but if we fall right in between and and we have an
  179|       |  // even basis, we need to round down
  180|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  181|   171k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (181:7): [True: 49.5k, False: 121k]
  |  Branch (181:29): [True: 27.1k, False: 22.3k]
  ------------------
  182|   171k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 22.3k, False: 4.82k]
  ------------------
  183|   171k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (183:7): [True: 4.74k, False: 17.6k]
  ------------------
  184|       |    // To be in-between two floats we need that in doing
  185|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  186|       |    //   binary::mantissa_explicit_bits() - 3);
  187|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  188|       |    // back!!!
  189|  4.74k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (189:9): [True: 3.70k, False: 1.04k]
  ------------------
  190|  3.70k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  191|  3.70k|    }
  192|  4.74k|  }
  193|       |
  194|   171k|  answer.mantissa += (answer.mantissa & 1); // round up
  195|   171k|  answer.mantissa >>= 1;
  196|   171k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (196:7): [True: 9.97k, False: 161k]
  ------------------
  197|  9.97k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  198|  9.97k|    answer.power2++; // undo previous addition
  199|  9.97k|  }
  200|       |
  201|   171k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  202|   171k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (202:7): [True: 336, False: 170k]
  ------------------
  203|    336|    answer.power2 = binary::infinite_power();
  204|    336|    answer.mantissa = 0;
  205|    336|  }
  206|   171k|  return answer;
  207|   174k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   22|   204k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   204k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   204k|  value128 firstproduct =
   28|   204k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   204k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   204k|                " precision should  be in (0,64]");
   31|   204k|  constexpr uint64_t precision_mask =
   32|   204k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   204k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   204k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 81.6k, False: 123k]
  ------------------
   35|   204k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  81.6k|    value128 secondproduct =
   40|  81.6k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  81.6k|    firstproduct.low += secondproduct.high;
   42|  81.6k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 25.5k, False: 56.0k]
  ------------------
   43|  25.5k|      firstproduct.high++;
   44|  25.5k|    }
   45|  81.6k|  }
   46|   204k|  return firstproduct;
   47|   204k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   88|  30.6k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  30.6k|  int lz = leading_zeroes(w);
   90|  30.6k|  w <<= lz;
   91|  30.6k|  value128 product =
   92|  30.6k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  30.6k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  30.6k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   74|  30.6k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  30.6k|  int hilz = int(w >> 63) ^ 1;
   76|  30.6k|  adjusted_mantissa answer;
   77|  30.6k|  answer.mantissa = w << hilz;
   78|  30.6k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  30.6k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  30.6k|                          invalid_am_bias);
   81|  30.6k|  return answer;
   82|  30.6k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|  19.9k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|  19.9k|  am.power2 -= invalid_am_bias;
  438|       |
  439|  19.9k|  int32_t sci_exp = scientific_exponent(num);
  440|  19.9k|  size_t max_digits = binary_format<T>::max_digits();
  441|  19.9k|  size_t digits = 0;
  442|  19.9k|  bigint bigmant;
  443|  19.9k|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|  19.9k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|  19.9k|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 514, False: 19.4k]
  ------------------
  447|    514|    return positive_digit_comp<T>(bigmant, exponent);
  448|  19.4k|  } else {
  449|  19.4k|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|  19.4k|  }
  451|  19.9k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   43|  50.4k|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|  50.4k|  uint64_t mantissa = num.mantissa;
   45|  50.4k|  int32_t exponent = int32_t(num.exponent);
   46|   252k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 201k, False: 50.4k]
  ------------------
   47|   201k|    mantissa /= 10000;
   48|   201k|    exponent += 4;
   49|   201k|  }
   50|   100k|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 50.4k, False: 50.4k]
  ------------------
   51|  50.4k|    mantissa /= 100;
   52|  50.4k|    exponent += 2;
   53|  50.4k|  }
   54|  50.4k|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 50.4k]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|  50.4k|  return exponent;
   59|  50.4k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  260|  50.4k|               size_t max_digits, size_t &digits) noexcept {
  261|       |  // try to minimize the number of big integer and scalar multiplication.
  262|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  263|       |  // scalar value (9 or 19 digits) for each step.
  264|  50.4k|  size_t counter = 0;
  265|  50.4k|  digits = 0;
  266|  50.4k|  limb value = 0;
  267|  50.4k|#ifdef FASTFLOAT_64BIT_LIMB
  268|  50.4k|  size_t step = 19;
  269|       |#else
  270|       |  size_t step = 9;
  271|       |#endif
  272|       |
  273|       |  // process all integer digits.
  274|  50.4k|  UC const *p = num.integer.ptr;
  275|  50.4k|  UC const *pend = p + num.integer.len();
  276|  50.4k|  skip_zeros(p, pend);
  277|       |  // process all digits, in increments of step per loop
  278|   112k|  while (p != pend) {
  ------------------
  |  Branch (278:10): [True: 61.9k, False: 50.2k]
  ------------------
  279|   103k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (279:12): [True: 54.1k, False: 49.7k]
  |  Branch (279:45): [True: 42.1k, False: 11.9k]
  ------------------
  280|   103k|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (280:12): [True: 41.8k, False: 257]
  ------------------
  281|  41.8k|      parse_eight_digits(p, value, counter, digits);
  282|  41.8k|    }
  283|   194k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (283:12): [True: 179k, False: 14.2k]
  |  Branch (283:30): [True: 132k, False: 47.4k]
  |  Branch (283:43): [True: 132k, False: 257]
  ------------------
  284|   132k|      parse_one_digit(p, value, counter, digits);
  285|   132k|    }
  286|  61.9k|    if (digits == max_digits) {
  ------------------
  |  Branch (286:9): [True: 257, False: 61.7k]
  ------------------
  287|       |      // add the temporary value, then check if we've truncated any digits
  288|    257|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  289|    257|      bool truncated = is_truncated(p, pend);
  290|    257|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (290:11): [True: 219, False: 38]
  ------------------
  291|    219|        truncated |= is_truncated(num.fraction);
  292|    219|      }
  293|    257|      if (truncated) {
  ------------------
  |  Branch (293:11): [True: 153, False: 104]
  ------------------
  294|    153|        round_up_bigint(result, digits);
  295|    153|      }
  296|    257|      return;
  297|  61.7k|    } else {
  298|  61.7k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  299|  61.7k|      counter = 0;
  300|  61.7k|      value = 0;
  301|  61.7k|    }
  302|  61.9k|  }
  303|       |
  304|       |  // add our fraction digits, if they're available.
  305|  50.2k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (305:7): [True: 47.3k, False: 2.82k]
  ------------------
  306|  47.3k|    p = num.fraction.ptr;
  307|  47.3k|    pend = p + num.fraction.len();
  308|  47.3k|    if (digits == 0) {
  ------------------
  |  Branch (308:9): [True: 2.75k, False: 44.6k]
  ------------------
  309|  2.75k|      skip_zeros(p, pend);
  310|  2.75k|    }
  311|       |    // process all digits, in increments of step per loop
  312|   156k|    while (p != pend) {
  ------------------
  |  Branch (312:12): [True: 111k, False: 44.5k]
  ------------------
  313|   268k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (313:14): [True: 210k, False: 57.6k]
  |  Branch (313:47): [True: 158k, False: 52.7k]
  ------------------
  314|   268k|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (314:14): [True: 156k, False: 1.29k]
  ------------------
  315|   156k|        parse_eight_digits(p, value, counter, digits);
  316|   156k|      }
  317|   465k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (317:14): [True: 399k, False: 65.8k]
  |  Branch (317:32): [True: 356k, False: 43.5k]
  |  Branch (317:45): [True: 354k, False: 2.25k]
  ------------------
  318|   354k|        parse_one_digit(p, value, counter, digits);
  319|   354k|      }
  320|   111k|      if (digits == max_digits) {
  ------------------
  |  Branch (320:11): [True: 2.82k, False: 108k]
  ------------------
  321|       |        // add the temporary value, then check if we've truncated any digits
  322|  2.82k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  323|  2.82k|        bool truncated = is_truncated(p, pend);
  324|  2.82k|        if (truncated) {
  ------------------
  |  Branch (324:13): [True: 1.98k, False: 834]
  ------------------
  325|  1.98k|          round_up_bigint(result, digits);
  326|  1.98k|        }
  327|  2.82k|        return;
  328|   108k|      } else {
  329|   108k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  330|   108k|        counter = 0;
  331|   108k|        value = 0;
  332|   108k|      }
  333|   111k|    }
  334|  47.3k|  }
  335|       |
  336|  47.3k|  if (counter != 0) {
  ------------------
  |  Branch (336:7): [True: 0, False: 47.3k]
  ------------------
  337|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  338|      0|  }
  339|  47.3k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  175|  53.2k|skip_zeros(UC const *&first, UC const *last) noexcept {
  176|  53.2k|  uint64_t val;
  177|  65.3k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (177:10): [Folded - Ignored]
  ------------------
  178|  65.3k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (178:10): [True: 30.1k, False: 35.2k]
  ------------------
  179|  30.1k|    ::memcpy(&val, first, sizeof(uint64_t));
  180|  30.1k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (180:9): [True: 18.0k, False: 12.1k]
  ------------------
  181|  18.0k|      break;
  182|  18.0k|    }
  183|  12.1k|    first += int_cmp_len<UC>();
  184|  12.1k|  }
  185|  99.0k|  while (first != last) {
  ------------------
  |  Branch (185:10): [True: 96.3k, False: 2.75k]
  ------------------
  186|  96.3k|    if (*first != UC('0')) {
  ------------------
  |  Branch (186:9): [True: 50.4k, False: 45.8k]
  ------------------
  187|  50.4k|      break;
  188|  50.4k|    }
  189|  45.8k|    first++;
  190|  45.8k|  }
  191|  53.2k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  225|   198k|                   size_t &count) noexcept {
  226|   198k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  227|   198k|  p += 8;
  228|   198k|  counter += 8;
  229|   198k|  count += 8;
  230|   198k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  235|   486k|                size_t &count) noexcept {
  236|   486k|  value = value * 10 + limb(*p - UC('0'));
  237|   486k|  p++;
  238|   486k|  counter++;
  239|   486k|  count++;
  240|   486k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  243|   176k|add_native(bigint &big, limb power, limb value) noexcept {
  244|   176k|  big.mul(power);
  245|   176k|  big.add(value);
  246|   176k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  197|  3.29k|is_truncated(UC const *first, UC const *last) noexcept {
  198|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  199|  3.29k|  uint64_t val;
  200|  6.04k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (200:10): [Folded - Ignored]
  ------------------
  201|  6.04k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (201:10): [True: 3.77k, False: 2.27k]
  ------------------
  202|  3.77k|    ::memcpy(&val, first, sizeof(uint64_t));
  203|  3.77k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (203:9): [True: 1.02k, False: 2.75k]
  ------------------
  204|  1.02k|      return true;
  205|  1.02k|    }
  206|  2.75k|    first += int_cmp_len<UC>();
  207|  2.75k|  }
  208|  3.86k|  while (first != last) {
  ------------------
  |  Branch (208:10): [True: 2.79k, False: 1.07k]
  ------------------
  209|  2.79k|    if (*first != UC('0')) {
  ------------------
  |  Branch (209:9): [True: 1.19k, False: 1.59k]
  ------------------
  210|  1.19k|      return true;
  211|  1.19k|    }
  212|  1.59k|    ++first;
  213|  1.59k|  }
  214|  1.07k|  return false;
  215|  2.27k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  218|    219|is_truncated(span<const UC> s) noexcept {
  219|    219|  return is_truncated(s.ptr, s.ptr + s.len());
  220|    219|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  249|  2.14k|round_up_bigint(bigint &big, size_t &count) noexcept {
  250|       |  // need to round-up the digits, but need to avoid rounding
  251|       |  // ....9999 to ...10000, which could cause a false halfway point.
  252|  2.14k|  add_native(big, 10, 1);
  253|  2.14k|  count++;
  254|  2.14k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  343|    514|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  344|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  168|    514|  { ((void)(x)); }
  ------------------
  345|    514|  adjusted_mantissa answer;
  346|    514|  bool truncated;
  347|    514|  answer.mantissa = bigmant.hi64(truncated);
  348|    514|  int bias = binary_format<T>::mantissa_explicit_bits() -
  349|    514|             binary_format<T>::minimum_exponent();
  350|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  351|       |
  352|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|    514|    round_nearest_tie_even(
  354|    514|        a, shift,
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  357|    514|                 (is_odd && is_halfway);
  358|    514|        });
  359|    514|  });
  360|       |
  361|    514|  return answer;
  362|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|    514|                                                         callback cb) noexcept {
  111|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 514]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|    514|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|    514|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 514]
  ------------------
  129|    514|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 514]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  352|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|    514|    round_nearest_tie_even(
  354|    514|        a, shift,
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  357|    514|                 (is_odd && is_halfway);
  358|    514|        });
  359|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|    514|                       callback cb) noexcept {
  146|    514|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 514]
  ------------------
  147|    514|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 514]
  ------------------
  148|    514|  uint64_t truncated_bits = am.mantissa & mask;
  149|    514|  bool is_above = truncated_bits > halfway;
  150|    514|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|    514|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 514]
  ------------------
  154|      0|    am.mantissa = 0;
  155|    514|  } else {
  156|    514|    am.mantissa >>= shift;
  157|    514|  }
  158|    514|  am.power2 += shift;
  159|       |
  160|    514|  bool is_odd = (am.mantissa & 1) == 1;
  161|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (356:18): [True: 74, False: 440]
  |  Branch (356:31): [True: 348, False: 92]
  |  Branch (356:45): [True: 58, False: 290]
  ------------------
  357|    514|                 (is_odd && is_halfway);
  ------------------
  |  Branch (357:19): [True: 56, False: 326]
  |  Branch (357:29): [True: 32, False: 24]
  ------------------
  358|    514|        });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  371|  19.4k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  372|  19.4k|  bigint &real_digits = bigmant;
  373|  19.4k|  int32_t real_exp = exponent;
  374|       |
  375|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  376|  19.4k|  adjusted_mantissa am_b = am;
  377|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  378|       |  // -Wnoexcept-type.
  379|  19.4k|  round<T>(am_b,
  380|  19.4k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  381|  19.4k|  T b;
  382|  19.4k|  to_float(false, am_b, b);
  383|  19.4k|  adjusted_mantissa theor = to_extended_halfway(b);
  384|  19.4k|  bigint theor_digits(theor.mantissa);
  385|  19.4k|  int32_t theor_exp = theor.power2;
  386|       |
  387|       |  // scale real digits and theor digits to be same power.
  388|  19.4k|  int32_t pow2_exp = theor_exp - real_exp;
  389|  19.4k|  uint32_t pow5_exp = uint32_t(-real_exp);
  390|  19.4k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (390:7): [True: 19.4k, False: 0]
  ------------------
  391|  19.4k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  168|  19.4k|  { ((void)(x)); }
  ------------------
  392|  19.4k|  }
  393|  19.4k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (393:7): [True: 19.4k, False: 0]
  ------------------
  394|  19.4k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  168|  19.4k|  { ((void)(x)); }
  ------------------
  395|  19.4k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (395:14): [True: 0, False: 0]
  ------------------
  396|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  168|      0|  { ((void)(x)); }
  ------------------
  397|      0|  }
  398|       |
  399|       |  // compare digits, and use it to director rounding
  400|  19.4k|  int ord = real_digits.compare(theor_digits);
  401|  19.4k|  adjusted_mantissa answer = am;
  402|  19.4k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  19.4k|    round_nearest_tie_even(
  404|  19.4k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  19.4k|          (void)_;  // not needed, since we've done our comparison
  406|  19.4k|          (void)__; // not needed, since we've done our comparison
  407|  19.4k|          if (ord > 0) {
  408|  19.4k|            return true;
  409|  19.4k|          } else if (ord < 0) {
  410|  19.4k|            return false;
  411|  19.4k|          } else {
  412|  19.4k|            return is_odd;
  413|  19.4k|          }
  414|  19.4k|        });
  415|  19.4k|  });
  416|       |
  417|  19.4k|  return answer;
  418|  19.4k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  19.4k|                                                         callback cb) noexcept {
  111|  19.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  19.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 19.4k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  19.4k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  19.4k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 19.4k]
  ------------------
  129|  19.4k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  19.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  19.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 19.4k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  19.4k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  380|  19.4k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  165|  47.3k|round_down(adjusted_mantissa &am, int32_t shift) noexcept {
  166|  47.3k|  if (shift == 64) {
  ------------------
  |  Branch (166:7): [True: 0, False: 47.3k]
  ------------------
  167|      0|    am.mantissa = 0;
  168|  47.3k|  } else {
  169|  47.3k|    am.mantissa >>= shift;
  170|  47.3k|  }
  171|  47.3k|  am.power2 += shift;
  172|  47.3k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   99|  19.4k|to_extended_halfway(T value) noexcept {
  100|  19.4k|  adjusted_mantissa am = to_extended(value);
  101|  19.4k|  am.mantissa <<= 1;
  102|  19.4k|  am.mantissa += 1;
  103|  19.4k|  am.power2 -= 1;
  104|  19.4k|  return am;
  105|  19.4k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   64|  19.4k|to_extended(T value) noexcept {
   65|  19.4k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   66|  19.4k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  19.4k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  19.4k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  19.4k|  adjusted_mantissa am;
   71|  19.4k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  19.4k|                 binary_format<T>::minimum_exponent();
   73|  19.4k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  19.4k|  ::memcpy(&bits, &value, sizeof(T));
   78|  19.4k|#endif
   79|  19.4k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 0, False: 19.4k]
  ------------------
   80|       |    // denormal
   81|      0|    am.power2 = 1 - bias;
   82|      0|    am.mantissa = bits & mantissa_mask;
   83|  19.4k|  } else {
   84|       |    // normal
   85|  19.4k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  19.4k|                        binary_format<T>::mantissa_explicit_bits());
   87|  19.4k|    am.power2 -= bias;
   88|  19.4k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  19.4k|  }
   90|       |
   91|  19.4k|  return am;
   92|  19.4k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  19.4k|                                                         callback cb) noexcept {
  111|  19.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  19.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 19.4k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  19.4k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  19.4k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 19.4k]
  ------------------
  129|  19.4k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  19.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  19.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 19.4k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  19.4k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  402|  19.4k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  19.4k|    round_nearest_tie_even(
  404|  19.4k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  19.4k|          (void)_;  // not needed, since we've done our comparison
  406|  19.4k|          (void)__; // not needed, since we've done our comparison
  407|  19.4k|          if (ord > 0) {
  408|  19.4k|            return true;
  409|  19.4k|          } else if (ord < 0) {
  410|  19.4k|            return false;
  411|  19.4k|          } else {
  412|  19.4k|            return is_odd;
  413|  19.4k|          }
  414|  19.4k|        });
  415|  19.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  19.4k|                       callback cb) noexcept {
  146|  19.4k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 19.4k]
  ------------------
  147|  19.4k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 19.4k]
  ------------------
  148|  19.4k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  19.4k|  bool is_above = truncated_bits > halfway;
  150|  19.4k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  19.4k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 19.4k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  19.4k|  } else {
  156|  19.4k|    am.mantissa >>= shift;
  157|  19.4k|  }
  158|  19.4k|  am.power2 += shift;
  159|       |
  160|  19.4k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  19.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  19.4k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  404|  19.4k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  19.4k|          (void)_;  // not needed, since we've done our comparison
  406|  19.4k|          (void)__; // not needed, since we've done our comparison
  407|  19.4k|          if (ord > 0) {
  ------------------
  |  Branch (407:15): [True: 210, False: 19.2k]
  ------------------
  408|    210|            return true;
  409|  19.2k|          } else if (ord < 0) {
  ------------------
  |  Branch (409:22): [True: 15.6k, False: 3.57k]
  ------------------
  410|  15.6k|            return false;
  411|  15.6k|          } else {
  412|  3.57k|            return is_odd;
  413|  3.57k|          }
  414|  19.4k|        });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   43|    144|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|    144|  uint64_t mantissa = num.mantissa;
   45|    144|  int32_t exponent = int32_t(num.exponent);
   46|    720|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 576, False: 144]
  ------------------
   47|    576|    mantissa /= 10000;
   48|    576|    exponent += 4;
   49|    576|  }
   50|    288|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 144, False: 144]
  ------------------
   51|    144|    mantissa /= 100;
   52|    144|    exponent += 2;
   53|    144|  }
   54|    144|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 144]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|    144|  return exponent;
   59|    144|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  260|    144|               size_t max_digits, size_t &digits) noexcept {
  261|       |  // try to minimize the number of big integer and scalar multiplication.
  262|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  263|       |  // scalar value (9 or 19 digits) for each step.
  264|    144|  size_t counter = 0;
  265|    144|  digits = 0;
  266|    144|  limb value = 0;
  267|    144|#ifdef FASTFLOAT_64BIT_LIMB
  268|    144|  size_t step = 19;
  269|       |#else
  270|       |  size_t step = 9;
  271|       |#endif
  272|       |
  273|       |  // process all integer digits.
  274|    144|  UC const *p = num.integer.ptr;
  275|    144|  UC const *pend = p + num.integer.len();
  276|    144|  skip_zeros(p, pend);
  277|       |  // process all digits, in increments of step per loop
  278|    338|  while (p != pend) {
  ------------------
  |  Branch (278:10): [True: 194, False: 144]
  ------------------
  279|    294|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (279:12): [True: 118, False: 176]
  |  Branch (279:45): [True: 100, False: 18]
  ------------------
  280|    294|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (280:12): [True: 100, False: 0]
  ------------------
  281|    100|      parse_eight_digits(p, value, counter, digits);
  282|    100|    }
  283|  1.15k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (283:12): [True: 1.10k, False: 50]
  |  Branch (283:30): [True: 962, False: 144]
  |  Branch (283:43): [True: 962, False: 0]
  ------------------
  284|    962|      parse_one_digit(p, value, counter, digits);
  285|    962|    }
  286|    194|    if (digits == max_digits) {
  ------------------
  |  Branch (286:9): [True: 0, False: 194]
  ------------------
  287|       |      // add the temporary value, then check if we've truncated any digits
  288|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  289|      0|      bool truncated = is_truncated(p, pend);
  290|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (290:11): [True: 0, False: 0]
  ------------------
  291|      0|        truncated |= is_truncated(num.fraction);
  292|      0|      }
  293|      0|      if (truncated) {
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        round_up_bigint(result, digits);
  295|      0|      }
  296|      0|      return;
  297|    194|    } else {
  298|    194|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  299|    194|      counter = 0;
  300|    194|      value = 0;
  301|    194|    }
  302|    194|  }
  303|       |
  304|       |  // add our fraction digits, if they're available.
  305|    144|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (305:7): [True: 94, False: 50]
  ------------------
  306|     94|    p = num.fraction.ptr;
  307|     94|    pend = p + num.fraction.len();
  308|     94|    if (digits == 0) {
  ------------------
  |  Branch (308:9): [True: 0, False: 94]
  ------------------
  309|      0|      skip_zeros(p, pend);
  310|      0|    }
  311|       |    // process all digits, in increments of step per loop
  312|    246|    while (p != pend) {
  ------------------
  |  Branch (312:12): [True: 152, False: 94]
  ------------------
  313|    322|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (313:14): [True: 192, False: 130]
  |  Branch (313:47): [True: 170, False: 22]
  ------------------
  314|    322|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (314:14): [True: 170, False: 0]
  ------------------
  315|    170|        parse_eight_digits(p, value, counter, digits);
  316|    170|      }
  317|    652|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (317:14): [True: 594, False: 58]
  |  Branch (317:32): [True: 500, False: 94]
  |  Branch (317:45): [True: 500, False: 0]
  ------------------
  318|    500|        parse_one_digit(p, value, counter, digits);
  319|    500|      }
  320|    152|      if (digits == max_digits) {
  ------------------
  |  Branch (320:11): [True: 0, False: 152]
  ------------------
  321|       |        // add the temporary value, then check if we've truncated any digits
  322|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  323|      0|        bool truncated = is_truncated(p, pend);
  324|      0|        if (truncated) {
  ------------------
  |  Branch (324:13): [True: 0, False: 0]
  ------------------
  325|      0|          round_up_bigint(result, digits);
  326|      0|        }
  327|      0|        return;
  328|    152|      } else {
  329|    152|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  330|    152|        counter = 0;
  331|    152|        value = 0;
  332|    152|      }
  333|    152|    }
  334|     94|  }
  335|       |
  336|    144|  if (counter != 0) {
  ------------------
  |  Branch (336:7): [True: 0, False: 144]
  ------------------
  337|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  338|      0|  }
  339|    144|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  175|    144|skip_zeros(UC const *&first, UC const *last) noexcept {
  176|    144|  uint64_t val;
  177|    144|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (177:10): [Folded - Ignored]
  ------------------
  178|    144|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (178:10): [True: 144, False: 0]
  ------------------
  179|    144|    ::memcpy(&val, first, sizeof(uint64_t));
  180|    144|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (180:9): [True: 144, False: 0]
  ------------------
  181|    144|      break;
  182|    144|    }
  183|      0|    first += int_cmp_len<UC>();
  184|      0|  }
  185|    162|  while (first != last) {
  ------------------
  |  Branch (185:10): [True: 162, False: 0]
  ------------------
  186|    162|    if (*first != UC('0')) {
  ------------------
  |  Branch (186:9): [True: 144, False: 18]
  ------------------
  187|    144|      break;
  188|    144|    }
  189|     18|    first++;
  190|     18|  }
  191|    144|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  225|    270|                   size_t &count) noexcept {
  226|    270|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  227|    270|  p += 8;
  228|    270|  counter += 8;
  229|    270|  count += 8;
  230|    270|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  235|  1.46k|                size_t &count) noexcept {
  236|  1.46k|  value = value * 10 + limb(*p - UC('0'));
  237|  1.46k|  p++;
  238|  1.46k|  counter++;
  239|  1.46k|  count++;
  240|  1.46k|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|  30.4k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|  30.4k|  am.power2 -= invalid_am_bias;
  438|       |
  439|  30.4k|  int32_t sci_exp = scientific_exponent(num);
  440|  30.4k|  size_t max_digits = binary_format<T>::max_digits();
  441|  30.4k|  size_t digits = 0;
  442|  30.4k|  bigint bigmant;
  443|  30.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|  30.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|  30.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 2.68k, False: 27.8k]
  ------------------
  447|  2.68k|    return positive_digit_comp<T>(bigmant, exponent);
  448|  27.8k|  } else {
  449|  27.8k|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|  27.8k|  }
  451|  30.4k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  343|  2.73k|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  344|  2.73k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  168|  2.73k|  { ((void)(x)); }
  ------------------
  345|  2.73k|  adjusted_mantissa answer;
  346|  2.73k|  bool truncated;
  347|  2.73k|  answer.mantissa = bigmant.hi64(truncated);
  348|  2.73k|  int bias = binary_format<T>::mantissa_explicit_bits() -
  349|  2.73k|             binary_format<T>::minimum_exponent();
  350|  2.73k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  351|       |
  352|  2.73k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|  2.73k|    round_nearest_tie_even(
  354|  2.73k|        a, shift,
  355|  2.73k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  2.73k|          return is_above || (is_halfway && truncated) ||
  357|  2.73k|                 (is_odd && is_halfway);
  358|  2.73k|        });
  359|  2.73k|  });
  360|       |
  361|  2.73k|  return answer;
  362|  2.73k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|  2.73k|                                                         callback cb) noexcept {
  111|  2.73k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  2.73k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 2.73k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  2.73k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  2.73k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 429, False: 2.30k]
  ------------------
  129|  2.73k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|    429|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|    429|    am.power2++;
  132|    429|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  2.73k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  2.73k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 2.73k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  2.73k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  352|  2.73k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|  2.73k|    round_nearest_tie_even(
  354|  2.73k|        a, shift,
  355|  2.73k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  2.73k|          return is_above || (is_halfway && truncated) ||
  357|  2.73k|                 (is_odd && is_halfway);
  358|  2.73k|        });
  359|  2.73k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|  2.73k|                       callback cb) noexcept {
  146|  2.73k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 2.73k]
  ------------------
  147|  2.73k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 2.73k]
  ------------------
  148|  2.73k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  2.73k|  bool is_above = truncated_bits > halfway;
  150|  2.73k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  2.73k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 2.73k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  2.73k|  } else {
  156|  2.73k|    am.mantissa >>= shift;
  157|  2.73k|  }
  158|  2.73k|  am.power2 += shift;
  159|       |
  160|  2.73k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  2.73k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  2.73k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  355|  2.73k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  2.73k|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (356:18): [True: 479, False: 2.25k]
  |  Branch (356:31): [True: 1.58k, False: 666]
  |  Branch (356:45): [True: 615, False: 972]
  ------------------
  357|  2.73k|                 (is_odd && is_halfway);
  ------------------
  |  Branch (357:19): [True: 247, False: 1.39k]
  |  Branch (357:29): [True: 60, False: 187]
  ------------------
  358|  2.73k|        });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  371|  27.9k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  372|  27.9k|  bigint &real_digits = bigmant;
  373|  27.9k|  int32_t real_exp = exponent;
  374|       |
  375|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  376|  27.9k|  adjusted_mantissa am_b = am;
  377|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  378|       |  // -Wnoexcept-type.
  379|  27.9k|  round<T>(am_b,
  380|  27.9k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  381|  27.9k|  T b;
  382|  27.9k|  to_float(false, am_b, b);
  383|  27.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  384|  27.9k|  bigint theor_digits(theor.mantissa);
  385|  27.9k|  int32_t theor_exp = theor.power2;
  386|       |
  387|       |  // scale real digits and theor digits to be same power.
  388|  27.9k|  int32_t pow2_exp = theor_exp - real_exp;
  389|  27.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  390|  27.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (390:7): [True: 27.9k, False: 0]
  ------------------
  391|  27.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  168|  27.9k|  { ((void)(x)); }
  ------------------
  392|  27.9k|  }
  393|  27.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (393:7): [True: 2.48k, False: 25.4k]
  ------------------
  394|  2.48k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  168|  2.48k|  { ((void)(x)); }
  ------------------
  395|  25.4k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (395:14): [True: 25.3k, False: 74]
  ------------------
  396|  25.3k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  168|  25.3k|  { ((void)(x)); }
  ------------------
  397|  25.3k|  }
  398|       |
  399|       |  // compare digits, and use it to director rounding
  400|  27.9k|  int ord = real_digits.compare(theor_digits);
  401|  27.9k|  adjusted_mantissa answer = am;
  402|  27.9k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  27.9k|    round_nearest_tie_even(
  404|  27.9k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  27.9k|          (void)_;  // not needed, since we've done our comparison
  406|  27.9k|          (void)__; // not needed, since we've done our comparison
  407|  27.9k|          if (ord > 0) {
  408|  27.9k|            return true;
  409|  27.9k|          } else if (ord < 0) {
  410|  27.9k|            return false;
  411|  27.9k|          } else {
  412|  27.9k|            return is_odd;
  413|  27.9k|          }
  414|  27.9k|        });
  415|  27.9k|  });
  416|       |
  417|  27.9k|  return answer;
  418|  27.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  27.9k|                                                         callback cb) noexcept {
  111|  27.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  27.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 108, False: 27.8k]
  ------------------
  113|       |    // have a denormal float
  114|    108|    int32_t shift = -am.power2 + 1;
  115|    108|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    108|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 108, False: 0]
  ------------------
  118|    108|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    108|                    ? 0
  120|    108|                    : 1;
  121|    108|    return;
  122|    108|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  27.8k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  27.8k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 27.8k]
  ------------------
  129|  27.8k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  27.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  27.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 27.8k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  27.8k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  380|  27.9k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   99|  27.9k|to_extended_halfway(T value) noexcept {
  100|  27.9k|  adjusted_mantissa am = to_extended(value);
  101|  27.9k|  am.mantissa <<= 1;
  102|  27.9k|  am.mantissa += 1;
  103|  27.9k|  am.power2 -= 1;
  104|  27.9k|  return am;
  105|  27.9k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   64|  27.9k|to_extended(T value) noexcept {
   65|  27.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   66|  27.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  27.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  27.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  27.9k|  adjusted_mantissa am;
   71|  27.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  27.9k|                 binary_format<T>::minimum_exponent();
   73|  27.9k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  27.9k|  ::memcpy(&bits, &value, sizeof(T));
   78|  27.9k|#endif
   79|  27.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 108, False: 27.8k]
  ------------------
   80|       |    // denormal
   81|    108|    am.power2 = 1 - bias;
   82|    108|    am.mantissa = bits & mantissa_mask;
   83|  27.8k|  } else {
   84|       |    // normal
   85|  27.8k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  27.8k|                        binary_format<T>::mantissa_explicit_bits());
   87|  27.8k|    am.power2 -= bias;
   88|  27.8k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  27.8k|  }
   90|       |
   91|  27.9k|  return am;
   92|  27.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  27.9k|                                                         callback cb) noexcept {
  111|  27.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  27.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 108, False: 27.8k]
  ------------------
  113|       |    // have a denormal float
  114|    108|    int32_t shift = -am.power2 + 1;
  115|    108|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    108|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 108, False: 0]
  ------------------
  118|    108|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    108|                    ? 0
  120|    108|                    : 1;
  121|    108|    return;
  122|    108|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  27.8k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  27.8k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 74, False: 27.7k]
  ------------------
  129|  27.8k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|     74|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|     74|    am.power2++;
  132|     74|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  27.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  27.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 27.8k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  27.8k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  402|  27.9k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  27.9k|    round_nearest_tie_even(
  404|  27.9k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  27.9k|          (void)_;  // not needed, since we've done our comparison
  406|  27.9k|          (void)__; // not needed, since we've done our comparison
  407|  27.9k|          if (ord > 0) {
  408|  27.9k|            return true;
  409|  27.9k|          } else if (ord < 0) {
  410|  27.9k|            return false;
  411|  27.9k|          } else {
  412|  27.9k|            return is_odd;
  413|  27.9k|          }
  414|  27.9k|        });
  415|  27.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  27.9k|                       callback cb) noexcept {
  146|  27.9k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 27.9k]
  ------------------
  147|  27.9k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 27.9k]
  ------------------
  148|  27.9k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  27.9k|  bool is_above = truncated_bits > halfway;
  150|  27.9k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  27.9k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 27.9k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  27.9k|  } else {
  156|  27.9k|    am.mantissa >>= shift;
  157|  27.9k|  }
  158|  27.9k|  am.power2 += shift;
  159|       |
  160|  27.9k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  27.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  27.9k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  404|  27.9k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  27.9k|          (void)_;  // not needed, since we've done our comparison
  406|  27.9k|          (void)__; // not needed, since we've done our comparison
  407|  27.9k|          if (ord > 0) {
  ------------------
  |  Branch (407:15): [True: 11.5k, False: 16.3k]
  ------------------
  408|  11.5k|            return true;
  409|  16.3k|          } else if (ord < 0) {
  ------------------
  |  Branch (409:22): [True: 15.8k, False: 488]
  ------------------
  410|  15.8k|            return false;
  411|  15.8k|          } else {
  412|    488|            return is_odd;
  413|    488|          }
  414|  27.9k|        });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|    144|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|    144|  am.power2 -= invalid_am_bias;
  438|       |
  439|    144|  int32_t sci_exp = scientific_exponent(num);
  440|    144|  size_t max_digits = binary_format<T>::max_digits();
  441|    144|  size_t digits = 0;
  442|    144|  bigint bigmant;
  443|    144|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|    144|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|    144|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 50, False: 94]
  ------------------
  447|     50|    return positive_digit_comp<T>(bigmant, exponent);
  448|     94|  } else {
  449|     94|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|     94|  }
  451|    144|}

_ZN10fast_float4spanIKcEC2Ev:
  234|  1.73M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  233|  1.02M|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  236|   347k|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  497|   615k|inline constexpr int binary_format<float>::min_exponent_fast_path() {
  498|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  499|       |  return 0;
  500|       |#else
  501|   615k|  return -10;
  502|   615k|#endif
  503|   615k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  560|   577k|inline constexpr int binary_format<float>::max_exponent_fast_path() {
  561|   577k|  return 10;
  562|   577k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  578|   513k|inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  579|   513k|  return uint64_t(2) << mantissa_explicit_bits();
  580|   513k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  510|  1.38M|inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  511|  1.38M|  return 23;
  512|  1.38M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  598|   492k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  599|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  600|   492k|  return (void)powers_of_ten[0], powers_of_ten[power];
  601|   492k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  362|   476k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  614|   190k|template <> inline constexpr int binary_format<float>::smallest_power_of_ten() {
  615|   190k|  return -64;
  616|   190k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  606|   188k|template <> inline constexpr int binary_format<float>::largest_power_of_ten() {
  607|   188k|  return 38;
  608|   188k|}
_ZN10fast_float14leading_zeroesEm:
  282|   412k|leading_zeroes(uint64_t input_num) {
  283|   412k|  assert(input_num > 0);
  284|   412k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (284:7): [Folded - Ignored]
  ------------------
  285|      0|    return leading_zeroes_generic(input_num);
  286|      0|  }
  287|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  288|       |#if defined(_M_X64) || defined(_M_ARM64)
  289|       |  unsigned long leading_zero = 0;
  290|       |  // Search the mask data from most significant bit (MSB)
  291|       |  // to least significant bit (LSB) for a set bit (1).
  292|       |  _BitScanReverse64(&leading_zero, input_num);
  293|       |  return (int)(63 - leading_zero);
  294|       |#else
  295|       |  return leading_zeroes_generic(input_num);
  296|       |#endif
  297|       |#else
  298|   412k|  return __builtin_clzll(input_num);
  299|   412k|#endif
  300|   412k|}
_ZN10fast_float19full_multiplicationEmm:
  334|   527k|full_multiplication(uint64_t a, uint64_t b) {
  335|   527k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (335:7): [Folded - Ignored]
  ------------------
  336|      0|    value128 answer;
  337|      0|    answer.low = umul128_generic(a, b, &answer.high);
  338|      0|    return answer;
  339|      0|  }
  340|   527k|  value128 answer;
  341|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  342|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  343|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  344|       |  answer.high = __umulh(a, b);
  345|       |  answer.low = a * b;
  346|       |#elif defined(FASTFLOAT_32BIT) ||                                              \
  347|       |    (defined(_WIN64) && !defined(__clang__) && !defined(_M_ARM64))
  348|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  349|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  350|       |  __uint128_t r = ((__uint128_t)a) * b;
  351|   527k|  answer.low = uint64_t(r);
  352|   527k|  answer.high = uint64_t(r >> 64);
  353|       |#else
  354|       |  answer.low = umul128_generic(a, b, &answer.high);
  355|       |#endif
  356|   527k|  return answer;
  357|   527k|}
_ZN10fast_float8value128C2Ev:
  248|   527k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  537|   221k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  538|   221k|  return -127;
  539|   221k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  530|  59.8k|inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  531|  59.8k|  return -17;
  532|  59.8k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  520|  58.1k|inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  521|  58.1k|  return 10;
  522|  58.1k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  366|   144k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  367|   144k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (367:12): [True: 50.6k, False: 93.6k]
  |  Branch (367:38): [True: 0, False: 93.6k]
  ------------------
  368|   144k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  621|  19.9k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  622|  19.9k|  return 114;
  623|  19.9k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  707|  86.3k|template <typename UC> static constexpr int int_cmp_len() {
  708|  86.3k|  return sizeof(uint64_t) / sizeof(UC);
  709|  86.3k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  698|  33.9k|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
  699|  33.9k|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
  700|  33.9k|                "Unsupported character size");
  701|  33.9k|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (701:10): [Folded - Ignored]
  ------------------
  702|  33.9k|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (702:12): [Folded - Ignored]
  ------------------
  703|      0|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
  704|      0|                uint64_t(UC('0')) << 16 | UC('0'))
  705|      0|             : (uint64_t(UC('0')) << 32 | UC('0'));
  706|  33.9k|}
_ZN10fast_float4spanImEC2EPKmm:
  233|  71.7k|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  236|   224k|  constexpr size_t len() const noexcept { return length; }
_ZNK10fast_float4spanImEixEm:
  238|   122k|  FASTFLOAT_CONSTEXPR14 const T &operator[](size_t index) const noexcept {
  239|   122k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   122k|  { ((void)(x)); }
  ------------------
  240|   122k|    return ptr[index];
  241|   122k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  660|   142k|to_float(bool negative, adjusted_mantissa am, T &value) {
  661|   142k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  662|   142k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  663|   142k|  word |= fastfloat_uint(am.power2)
  664|   142k|          << binary_format<T>::mantissa_explicit_bits();
  665|   142k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  666|       |#if FASTFLOAT_HAS_BIT_CAST
  667|       |  value = std::bit_cast<T>(word);
  668|       |#else
  669|   142k|  ::memcpy(&value, &word, sizeof(T));
  670|   142k|#endif
  671|   142k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  551|   142k|template <> inline constexpr int binary_format<float>::sign_index() {
  552|   142k|  return 31;
  553|   142k|}
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  544|   350k|template <> inline constexpr int binary_format<float>::infinite_power() {
  545|   350k|  return 0xFF;
  546|   350k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   44|   866k|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  234|   874k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  233|   441k|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  236|  3.28k|  constexpr size_t len() const noexcept { return length; }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  707|    144|template <typename UC> static constexpr int int_cmp_len() {
  708|    144|  return sizeof(uint64_t) / sizeof(UC);
  709|    144|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  698|    144|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
  699|    144|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
  700|    144|                "Unsupported character size");
  701|    144|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (701:10): [Folded - Ignored]
  ------------------
  702|    144|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (702:12): [Folded - Ignored]
  ------------------
  703|    144|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
  704|      0|                uint64_t(UC('0')) << 16 | UC('0'))
  705|    144|             : (uint64_t(UC('0')) << 32 | UC('0'));
  706|    144|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   44|   437k|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  488|   687k|inline constexpr int binary_format<double>::min_exponent_fast_path() {
  489|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  490|       |  return 0;
  491|       |#else
  492|   687k|  return -22;
  493|   687k|#endif
  494|   687k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  556|   679k|inline constexpr int binary_format<double>::max_exponent_fast_path() {
  557|   679k|  return 22;
  558|   679k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  565|   584k|inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  566|   584k|  return uint64_t(2) << mantissa_explicit_bits();
  567|   584k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  506|  1.51M|inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  507|  1.51M|  return 52;
  508|  1.51M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  593|   580k|binary_format<double>::exact_power_of_ten(int64_t power) {
  594|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  595|   580k|  return (void)powers_of_ten[0], powers_of_ten[power];
  596|   580k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  611|   178k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  612|   178k|  return -342;
  613|   178k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  603|   177k|template <> inline constexpr int binary_format<double>::largest_power_of_ten() {
  604|   177k|  return 308;
  605|   177k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  534|   235k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  535|   235k|  return -1023;
  536|   235k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  525|  49.5k|inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  526|  49.5k|  return -4;
  527|  49.5k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  515|  27.1k|inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  516|  27.1k|  return 23;
  517|  27.1k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  618|  30.6k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  619|  30.6k|  return 769;
  620|  30.6k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  660|   135k|to_float(bool negative, adjusted_mantissa am, T &value) {
  661|   135k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  662|   135k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  663|   135k|  word |= fastfloat_uint(am.power2)
  664|   135k|          << binary_format<T>::mantissa_explicit_bits();
  665|   135k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  666|       |#if FASTFLOAT_HAS_BIT_CAST
  667|       |  value = std::bit_cast<T>(word);
  668|       |#else
  669|   135k|  ::memcpy(&value, &word, sizeof(T));
  670|   135k|#endif
  671|   135k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  548|   135k|template <> inline constexpr int binary_format<double>::sign_index() {
  549|   135k|  return 63;
  550|   135k|}
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  541|   340k|template <> inline constexpr int binary_format<double>::infinite_power() {
  542|   340k|  return 0x7FF;
  543|   340k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   422k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   422k|  return from_chars_caller<T>::call(first, last, value,
  191|   422k|                                    parse_options_t<UC>(fmt));
  192|   422k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  147|   422k|       parse_options_t<UC> options) noexcept {
  148|   422k|    return from_chars_advanced(first, last, value, options);
  149|   422k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   422k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   422k|  static_assert(is_supported_float_type<T>(),
  293|   422k|                "only some floating-point types are supported");
  294|   422k|  static_assert(is_supported_char_type<UC>(),
  295|   422k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   422k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   422k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 422k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   422k|  parsed_number_string_t<UC> pns =
  309|   422k|      parse_number_string<UC>(first, last, options);
  310|   422k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 422k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   422k|  return from_chars_advanced(pns, value);
  322|   422k|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   422k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   422k|  static_assert(is_supported_float_type<T>(),
  204|   422k|                "only some floating-point types are supported");
  205|   422k|  static_assert(is_supported_char_type<UC>(),
  206|   422k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   422k|  from_chars_result_t<UC> answer;
  209|       |
  210|   422k|  answer.ec = std::errc(); // be optimistic
  211|   422k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   422k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 385k, False: 36.6k]
  ------------------
  218|   422k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 363k, False: 22.3k]
  ------------------
  219|   422k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 326k, False: 37.4k]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   326k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 326k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   326k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 305k, False: 20.6k]
  ------------------
  231|   305k|        value = T(pns.mantissa);
  232|   305k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 6.78k, False: 298k]
  ------------------
  233|  6.78k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   298k|        } else {
  235|   298k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   298k|        }
  237|   305k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 305k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   305k|        return answer;
  241|   305k|      }
  242|   326k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   326k|  }
  265|   117k|  adjusted_mantissa am =
  266|   117k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|   117k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 69.3k, False: 47.7k]
  |  Branch (267:30): [True: 69.3k, False: 0]
  ------------------
  268|  69.3k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 19.9k, False: 49.3k]
  ------------------
  269|  19.9k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|  19.9k|    }
  271|  69.3k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|   117k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 19.9k, False: 97.1k]
  ------------------
  276|  19.9k|    am = digit_comp<T>(pns, am);
  277|  19.9k|  }
  278|   117k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|   117k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 114k, False: 2.85k]
  |  Branch (280:29): [True: 12.3k, False: 101k]
  |  Branch (280:49): [True: 843, False: 11.5k]
  ------------------
  281|   117k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 3.96k, False: 112k]
  ------------------
  282|  4.81k|    answer.ec = std::errc::result_out_of_range;
  283|  4.81k|  }
  284|   117k|  return answer;
  285|   422k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   81|  1.09M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   82|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   83|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   84|       |  return false;
   85|       |#endif
   86|       |  // See
   87|       |  // A fast function to check your floating-point rounding mode
   88|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   89|       |  //
   90|       |  // This function is meant to be equivalent to :
   91|       |  // prior: #include <cfenv>
   92|       |  //  return fegetround() == FE_TONEAREST;
   93|       |  // However, it is expected to be much faster than the fegetround()
   94|       |  // function call.
   95|       |  //
   96|       |  // The volatile keywoard prevents the compiler from computing the function
   97|       |  // at compile-time.
   98|       |  // There might be other ways to prevent compile-time optimizations (e.g.,
   99|       |  // asm). The value does not need to be std::numeric_limits<float>::min(), any
  100|       |  // small value so that 1 + x should round to 1 would do (after accounting for
  101|       |  // excess precision, as in 387 instructions).
  102|  1.09M|  static volatile float fmin = std::numeric_limits<float>::min();
  103|  1.09M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
  104|       |//
  105|       |// Explanation:
  106|       |// Only when fegetround() == FE_TONEAREST do we have that
  107|       |// fmin + 1.0f == 1.0f - fmin.
  108|       |//
  109|       |// FE_UPWARD:
  110|       |//  fmin + 1.0f > 1
  111|       |//  1.0f - fmin == 1
  112|       |//
  113|       |// FE_DOWNWARD or  FE_TOWARDZERO:
  114|       |//  fmin + 1.0f == 1
  115|       |//  1.0f - fmin < 1
  116|       |//
  117|       |// Note: This may fail to be accurate if fast-math has been
  118|       |// enabled, as rounding conventions may not apply.
  119|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  120|       |#pragma warning(push)
  121|       |//  todo: is there a VS warning?
  122|       |//  see
  123|       |//  https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  124|       |#elif defined(__clang__)
  125|       |#pragma clang diagnostic push
  126|  1.09M|#pragma clang diagnostic ignored "-Wfloat-equal"
  127|       |#elif defined(__GNUC__)
  128|       |#pragma GCC diagnostic push
  129|       |#pragma GCC diagnostic ignored "-Wfloat-equal"
  130|       |#endif
  131|  1.09M|  return (fmini + 1.0f == 1.0f - fmini);
  132|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  133|       |#pragma warning(pop)
  134|       |#elif defined(__clang__)
  135|       |#pragma clang diagnostic pop
  136|       |#elif defined(__GNUC__)
  137|       |#pragma GCC diagnostic pop
  138|       |#endif
  139|  1.09M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   193k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   193k|  return from_chars_caller<T>::call(first, last, value,
  191|   193k|                                    parse_options_t<UC>(fmt));
  192|   193k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  147|   193k|       parse_options_t<UC> options) noexcept {
  148|   193k|    return from_chars_advanced(first, last, value, options);
  149|   193k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   193k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   193k|  static_assert(is_supported_float_type<T>(),
  293|   193k|                "only some floating-point types are supported");
  294|   193k|  static_assert(is_supported_char_type<UC>(),
  295|   193k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   193k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   193k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 193k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   193k|  parsed_number_string_t<UC> pns =
  309|   193k|      parse_number_string<UC>(first, last, options);
  310|   193k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 193k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   193k|  return from_chars_advanced(pns, value);
  322|   193k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   193k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   193k|  static_assert(is_supported_float_type<T>(),
  204|   193k|                "only some floating-point types are supported");
  205|   193k|  static_assert(is_supported_char_type<UC>(),
  206|   193k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   193k|  from_chars_result_t<UC> answer;
  209|       |
  210|   193k|  answer.ec = std::errc(); // be optimistic
  211|   193k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   193k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 191k, False: 1.70k]
  ------------------
  218|   193k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 187k, False: 3.69k]
  ------------------
  219|   193k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 187k, False: 330]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   187k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 187k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   187k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 187k, False: 578]
  ------------------
  231|   187k|        value = T(pns.mantissa);
  232|   187k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 988, False: 186k]
  ------------------
  233|    988|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   186k|        } else {
  235|   186k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   186k|        }
  237|   187k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 187k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   187k|        return answer;
  241|   187k|      }
  242|   187k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   187k|  }
  265|  6.30k|  adjusted_mantissa am =
  266|  6.30k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  6.30k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 972, False: 5.33k]
  |  Branch (267:30): [True: 972, False: 0]
  ------------------
  268|    972|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 0, False: 972]
  ------------------
  269|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|      0|    }
  271|    972|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  6.30k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 0, False: 6.30k]
  ------------------
  276|      0|    am = digit_comp<T>(pns, am);
  277|      0|  }
  278|  6.30k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  6.30k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 5.73k, False: 570]
  |  Branch (280:29): [True: 3.79k, False: 1.94k]
  |  Branch (280:49): [True: 822, False: 2.97k]
  ------------------
  281|  6.30k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 2.97k, False: 2.51k]
  ------------------
  282|  3.79k|    answer.ec = std::errc::result_out_of_range;
  283|  3.79k|  }
  284|  6.30k|  return answer;
  285|   193k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   443k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   443k|  return from_chars_caller<T>::call(first, last, value,
  191|   443k|                                    parse_options_t<UC>(fmt));
  192|   443k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|   443k|       parse_options_t<UC> options) noexcept {
  148|   443k|    return from_chars_advanced(first, last, value, options);
  149|   443k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   443k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   443k|  static_assert(is_supported_float_type<T>(),
  293|   443k|                "only some floating-point types are supported");
  294|   443k|  static_assert(is_supported_char_type<UC>(),
  295|   443k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   443k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   443k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 443k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   443k|  parsed_number_string_t<UC> pns =
  309|   443k|      parse_number_string<UC>(first, last, options);
  310|   443k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 443k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   443k|  return from_chars_advanced(pns, value);
  322|   443k|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   443k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   443k|  static_assert(is_supported_float_type<T>(),
  204|   443k|                "only some floating-point types are supported");
  205|   443k|  static_assert(is_supported_char_type<UC>(),
  206|   443k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   443k|  from_chars_result_t<UC> answer;
  209|       |
  210|   443k|  answer.ec = std::errc(); // be optimistic
  211|   443k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   443k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 437k, False: 6.27k]
  ------------------
  218|   443k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 415k, False: 21.9k]
  ------------------
  219|   443k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 347k, False: 67.5k]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   347k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 347k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   347k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 343k, False: 4.21k]
  ------------------
  231|   343k|        value = T(pns.mantissa);
  232|   343k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 18.3k, False: 325k]
  ------------------
  233|  18.3k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   325k|        } else {
  235|   325k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   325k|        }
  237|   343k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 343k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   343k|        return answer;
  241|   343k|      }
  242|   347k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   347k|  }
  265|   100k|  adjusted_mantissa am =
  266|   100k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|   100k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 72.9k, False: 27.0k]
  |  Branch (267:30): [True: 72.9k, False: 0]
  ------------------
  268|  72.9k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 30.4k, False: 42.4k]
  ------------------
  269|  30.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|  30.4k|    }
  271|  72.9k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|   100k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 30.4k, False: 69.5k]
  ------------------
  276|  30.4k|    am = digit_comp<T>(pns, am);
  277|  30.4k|  }
  278|   100k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|   100k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 97.4k, False: 2.60k]
  |  Branch (280:29): [True: 7.55k, False: 89.8k]
  |  Branch (280:49): [True: 234, False: 7.31k]
  ------------------
  281|   100k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 2.04k, False: 97.7k]
  ------------------
  282|  2.27k|    answer.ec = std::errc::result_out_of_range;
  283|  2.27k|  }
  284|   100k|  return answer;
  285|   443k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   243k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   243k|  return from_chars_caller<T>::call(first, last, value,
  191|   243k|                                    parse_options_t<UC>(fmt));
  192|   243k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|   243k|       parse_options_t<UC> options) noexcept {
  148|   243k|    return from_chars_advanced(first, last, value, options);
  149|   243k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   243k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   243k|  static_assert(is_supported_float_type<T>(),
  293|   243k|                "only some floating-point types are supported");
  294|   243k|  static_assert(is_supported_char_type<UC>(),
  295|   243k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   243k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   243k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 243k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   243k|  parsed_number_string_t<UC> pns =
  309|   243k|      parse_number_string<UC>(first, last, options);
  310|   243k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 243k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   243k|  return from_chars_advanced(pns, value);
  322|   243k|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   243k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   243k|  static_assert(is_supported_float_type<T>(),
  204|   243k|                "only some floating-point types are supported");
  205|   243k|  static_assert(is_supported_char_type<UC>(),
  206|   243k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   243k|  from_chars_result_t<UC> answer;
  209|       |
  210|   243k|  answer.ec = std::errc(); // be optimistic
  211|   243k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   243k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 242k, False: 1.71k]
  ------------------
  218|   243k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 237k, False: 4.83k]
  ------------------
  219|   243k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 236k, False: 762]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   236k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 236k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   236k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 236k, False: 288]
  ------------------
  231|   236k|        value = T(pns.mantissa);
  232|   236k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 1.26k, False: 234k]
  ------------------
  233|  1.26k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   234k|        } else {
  235|   234k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   234k|        }
  237|   236k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 236k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   236k|        return answer;
  241|   236k|      }
  242|   236k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   236k|  }
  265|  7.59k|  adjusted_mantissa am =
  266|  7.59k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  7.59k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 986, False: 6.61k]
  |  Branch (267:30): [True: 986, False: 0]
  ------------------
  268|    986|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 144, False: 842]
  ------------------
  269|    144|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|    144|    }
  271|    986|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  7.59k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 144, False: 7.45k]
  ------------------
  276|    144|    am = digit_comp<T>(pns, am);
  277|    144|  }
  278|  7.59k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  7.59k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 6.98k, False: 612]
  |  Branch (280:29): [True: 1.81k, False: 5.16k]
  |  Branch (280:49): [True: 212, False: 1.60k]
  ------------------
  281|  7.59k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 1.60k, False: 5.78k]
  ------------------
  282|  1.81k|    answer.ec = std::errc::result_out_of_range;
  283|  1.81k|  }
  284|  7.59k|  return answer;
  285|   243k|}

_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  865|  3.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  865|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  3.00M|{
 4068|  3.00M|    if constexpr (sizeof(U) == 1) {
 4069|  3.00M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  3.00M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  3.00M|{
 4032|  3.00M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  3.00M|    SCN_GCC_COMPAT_PUSH
 4035|  3.00M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  3.00M|    constexpr char lengths[] =
 4037|  3.00M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  3.00M|        "\1\1\1\1\1\1\1\1"
 4039|  3.00M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  3.00M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  3.00M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  3.00M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  3.00M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  3.00M|    SCN_GCC_COMPAT_POP
 4046|  3.00M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.69M|{
 4274|  2.69M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.69M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.69M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.69M|{
 4087|  2.69M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  2.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.69M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.69M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.69M|    };
 4092|       |
 4093|  2.69M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.63M, False: 59.4k]
  ------------------
 4094|  2.63M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 707, False: 2.63M]
  ------------------
 4095|    707|            SCN_UNLIKELY_ATTR
 4096|    707|            return invalid_code_point;
 4097|    707|        }
 4098|  2.63M|        return static_cast<char32_t>(input[0]);
 4099|  2.63M|    }
 4100|       |
 4101|  59.4k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 54.6k, False: 4.77k]
  ------------------
 4102|  54.6k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 142, False: 54.4k]
  ------------------
 4103|    142|            SCN_UNLIKELY_ATTR
 4104|    142|            return invalid_code_point;
 4105|    142|        }
 4106|  54.4k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 4.28k, False: 50.2k]
  ------------------
 4107|  4.28k|            SCN_UNLIKELY_ATTR
 4108|  4.28k|            return invalid_code_point;
 4109|  4.28k|        }
 4110|       |
 4111|  50.2k|        char32_t cp{};
 4112|  50.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  50.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  50.2k|        return cp;
 4115|  54.4k|    }
 4116|       |
 4117|  4.77k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 2.28k, False: 2.49k]
  ------------------
 4118|  2.28k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 137, False: 2.14k]
  ------------------
 4119|    137|            SCN_UNLIKELY_ATTR
 4120|    137|            return invalid_code_point;
 4121|    137|        }
 4122|  2.14k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 528, False: 1.61k]
  ------------------
 4123|  2.14k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 817, False: 799]
  ------------------
 4124|  1.34k|            SCN_UNLIKELY_ATTR
 4125|  1.34k|            return invalid_code_point;
 4126|  1.34k|        }
 4127|       |
 4128|    799|        char32_t cp{};
 4129|    799|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    799|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    799|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    799|        return cp;
 4133|  2.14k|    }
 4134|       |
 4135|  2.49k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 2.49k, False: 0]
  ------------------
 4136|  2.49k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 2.49k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  2.49k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 537, False: 1.96k]
  ------------------
 4141|    537|            SCN_UNLIKELY_ATTR
 4142|    537|            return invalid_code_point;
 4143|    537|        }
 4144|  1.96k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 529, False: 1.43k]
  ------------------
 4145|  1.96k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 556, False: 875]
  ------------------
 4146|  1.96k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 573, False: 302]
  ------------------
 4147|  1.65k|            SCN_UNLIKELY_ATTR
 4148|  1.65k|            return invalid_code_point;
 4149|  1.65k|        }
 4150|       |
 4151|    302|        char32_t cp{};
 4152|    302|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    302|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    302|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    302|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    302|        return cp;
 4157|  1.96k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  62.5k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  62.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  62.5k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  4.44M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  4.44M|    else {
 3966|  4.44M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  4.44M|                                       to_address(first), to_address(last)))};
 3968|  4.44M|    }
 3969|  4.44M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  13.5M|{
  316|  13.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  13.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  13.5M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  21.9M|{
  294|  21.9M|    return p;
  295|  21.9M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  7.00M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  7.00M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  7.00M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  7.00M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  7.00M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  7.00M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  93.3k|    {
 2869|  93.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  93.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  93.3k|    {
 2850|  93.3k|        return decay_copy(t.begin());
 2851|  93.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  11.3M|{
 2094|  11.3M|    return SCN_FWD(t);
  ------------------
  |  |  936|  11.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  11.3M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.90M|    {
 2926|  1.90M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.90M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.90M|    {
 2908|  1.90M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.90M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|   138k|{
 9705|   138k|    auto result = make_scan_result<Source, Args...>();
 9706|   138k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   138k|                                   make_scan_args(result->values())));
 9708|   138k|    return result;
 9709|   138k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9660|   307k|{
 9661|   307k|    return scan_result_type<Source, Args...>();
 9662|   307k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   307k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   307k|        : m_value(T{}), m_has_value(true)
  427|   307k|    {
  428|   307k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6610|   307k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|   949k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   949k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6384|  1.03M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   307k|{
 9646|   307k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.3k, False: 277k]
  |  |  ------------------
  ------------------
 9647|  30.3k|        out = unexpected(in.error());
 9648|  30.3k|    }
 9649|   277k|    else {
 9650|   277k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   277k|    static_cast<    \
  |  |  935|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   277k|    }
 9652|   307k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   949k|    {
 1740|   949k|        return has_value();
 1741|   949k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.89M|    {
  490|  1.89M|        return m_has_value;
  491|  1.89M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  90.9k|    {
 1746|  90.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  90.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  90.9k|        return this->get_unexpected().error();
 1748|  90.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  90.9k|    {
  473|  90.9k|        return m_unexpected;
  474|  90.9k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  14.4M|    {
  365|  14.4M|        return m_unexpected;
  366|  14.4M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  3.54M|        : m_unexpected(std::forward<Err>(e))
  350|  3.54M|    {
  351|  3.54M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.54M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.3k|        : base(unexpect, std::move(e.error())),
 1616|  30.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.3k|    {
 1618|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.3k|          m_has_value(false)
  451|  30.3k|    {
  452|  30.3k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  10.6M|        : m_unexpected(std::forward<Args>(args)...)
  359|  10.6M|    {
  360|  10.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  10.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  10.6M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.3k|    {
 1316|  30.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.3k|    {
  903|  30.3k|        assign_common(std::move(other));
  904|  30.3k|        return *this;
  905|  30.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.3k|    {
  950|  30.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.3k, False: 0]
  ------------------
  951|  30.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   861k|    {
  456|   861k|        return m_value;
  457|   861k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.3k|    {
 1046|  30.3k|        this->destroy_value();
 1047|  30.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.3k|    {
  504|  30.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.3k|                                  std::forward<Args>(args)...);
  506|  30.3k|        m_has_value = false;
  507|  30.3k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   545k|{
  396|   545k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   545k|        T(std::forward<Args>(args)...);
  398|   545k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.3k|    {
  473|  30.3k|        return m_unexpected;
  474|  30.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.3k|    {
  481|  30.3k|        return std::move(m_unexpected);
  482|  30.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|   858k|    {
 6485|   858k|        m_range = std::forward<Other>(r);
 6486|   858k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   858k|    {
 1795|   858k|        return value();
 1796|   858k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   858k|    {
 1769|   858k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   858k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   858k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   858k|        return this->get_value();
 1771|   858k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   858k|    {
  456|   858k|        return m_value;
  457|   858k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|   428k|{
 9485|   428k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   428k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|   428k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   428k|{
 9422|   428k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   428k|    auto result = vscan_impl(buffer, format, args);
 9425|   428k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.9k, False: 386k]
  |  |  ------------------
  ------------------
 9426|  41.9k|        return unexpected(result.error());
 9427|  41.9k|    }
 9428|   386k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   428k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   949k|{
 5381|   949k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   949k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   949k|                  "\n"
 5385|   949k|                  "Unsupported range type given as input to a scanning "
 5386|   949k|                  "function.\n"
 5387|   949k|                  "A range needs to have a character type (value type) "
 5388|   949k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   949k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   949k|                  "to be included.\n"
 5391|   949k|                  "See the scnlib documentation for more details.");
 5392|   949k|    static_assert(
 5393|   949k|        !std::is_same_v<T, custom_char_traits>,
 5394|   949k|        "\n"
 5395|   949k|        "Unsupported range type given as input to a scanning "
 5396|   949k|        "function.\n"
 5397|   949k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   949k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   949k|        "not supported.");
 5400|   949k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   949k|                  "\n"
 5402|   949k|                  "Unsupported range type given as input to a scanning "
 5403|   949k|                  "function.\n"
 5404|   949k|                  "file_marker_found cannot be used as an "
 5405|   949k|                  "source range type to scn::scan.\n"
 5406|   949k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   949k|                  "and do not provide an explicit source range, "
 5408|   949k|                  "or use scn::scan with a FILE* directly.");
 5409|   949k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   949k|                  "\n"
 5411|   949k|                  "Unsupported range type given as input to a scanning "
 5412|   949k|                  "function.\n"
 5413|   949k|                  "In order to be scannable, a range needs to satisfy "
 5414|   949k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   949k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   949k|                  "\n"
 5417|   949k|                  "Unsupported range type given as input to a scanning "
 5418|   949k|                  "function.\n"
 5419|   949k|                  "A range needs to model forward_range and have a valid "
 5420|   949k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   949k|                  "Examples of scannable ranges are std::string, "
 5422|   949k|                  "std::string_view, "
 5423|   949k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   949k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   949k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   949k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   949k|{
 5320|   949k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   949k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   949k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   949k|    {
 3000|   949k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   949k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   949k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   949k|    {
 2981|   949k|        return t.data();
 2982|   949k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   949k|    {
 3383|   949k|        return detail::to_address(ranges::begin(derived()));
 3384|   949k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  8.45M|{
  316|  8.45M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  8.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  8.45M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.80M|    {
 2869|  1.80M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.80M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.80M|    {
 2850|  1.80M|        return decay_copy(t.begin());
 2851|  1.80M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  24.1M|    {
 3480|  24.1M|        return m_iterator;
 3481|  24.1M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   949k|    {
 3339|   949k|        return static_cast<const D&>(*this);
 3340|   949k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   949k|    {
 3075|   949k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   949k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   949k|    {
 3041|   949k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   949k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   949k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  5.43M|{
 2094|  5.43M|    return SCN_FWD(t);
  ------------------
  |  |  936|  5.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.43M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  5.89M|    {
 3496|  5.89M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  5.89M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  13.6M|    {
 1740|  13.6M|        return has_value();
 1741|  13.6M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  24.4M|    {
  490|  24.4M|        return m_has_value;
  491|  24.4M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|  1.11M|    {
 1746|  1.11M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.11M|        return this->get_unexpected().error();
 1748|  1.11M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.11M|    {
  473|  1.11M|        return m_unexpected;
  474|  1.11M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  90.9k|        : base(unexpect, std::move(e.error())),
 1616|  90.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  90.9k|    {
 1618|  90.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  90.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  90.9k|          m_has_value(false)
  451|  90.9k|    {
  452|  90.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   949k|    {
 1316|   949k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   858k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   858k|                      ranges::iterator_t<SourceRange>>) {
 6717|   858k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   858k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  6.70M|    {
 2869|  6.70M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  6.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  6.70M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  6.70M|    {
 2850|  6.70M|        return decay_copy(t.begin());
 2851|  6.70M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|   858k|{
 6702|   858k|    return ranges::end(source);
 6703|   858k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   858k|    {
 2926|   858k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   858k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   858k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   858k|    {
 2908|   858k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   858k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   858k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  11.1M|    {
 3484|  11.1M|        return m_sentinel;
 3485|  11.1M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  4.18M|    {
 1795|  4.18M|        return value();
 1796|  4.18M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  9.65M|    {
 1769|  9.65M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.65M|        return this->get_value();
 1771|  9.65M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  9.65M|    {
  456|  9.65M|        return m_value;
  457|  9.65M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   858k|        : base(std::in_place, std::forward<U>(val)),
 1570|   858k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   858k|    {
 1572|   858k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   858k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   858k|    {
  442|   858k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|   277k|    {
 8783|   277k|        return m_str;
 8784|   277k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   596k|{
 6115|   596k|    detail::check_scan_arg_types<Args...>();
 6116|   596k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   596k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5829|  1.03M|{
 5830|  1.03M|    constexpr bool default_constructible_constraint =
 5831|  1.03M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.03M|    static_assert(default_constructible_constraint,
 5833|  1.03M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.03M|    constexpr bool destructible_constraint =
 5836|  1.03M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.03M|    static_assert(destructible_constraint,
 5838|  1.03M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.03M|    constexpr bool non_reference_constraint =
 5841|  1.03M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.03M|    static_assert(non_reference_constraint,
 5843|  1.03M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.03M|    constexpr bool movable_constraint =
 5846|  1.03M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.03M|    static_assert(movable_constraint,
 5848|  1.03M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.03M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.03M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.03M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6090|   596k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   596k|    {
 6092|   596k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   596k|    {
 6100|   596k|        return {detail::make_arg<
 6101|   596k|            kind, Context,
 6102|   596k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   596k|                                 typename Context::char_type>::value>(args)...};
 6104|   596k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5879|   596k|{
 5880|   596k|    return make_value<Context>(value).ref_value;
 5881|   596k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5814|   659k|{
 5815|   659k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   659k|                                  needs_context_tag>) {
 5819|   659k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   659k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   659k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5653|   659k|    {                                                                        \
 5654|   659k|        return val;                                                          \
 5655|   659k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5783|  1.03M|{
 5784|  1.03M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.03M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.03M|    constexpr bool scannable_char =
 5788|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.03M|    static_assert(scannable_char,
 5790|  1.03M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.03M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.03M|    constexpr bool scannable_const =
 5794|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.03M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.03M|    constexpr bool scannable_disabled =
 5798|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.03M|    static_assert(scannable_disabled,
 5800|  1.03M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.03M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.03M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.03M|    static_assert(
 5805|  1.03M|        scannable,
 5806|  1.03M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.03M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.03M|    return arg_value{arg};
 5810|  1.03M|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5596|  1.03M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.03M|    {
 5598|  1.03M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6393|   939k|    {
 6394|   939k|        return m_values;
 6395|   939k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   596k|        : basic_scan_args(store.desc, store.args.data())
 6141|   596k|    {
 6142|   596k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6192|  1.85M|        : m_desc(desc), m_builtin_values(data)
 6193|  1.85M|    {
 6194|  1.85M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  9.56M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  9.56M|    static_cast<    \
  |  |  935|  9.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  9.56M|    static_cast<    \
  |  |  935|  9.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  9.56M|    {
 3466|  9.56M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|  1.85M|{
 8444|  1.85M|    return s;
 8445|  1.85M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|  1.85M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   277k|        : m_str(r.str)
 8778|   277k|    {
 8779|   277k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   307k|    {
 1740|   307k|        return has_value();
 1741|   307k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   861k|    {
 1815|   861k|        return &value();
 1816|   861k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   861k|    {
 1769|   861k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   861k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   861k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   861k|        return this->get_value();
 1771|   861k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|   858k|    {
 6474|   858k|        return ranges::begin(m_range);
 6475|   858k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|   138k|{
 9774|   138k|    auto result = make_scan_result<Source, Args...>();
 9775|   138k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   138k|                                   make_scan_args(result->values())));
 9777|   138k|    return result;
 9778|   138k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|   428k|{
 9503|   428k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   428k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|   428k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   428k|{
 9438|   428k|#if !SCN_DISABLE_LOCALE
 9439|   428k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   428k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   428k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   428k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   428k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.9k, False: 386k]
  |  |  ------------------
  ------------------
 9446|  41.9k|        return unexpected(result.error());
 9447|  41.9k|    }
 9448|   386k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   428k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  29.9k|{
 9815|  29.9k|    auto result = make_scan_result<Source, T>();
 9816|  29.9k|    fill_scan_result(
 9817|  29.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  29.9k|                            detail::make_arg<scan_context>(result->value())));
 9819|  29.9k|    return result;
 9820|  29.9k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  93.2k|{
 9516|  93.2k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  93.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  93.2k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  93.2k|{
 9462|  93.2k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  93.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  93.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  93.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.99k, False: 86.2k]
  |  |  ------------------
  ------------------
 9466|  6.99k|        return unexpected(result.error());
 9467|  6.99k|    }
 9468|  86.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  93.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5864|  62.5k|{
 5865|  62.5k|    check_scan_arg_types<T>();
 5866|       |
 5867|  62.5k|    basic_scan_arg<Context> arg;
 5868|  62.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  62.5k|    arg.m_value = make_value<Context>(value);
 5870|  62.5k|    return arg;
 5871|  62.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|  2.04M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|  3.28M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  94.2k|    {
 6416|  94.2k|        return std::get<0>(m_values);
 6417|  94.2k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|   143k|{
 9705|   143k|    auto result = make_scan_result<Source, Args...>();
 9706|   143k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   143k|                                   make_scan_args(result->values())));
 9708|   143k|    return result;
 9709|   143k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9660|   319k|{
 9661|   319k|    return scan_result_type<Source, Args...>();
 9662|   319k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   319k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   319k|        : m_value(T{}), m_has_value(true)
  427|   319k|    {
  428|   319k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6610|   319k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6384|  1.11M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   319k|{
 9646|   319k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.3k, False: 288k]
  |  |  ------------------
  ------------------
 9647|  30.3k|        out = unexpected(in.error());
 9648|  30.3k|    }
 9649|   288k|    else {
 9650|   288k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   288k|    static_cast<    \
  |  |  935|   288k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   288k|    }
 9652|   319k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.3k|        : base(unexpect, std::move(e.error())),
 1616|  30.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.3k|    {
 1618|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.3k|          m_has_value(false)
  451|  30.3k|    {
  452|  30.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.3k|    {
 1316|  30.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.3k|    {
  903|  30.3k|        assign_common(std::move(other));
  904|  30.3k|        return *this;
  905|  30.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.3k|    {
  950|  30.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.3k, False: 0]
  ------------------
  951|  30.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.27M|    {
  490|  1.27M|        return m_has_value;
  491|  1.27M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   896k|    {
  456|   896k|        return m_value;
  457|   896k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.3k|    {
 1046|  30.3k|        this->destroy_value();
 1047|  30.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.3k|    {
  504|  30.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.3k|                                  std::forward<Args>(args)...);
  506|  30.3k|        m_has_value = false;
  507|  30.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.3k|    {
  473|  30.3k|        return m_unexpected;
  474|  30.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.3k|    {
  481|  30.3k|        return std::move(m_unexpected);
  482|  30.3k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|   287k|    {
 8783|   287k|        return m_str;
 8784|   287k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   623k|{
 6115|   623k|    detail::check_scan_arg_types<Args...>();
 6116|   623k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   623k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5829|  1.11M|{
 5830|  1.11M|    constexpr bool default_constructible_constraint =
 5831|  1.11M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.11M|    static_assert(default_constructible_constraint,
 5833|  1.11M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.11M|    constexpr bool destructible_constraint =
 5836|  1.11M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.11M|    static_assert(destructible_constraint,
 5838|  1.11M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.11M|    constexpr bool non_reference_constraint =
 5841|  1.11M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.11M|    static_assert(non_reference_constraint,
 5843|  1.11M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.11M|    constexpr bool movable_constraint =
 5846|  1.11M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.11M|    static_assert(movable_constraint,
 5848|  1.11M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.11M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.11M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.11M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6090|   623k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   623k|    {
 6092|   623k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   623k|    {
 6100|   623k|        return {detail::make_arg<
 6101|   623k|            kind, Context,
 6102|   623k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   623k|                                 typename Context::char_type>::value>(args)...};
 6104|   623k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5879|   623k|{
 5880|   623k|    return make_value<Context>(value).ref_value;
 5881|   623k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5814|   689k|{
 5815|   689k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   689k|                                  needs_context_tag>) {
 5819|   689k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   689k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   689k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5653|   689k|    {                                                                        \
 5654|   689k|        return val;                                                          \
 5655|   689k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5783|  1.11M|{
 5784|  1.11M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.11M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.11M|    constexpr bool scannable_char =
 5788|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.11M|    static_assert(scannable_char,
 5790|  1.11M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.11M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.11M|    constexpr bool scannable_const =
 5794|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.11M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.11M|    constexpr bool scannable_disabled =
 5798|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.11M|    static_assert(scannable_disabled,
 5800|  1.11M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.11M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.11M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.11M|    static_assert(
 5805|  1.11M|        scannable,
 5806|  1.11M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.11M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.11M|    return arg_value{arg};
 5810|  1.11M|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5596|  1.11M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.11M|    {
 5598|  1.11M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6393|  1.01M|    {
 6394|  1.01M|        return m_values;
 6395|  1.01M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   623k|        : basic_scan_args(store.desc, store.args.data())
 6141|   623k|    {
 6142|   623k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   287k|        : m_str(r.str)
 8778|   287k|    {
 8779|   287k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   319k|    {
 1740|   319k|        return has_value();
 1741|   319k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|   896k|    {
 1815|   896k|        return &value();
 1816|   896k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   896k|    {
 1769|   896k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   896k|        return this->get_value();
 1771|   896k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|   143k|{
 9774|   143k|    auto result = make_scan_result<Source, Args...>();
 9775|   143k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   143k|                                   make_scan_args(result->values())));
 9777|   143k|    return result;
 9778|   143k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  31.3k|{
 9815|  31.3k|    auto result = make_scan_result<Source, T>();
 9816|  31.3k|    fill_scan_result(
 9817|  31.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  31.3k|                            detail::make_arg<scan_context>(result->value())));
 9819|  31.3k|    return result;
 9820|  31.3k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5864|  65.9k|{
 5865|  65.9k|    check_scan_arg_types<T>();
 5866|       |
 5867|  65.9k|    basic_scan_arg<Context> arg;
 5868|  65.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  65.9k|    arg.m_value = make_value<Context>(value);
 5870|  65.9k|    return arg;
 5871|  65.9k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   105k|    {
 6416|   105k|        return std::get<0>(m_values);
 6417|   105k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|   145k|{
 9705|   145k|    auto result = make_scan_result<Source, Args...>();
 9706|   145k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   145k|                                   make_scan_args(result->values())));
 9708|   145k|    return result;
 9709|   145k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9660|   323k|{
 9661|   323k|    return scan_result_type<Source, Args...>();
 9662|   323k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   323k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   323k|        : m_value(T{}), m_has_value(true)
  427|   323k|    {
  428|   323k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6610|   323k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6384|  1.13M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   323k|{
 9646|   323k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.3k, False: 292k]
  |  |  ------------------
  ------------------
 9647|  30.3k|        out = unexpected(in.error());
 9648|  30.3k|    }
 9649|   292k|    else {
 9650|   292k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   292k|    static_cast<    \
  |  |  935|   292k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   292k|    }
 9652|   323k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.3k|        : base(unexpect, std::move(e.error())),
 1616|  30.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.3k|    {
 1618|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.3k|          m_has_value(false)
  451|  30.3k|    {
  452|  30.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.3k|    {
 1316|  30.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.3k|    {
  903|  30.3k|        assign_common(std::move(other));
  904|  30.3k|        return *this;
  905|  30.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.3k|    {
  950|  30.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.3k, False: 0]
  ------------------
  951|  30.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.29M|    {
  490|  1.29M|        return m_has_value;
  491|  1.29M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   908k|    {
  456|   908k|        return m_value;
  457|   908k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.3k|    {
 1046|  30.3k|        this->destroy_value();
 1047|  30.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.3k|    {
  504|  30.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.3k|                                  std::forward<Args>(args)...);
  506|  30.3k|        m_has_value = false;
  507|  30.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.3k|    {
  473|  30.3k|        return m_unexpected;
  474|  30.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.3k|    {
  481|  30.3k|        return std::move(m_unexpected);
  482|  30.3k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|   291k|    {
 8783|   291k|        return m_str;
 8784|   291k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   630k|{
 6115|   630k|    detail::check_scan_arg_types<Args...>();
 6116|   630k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   630k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5829|  1.13M|{
 5830|  1.13M|    constexpr bool default_constructible_constraint =
 5831|  1.13M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.13M|    static_assert(default_constructible_constraint,
 5833|  1.13M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.13M|    constexpr bool destructible_constraint =
 5836|  1.13M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.13M|    static_assert(destructible_constraint,
 5838|  1.13M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.13M|    constexpr bool non_reference_constraint =
 5841|  1.13M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.13M|    static_assert(non_reference_constraint,
 5843|  1.13M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.13M|    constexpr bool movable_constraint =
 5846|  1.13M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.13M|    static_assert(movable_constraint,
 5848|  1.13M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.13M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.13M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.13M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6090|   630k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   630k|    {
 6092|   630k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   630k|    {
 6100|   630k|        return {detail::make_arg<
 6101|   630k|            kind, Context,
 6102|   630k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   630k|                                 typename Context::char_type>::value>(args)...};
 6104|   630k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EevEEPvRT2_:
 5879|   630k|{
 5880|   630k|    return make_value<Context>(value).ref_value;
 5881|   630k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5814|   697k|{
 5815|   697k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   697k|                                  needs_context_tag>) {
 5819|   697k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   697k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   697k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5653|   697k|    {                                                                        \
 5654|   697k|        return val;                                                          \
 5655|   697k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5783|  1.13M|{
 5784|  1.13M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.13M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.13M|    constexpr bool scannable_char =
 5788|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.13M|    static_assert(scannable_char,
 5790|  1.13M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.13M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.13M|    constexpr bool scannable_const =
 5794|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.13M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.13M|    constexpr bool scannable_disabled =
 5798|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.13M|    static_assert(scannable_disabled,
 5800|  1.13M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.13M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.13M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.13M|    static_assert(
 5805|  1.13M|        scannable,
 5806|  1.13M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.13M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.13M|    return arg_value{arg};
 5810|  1.13M|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5596|  1.13M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.13M|    {
 5598|  1.13M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6393|  1.02M|    {
 6394|  1.02M|        return m_values;
 6395|  1.02M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   630k|        : basic_scan_args(store.desc, store.args.data())
 6141|   630k|    {
 6142|   630k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   291k|        : m_str(r.str)
 8778|   291k|    {
 8779|   291k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   323k|    {
 1740|   323k|        return has_value();
 1741|   323k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|   908k|    {
 1815|   908k|        return &value();
 1816|   908k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   908k|    {
 1769|   908k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   908k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   908k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   908k|        return this->get_value();
 1771|   908k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|   145k|{
 9774|   145k|    auto result = make_scan_result<Source, Args...>();
 9775|   145k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   145k|                                   make_scan_args(result->values())));
 9777|   145k|    return result;
 9778|   145k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  31.9k|{
 9815|  31.9k|    auto result = make_scan_result<Source, T>();
 9816|  31.9k|    fill_scan_result(
 9817|  31.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  31.9k|                            detail::make_arg<scan_context>(result->value())));
 9819|  31.9k|    return result;
 9820|  31.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5864|  66.8k|{
 5865|  66.8k|    check_scan_arg_types<T>();
 5866|       |
 5867|  66.8k|    basic_scan_arg<Context> arg;
 5868|  66.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  66.8k|    arg.m_value = make_value<Context>(value);
 5870|  66.8k|    return arg;
 5871|  66.8k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   107k|    {
 6416|   107k|        return std::get<0>(m_values);
 6417|   107k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  90.9k|    {
 2869|  90.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  90.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  90.9k|    {
 2850|  90.9k|        return decay_copy(t.begin());
 2851|  90.9k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  47.6M|{
 2094|  47.6M|    return SCN_FWD(t);
  ------------------
  |  |  936|  47.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  47.6M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.19M|    {
 2926|  2.19M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.19M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.19M|    {
 2908|  2.19M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.19M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|   159k|{
 9705|   159k|    auto result = make_scan_result<Source, Args...>();
 9706|   159k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   159k|                                   make_scan_args(result->values())));
 9708|   159k|    return result;
 9709|   159k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9660|   351k|{
 9661|   351k|    return scan_result_type<Source, Args...>();
 9662|   351k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   351k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   351k|        : m_value(T{}), m_has_value(true)
  427|   351k|    {
  428|   351k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6610|   351k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|  1.09M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  1.09M|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   351k|{
 9646|   351k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.3k, False: 321k]
  |  |  ------------------
  ------------------
 9647|  30.3k|        out = unexpected(in.error());
 9648|  30.3k|    }
 9649|   321k|    else {
 9650|   321k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   321k|    static_cast<    \
  |  |  935|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   321k|    }
 9652|   351k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  1.09M|    {
 1740|  1.09M|        return has_value();
 1741|  1.09M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.19M|    {
  490|  2.19M|        return m_has_value;
  491|  2.19M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  90.9k|    {
 1746|  90.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  90.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  90.9k|        return this->get_unexpected().error();
 1748|  90.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  90.9k|    {
  473|  90.9k|        return m_unexpected;
  474|  90.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.3k|        : base(unexpect, std::move(e.error())),
 1616|  30.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.3k|    {
 1618|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.3k|          m_has_value(false)
  451|  30.3k|    {
  452|  30.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.3k|    {
 1316|  30.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.3k|    {
  903|  30.3k|        assign_common(std::move(other));
  904|  30.3k|        return *this;
  905|  30.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.3k|    {
  950|  30.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.3k, False: 0]
  ------------------
  951|  30.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.40M|    {
  490|  1.40M|        return m_has_value;
  491|  1.40M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   994k|    {
  456|   994k|        return m_value;
  457|   994k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.3k|    {
 1046|  30.3k|        this->destroy_value();
 1047|  30.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.3k|    {
  504|  30.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.3k|                                  std::forward<Args>(args)...);
  506|  30.3k|        m_has_value = false;
  507|  30.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.3k|    {
  473|  30.3k|        return m_unexpected;
  474|  30.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.3k|    {
  481|  30.3k|        return std::move(m_unexpected);
  482|  30.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|  1.00M|    {
 6485|  1.00M|        m_range = std::forward<Other>(r);
 6486|  1.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  1.00M|    {
 1795|  1.00M|        return value();
 1796|  1.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  1.00M|    {
 1769|  1.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.00M|        return this->get_value();
 1771|  1.00M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.00M|    {
  456|  1.00M|        return m_value;
  457|  1.00M|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|   497k|{
 9485|   497k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|   497k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   497k|{
 9422|   497k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   497k|    auto result = vscan_impl(buffer, format, args);
 9425|   497k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.9k, False: 455k]
  |  |  ------------------
  ------------------
 9426|  41.9k|        return unexpected(result.error());
 9427|  41.9k|    }
 9428|   455k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   497k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  1.09M|{
 5381|  1.09M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.09M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.09M|                  "\n"
 5385|  1.09M|                  "Unsupported range type given as input to a scanning "
 5386|  1.09M|                  "function.\n"
 5387|  1.09M|                  "A range needs to have a character type (value type) "
 5388|  1.09M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.09M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.09M|                  "to be included.\n"
 5391|  1.09M|                  "See the scnlib documentation for more details.");
 5392|  1.09M|    static_assert(
 5393|  1.09M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.09M|        "\n"
 5395|  1.09M|        "Unsupported range type given as input to a scanning "
 5396|  1.09M|        "function.\n"
 5397|  1.09M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.09M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.09M|        "not supported.");
 5400|  1.09M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.09M|                  "\n"
 5402|  1.09M|                  "Unsupported range type given as input to a scanning "
 5403|  1.09M|                  "function.\n"
 5404|  1.09M|                  "file_marker_found cannot be used as an "
 5405|  1.09M|                  "source range type to scn::scan.\n"
 5406|  1.09M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.09M|                  "and do not provide an explicit source range, "
 5408|  1.09M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.09M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.09M|                  "\n"
 5411|  1.09M|                  "Unsupported range type given as input to a scanning "
 5412|  1.09M|                  "function.\n"
 5413|  1.09M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.09M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.09M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.09M|                  "\n"
 5417|  1.09M|                  "Unsupported range type given as input to a scanning "
 5418|  1.09M|                  "function.\n"
 5419|  1.09M|                  "A range needs to model forward_range and have a valid "
 5420|  1.09M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.09M|                  "Examples of scannable ranges are std::string, "
 5422|  1.09M|                  "std::string_view, "
 5423|  1.09M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.09M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.09M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.09M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  1.09M|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  1.09M|    else {
 5366|  1.09M|        return make_forward_scan_buffer(r);
 5367|  1.09M|    }
 5368|  1.09M|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  1.09M|{
 5185|  1.09M|    return basic_scan_forward_buffer_impl(range);
 5186|  1.09M|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  1.09M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  1.09M|          m_cursor(ranges::begin(*m_range))
 4766|  1.09M|    {
 4767|  1.09M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  1.09M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  1.09M|    {
 4738|  1.09M|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  1.09M|        : m_current_view(sv), m_is_contiguous(false)
 4428|  1.09M|    {
 4429|  1.09M|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|  1.09M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.10M|    {
 2869|  2.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.10M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.10M|    {
 2850|  2.10M|        return decay_copy(t.begin());
 2851|  2.10M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  3.10M|    {
 3480|  3.10M|        return m_iterator;
 3481|  3.10M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  13.9M|    {
 4771|  13.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 288k, False: 13.6M]
  ------------------
 4772|   288k|            return false;
 4773|   288k|        }
 4774|  13.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  13.6M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  13.6M|        }
 4777|  13.6M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 12.5M, False: 1.08M]
  ------------------
 4778|  12.5M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  12.5M|                                          this->m_current_view.begin(),
 4780|  12.5M|                                          this->m_current_view.end());
 4781|  12.5M|        }
 4782|  13.6M|        m_latest = *m_cursor;
 4783|  13.6M|        ++m_cursor;
 4784|  13.6M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  13.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  13.6M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  13.6M|        }
 4788|  13.6M|        return true;
 4789|  13.9M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  41.2M|    {
 2926|  41.2M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  41.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  41.2M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  41.2M|    {
 2908|  41.2M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  41.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  41.2M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  42.2M|    {
 3484|  42.2M|        return m_sentinel;
 3485|  42.2M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  1.09M|    {
 4346|  1.09M|        SCN_UNUSED(position);
  ------------------
  |  |  915|  1.09M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  1.09M|        return true;
 4348|  1.09M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  90.9k|        : base(unexpect, std::move(e.error())),
 1616|  90.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  90.9k|    {
 1618|  90.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  90.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  90.9k|          m_has_value(false)
  451|  90.9k|    {
  452|  90.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.09M|    {
 1316|  1.09M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|  1.00M|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  1.00M|                      ranges::iterator_t<SourceRange>>) {
 6717|  1.00M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  1.00M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.00M|    {
 2869|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.00M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.00M|    {
 2850|  1.00M|        return decay_copy(t.begin());
 2851|  1.00M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|  1.00M|{
 6702|  1.00M|    return ranges::end(source);
 6703|  1.00M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.00M|    {
 2926|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.00M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.00M|    {
 2908|  1.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.00M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  1.00M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.00M|    {
 1572|  1.00M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  1.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.00M|    {
  442|  1.00M|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|   319k|    {
 8783|   319k|        return m_str;
 8784|   319k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  2.10M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.10M|    static_cast<    \
  |  |  935|  2.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.10M|    static_cast<    \
  |  |  935|  2.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.10M|    {
 3466|  2.10M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   319k|        : m_str(r.str)
 8778|   319k|    {
 8779|   319k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   351k|    {
 1740|   351k|        return has_value();
 1741|   351k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|   994k|    {
 1815|   994k|        return &value();
 1816|   994k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   994k|    {
 1769|   994k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   994k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   994k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   994k|        return this->get_value();
 1771|   994k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|  1.00M|    {
 6474|  1.00M|        return ranges::begin(m_range);
 6475|  1.00M|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|   159k|{
 9774|   159k|    auto result = make_scan_result<Source, Args...>();
 9775|   159k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   159k|                                   make_scan_args(result->values())));
 9777|   159k|    return result;
 9778|   159k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|   497k|{
 9503|   497k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|   497k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   497k|{
 9438|   497k|#if !SCN_DISABLE_LOCALE
 9439|   497k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   497k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   497k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   497k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   497k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.9k, False: 455k]
  |  |  ------------------
  ------------------
 9446|  41.9k|        return unexpected(result.error());
 9447|  41.9k|    }
 9448|   455k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   497k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  32.5k|{
 9815|  32.5k|    auto result = make_scan_result<Source, T>();
 9816|  32.5k|    fill_scan_result(
 9817|  32.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  32.5k|                            detail::make_arg<scan_context>(result->value())));
 9819|  32.5k|    return result;
 9820|  32.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|   102k|{
 9516|   102k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|   102k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   102k|{
 9462|   102k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   102k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   102k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.99k, False: 95.0k]
  |  |  ------------------
  ------------------
 9466|  6.99k|        return unexpected(result.error());
 9467|  6.99k|    }
 9468|  95.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  95.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   102k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|   168k|{
 9705|   168k|    auto result = make_scan_result<Source, Args...>();
 9706|   168k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   168k|                                   make_scan_args(result->values())));
 9708|   168k|    return result;
 9709|   168k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9660|   370k|{
 9661|   370k|    return scan_result_type<Source, Args...>();
 9662|   370k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   370k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   370k|        : m_value(T{}), m_has_value(true)
  427|   370k|    {
  428|   370k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6610|   370k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   370k|{
 9646|   370k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.3k, False: 340k]
  |  |  ------------------
  ------------------
 9647|  30.3k|        out = unexpected(in.error());
 9648|  30.3k|    }
 9649|   340k|    else {
 9650|   340k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   340k|    static_cast<    \
  |  |  935|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   340k|    }
 9652|   370k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.3k|        : base(unexpect, std::move(e.error())),
 1616|  30.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.3k|    {
 1618|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.3k|          m_has_value(false)
  451|  30.3k|    {
  452|  30.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.3k|    {
 1316|  30.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.3k|    {
  903|  30.3k|        assign_common(std::move(other));
  904|  30.3k|        return *this;
  905|  30.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.3k|    {
  950|  30.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.3k, False: 0]
  ------------------
  951|  30.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.48M|    {
  490|  1.48M|        return m_has_value;
  491|  1.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.05M|    {
  456|  1.05M|        return m_value;
  457|  1.05M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.3k|    {
 1046|  30.3k|        this->destroy_value();
 1047|  30.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.3k|    {
  504|  30.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.3k|                                  std::forward<Args>(args)...);
  506|  30.3k|        m_has_value = false;
  507|  30.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.3k|    {
  473|  30.3k|        return m_unexpected;
  474|  30.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.3k|    {
  481|  30.3k|        return std::move(m_unexpected);
  482|  30.3k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|   336k|    {
 8783|   336k|        return m_str;
 8784|   336k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   336k|        : m_str(r.str)
 8778|   336k|    {
 8779|   336k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   370k|    {
 1740|   370k|        return has_value();
 1741|   370k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|  1.05M|    {
 1815|  1.05M|        return &value();
 1816|  1.05M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.05M|    {
 1769|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.05M|        return this->get_value();
 1771|  1.05M|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|   168k|{
 9774|   168k|    auto result = make_scan_result<Source, Args...>();
 9775|   168k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   168k|                                   make_scan_args(result->values())));
 9777|   168k|    return result;
 9778|   168k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  34.5k|{
 9815|  34.5k|    auto result = make_scan_result<Source, T>();
 9816|  34.5k|    fill_scan_result(
 9817|  34.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  34.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  34.5k|                            detail::make_arg<scan_context>(result->value())));
 9819|  34.5k|    return result;
 9820|  34.5k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|   169k|{
 9705|   169k|    auto result = make_scan_result<Source, Args...>();
 9706|   169k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   169k|                                   make_scan_args(result->values())));
 9708|   169k|    return result;
 9709|   169k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9660|   374k|{
 9661|   374k|    return scan_result_type<Source, Args...>();
 9662|   374k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   374k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   374k|        : m_value(T{}), m_has_value(true)
  427|   374k|    {
  428|   374k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6610|   374k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   374k|{
 9646|   374k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.3k, False: 344k]
  |  |  ------------------
  ------------------
 9647|  30.3k|        out = unexpected(in.error());
 9648|  30.3k|    }
 9649|   344k|    else {
 9650|   344k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   344k|    static_cast<    \
  |  |  935|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   344k|    }
 9652|   374k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.3k|        : base(unexpect, std::move(e.error())),
 1616|  30.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.3k|    {
 1618|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.3k|          m_has_value(false)
  451|  30.3k|    {
  452|  30.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.3k|    {
 1316|  30.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.3k|    {
  903|  30.3k|        assign_common(std::move(other));
  904|  30.3k|        return *this;
  905|  30.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.3k|    {
  950|  30.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.3k, False: 0]
  ------------------
  951|  30.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.49M|    {
  490|  1.49M|        return m_has_value;
  491|  1.49M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.06M|    {
  456|  1.06M|        return m_value;
  457|  1.06M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.3k|    {
 1046|  30.3k|        this->destroy_value();
 1047|  30.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.3k|    {
  504|  30.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.3k|                                  std::forward<Args>(args)...);
  506|  30.3k|        m_has_value = false;
  507|  30.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.3k|    {
  473|  30.3k|        return m_unexpected;
  474|  30.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.3k|    {
  481|  30.3k|        return std::move(m_unexpected);
  482|  30.3k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|   339k|    {
 8783|   339k|        return m_str;
 8784|   339k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   339k|        : m_str(r.str)
 8778|   339k|    {
 8779|   339k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   374k|    {
 1740|   374k|        return has_value();
 1741|   374k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|  1.06M|    {
 1815|  1.06M|        return &value();
 1816|  1.06M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.06M|    {
 1769|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.06M|        return this->get_value();
 1771|  1.06M|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|   169k|{
 9774|   169k|    auto result = make_scan_result<Source, Args...>();
 9775|   169k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   169k|                                   make_scan_args(result->values())));
 9777|   169k|    return result;
 9778|   169k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  34.9k|{
 9815|  34.9k|    auto result = make_scan_result<Source, T>();
 9816|  34.9k|    fill_scan_result(
 9817|  34.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  34.9k|                            detail::make_arg<scan_context>(result->value())));
 9819|  34.9k|    return result;
 9820|  34.9k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   186k|    {
 2869|   186k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   186k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   186k|    {
 2850|   186k|        return decay_copy(t.begin());
 2851|   186k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  5.01M|{
 2094|  5.01M|    return SCN_FWD(t);
  ------------------
  |  |  936|  5.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.01M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.24M|    {
 2926|  1.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.24M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.24M|    {
 2908|  1.24M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.24M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9660|   187k|{
 9661|   187k|    return scan_result_type<Source, Args...>();
 9662|   187k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   187k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   187k|        : m_value(T{}), m_has_value(true)
  427|   187k|    {
  428|   187k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6610|   187k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|   619k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   619k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   187k|{
 9646|   187k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.6k, False: 126k]
  |  |  ------------------
  ------------------
 9647|  60.6k|        out = unexpected(in.error());
 9648|  60.6k|    }
 9649|   126k|    else {
 9650|   126k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   126k|    static_cast<    \
  |  |  935|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   126k|    }
 9652|   187k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   619k|    {
 1740|   619k|        return has_value();
 1741|   619k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.23M|    {
  490|  1.23M|        return m_has_value;
  491|  1.23M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   181k|    {
 1746|   181k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   181k|        return this->get_unexpected().error();
 1748|   181k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   181k|    {
  473|   181k|        return m_unexpected;
  474|   181k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  60.6k|        : base(unexpect, std::move(e.error())),
 1616|  60.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.6k|    {
 1618|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  60.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.6k|          m_has_value(false)
  451|  60.6k|    {
  452|  60.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.6k|    {
 1316|  60.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  60.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  60.6k|    {
  903|  60.6k|        assign_common(std::move(other));
  904|  60.6k|        return *this;
  905|  60.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  60.6k|    {
  950|  60.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.6k, False: 0]
  ------------------
  951|  60.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   750k|    {
  490|   750k|        return m_has_value;
  491|   750k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   441k|    {
  456|   441k|        return m_value;
  457|   441k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  60.6k|    {
 1046|  60.6k|        this->destroy_value();
 1047|  60.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  60.6k|    {
  504|  60.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.6k|                                  std::forward<Args>(args)...);
  506|  60.6k|        m_has_value = false;
  507|  60.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.6k|    {
  473|  60.6k|        return m_unexpected;
  474|  60.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.6k|    {
  481|  60.6k|        return std::move(m_unexpected);
  482|  60.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|   437k|    {
 6485|   437k|        m_range = std::forward<Other>(r);
 6486|   437k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   437k|    {
 1795|   437k|        return value();
 1796|   437k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   437k|    {
 1769|   437k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   437k|        return this->get_value();
 1771|   437k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   437k|    {
  456|   437k|        return m_value;
  457|   437k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   281k|{
 9422|   281k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   281k|    auto result = vscan_impl(buffer, format, args);
 9425|   281k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.9k, False: 197k]
  |  |  ------------------
  ------------------
 9426|  83.9k|        return unexpected(result.error());
 9427|  83.9k|    }
 9428|   197k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   281k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|   619k|{
 5381|   619k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   619k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   619k|                  "\n"
 5385|   619k|                  "Unsupported range type given as input to a scanning "
 5386|   619k|                  "function.\n"
 5387|   619k|                  "A range needs to have a character type (value type) "
 5388|   619k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   619k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   619k|                  "to be included.\n"
 5391|   619k|                  "See the scnlib documentation for more details.");
 5392|   619k|    static_assert(
 5393|   619k|        !std::is_same_v<T, custom_char_traits>,
 5394|   619k|        "\n"
 5395|   619k|        "Unsupported range type given as input to a scanning "
 5396|   619k|        "function.\n"
 5397|   619k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   619k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   619k|        "not supported.");
 5400|   619k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   619k|                  "\n"
 5402|   619k|                  "Unsupported range type given as input to a scanning "
 5403|   619k|                  "function.\n"
 5404|   619k|                  "file_marker_found cannot be used as an "
 5405|   619k|                  "source range type to scn::scan.\n"
 5406|   619k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   619k|                  "and do not provide an explicit source range, "
 5408|   619k|                  "or use scn::scan with a FILE* directly.");
 5409|   619k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   619k|                  "\n"
 5411|   619k|                  "Unsupported range type given as input to a scanning "
 5412|   619k|                  "function.\n"
 5413|   619k|                  "In order to be scannable, a range needs to satisfy "
 5414|   619k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   619k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   619k|                  "\n"
 5417|   619k|                  "Unsupported range type given as input to a scanning "
 5418|   619k|                  "function.\n"
 5419|   619k|                  "A range needs to model forward_range and have a valid "
 5420|   619k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   619k|                  "Examples of scannable ranges are std::string, "
 5422|   619k|                  "std::string_view, "
 5423|   619k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   619k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   619k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   619k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   619k|{
 5320|   619k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   619k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   619k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   619k|    {
 3000|   619k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   619k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   619k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   619k|    {
 2981|   619k|        return t.data();
 2982|   619k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   619k|    {
 3383|   619k|        return detail::to_address(ranges::begin(derived()));
 3384|   619k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.93M|{
  316|  2.93M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.93M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  2.93M|{
  294|  2.93M|    return p;
  295|  2.93M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.05M|    {
 2869|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.05M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.05M|    {
 2850|  1.05M|        return decay_copy(t.begin());
 2851|  1.05M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  22.9M|    {
 3480|  22.9M|        return m_iterator;
 3481|  22.9M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   619k|    {
 3339|   619k|        return static_cast<const D&>(*this);
 3340|   619k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   619k|    {
 3075|   619k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   619k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   619k|    {
 3041|   619k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   619k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   619k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  3.23M|    {
 3496|  3.23M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  3.23M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   181k|        : base(unexpect, std::move(e.error())),
 1616|   181k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   181k|    {
 1618|   181k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   181k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   181k|          m_has_value(false)
  451|   181k|    {
  452|   181k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   619k|    {
 1316|   619k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   437k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   437k|                      ranges::iterator_t<SourceRange>>) {
 6717|   437k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   437k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.09M|    {
 2869|  2.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.09M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.09M|    {
 2850|  2.09M|        return decay_copy(t.begin());
 2851|  2.09M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|   437k|{
 6702|   437k|    return ranges::end(source);
 6703|   437k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   437k|    {
 2926|   437k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   437k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   437k|    {
 2908|   437k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   437k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  12.7M|    {
 3484|  12.7M|        return m_sentinel;
 3485|  12.7M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   437k|        : base(std::in_place, std::forward<U>(val)),
 1570|   437k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   437k|    {
 1572|   437k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   437k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   437k|    {
  442|   437k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|   171k|    {
 8783|   171k|        return m_str;
 8784|   171k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   343k|{
 6115|   343k|    detail::check_scan_arg_types<Args...>();
 6116|   343k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   343k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6090|   343k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   343k|    {
 6092|   343k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   343k|    {
 6100|   343k|        return {detail::make_arg<
 6101|   343k|            kind, Context,
 6102|   343k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   343k|                                 typename Context::char_type>::value>(args)...};
 6104|   343k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5879|   343k|{
 5880|   343k|    return make_value<Context>(value).ref_value;
 5881|   343k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5814|   375k|{
 5815|   375k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   375k|                                  needs_context_tag>) {
 5819|   375k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   375k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5653|   375k|    {                                                                        \
 5654|   375k|        return val;                                                          \
 5655|   375k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   343k|        : basic_scan_args(store.desc, store.args.data())
 6141|   343k|    {
 6142|   343k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6192|  1.12M|        : m_desc(desc), m_builtin_values(data)
 6193|  1.12M|    {
 6194|  1.12M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  8.32M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  8.32M|    static_cast<    \
  |  |  935|  8.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  8.32M|    static_cast<    \
  |  |  935|  8.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  8.32M|    {
 3466|  8.32M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|  1.12M|{
 8449|  1.12M|    return s;
 8450|  1.12M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|  1.12M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   171k|        : m_str(r.str)
 8778|   171k|    {
 8779|   171k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   187k|    {
 1740|   187k|        return has_value();
 1741|   187k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   441k|    {
 1815|   441k|        return &value();
 1816|   441k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   441k|    {
 1769|   441k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   441k|        return this->get_value();
 1771|   441k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|   437k|    {
 6474|   437k|        return ranges::begin(m_range);
 6475|   437k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   281k|{
 9438|   281k|#if !SCN_DISABLE_LOCALE
 9439|   281k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   281k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   281k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   281k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   281k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.9k, False: 197k]
  |  |  ------------------
  ------------------
 9446|  83.9k|        return unexpected(result.error());
 9447|  83.9k|    }
 9448|   197k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   281k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  55.6k|{
 9462|  55.6k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  55.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  55.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.9k, False: 41.6k]
  |  |  ------------------
  ------------------
 9466|  13.9k|        return unexpected(result.error());
 9467|  13.9k|    }
 9468|  41.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  55.6k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5864|  31.7k|{
 5865|  31.7k|    check_scan_arg_types<T>();
 5866|       |
 5867|  31.7k|    basic_scan_arg<Context> arg;
 5868|  31.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  31.7k|    arg.m_value = make_value<Context>(value);
 5870|  31.7k|    return arg;
 5871|  31.7k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|  1.23M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9660|   213k|{
 9661|   213k|    return scan_result_type<Source, Args...>();
 9662|   213k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   213k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   213k|        : m_value(T{}), m_has_value(true)
  427|   213k|    {
  428|   213k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6610|   213k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   213k|{
 9646|   213k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.6k, False: 153k]
  |  |  ------------------
  ------------------
 9647|  60.6k|        out = unexpected(in.error());
 9648|  60.6k|    }
 9649|   153k|    else {
 9650|   153k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   153k|    }
 9652|   213k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  60.6k|        : base(unexpect, std::move(e.error())),
 1616|  60.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.6k|    {
 1618|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  60.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.6k|          m_has_value(false)
  451|  60.6k|    {
  452|  60.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.6k|    {
 1316|  60.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  60.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  60.6k|    {
  903|  60.6k|        assign_common(std::move(other));
  904|  60.6k|        return *this;
  905|  60.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  60.6k|    {
  950|  60.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.6k, False: 0]
  ------------------
  951|  60.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   855k|    {
  490|   855k|        return m_has_value;
  491|   855k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   520k|    {
  456|   520k|        return m_value;
  457|   520k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  60.6k|    {
 1046|  60.6k|        this->destroy_value();
 1047|  60.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  60.6k|    {
  504|  60.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.6k|                                  std::forward<Args>(args)...);
  506|  60.6k|        m_has_value = false;
  507|  60.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.6k|    {
  473|  60.6k|        return m_unexpected;
  474|  60.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.6k|    {
  481|  60.6k|        return std::move(m_unexpected);
  482|  60.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|   194k|    {
 8783|   194k|        return m_str;
 8784|   194k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   388k|{
 6115|   388k|    detail::check_scan_arg_types<Args...>();
 6116|   388k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   388k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6090|   388k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   388k|    {
 6092|   388k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   388k|    {
 6100|   388k|        return {detail::make_arg<
 6101|   388k|            kind, Context,
 6102|   388k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   388k|                                 typename Context::char_type>::value>(args)...};
 6104|   388k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5879|   388k|{
 5880|   388k|    return make_value<Context>(value).ref_value;
 5881|   388k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5814|   427k|{
 5815|   427k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   427k|                                  needs_context_tag>) {
 5819|   427k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   427k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5653|   427k|    {                                                                        \
 5654|   427k|        return val;                                                          \
 5655|   427k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   388k|        : basic_scan_args(store.desc, store.args.data())
 6141|   388k|    {
 6142|   388k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   194k|        : m_str(r.str)
 8778|   194k|    {
 8779|   194k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   213k|    {
 1740|   213k|        return has_value();
 1741|   213k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|   520k|    {
 1815|   520k|        return &value();
 1816|   520k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   520k|    {
 1769|   520k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   520k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   520k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   520k|        return this->get_value();
 1771|   520k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5864|  39.2k|{
 5865|  39.2k|    check_scan_arg_types<T>();
 5866|       |
 5867|  39.2k|    basic_scan_arg<Context> arg;
 5868|  39.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  39.2k|    arg.m_value = make_value<Context>(value);
 5870|  39.2k|    return arg;
 5871|  39.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9660|   218k|{
 9661|   218k|    return scan_result_type<Source, Args...>();
 9662|   218k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   218k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   218k|        : m_value(T{}), m_has_value(true)
  427|   218k|    {
  428|   218k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6610|   218k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   218k|{
 9646|   218k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.6k, False: 157k]
  |  |  ------------------
  ------------------
 9647|  60.6k|        out = unexpected(in.error());
 9648|  60.6k|    }
 9649|   157k|    else {
 9650|   157k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   157k|    }
 9652|   218k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  60.6k|        : base(unexpect, std::move(e.error())),
 1616|  60.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.6k|    {
 1618|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  60.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.6k|          m_has_value(false)
  451|  60.6k|    {
  452|  60.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.6k|    {
 1316|  60.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  60.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  60.6k|    {
  903|  60.6k|        assign_common(std::move(other));
  904|  60.6k|        return *this;
  905|  60.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  60.6k|    {
  950|  60.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.6k, False: 0]
  ------------------
  951|  60.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   872k|    {
  490|   872k|        return m_has_value;
  491|   872k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   532k|    {
  456|   532k|        return m_value;
  457|   532k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  60.6k|    {
 1046|  60.6k|        this->destroy_value();
 1047|  60.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  60.6k|    {
  504|  60.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.6k|                                  std::forward<Args>(args)...);
  506|  60.6k|        m_has_value = false;
  507|  60.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.6k|    {
  473|  60.6k|        return m_unexpected;
  474|  60.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.6k|    {
  481|  60.6k|        return std::move(m_unexpected);
  482|  60.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|   197k|    {
 8783|   197k|        return m_str;
 8784|   197k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   395k|{
 6115|   395k|    detail::check_scan_arg_types<Args...>();
 6116|   395k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   395k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6090|   395k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   395k|    {
 6092|   395k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   395k|    {
 6100|   395k|        return {detail::make_arg<
 6101|   395k|            kind, Context,
 6102|   395k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   395k|                                 typename Context::char_type>::value>(args)...};
 6104|   395k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EevEEPvRT2_:
 5879|   395k|{
 5880|   395k|    return make_value<Context>(value).ref_value;
 5881|   395k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5814|   435k|{
 5815|   435k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   435k|                                  needs_context_tag>) {
 5819|   435k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   435k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   435k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5653|   435k|    {                                                                        \
 5654|   435k|        return val;                                                          \
 5655|   435k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   395k|        : basic_scan_args(store.desc, store.args.data())
 6141|   395k|    {
 6142|   395k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   197k|        : m_str(r.str)
 8778|   197k|    {
 8779|   197k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   218k|    {
 1740|   218k|        return has_value();
 1741|   218k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|   532k|    {
 1815|   532k|        return &value();
 1816|   532k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   532k|    {
 1769|   532k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   532k|        return this->get_value();
 1771|   532k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5864|  40.3k|{
 5865|  40.3k|    check_scan_arg_types<T>();
 5866|       |
 5867|  40.3k|    basic_scan_arg<Context> arg;
 5868|  40.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  40.3k|    arg.m_value = make_value<Context>(value);
 5870|  40.3k|    return arg;
 5871|  40.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   181k|    {
 2869|   181k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   181k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   181k|    {
 2850|   181k|        return decay_copy(t.begin());
 2851|   181k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  12.4M|{
 2094|  12.4M|    return SCN_FWD(t);
  ------------------
  |  |  936|  12.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  12.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.23M|    {
 2926|  1.23M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.23M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.23M|    {
 2908|  1.23M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.23M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9660|   187k|{
 9661|   187k|    return scan_result_type<Source, Args...>();
 9662|   187k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   187k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   187k|        : m_value(T{}), m_has_value(true)
  427|   187k|    {
  428|   187k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6610|   187k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|   618k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   618k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   187k|{
 9646|   187k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.6k, False: 126k]
  |  |  ------------------
  ------------------
 9647|  60.6k|        out = unexpected(in.error());
 9648|  60.6k|    }
 9649|   126k|    else {
 9650|   126k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   126k|    static_cast<    \
  |  |  935|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   126k|    }
 9652|   187k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   618k|    {
 1740|   618k|        return has_value();
 1741|   618k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.23M|    {
  490|  1.23M|        return m_has_value;
  491|  1.23M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   181k|    {
 1746|   181k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   181k|        return this->get_unexpected().error();
 1748|   181k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   181k|    {
  473|   181k|        return m_unexpected;
  474|   181k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  60.6k|        : base(unexpect, std::move(e.error())),
 1616|  60.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.6k|    {
 1618|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  60.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.6k|          m_has_value(false)
  451|  60.6k|    {
  452|  60.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.6k|    {
 1316|  60.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  60.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  60.6k|    {
  903|  60.6k|        assign_common(std::move(other));
  904|  60.6k|        return *this;
  905|  60.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  60.6k|    {
  950|  60.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.6k, False: 0]
  ------------------
  951|  60.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   749k|    {
  490|   749k|        return m_has_value;
  491|   749k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   441k|    {
  456|   441k|        return m_value;
  457|   441k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  60.6k|    {
 1046|  60.6k|        this->destroy_value();
 1047|  60.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  60.6k|    {
  504|  60.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.6k|                                  std::forward<Args>(args)...);
  506|  60.6k|        m_has_value = false;
  507|  60.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.6k|    {
  473|  60.6k|        return m_unexpected;
  474|  60.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.6k|    {
  481|  60.6k|        return std::move(m_unexpected);
  482|  60.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   437k|    {
 6485|   437k|        m_range = std::forward<Other>(r);
 6486|   437k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   437k|    {
 1795|   437k|        return value();
 1796|   437k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   437k|    {
 1769|   437k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   437k|        return this->get_value();
 1771|   437k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   437k|    {
  456|   437k|        return m_value;
  457|   437k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   281k|{
 9422|   281k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   281k|    auto result = vscan_impl(buffer, format, args);
 9425|   281k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.9k, False: 197k]
  |  |  ------------------
  ------------------
 9426|  83.9k|        return unexpected(result.error());
 9427|  83.9k|    }
 9428|   197k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   281k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   618k|{
 5381|   618k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   618k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   618k|                  "\n"
 5385|   618k|                  "Unsupported range type given as input to a scanning "
 5386|   618k|                  "function.\n"
 5387|   618k|                  "A range needs to have a character type (value type) "
 5388|   618k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   618k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   618k|                  "to be included.\n"
 5391|   618k|                  "See the scnlib documentation for more details.");
 5392|   618k|    static_assert(
 5393|   618k|        !std::is_same_v<T, custom_char_traits>,
 5394|   618k|        "\n"
 5395|   618k|        "Unsupported range type given as input to a scanning "
 5396|   618k|        "function.\n"
 5397|   618k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   618k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   618k|        "not supported.");
 5400|   618k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   618k|                  "\n"
 5402|   618k|                  "Unsupported range type given as input to a scanning "
 5403|   618k|                  "function.\n"
 5404|   618k|                  "file_marker_found cannot be used as an "
 5405|   618k|                  "source range type to scn::scan.\n"
 5406|   618k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   618k|                  "and do not provide an explicit source range, "
 5408|   618k|                  "or use scn::scan with a FILE* directly.");
 5409|   618k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   618k|                  "\n"
 5411|   618k|                  "Unsupported range type given as input to a scanning "
 5412|   618k|                  "function.\n"
 5413|   618k|                  "In order to be scannable, a range needs to satisfy "
 5414|   618k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   618k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   618k|                  "\n"
 5417|   618k|                  "Unsupported range type given as input to a scanning "
 5418|   618k|                  "function.\n"
 5419|   618k|                  "A range needs to model forward_range and have a valid "
 5420|   618k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   618k|                  "Examples of scannable ranges are std::string, "
 5422|   618k|                  "std::string_view, "
 5423|   618k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   618k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   618k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   618k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   618k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   618k|    else {
 5366|   618k|        return make_forward_scan_buffer(r);
 5367|   618k|    }
 5368|   618k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   618k|{
 5185|   618k|    return basic_scan_forward_buffer_impl(range);
 5186|   618k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   618k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   618k|          m_cursor(ranges::begin(*m_range))
 4766|   618k|    {
 4767|   618k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   618k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   618k|    {
 4738|   618k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   618k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   618k|    {
 4429|   618k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   618k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.05M|    {
 2869|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.05M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.05M|    {
 2850|  1.05M|        return decay_copy(t.begin());
 2851|  1.05M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  1.49M|    {
 3480|  1.49M|        return m_iterator;
 3481|  1.49M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  3.15M|    {
 4771|  3.15M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 199k, False: 2.95M]
  ------------------
 4772|   199k|            return false;
 4773|   199k|        }
 4774|  2.95M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  2.95M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  2.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  2.95M|        }
 4777|  2.95M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 2.33M, False: 616k]
  ------------------
 4778|  2.33M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  2.33M|                                          this->m_current_view.begin(),
 4780|  2.33M|                                          this->m_current_view.end());
 4781|  2.33M|        }
 4782|  2.95M|        m_latest = *m_cursor;
 4783|  2.95M|        ++m_cursor;
 4784|  2.95M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  2.95M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  2.95M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  2.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  2.95M|        }
 4788|  2.95M|        return true;
 4789|  3.15M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  9.06M|    {
 2926|  9.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  9.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  9.06M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  9.06M|    {
 2908|  9.06M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  9.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  9.06M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  9.50M|    {
 3484|  9.50M|        return m_sentinel;
 3485|  9.50M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   618k|    {
 4346|   618k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   618k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   618k|        return true;
 4348|   618k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   181k|        : base(unexpect, std::move(e.error())),
 1616|   181k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   181k|    {
 1618|   181k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   181k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   181k|          m_has_value(false)
  451|   181k|    {
  452|   181k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   618k|    {
 1316|   618k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   437k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   437k|                      ranges::iterator_t<SourceRange>>) {
 6717|   437k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   437k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   437k|    {
 2869|   437k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   437k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   437k|    {
 2850|   437k|        return decay_copy(t.begin());
 2851|   437k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|   437k|{
 6702|   437k|    return ranges::end(source);
 6703|   437k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   437k|    {
 2926|   437k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   437k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   437k|    {
 2908|   437k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   437k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   437k|        : base(std::in_place, std::forward<U>(val)),
 1570|   437k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   437k|    {
 1572|   437k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   437k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   437k|    {
  442|   437k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|   171k|    {
 8783|   171k|        return m_str;
 8784|   171k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.05M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.05M|    static_cast<    \
  |  |  935|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.05M|    static_cast<    \
  |  |  935|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.05M|    {
 3466|  1.05M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   171k|        : m_str(r.str)
 8778|   171k|    {
 8779|   171k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   187k|    {
 1740|   187k|        return has_value();
 1741|   187k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|   441k|    {
 1815|   441k|        return &value();
 1816|   441k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   441k|    {
 1769|   441k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   441k|        return this->get_value();
 1771|   441k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|   437k|    {
 6474|   437k|        return ranges::begin(m_range);
 6475|   437k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   281k|{
 9438|   281k|#if !SCN_DISABLE_LOCALE
 9439|   281k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   281k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   281k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   281k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   281k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.9k, False: 197k]
  |  |  ------------------
  ------------------
 9446|  83.9k|        return unexpected(result.error());
 9447|  83.9k|    }
 9448|   197k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   281k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  55.6k|{
 9462|  55.6k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  55.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  55.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.9k, False: 41.6k]
  |  |  ------------------
  ------------------
 9466|  13.9k|        return unexpected(result.error());
 9467|  13.9k|    }
 9468|  41.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  55.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9660|   213k|{
 9661|   213k|    return scan_result_type<Source, Args...>();
 9662|   213k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   213k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   213k|        : m_value(T{}), m_has_value(true)
  427|   213k|    {
  428|   213k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6610|   213k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   213k|{
 9646|   213k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.6k, False: 153k]
  |  |  ------------------
  ------------------
 9647|  60.6k|        out = unexpected(in.error());
 9648|  60.6k|    }
 9649|   153k|    else {
 9650|   153k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   153k|    }
 9652|   213k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  60.6k|        : base(unexpect, std::move(e.error())),
 1616|  60.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.6k|    {
 1618|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  60.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.6k|          m_has_value(false)
  451|  60.6k|    {
  452|  60.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.6k|    {
 1316|  60.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  60.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  60.6k|    {
  903|  60.6k|        assign_common(std::move(other));
  904|  60.6k|        return *this;
  905|  60.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  60.6k|    {
  950|  60.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.6k, False: 0]
  ------------------
  951|  60.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   854k|    {
  490|   854k|        return m_has_value;
  491|   854k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   519k|    {
  456|   519k|        return m_value;
  457|   519k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  60.6k|    {
 1046|  60.6k|        this->destroy_value();
 1047|  60.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  60.6k|    {
  504|  60.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.6k|                                  std::forward<Args>(args)...);
  506|  60.6k|        m_has_value = false;
  507|  60.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.6k|    {
  473|  60.6k|        return m_unexpected;
  474|  60.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.6k|    {
  481|  60.6k|        return std::move(m_unexpected);
  482|  60.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|   194k|    {
 8783|   194k|        return m_str;
 8784|   194k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   194k|        : m_str(r.str)
 8778|   194k|    {
 8779|   194k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   213k|    {
 1740|   213k|        return has_value();
 1741|   213k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|   519k|    {
 1815|   519k|        return &value();
 1816|   519k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   519k|    {
 1769|   519k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   519k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   519k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   519k|        return this->get_value();
 1771|   519k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9660|   217k|{
 9661|   217k|    return scan_result_type<Source, Args...>();
 9662|   217k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   217k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   217k|        : m_value(T{}), m_has_value(true)
  427|   217k|    {
  428|   217k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6610|   217k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   217k|{
 9646|   217k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.6k, False: 157k]
  |  |  ------------------
  ------------------
 9647|  60.6k|        out = unexpected(in.error());
 9648|  60.6k|    }
 9649|   157k|    else {
 9650|   157k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   157k|    }
 9652|   217k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  60.6k|        : base(unexpect, std::move(e.error())),
 1616|  60.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.6k|    {
 1618|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  60.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.6k|          m_has_value(false)
  451|  60.6k|    {
  452|  60.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.6k|    {
 1316|  60.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  60.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  60.6k|    {
  903|  60.6k|        assign_common(std::move(other));
  904|  60.6k|        return *this;
  905|  60.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  60.6k|    {
  950|  60.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.6k, False: 0]
  ------------------
  951|  60.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   871k|    {
  490|   871k|        return m_has_value;
  491|   871k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   532k|    {
  456|   532k|        return m_value;
  457|   532k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  60.6k|    {
 1046|  60.6k|        this->destroy_value();
 1047|  60.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  60.6k|    {
  504|  60.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.6k|                                  std::forward<Args>(args)...);
  506|  60.6k|        m_has_value = false;
  507|  60.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.6k|    {
  473|  60.6k|        return m_unexpected;
  474|  60.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.6k|    {
  481|  60.6k|        return std::move(m_unexpected);
  482|  60.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|   197k|    {
 8783|   197k|        return m_str;
 8784|   197k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   197k|        : m_str(r.str)
 8778|   197k|    {
 8779|   197k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   217k|    {
 1740|   217k|        return has_value();
 1741|   217k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|   532k|    {
 1815|   532k|        return &value();
 1816|   532k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   532k|    {
 1769|   532k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   532k|        return this->get_value();
 1771|   532k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|  3.67M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|  3.67M|    {
 3742|  3.67M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  3.67M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|  3.67M|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|   280k|    {
 3753|   280k|        return m_code;
 3754|   280k|    }
_ZNK3scn2v410scan_error3msgEv:
 3757|  2.39k|    {
 3758|  2.39k|        return m_msg;
 3759|  2.39k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   815k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   815k|    else {
 3981|   815k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   815k|    }
 3983|   815k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  49.2M|    {
 3480|  49.2M|        return m_iterator;
 3481|  49.2M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  26.0M|    {
 3480|  26.0M|        return m_iterator;
 3481|  26.0M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  19.0M|    {
  572|  19.0M|        return m_has_value;
  573|  19.0M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  3.89M|    {
  555|  3.89M|        return m_unexpected;
  556|  3.89M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   434k|    {
 1746|   434k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   434k|        return this->get_unexpected().error();
 1748|   434k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7014|  2.36M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7058|  1.73M|    {
 7059|  1.73M|        m_specs.type = type;
 7060|  1.73M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7131|  2.36M|    {
 7132|  2.36M|        return m_error;
 7133|  2.36M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|  3.63M|{
 3918|  3.63M|    return unexpected(scan_error{c, m});
 3919|  3.63M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  5.03M|{
 4308|       |    // Pattern_White_Space property
 4309|  5.03M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 4.81M, False: 215k]
  |  Branch (4309:27): [True: 809k, False: 4.00M]
  ------------------
 4310|  5.03M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 51.2k, False: 4.17M]
  ------------------
 4311|  5.03M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 51.9k, False: 4.12M]
  ------------------
 4312|  5.03M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 4.33k, False: 4.11M]
  ------------------
 4313|  5.03M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 18.6k, False: 4.09M]
  ------------------
 4314|  5.03M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 1.04M, False: 3.05M]
  ------------------
 4315|  5.03M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 462, False: 3.05M]
  ------------------
 4316|  5.03M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7814|   634k|{
 7815|   634k|    switch (type) {
 7816|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 634k]
  ------------------
 7817|      0|            return arg_type_category::none;
 7818|       |
 7819|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 634k]
  ------------------
 7820|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 634k]
  ------------------
 7821|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7821:9): [True: 0, False: 634k]
  ------------------
 7822|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7822:9): [True: 0, False: 634k]
  ------------------
 7823|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 634k]
  ------------------
 7824|      0|            return arg_type_category::integer;
 7825|       |
 7826|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 634k]
  ------------------
 7827|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 634k]
  ------------------
 7828|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7828:9): [True: 0, False: 634k]
  ------------------
 7829|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 634k]
  ------------------
 7830|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 634k]
  ------------------
 7831|      0|            return arg_type_category::unsigned_integer;
 7832|       |
 7833|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 634k]
  ------------------
 7834|      0|            return arg_type_category::pointer;
 7835|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 634k]
  ------------------
 7836|      0|            return arg_type_category::boolean;
 7837|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 634k]
  ------------------
 7838|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7838:9): [True: 0, False: 634k]
  ------------------
 7839|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 634k]
  ------------------
 7840|      0|            return arg_type_category::character;
 7841|       |
 7842|   194k|        case arg_type::float_type:
  ------------------
  |  Branch (7842:9): [True: 194k, False: 439k]
  ------------------
 7843|   412k|        case arg_type::double_type:
  ------------------
  |  Branch (7843:9): [True: 217k, False: 416k]
  ------------------
 7844|   634k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7844:9): [True: 222k, False: 412k]
  ------------------
 7845|   634k|            return arg_type_category::floating;
 7846|       |
 7847|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7847:9): [True: 0, False: 634k]
  ------------------
 7848|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7848:9): [True: 0, False: 634k]
  ------------------
 7849|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7849:9): [True: 0, False: 634k]
  ------------------
 7850|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 634k]
  ------------------
 7851|      0|            return arg_type_category::string;
 7852|       |
 7853|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 634k]
  ------------------
 7854|      0|            return arg_type_category::custom;
 7855|       |
 7856|      0|            SCN_CLANG_PUSH
 7857|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7858|      0|        default:
  ------------------
  |  Branch (7858:9): [True: 0, False: 634k]
  ------------------
 7859|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7860|   634k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7861|   634k|            SCN_CLANG_POP
 7862|   634k|    }
 7863|       |
 7864|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7865|   634k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|  3.45M|    {
 1756|  3.45M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.45M|        return std::move(this->get_unexpected().error());
 1758|  3.45M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  2.73M|    {
 3041|  2.73M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  2.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  2.73M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3074|  2.73M|    {
 3075|  2.73M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  2.73M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3097|  2.73M|    {
 3098|  2.73M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|  2.73M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3106|  2.73M|    {
 3107|  2.73M|        return fn::impl(std::forward<T>(t));
 3108|  2.73M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7944|  2.36M|{
 7945|  2.36M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7945:9): [True: 1.73M, False: 634k]
  ------------------
 7946|  2.36M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7946:10): [True: 0, False: 1.73M]
  ------------------
 7947|  1.73M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7947:10): [True: 0, False: 1.73M]
  ------------------
 7948|      0|        SCN_UNLIKELY_ATTR
 7949|      0|        return handler.on_error("Invalid type specifier for float type");
 7950|      0|    }
 7951|  2.36M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  15.1M|    {
 1740|  15.1M|        return has_value();
 1741|  15.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|   314M|    {
 4473|   314M|        assert(m_begin);
 4474|   314M|        return m_end == nullptr;
 4475|   314M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|  4.10M|    {
 4490|  4.10M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 4.10M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  4.10M|        return parent()->get_segment_starting_at(position());
 4496|  4.10M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|   175M|    {
 4484|   175M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   175M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   175M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   175M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   175M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  4.10M|    {
 4377|  4.10M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  4.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.76M, False: 2.34M]
  |  |  ------------------
  ------------------
 4378|  4.10M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.76M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.76M|        }
 4381|  2.34M|        const auto start = pos - m_putback_buffer.size();
 4382|  2.34M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  2.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  2.34M|        return m_current_view.substr(start);
 4384|  2.34M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4478|  2.87M|    {
 4479|  2.87M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  2.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|  2.87M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|  2.87M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|  7.56M|    {
 4468|  7.56M|        return m_position;
 4469|  7.56M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|  3.28M|    {
 4399|  3.28M|        return m_is_contiguous;
 4400|  3.28M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  84.6M|    {
 4473|  84.6M|        assert(m_begin);
 4474|  84.6M|        return m_end == nullptr;
 4475|  84.6M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   422k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   422k|    else {
 3981|   422k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   422k|    }
 3983|   422k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  1.49M|    {
 4490|  1.49M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.49M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.49M|        return parent()->get_segment_starting_at(position());
 4496|  1.49M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  45.3M|    {
 4484|  45.3M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  45.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  45.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  45.3M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  45.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  1.49M|    {
 4377|  1.49M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 860k, False: 638k]
  |  |  ------------------
  ------------------
 4378|  1.49M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   860k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   860k|        }
 4381|   638k|        const auto start = pos - m_putback_buffer.size();
 4382|   638k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   638k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   638k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   638k|        return m_current_view.substr(start);
 4384|   638k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4478|  1.62M|    {
 4479|  1.62M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|  1.62M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|  1.62M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  3.28M|    {
 4468|  3.28M|        return m_position;
 4469|  3.28M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  1.85M|    {
 4399|  1.85M|        return m_is_contiguous;
 4400|  1.85M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  5.58M|    {
 3334|  5.58M|        return static_cast<D&>(*this);
 3335|  5.58M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  5.58M|    {
 3375|  5.58M|        return detail::to_address(ranges::begin(derived()));
 3376|  5.58M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  1.43M|    {
 3334|  1.43M|        return static_cast<D&>(*this);
 3335|  1.43M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  1.43M|    {
 3375|  1.43M|        return detail::to_address(ranges::begin(derived()));
 3376|  1.43M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|   790k|    {
 8980|   790k|        return ranges::subrange{begin(), end()};
 8981|   790k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|   790k|    {
 8972|   790k|        return ranges::default_sentinel;
 8973|   790k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  11.9M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  11.9M|    static_cast<    \
  |  |  935|  11.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  11.9M|    static_cast<    \
  |  |  935|  11.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  11.9M|    {
 3466|  11.9M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|  5.02M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.09M|    {
 1979|  1.09M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.09M|                                            std::forward<F>(f));
 1981|  1.09M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.09M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.09M|    else {
 1472|  1.09M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.09M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.07M, False: 19.4k]
  |  |  ------------------
  ------------------
 1474|  1.09M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.09M|                   : result(unexpect,
 1476|  19.4k|                            trivial_invoke(std::forward<F>(f),
 1477|  19.4k|                                           std::forward<Exp>(exp).error()));
 1478|  1.09M|    }
 1479|  1.09M|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  11.6M|    {
  490|  11.6M|        return m_has_value;
  491|  11.6M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  3.91M|    {
 1805|  3.91M|        return std::move(value());
 1806|  3.91M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  4.50M|    {
 1769|  4.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.50M|        return this->get_value();
 1771|  4.50M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  4.50M|    {
  456|  4.50M|        return m_value;
  457|  4.50M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  4.81M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.81M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.81M|    {
 1572|  4.81M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.81M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.81M|    {
  442|  4.81M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.18M|    {
 1316|  6.18M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  44.0k|{
 1350|  44.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  44.0k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  54.6k|    {
 1756|  54.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  54.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  54.6k|        return std::move(this->get_unexpected().error());
 1758|  54.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  74.2k|    {
  473|  74.2k|        return m_unexpected;
  474|  74.2k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   449k|    {
  365|   449k|        return m_unexpected;
  366|   449k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.09M|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.09M|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.09M|    {
 1628|  1.09M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.32M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.32M|          m_has_value(false)
  451|  1.32M|    {
  452|  1.32M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   452k|    {
 8980|   452k|        return ranges::subrange{begin(), end()};
 8981|   452k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   452k|    {
 8972|   452k|        return ranges::default_sentinel;
 8973|   452k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  6.33M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.33M|    static_cast<    \
  |  |  935|  6.33M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.33M|    static_cast<    \
  |  |  935|  6.33M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  6.33M|    {
 3466|  6.33M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   618k|    {
 1979|   618k|        return detail::transform_error_impl(std::move(*this),
 1980|   618k|                                            std::forward<F>(f));
 1981|   618k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   618k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   618k|    else {
 1472|   618k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   618k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   618k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 614k, False: 4.36k]
  |  |  ------------------
  ------------------
 1474|   618k|                   ? result(*std::forward<Exp>(exp))
 1475|   618k|                   : result(unexpect,
 1476|  4.36k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.36k|                                           std::forward<Exp>(exp).error()));
 1478|   618k|    }
 1479|   618k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.98M|    {
  490|  5.98M|        return m_has_value;
  491|  5.98M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.18M|    {
 1805|  2.18M|        return std::move(value());
 1806|  2.18M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.20M|    {
 1769|  2.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.20M|        return this->get_value();
 1771|  2.20M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.20M|    {
  456|  2.20M|        return m_value;
  457|  2.20M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  2.24M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.24M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.24M|    {
 1572|  2.24M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.24M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.24M|    {
  442|  2.24M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.53M|    {
 1316|  3.53M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  63.0k|    {
 1756|  63.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  63.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  63.0k|        return std::move(this->get_unexpected().error());
 1758|  63.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  65.6k|    {
  473|  65.6k|        return m_unexpected;
  474|  65.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   789k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   789k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   789k|    {
 1628|   789k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.28M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.28M|          m_has_value(false)
  451|  1.28M|    {
  452|  1.28M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  3.63M|        : m_unexpected(std::forward<Err>(e))
  350|  3.63M|    {
  351|  3.63M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.63M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.63M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   831k|        : base(unexpect, std::move(e.error())),
 1616|   831k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   831k|    {
 1618|   831k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   831k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   831k|          m_has_value(false)
  451|   831k|    {
  452|   831k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.04M|    {
 1316|  9.04M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   202k|        : base(unexpect, std::move(e.error())),
 1616|   202k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   202k|    {
 1618|   202k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.12M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.12M|          m_has_value(false)
  451|  1.12M|    {
  452|  1.12M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.35M|    {
 1316|  5.35M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  4.17M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.17M|    {
 1572|  4.17M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.17M|    {
  442|  4.17M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  6.27M|    {
 1740|  6.27M|        return has_value();
 1741|  6.27M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  9.84M|    {
  490|  9.84M|        return m_has_value;
  491|  9.84M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   241k|    {
 1746|   241k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   241k|        return this->get_unexpected().error();
 1748|   241k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   241k|    {
  473|   241k|        return m_unexpected;
  474|   241k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.68M|    {
 1805|  2.68M|        return std::move(value());
 1806|  2.68M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  3.33M|    {
 1769|  3.33M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.33M|        return this->get_value();
 1771|  3.33M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.33M|    {
  456|  3.33M|        return m_value;
  457|  3.33M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   404k|        : base(unexpect, std::move(e.error())),
 1616|   404k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   404k|    {
 1618|   404k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.10M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.10M|          m_has_value(false)
  451|  1.10M|    {
  452|  1.10M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.53M|    {
 1316|  3.53M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  2.43M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.43M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.43M|    {
 1572|  2.43M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.43M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.43M|    {
  442|  2.43M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  4.14M|    {
 1740|  4.14M|        return has_value();
 1741|  4.14M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  6.53M|    {
  490|  6.53M|        return m_has_value;
  491|  6.53M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   486k|    {
 1746|   486k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   486k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   486k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   486k|        return this->get_unexpected().error();
 1748|   486k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   486k|    {
  473|   486k|        return m_unexpected;
  474|   486k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  1.58M|    {
 1805|  1.58M|        return std::move(value());
 1806|  1.58M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  1.89M|    {
 1769|  1.89M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.89M|        return this->get_value();
 1771|  1.89M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.89M|    {
  456|  1.89M|        return m_value;
  457|  1.89M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   949k|    {
 1979|   949k|        return detail::transform_error_impl(std::move(*this),
 1980|   949k|                                            std::forward<F>(f));
 1981|   949k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   949k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   949k|    else {
 1472|   949k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   949k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   949k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 933k, False: 15.8k]
  |  |  ------------------
  ------------------
 1474|   949k|                   ? result(*std::forward<Exp>(exp))
 1475|   949k|                   : result(unexpect,
 1476|  15.8k|                            trivial_invoke(std::forward<F>(f),
 1477|  15.8k|                                           std::forward<Exp>(exp).error()));
 1478|   949k|    }
 1479|   949k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  3.60M|    {
  490|  3.60M|        return m_has_value;
  491|  3.60M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   933k|    {
 1805|   933k|        return std::move(value());
 1806|   933k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.23M|    {
 1769|  1.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.23M|        return this->get_value();
 1771|  1.23M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.23M|    {
  456|  1.23M|        return m_value;
  457|  1.23M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  15.8k|    {
 1756|  15.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  15.8k|        return std::move(this->get_unexpected().error());
 1758|  15.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  20.6k|    {
  473|  20.6k|        return m_unexpected;
  474|  20.6k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|   920k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   920k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   920k|    {
 1628|   920k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|  2.30M|    {
 8964|  2.30M|        return m_current;
 8965|  2.30M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|  1.46M|    {
 8857|  1.46M|        return m_locale;
 8858|  1.46M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|  1.46M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.46M|    static_cast<    \
  |  |  935|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.46M|    static_cast<    \
  |  |  935|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|  1.46M|    {
 8864|  1.46M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   851k|    {
 3000|   851k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   851k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   851k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   851k|    {
 2981|   851k|        return t.data();
 2982|   851k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   227k|        : base(unexpect, std::move(e.error())),
 1616|   227k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   227k|    {
 1618|   227k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  56.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  56.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  56.6k|    {
 1572|  56.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  56.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  56.6k|    {
  442|  56.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|  1.21M|    {
 8964|  1.21M|        return m_current;
 8965|  1.21M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|   904k|    {
 8857|   904k|        return m_locale;
 8858|   904k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|   904k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   904k|    static_cast<    \
  |  |  935|   904k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   904k|    static_cast<    \
  |  |  935|   904k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   904k|    {
 8864|   904k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   497k|        : base(unexpect, std::move(e.error())),
 1616|   497k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   497k|    {
 1618|   497k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  3.89M|        : base(unexpect, std::move(e.error())),
 1616|  3.89M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.89M|    {
 1618|  3.89M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|  3.89M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|  3.89M|          m_has_value(false)
  550|  3.89M|    {
  551|  3.89M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.89M|    {
 1316|  3.89M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  12.7M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  12.7M|        : m_deferred_init(), m_has_value(true)
  529|  12.7M|    {
  530|  12.7M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  9.55M|    {
 4559|  9.55M|        return x.is_at_end();
 4560|  9.55M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  23.7M|    {
 4603|  23.7M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 23.7M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  23.7M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 23.7M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  23.7M|        return !read_at_position();
 4610|  23.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|   102M|    {
 4583|   102M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   102M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   102M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   102M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 102M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   102M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   102M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 88.9M, False: 13.9M]
  |  |  ------------------
  ------------------
 4590|  88.9M|            return true;
 4591|  88.9M|        }
 4592|       |
 4593|  27.5M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 13.9M, False: 13.6M]
  ------------------
 4594|  13.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 288k, False: 13.6M]
  ------------------
 4595|   288k|                return false;
 4596|   288k|            }
 4597|  13.9M|        }
 4598|  13.6M|        return true;
 4599|  13.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  26.6M|    {
 4518|  26.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  26.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  26.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 26.6M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  26.6M|        auto res = read_at_position();
 4527|  26.6M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  26.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  26.6M|        return parent()->get_character_at(m_position);
 4529|  26.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  26.6M|    {
 4388|  26.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  26.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.7M, False: 9.94M]
  |  |  ------------------
  ------------------
 4389|  26.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  16.7M|            return m_putback_buffer[pos];
 4391|  16.7M|        }
 4392|  9.94M|        const auto start = pos - m_putback_buffer.size();
 4393|  9.94M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  9.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  9.94M|        return m_current_view[start];
 4395|  9.94M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  6.97M|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.97M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.97M|    {
 1572|  6.97M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  6.97M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.97M|    {
  442|  6.97M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.05M|    {
 1316|  7.05M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|   153k|        : m_unexpected(std::forward<Err>(e))
  350|   153k|    {
  351|   153k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   153k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   153k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  74.2k|        : base(unexpect, std::move(e.error())),
 1616|  74.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  74.2k|    {
 1618|  74.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  74.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  74.2k|          m_has_value(false)
  451|  74.2k|    {
  452|  74.2k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   224k|        : m_unexpected(std::forward<Args>(args)...)
  359|   224k|    {
  360|   224k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   224k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   224k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  52.5M|    {
 4504|  52.5M|        ++m_position;
 4505|  52.5M|        (void)read_at_position();
 4506|  52.5M|        return *this;
 4507|  52.5M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  3.07M|    {
 1740|  3.07M|        return has_value();
 1741|  3.07M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   584k|    {
 1795|   584k|        return value();
 1796|   584k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  25.3M|    {
 4553|  25.3M|        return !(lhs == rhs);
 4554|  25.3M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  28.1M|    {
 4548|  28.1M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 28.1M, False: 0]
  |  Branch (4548:46): [True: 3.60M, False: 24.5M]
  ------------------
 4549|  28.1M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  71.6k|        : m_unexpected(std::forward<Err>(e))
  350|  71.6k|    {
  351|  71.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  71.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  71.6k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  14.7k|        : base(unexpect, std::move(e.error())),
 1616|  14.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.7k|    {
 1618|  14.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  14.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.7k|          m_has_value(false)
  451|  14.7k|    {
  452|  14.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.49M|    {
 1316|  1.49M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.48M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.48M|    {
 1572|  1.48M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  1.48M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.48M|    {
  442|  1.48M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  1.49M|    {
 1740|  1.49M|        return has_value();
 1741|  1.49M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.99M|    {
  490|  2.99M|        return m_has_value;
  491|  2.99M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  14.7k|    {
 1746|  14.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  14.7k|        return this->get_unexpected().error();
 1748|  14.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.7k|    {
  473|  14.7k|        return m_unexpected;
  474|  14.7k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.48M|    {
 1805|  1.48M|        return std::move(value());
 1806|  1.48M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.48M|    {
 1769|  1.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.48M|        return this->get_value();
 1771|  1.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.48M|    {
  456|  1.48M|        return m_value;
  457|  1.48M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  33.7M|    {
 3484|  33.7M|        return m_sentinel;
 3485|  33.7M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  62.8k|        : m_unexpected(std::forward<Err>(e))
  350|  62.8k|    {
  351|  62.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  62.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  62.8k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  13.1M|    {
  365|  13.1M|        return m_unexpected;
  366|  13.1M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.58M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.58M|    {
  360|  3.58M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.58M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.58M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  15.9M|        : m_unexpected(std::forward<Err>(e))
  350|  15.9M|    {
  351|  15.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  15.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  15.9M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  15.9M|    {
  365|  15.9M|        return m_unexpected;
  366|  15.9M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  15.9M|        : m_unexpected(std::forward<Args>(args)...)
  359|  15.9M|    {
  360|  15.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  15.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  15.9M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|   152k|{
 1350|   152k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   152k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  3.37M|        : m_unexpected(std::forward<Err>(e))
  350|  3.37M|    {
  351|  3.37M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.37M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  19.5k|    {
 1746|  19.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  19.5k|        return this->get_unexpected().error();
 1748|  19.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.12M|        : base(unexpect, std::move(e.error())),
 1616|  1.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.12M|    {
 1618|  1.12M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.15M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.15M|          m_has_value(false)
  451|  1.15M|    {
  452|  1.15M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.0M|    {
 1316|  12.0M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   589k|        : base(std::in_place, std::forward<U>(val)),
 1570|   589k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   589k|    {
 1572|   589k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   589k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   589k|    {
  442|   589k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  6.06M|        : base(unexpect, std::move(e.error())),
 1616|  6.06M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.06M|    {
 1618|  6.06M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  6.06M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.06M|          m_has_value(false)
  451|  6.06M|    {
  452|  6.06M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  13.0M|    {
 1740|  13.0M|        return has_value();
 1741|  13.0M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  23.1M|    {
  490|  23.1M|        return m_has_value;
  491|  23.1M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  3.07M|    {
 1746|  3.07M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.07M|        return this->get_unexpected().error();
 1748|  3.07M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  3.07M|    {
  473|  3.07M|        return m_unexpected;
  474|  3.07M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|  1.18M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.18M|    {
 1572|  1.18M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.18M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.18M|    {
  442|  1.18M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.18M|    {
 1316|  1.18M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    279|        : base(unexpect, std::move(e.error())),
 1616|    279|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    279|    {
 1618|    279|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|    279|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    279|          m_has_value(false)
  451|    279|    {
  452|    279|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  3.07M|    {
 1795|  3.07M|        return value();
 1796|  3.07M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  5.91M|    {
 1769|  5.91M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.91M|        return this->get_value();
 1771|  5.91M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  5.91M|    {
  456|  5.91M|        return m_value;
  457|  5.91M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   110k|    {
 1740|   110k|        return has_value();
 1741|   110k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  2.37M|    {
  490|  2.37M|        return m_has_value;
  491|  2.37M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.07M|    {
 1805|  1.07M|        return std::move(value());
 1806|  1.07M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.18M|    {
 1769|  1.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.18M|        return this->get_value();
 1771|  1.18M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|  1.18M|    {
  456|  1.18M|        return m_value;
  457|  1.18M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.87M|    {
 1979|  2.87M|        return detail::transform_error_impl(std::move(*this),
 1980|  2.87M|                                            std::forward<F>(f));
 1981|  2.87M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  2.87M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.87M|    else {
 1472|  2.87M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.87M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.87M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.84M, False: 35.1k]
  |  |  ------------------
  ------------------
 1474|  2.87M|                   ? result(*std::forward<Exp>(exp))
 1475|  2.87M|                   : result(unexpect,
 1476|  35.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  35.1k|                                           std::forward<Exp>(exp).error()));
 1478|  2.87M|    }
 1479|  2.87M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  4.19M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.19M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.19M|    {
 1572|  4.19M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.19M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.19M|    {
  442|  4.19M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  35.1k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  35.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  35.1k|    {
 1628|  35.1k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.84M|    {
 1805|  2.84M|        return std::move(value());
 1806|  2.84M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  7.25M|    {
 1740|  7.25M|        return has_value();
 1741|  7.25M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  11.4M|    {
  490|  11.4M|        return m_has_value;
  491|  11.4M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   300k|    {
 1746|   300k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   300k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   300k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   300k|        return this->get_unexpected().error();
 1748|   300k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   300k|    {
  473|   300k|        return m_unexpected;
  474|   300k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  3.09M|    {
 1805|  3.09M|        return std::move(value());
 1806|  3.09M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  3.85M|    {
 1769|  3.85M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.85M|        return this->get_value();
 1771|  3.85M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.85M|    {
  456|  3.85M|        return m_value;
  457|  3.85M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|  1.24M|    {
 3480|  1.24M|        return m_iterator;
 3481|  1.24M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|  1.24M|    {
 3484|  1.24M|        return m_sentinel;
 3485|  1.24M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   960k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   960k|    static_cast<    \
  |  |  935|   960k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   960k|    static_cast<    \
  |  |  935|   960k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   960k|    {
 3466|   960k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  14.1M|    {
 4570|  14.1M|        return !x.is_at_end();
 4571|  14.1M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  20.6k|        : base(unexpect, std::move(e.error())),
 1616|  20.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  20.6k|    {
 1618|  20.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  20.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  20.6k|          m_has_value(false)
  451|  20.6k|    {
  452|  20.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.34M|    {
 1316|  2.34M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  2.32M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.32M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.32M|    {
 1572|  2.32M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.32M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.32M|    {
  442|  2.32M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  1.39M|    {
 1740|  1.39M|        return has_value();
 1741|  1.39M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   304k|    {
 1795|   304k|        return value();
 1796|   304k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.4k|          m_has_value(false)
  451|  11.4k|    {
  452|  11.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.25M|    {
 1316|  1.25M|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.24M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.24M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.24M|    {
 1572|  1.24M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.24M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.24M|    {
  442|  1.24M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  1.25M|    {
 1740|  1.25M|        return has_value();
 1741|  1.25M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.51M|    {
  490|  2.51M|        return m_has_value;
  491|  2.51M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  11.4k|    {
 1746|  11.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  11.4k|        return this->get_unexpected().error();
 1748|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.4k|    {
  473|  11.4k|        return m_unexpected;
  474|  11.4k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.24M|    {
 1805|  1.24M|        return std::move(value());
 1806|  1.24M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.24M|    {
 1769|  1.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.24M|        return this->get_value();
 1771|  1.24M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.24M|    {
  456|  1.24M|        return m_value;
  457|  1.24M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|  4.81k|    {
 1746|  4.81k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  4.81k|        return this->get_unexpected().error();
 1748|  4.81k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|   964k|        : base(unexpect, std::move(e.error())),
 1616|   964k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   964k|    {
 1618|   964k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   964k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   964k|          m_has_value(false)
  451|   964k|    {
  452|   964k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.34M|    {
 1316|  5.34M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   309k|        : base(std::in_place, std::forward<U>(val)),
 1570|   309k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   309k|    {
 1572|   309k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   309k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   309k|    {
  442|   309k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  3.66M|        : base(unexpect, std::move(e.error())),
 1616|  3.66M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.66M|    {
 1618|  3.66M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.66M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.66M|          m_has_value(false)
  451|  3.66M|    {
  452|  3.66M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  6.27M|    {
 1740|  6.27M|        return has_value();
 1741|  6.27M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  10.7M|    {
  490|  10.7M|        return m_has_value;
  491|  10.7M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  2.55M|    {
 1746|  2.55M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.55M|        return this->get_unexpected().error();
 1748|  2.55M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.55M|    {
  473|  2.55M|        return m_unexpected;
  474|  2.55M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   959k|        : base(std::in_place, std::forward<U>(val)),
 1570|   959k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   959k|    {
 1572|   959k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   959k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   959k|    {
  442|   959k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   959k|    {
 1316|   959k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     90|        : base(unexpect, std::move(e.error())),
 1616|     90|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     90|    {
 1618|     90|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     90|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     90|          m_has_value(false)
  451|     90|    {
  452|     90|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   987k|    {
 1795|   987k|        return value();
 1796|   987k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   987k|    {
 1769|   987k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   987k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   987k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   987k|        return this->get_value();
 1771|   987k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   987k|    {
  456|   987k|        return m_value;
  457|   987k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  25.7k|    {
 1740|  25.7k|        return has_value();
 1741|  25.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.91M|    {
  490|  1.91M|        return m_has_value;
  491|  1.91M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   933k|    {
 1805|   933k|        return std::move(value());
 1806|   933k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   959k|    {
 1769|   959k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   959k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   959k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   959k|        return this->get_value();
 1771|   959k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   959k|    {
  456|   959k|        return m_value;
  457|   959k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|   401k|        : base(std::in_place, std::forward<U>(val)),
 1570|   401k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   401k|    {
 1572|   401k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   401k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   401k|    {
  442|   401k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  3.13M|    {
 3000|  3.13M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  3.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  3.13M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  3.13M|    {
 2981|  3.13M|        return t.data();
 2982|  3.13M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  8.11M|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.11M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.11M|    {
 1572|  8.11M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  8.11M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  8.11M|    {
  442|  8.11M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1804|  5.47M|    {
 1805|  5.47M|        return std::move(value());
 1806|  5.47M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|  3.45M|{
 1350|  3.45M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  3.45M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|  1.07M|    {
 1979|  1.07M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.07M|                                            std::forward<F>(f));
 1981|  1.07M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|  1.07M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.07M|    else {
 1472|  1.07M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.07M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.07M, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.07M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.07M|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.07M|    }
 1479|  1.07M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  1.07M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.07M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.07M|    {
 1572|  1.07M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.07M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.07M|    {
  442|  1.07M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.07M|    {
 1316|  1.07M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|  1.07M|    {
 1740|  1.07M|        return has_value();
 1741|  1.07M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.15M|    {
  490|  2.15M|        return m_has_value;
  491|  2.15M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.07M|    {
 1805|  1.07M|        return std::move(value());
 1806|  1.07M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.07M|    {
 1769|  1.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.07M|        return this->get_value();
 1771|  1.07M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.07M|    {
  456|  1.07M|        return m_value;
  457|  1.07M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|  1.07M|    {
 1965|  1.07M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  1.07M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|  1.07M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.07M|    else {
 1472|  1.07M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.07M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.07M]
  |  |  ------------------
  ------------------
 1474|  1.07M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.07M|                   : result(unexpect,
 1476|  1.07M|                            trivial_invoke(std::forward<F>(f),
 1477|  1.07M|                                           std::forward<Exp>(exp).error()));
 1478|  1.07M|    }
 1479|  1.07M|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   764k|    {
 1795|   764k|        return value();
 1796|   764k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   257k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|   110k|    {
 1815|   110k|        return &value();
 1816|   110k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   764k|    {
 2869|   764k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   764k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   764k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   764k|    {
 2850|   764k|        return decay_copy(t.begin());
 2851|   764k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   764k|{
 2094|   764k|    return SCN_FWD(t);
  ------------------
  |  |  936|   764k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   764k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   465k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   933k|    {
 1979|   933k|        return detail::transform_error_impl(std::move(*this),
 1980|   933k|                                            std::forward<F>(f));
 1981|   933k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|   933k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   933k|    else {
 1472|   933k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   933k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   933k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 933k, False: 0]
  |  |  ------------------
  ------------------
 1474|   933k|                   ? result(*std::forward<Exp>(exp))
 1475|   933k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   933k|    }
 1479|   933k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   933k|        : base(std::in_place, std::forward<U>(val)),
 1570|   933k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   933k|    {
 1572|   933k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   933k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   933k|    {
  442|   933k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   933k|    {
 1316|   933k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   933k|    {
 1740|   933k|        return has_value();
 1741|   933k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.86M|    {
  490|  1.86M|        return m_has_value;
  491|  1.86M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   933k|    {
 1805|   933k|        return std::move(value());
 1806|   933k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   933k|    {
 1769|   933k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   933k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   933k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   933k|        return this->get_value();
 1771|   933k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   933k|    {
  456|   933k|        return m_value;
  457|   933k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|   904k|    {
 1965|   904k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   904k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   904k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   904k|    else {
 1472|   904k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   904k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   904k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 904k]
  |  |  ------------------
  ------------------
 1474|   904k|                   ? result(*std::forward<Exp>(exp))
 1475|   904k|                   : result(unexpect,
 1476|   904k|                            trivial_invoke(std::forward<F>(f),
 1477|   904k|                                           std::forward<Exp>(exp).error()));
 1478|   904k|    }
 1479|   904k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1569|  54.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  54.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  54.8k|    {
 1572|  54.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  54.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  54.8k|    {
  442|  54.8k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|   904k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   904k|    static_cast<    \
  |  |  935|   904k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   904k|    {
 3912|   904k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   642k|    {
 1795|   642k|        return value();
 1796|   642k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  25.6k|    {
 1815|  25.6k|        return &value();
 1816|  25.6k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  1.07M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.07M|    static_cast<    \
  |  |  935|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.07M|    {
 3912|  1.07M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  5.22M|    {
 4559|  5.22M|        return x.is_at_end();
 4560|  5.22M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  8.28M|    {
 4603|  8.28M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 8.28M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  8.28M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 8.28M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  8.28M|        return !read_at_position();
 4610|  8.28M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  26.3M|    {
 4583|  26.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  26.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  26.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 26.3M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  26.3M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  26.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 23.1M, False: 3.15M]
  |  |  ------------------
  ------------------
 4590|  23.1M|            return true;
 4591|  23.1M|        }
 4592|       |
 4593|  6.10M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 3.15M, False: 2.95M]
  ------------------
 4594|  3.15M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 199k, False: 2.95M]
  ------------------
 4595|   199k|                return false;
 4596|   199k|            }
 4597|  3.15M|        }
 4598|  2.95M|        return true;
 4599|  3.15M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  34.0M|    {
 4357|  34.0M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  34.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  8.23M|    {
 4518|  8.23M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  8.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  8.23M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 8.23M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  8.23M|        auto res = read_at_position();
 4527|  8.23M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  8.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  8.23M|        return parent()->get_character_at(m_position);
 4529|  8.23M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  8.23M|    {
 4388|  8.23M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  8.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.96M, False: 1.27M]
  |  |  ------------------
  ------------------
 4389|  8.23M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  6.96M|            return m_putback_buffer[pos];
 4391|  6.96M|        }
 4392|  1.27M|        const auto start = pos - m_putback_buffer.size();
 4393|  1.27M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  1.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  1.27M|        return m_current_view[start];
 4395|  1.27M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  3.64M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.64M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.64M|    {
 1572|  3.64M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.64M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.64M|    {
  442|  3.64M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.70M|    {
 1316|  3.70M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  65.6k|        : base(unexpect, std::move(e.error())),
 1616|  65.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  65.6k|    {
 1618|  65.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  65.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  65.6k|          m_has_value(false)
  451|  65.6k|    {
  452|  65.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  9.82M|    {
 4504|  9.82M|        ++m_position;
 4505|  9.82M|        (void)read_at_position();
 4506|  9.82M|        return *this;
 4507|  9.82M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  1.46M|    {
 1740|  1.46M|        return has_value();
 1741|  1.46M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  25.2k|    {
 1795|  25.2k|        return value();
 1796|  25.2k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  4.04M|    {
 4553|  4.04M|        return !(lhs == rhs);
 4554|  4.04M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  5.46M|    {
 4548|  5.46M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 5.46M, False: 0]
  |  Branch (4548:46): [True: 1.72M, False: 3.73M]
  ------------------
 4549|  5.46M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|  2.97M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|  2.97M|    else {
 4075|       |        // utf-32
 4076|  2.97M|        static_assert(sizeof(U) == 4);
 4077|  2.97M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|  2.97M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|  2.97M|        return 1;
 4079|  2.97M|    }
 4080|  2.97M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.97M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|  2.97M|    else {
 4281|  2.97M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|  2.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|  2.97M|        auto cp = static_cast<char32_t>(input.front());
 4283|  2.97M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  2.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 183k, False: 2.79M]
  |  |  ------------------
  ------------------
 4284|   183k|            return invalid_code_point;
 4285|   183k|        }
 4286|  2.79M|        return cp;
 4287|  2.97M|    }
 4288|  2.97M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  3.24k|        : base(unexpect, std::move(e.error())),
 1616|  3.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.24k|    {
 1618|  3.24k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  3.24k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.24k|          m_has_value(false)
  451|  3.24k|    {
  452|  3.24k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   762k|    {
 1316|   762k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   759k|        : base(std::in_place, std::forward<U>(val)),
 1570|   759k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   759k|    {
 1572|   759k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   759k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   759k|    {
  442|   759k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   762k|    {
 1740|   762k|        return has_value();
 1741|   762k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.52M|    {
  490|  1.52M|        return m_has_value;
  491|  1.52M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  3.24k|    {
 1746|  3.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.24k|        return this->get_unexpected().error();
 1748|  3.24k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.24k|    {
  473|  3.24k|        return m_unexpected;
  474|  3.24k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   759k|    {
 1805|   759k|        return std::move(value());
 1806|   759k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   759k|    {
 1769|   759k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   759k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   759k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   759k|        return this->get_value();
 1771|   759k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   759k|    {
  456|   759k|        return m_value;
  457|   759k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  13.5M|    {
 3484|  13.5M|        return m_sentinel;
 3485|  13.5M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  2.57k|    {
 1746|  2.57k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.57k|        return this->get_unexpected().error();
 1748|  2.57k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|   675k|        : base(unexpect, std::move(e.error())),
 1616|   675k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   675k|    {
 1618|   675k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|   734k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   734k|          m_has_value(false)
  451|   734k|    {
  452|   734k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.40M|    {
 1316|  6.40M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  25.2k|        : base(std::in_place, std::forward<U>(val)),
 1570|  25.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  25.2k|    {
 1572|  25.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  25.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  25.2k|    {
  442|  25.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  3.61M|        : base(unexpect, std::move(e.error())),
 1616|  3.61M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.61M|    {
 1618|  3.61M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.61M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.61M|          m_has_value(false)
  451|  3.61M|    {
  452|  3.61M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  7.01M|    {
 1740|  7.01M|        return has_value();
 1741|  7.01M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  12.3M|    {
  490|  12.3M|        return m_has_value;
  491|  12.3M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  2.08M|    {
 1746|  2.08M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.08M|        return this->get_unexpected().error();
 1748|  2.08M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.08M|    {
  473|  2.08M|        return m_unexpected;
  474|  2.08M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   629k|        : base(std::in_place, std::forward<U>(val)),
 1570|   629k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   629k|    {
 1572|   629k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   629k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   629k|    {
  442|   629k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   629k|    {
 1316|   629k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|     72|        : base(unexpect, std::move(e.error())),
 1616|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     72|    {
 1618|     72|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|     72|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     72|          m_has_value(false)
  451|     72|    {
  452|     72|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   934k|    {
 1795|   934k|        return value();
 1796|   934k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.50M|    {
 1769|  2.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.50M|        return this->get_value();
 1771|  2.50M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  2.50M|    {
  456|  2.50M|        return m_value;
  457|  2.50M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|  14.5k|    {
 1740|  14.5k|        return has_value();
 1741|  14.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  1.25M|    {
  490|  1.25M|        return m_has_value;
  491|  1.25M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   614k|    {
 1805|   614k|        return std::move(value());
 1806|   614k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   629k|    {
 1769|   629k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   629k|        return this->get_value();
 1771|   629k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   629k|    {
  456|   629k|        return m_value;
  457|   629k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.62M|    {
 1979|  1.62M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.62M|                                            std::forward<F>(f));
 1981|  1.62M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.62M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.62M|    else {
 1472|  1.62M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.62M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.62M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.56M, False: 58.6k]
  |  |  ------------------
  ------------------
 1474|  1.62M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.62M|                   : result(unexpect,
 1476|  58.6k|                            trivial_invoke(std::forward<F>(f),
 1477|  58.6k|                                           std::forward<Exp>(exp).error()));
 1478|  1.62M|    }
 1479|  1.62M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  2.03M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.03M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.03M|    {
 1572|  2.03M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.03M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.03M|    {
  442|  2.03M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  58.6k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  58.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  58.6k|    {
 1628|  58.6k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  1.56M|    {
 1805|  1.56M|        return std::move(value());
 1806|  1.56M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  4.14M|    {
 1740|  4.14M|        return has_value();
 1741|  4.14M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.62M|    {
  490|  6.62M|        return m_has_value;
  491|  6.62M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   672k|    {
 1746|   672k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   672k|        return this->get_unexpected().error();
 1748|   672k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   672k|    {
  473|   672k|        return m_unexpected;
  474|   672k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.49M|    {
 1805|  1.49M|        return std::move(value());
 1806|  1.49M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.80M|    {
 1769|  1.80M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.80M|        return this->get_value();
 1771|  1.80M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.80M|    {
  456|  1.80M|        return m_value;
  457|  1.80M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   476k|    {
 3480|   476k|        return m_iterator;
 3481|   476k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   476k|    {
 3484|   476k|        return m_sentinel;
 3485|   476k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   440k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   440k|    static_cast<    \
  |  |  935|   440k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   440k|    static_cast<    \
  |  |  935|   440k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   440k|    {
 3466|   440k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  3.06M|    {
 4570|  3.06M|        return !x.is_at_end();
 4571|  3.06M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  63.8k|        : base(unexpect, std::move(e.error())),
 1616|  63.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  63.8k|    {
 1618|  63.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  63.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  63.8k|          m_has_value(false)
  451|  63.8k|    {
  452|  63.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.08M|    {
 1316|  3.08M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  3.02M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.02M|    {
 1572|  3.02M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.02M|    {
  442|  3.02M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|   839k|    {
 1740|   839k|        return has_value();
 1741|   839k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.34M|    {
  490|  5.34M|        return m_has_value;
  491|  5.34M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  11.1k|    {
 1795|  11.1k|        return value();
 1796|  11.1k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  2.19M|    {
 1769|  2.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.19M|        return this->get_value();
 1771|  2.19M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.19M|    {
  456|  2.19M|        return m_value;
  457|  2.19M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  3.24k|        : base(unexpect, std::move(e.error())),
 1616|  3.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.24k|    {
 1618|  3.24k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  3.24k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.24k|          m_has_value(false)
  451|  3.24k|    {
  452|  3.24k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   763k|    {
 1316|   763k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   759k|        : base(std::in_place, std::forward<U>(val)),
 1570|   759k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   759k|    {
 1572|   759k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   759k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   759k|    {
  442|   759k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   619k|    {
 1979|   619k|        return detail::transform_error_impl(std::move(*this),
 1980|   619k|                                            std::forward<F>(f));
 1981|   619k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   619k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   619k|    else {
 1472|   619k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   619k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   619k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 615k, False: 4.36k]
  |  |  ------------------
  ------------------
 1474|   619k|                   ? result(*std::forward<Exp>(exp))
 1475|   619k|                   : result(unexpect,
 1476|  4.36k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.36k|                                           std::forward<Exp>(exp).error()));
 1478|   619k|    }
 1479|   619k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  2.18M|    {
 1805|  2.18M|        return std::move(value());
 1806|  2.18M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  63.2k|    {
 1756|  63.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  63.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  63.2k|        return std::move(this->get_unexpected().error());
 1758|  63.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  63.8k|    {
  473|  63.8k|        return m_unexpected;
  474|  63.8k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|   697k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   697k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   697k|    {
 1628|   697k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   763k|    {
 1740|   763k|        return has_value();
 1741|   763k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.52M|    {
  490|  1.52M|        return m_has_value;
  491|  1.52M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  3.24k|    {
 1746|  3.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.24k|        return this->get_unexpected().error();
 1748|  3.24k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.24k|    {
  473|  3.24k|        return m_unexpected;
  474|  3.24k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   759k|    {
 1805|   759k|        return std::move(value());
 1806|   759k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   759k|    {
 1769|   759k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   759k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   759k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   759k|        return this->get_value();
 1771|   759k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   759k|    {
  456|   759k|        return m_value;
  457|   759k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|    646|    {
 1746|    646|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    646|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    646|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    646|        return this->get_unexpected().error();
 1748|    646|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|   674k|        : base(unexpect, std::move(e.error())),
 1616|   674k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   674k|    {
 1618|   674k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   733k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   733k|          m_has_value(false)
  451|   733k|    {
  452|   733k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.07M|    {
 1316|  5.07M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  11.1k|        : base(std::in_place, std::forward<U>(val)),
 1570|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  11.1k|    {
 1572|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  11.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  11.1k|    {
  442|  11.1k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  2.61M|        : base(unexpect, std::move(e.error())),
 1616|  2.61M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.61M|    {
 1618|  2.61M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  2.61M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.61M|          m_has_value(false)
  451|  2.61M|    {
  452|  2.61M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  5.68M|    {
 1740|  5.68M|        return has_value();
 1741|  5.68M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  10.2M|    {
  490|  10.2M|        return m_has_value;
  491|  10.2M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|  1.98M|    {
 1746|  1.98M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.98M|        return this->get_unexpected().error();
 1748|  1.98M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  1.98M|    {
  473|  1.98M|        return m_unexpected;
  474|  1.98M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   620k|        : base(std::in_place, std::forward<U>(val)),
 1570|   620k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   620k|    {
 1572|   620k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   620k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   620k|    {
  442|   620k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   620k|    {
 1316|   620k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     24|        : base(unexpect, std::move(e.error())),
 1616|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     24|    {
 1618|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     24|          m_has_value(false)
  451|     24|    {
  452|     24|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   295k|    {
 1795|   295k|        return value();
 1796|   295k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.86M|    {
 1769|  1.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.86M|        return this->get_value();
 1771|  1.86M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.86M|    {
  456|  1.86M|        return m_value;
  457|  1.86M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  5.11k|    {
 1740|  5.11k|        return has_value();
 1741|  5.11k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.24M|    {
  490|  1.24M|        return m_has_value;
  491|  1.24M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   615k|    {
 1805|   615k|        return std::move(value());
 1806|   615k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   620k|    {
 1769|   620k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   620k|        return this->get_value();
 1771|   620k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   620k|    {
  456|   620k|        return m_value;
  457|   620k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.62M|    {
 1979|  1.62M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.62M|                                            std::forward<F>(f));
 1981|  1.62M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.62M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.62M|    else {
 1472|  1.62M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.62M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.62M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.57M, False: 58.8k]
  |  |  ------------------
  ------------------
 1474|  1.62M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.62M|                   : result(unexpect,
 1476|  58.8k|                            trivial_invoke(std::forward<F>(f),
 1477|  58.8k|                                           std::forward<Exp>(exp).error()));
 1478|  1.62M|    }
 1479|  1.62M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  1.71M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.71M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.71M|    {
 1572|  1.71M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.71M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.71M|    {
  442|  1.71M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  58.8k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  58.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  58.8k|    {
 1628|  58.8k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.57M|    {
 1805|  1.57M|        return std::move(value());
 1806|  1.57M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.43M|    {
 3000|  1.43M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.43M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.43M|    {
 2981|  1.43M|        return t.data();
 2982|  1.43M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|   614k|    {
 1979|   614k|        return detail::transform_error_impl(std::move(*this),
 1980|   614k|                                            std::forward<F>(f));
 1981|   614k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|   614k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   614k|    else {
 1472|   614k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   614k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   614k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 614k, False: 0]
  |  |  ------------------
  ------------------
 1474|   614k|                   ? result(*std::forward<Exp>(exp))
 1475|   614k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   614k|    }
 1479|   614k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|   614k|        : base(std::in_place, std::forward<U>(val)),
 1570|   614k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   614k|    {
 1572|   614k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   614k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   614k|    {
  442|   614k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   614k|    {
 1316|   614k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   614k|    {
 1740|   614k|        return has_value();
 1741|   614k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   614k|    {
 1805|   614k|        return std::move(value());
 1806|   614k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   614k|    {
 1769|   614k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   614k|        return this->get_value();
 1771|   614k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   614k|    {
  456|   614k|        return m_value;
  457|   614k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|   785k|    {
 1965|   785k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   785k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|   785k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   785k|    else {
 1472|   785k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   785k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   785k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 785k]
  |  |  ------------------
  ------------------
 1474|   785k|                   ? result(*std::forward<Exp>(exp))
 1475|   785k|                   : result(unexpect,
 1476|   785k|                            trivial_invoke(std::forward<F>(f),
 1477|   785k|                                           std::forward<Exp>(exp).error()));
 1478|   785k|    }
 1479|   785k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   312k|    {
 1795|   312k|        return value();
 1796|   312k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   123k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|  14.5k|    {
 1815|  14.5k|        return &value();
 1816|  14.5k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   491k|    {
 2869|   491k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   491k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   491k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   491k|    {
 2850|   491k|        return decay_copy(t.begin());
 2851|   491k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   491k|{
 2094|   491k|    return SCN_FWD(t);
  ------------------
  |  |  936|   491k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   491k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   275k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   615k|    {
 1979|   615k|        return detail::transform_error_impl(std::move(*this),
 1980|   615k|                                            std::forward<F>(f));
 1981|   615k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|   615k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   615k|    else {
 1472|   615k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   615k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   615k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 615k, False: 0]
  |  |  ------------------
  ------------------
 1474|   615k|                   ? result(*std::forward<Exp>(exp))
 1475|   615k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   615k|    }
 1479|   615k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   615k|        : base(std::in_place, std::forward<U>(val)),
 1570|   615k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   615k|    {
 1572|   615k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   615k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   615k|    {
  442|   615k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   615k|    {
 1316|   615k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   615k|    {
 1740|   615k|        return has_value();
 1741|   615k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.23M|    {
  490|  1.23M|        return m_has_value;
  491|  1.23M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   615k|    {
 1805|   615k|        return std::move(value());
 1806|   615k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   615k|    {
 1769|   615k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   615k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   615k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   615k|        return this->get_value();
 1771|   615k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   615k|    {
  456|   615k|        return m_value;
  457|   615k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|   692k|    {
 1965|   692k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   692k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   692k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   692k|    else {
 1472|   692k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   692k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   692k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 692k]
  |  |  ------------------
  ------------------
 1474|   692k|                   ? result(*std::forward<Exp>(exp))
 1475|   692k|                   : result(unexpect,
 1476|   692k|                            trivial_invoke(std::forward<F>(f),
 1477|   692k|                                           std::forward<Exp>(exp).error()));
 1478|   692k|    }
 1479|   692k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|   692k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   692k|    static_cast<    \
  |  |  935|   692k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   692k|    {
 3912|   692k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   312k|    {
 1795|   312k|        return value();
 1796|   312k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  5.09k|    {
 1815|  5.09k|        return &value();
 1816|  5.09k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   785k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   785k|    static_cast<    \
  |  |  935|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   785k|    {
 3912|   785k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|   133M|    {
 4357|   133M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   133M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1569|   101k|        : base(std::in_place, std::forward<U>(val)),
 1570|   101k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   101k|    {
 1572|   101k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  440|   101k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   101k|    {
  442|   101k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|  1.85M|    {
 6182|  1.85M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  1.85M|        return static_cast<std::size_t>(m_desc &
 6187|  1.85M|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  1.85M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|  3.70M|    {
 6208|  3.70M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  3.70M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|  1.85M|    {
 6150|  1.85M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  1.85M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.85M|        const auto t = type(id);
 6162|  1.85M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|  1.85M|        basic_scan_arg<Context> arg;
 6167|  1.85M|        arg.m_type = t;
 6168|  1.85M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 1.85M, False: 0]
  ------------------
 6169|  1.85M|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  1.85M|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  1.85M|        return arg;
 6175|  1.85M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|  1.85M|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  1.85M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  1.85M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  1.85M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  1.85M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|  1.85M|    {
 6212|  1.85M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  1.85M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|  3.50M|    {
 5966|  3.50M|        return m_type != detail::arg_type::none_type;
 5967|  3.50M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   279k|{
 9324|   279k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   279k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   279k|{
 9225|   279k|#define SCN_VISIT(Type)                                                \
 9226|   279k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   279k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   279k|    }                                                                  \
 9229|   279k|    else {                                                             \
 9230|   279k|        return vis(monostate_val);                                     \
 9231|   279k|    }
 9232|       |
 9233|   279k|    monostate monostate_val{};
 9234|       |
 9235|   279k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 279k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 279k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 279k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 279k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 279k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 279k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 279k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 279k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 279k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 279k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 279k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 279k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 279k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 279k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 279k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  89.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 89.9k, False: 189k]
  ------------------
 9267|  89.9k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  89.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  89.9k|    }                                                                  \
  |  | 9229|  89.9k|    else {                                                             \
  |  | 9230|  89.9k|        return vis(monostate_val);                                     \
  |  | 9231|  89.9k|    }
  ------------------
 9268|   184k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 94.1k, False: 185k]
  ------------------
 9269|   184k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   184k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   184k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   184k|    }                                                                  \
  |  | 9229|   184k|    else {                                                             \
  |  | 9230|   184k|        return vis(monostate_val);                                     \
  |  | 9231|   184k|    }
  ------------------
 9270|   279k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 95.7k, False: 184k]
  ------------------
 9271|   279k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   279k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   279k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   279k|    }                                                                  \
  |  | 9229|   279k|    else {                                                             \
  |  | 9230|   279k|        return vis(monostate_val);                                     \
  |  | 9231|   279k|    }
  ------------------
 9272|   279k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 279k]
  ------------------
 9273|   279k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   279k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   279k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   279k|    }                                                                  \
  |  | 9229|   279k|    else {                                                             \
  |  | 9230|   279k|        return vis(monostate_val);                                     \
  |  | 9231|   279k|    }
  ------------------
 9274|   279k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 279k]
  ------------------
 9275|   279k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   279k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   279k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   279k|    }                                                                  \
  |  | 9229|   279k|    else {                                                             \
  |  | 9230|   279k|        return vis(monostate_val);                                     \
  |  | 9231|   279k|    }
  ------------------
 9276|   279k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 279k]
  ------------------
 9277|   279k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   279k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   279k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   279k|    }                                                                  \
  |  | 9229|   279k|    else {                                                             \
  |  | 9230|   279k|        return vis(monostate_val);                                     \
  |  | 9231|   279k|    }
  ------------------
 9278|   279k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 279k]
  ------------------
 9279|   279k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   279k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   279k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   279k|    }                                                                  \
  |  | 9229|   279k|    else {                                                             \
  |  | 9230|   279k|        return vis(monostate_val);                                     \
  |  | 9231|   279k|    }
  ------------------
 9280|   279k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 279k]
  ------------------
 9281|   279k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   279k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   279k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   279k|    }                                                                  \
  |  | 9229|   279k|    else {                                                             \
  |  | 9230|   279k|        return vis(monostate_val);                                     \
  |  | 9231|   279k|    }
  ------------------
 9282|   279k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 279k]
  ------------------
 9283|   279k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   279k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   279k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   279k|    }                                                                  \
  |  | 9229|   279k|    else {                                                             \
  |  | 9230|   279k|        return vis(monostate_val);                                     \
  |  | 9231|   279k|    }
  ------------------
 9284|       |
 9285|   279k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 279k]
  ------------------
 9286|   279k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   279k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   279k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 279k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 279k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   279k|            SCN_CLANG_POP
 9303|   279k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  4.96M|{
 6011|  4.96M|    return arg.m_type;
 6012|  4.96M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  2.04M|{
 6023|  2.04M|    return arg.m_value;
 6024|  2.04M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   790k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   790k|    static_cast<    \
  |  |  935|   790k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   790k|    {
 8949|   790k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|  1.09M|{
 4691|  1.09M|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 1.09M]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|  1.09M|    return ranges::subrange{forward_iterator{this, 0},
 4696|  1.09M|                            ranges::default_sentinel};
 4697|  1.09M|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  1.09M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  1.09M|    {
 4455|  1.09M|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.09M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  1.09M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|   306k|{
 9324|   306k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   306k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   306k|{
 9225|   306k|#define SCN_VISIT(Type)                                                \
 9226|   306k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   306k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   306k|    }                                                                  \
 9229|   306k|    else {                                                             \
 9230|   306k|        return vis(monostate_val);                                     \
 9231|   306k|    }
 9232|       |
 9233|   306k|    monostate monostate_val{};
 9234|       |
 9235|   306k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 306k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 306k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 306k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 306k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 306k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 306k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 306k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 306k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 306k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 306k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 306k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 306k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 306k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 306k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 306k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  97.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 97.7k, False: 208k]
  ------------------
 9267|  97.7k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  97.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  97.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  97.7k|    }                                                                  \
  |  | 9229|  97.7k|    else {                                                             \
  |  | 9230|  97.7k|        return vis(monostate_val);                                     \
  |  | 9231|  97.7k|    }
  ------------------
 9268|   201k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 103k, False: 202k]
  ------------------
 9269|   201k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   201k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   201k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   201k|    }                                                                  \
  |  | 9229|   201k|    else {                                                             \
  |  | 9230|   201k|        return vis(monostate_val);                                     \
  |  | 9231|   201k|    }
  ------------------
 9270|   306k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 104k, False: 201k]
  ------------------
 9271|   306k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   306k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   306k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   306k|    }                                                                  \
  |  | 9229|   306k|    else {                                                             \
  |  | 9230|   306k|        return vis(monostate_val);                                     \
  |  | 9231|   306k|    }
  ------------------
 9272|   306k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 306k]
  ------------------
 9273|   306k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   306k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   306k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   306k|    }                                                                  \
  |  | 9229|   306k|    else {                                                             \
  |  | 9230|   306k|        return vis(monostate_val);                                     \
  |  | 9231|   306k|    }
  ------------------
 9274|   306k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 306k]
  ------------------
 9275|   306k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   306k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   306k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   306k|    }                                                                  \
  |  | 9229|   306k|    else {                                                             \
  |  | 9230|   306k|        return vis(monostate_val);                                     \
  |  | 9231|   306k|    }
  ------------------
 9276|   306k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 306k]
  ------------------
 9277|   306k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   306k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   306k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   306k|    }                                                                  \
  |  | 9229|   306k|    else {                                                             \
  |  | 9230|   306k|        return vis(monostate_val);                                     \
  |  | 9231|   306k|    }
  ------------------
 9278|   306k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 306k]
  ------------------
 9279|   306k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   306k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   306k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   306k|    }                                                                  \
  |  | 9229|   306k|    else {                                                             \
  |  | 9230|   306k|        return vis(monostate_val);                                     \
  |  | 9231|   306k|    }
  ------------------
 9280|   306k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 306k]
  ------------------
 9281|   306k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   306k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   306k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   306k|    }                                                                  \
  |  | 9229|   306k|    else {                                                             \
  |  | 9230|   306k|        return vis(monostate_val);                                     \
  |  | 9231|   306k|    }
  ------------------
 9282|   306k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 306k]
  ------------------
 9283|   306k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   306k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   306k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   306k|    }                                                                  \
  |  | 9229|   306k|    else {                                                             \
  |  | 9230|   306k|        return vis(monostate_val);                                     \
  |  | 9231|   306k|    }
  ------------------
 9284|       |
 9285|   306k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 306k]
  ------------------
 9286|   306k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   306k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   306k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 306k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 306k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   306k|            SCN_CLANG_POP
 9303|   306k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|   669k|        : m_format{format},
 6280|   669k|          m_next_arg_id{next_arg_id},
 6281|   669k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   669k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   669k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   669k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   669k|    {
 6287|   669k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   669k|    {
 3075|   669k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   669k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   669k|    {
 3041|   669k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   669k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   669k|{
 7796|   669k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   669k|    handler.check_args_exhausted();
 7798|   669k|    return handler.get_error();
 7799|   669k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   669k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   669k|    auto begin = format.data();
 7764|   669k|    auto it = begin;
 7765|   669k|    const auto end = format.data() + format.size();
 7766|       |
 7767|  1.26M|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 669k, False: 599k]
  ------------------
 7768|   669k|        const auto ch = *it++;
 7769|   669k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 669k, False: 0]
  ------------------
 7770|   669k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   669k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   669k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 69.9k, False: 599k]
  ------------------
 7774|  69.9k|                return;
 7775|  69.9k|            }
 7776|   669k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   669k|    }
 7787|       |
 7788|   599k|    handler.on_literal_text(begin, end);
 7789|   599k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|   669k|{
 7693|   669k|    struct id_adapter {
 7694|   669k|        constexpr void operator()()
 7695|   669k|        {
 7696|   669k|            arg_id = handler.on_arg_id();
 7697|   669k|        }
 7698|   669k|        constexpr void operator()(std::size_t id)
 7699|   669k|        {
 7700|   669k|            arg_id = handler.on_arg_id(id);
 7701|   669k|        }
 7702|       |
 7703|   669k|        constexpr void on_error(const char* msg)
 7704|   669k|        {
 7705|   669k|            SCN_UNLIKELY_ATTR
 7706|   669k|            handler.on_error(msg);
 7707|   669k|        }
 7708|       |
 7709|   669k|        Handler& handler;
 7710|   669k|        std::size_t arg_id;
 7711|   669k|    };
 7712|       |
 7713|   669k|    ++begin;
 7714|   669k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   669k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 669k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   669k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 669k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   669k|    else {
 7726|   669k|        auto adapter = id_adapter{handler, 0};
 7727|   669k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   669k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   669k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 669k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   669k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 669k, False: 0]
  ------------------
 7738|   669k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   669k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   669k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 669k]
  |  |  |  Branch (865:45): [True: 0, False: 669k]
  |  |  |  Branch (865:45): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   669k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   669k|    }
 7754|   669k|    return begin + 1;
 7755|   669k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|  1.46M|    {
 8847|  1.46M|        return m_args.get(id);
 8848|  1.46M|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|  1.46M|    {
 6315|  1.46M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.46M]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|  1.46M|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|  1.46M|        do_check_arg_id(id);
 6323|  1.46M|        return id;
 6324|  1.46M|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|  1.46M|{
 6809|  1.46M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|  1.46M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|  1.46M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   669k|{
 7194|   669k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   669k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 669k, False: 0]
  |  Branch (7195:26): [True: 0, False: 669k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   669k|    handler();
 7200|   669k|    return begin;
 7201|   669k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   669k|        {
 7696|   669k|            arg_id = handler.on_arg_id();
 7697|   669k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|  1.46M|    {
 6310|  1.46M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|  1.46M|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|  2.92M|    {
 6299|  2.92M|        return m_format.data();
 6300|  2.92M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   669k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   669k|    {
 7874|   669k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   669k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7608|   669k|{
 7609|   669k|    auto do_presentation = [&]() -> const CharT* {
 7610|   669k|        if (*begin == CharT{'['}) {
 7611|   669k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   669k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   669k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   669k|                return begin;
 7617|   669k|            }
 7618|   669k|            handler.on_character_set_string(set);
 7619|   669k|            return begin;
 7620|   669k|        }
 7621|   669k|        if (*begin == CharT{'/'}) {
 7622|   669k|            return parse_presentation_regex(begin, end, handler);
 7623|   669k|        }
 7624|   669k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   669k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   669k|            handler.on_error("Invalid type specifier in format string");
 7627|   669k|            return begin;
 7628|   669k|        }
 7629|   669k|        handler.on_type(type);
 7630|   669k|        return begin;
 7631|   669k|    };
 7632|       |
 7633|   669k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 669k, False: 0]
  |  Branch (7633:28): [True: 669k, False: 0]
  ------------------
 7634|   669k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 669k, False: 0]
  |  Branch (7634:36): [True: 483k, False: 186k]
  ------------------
 7635|   483k|        return do_presentation();
 7636|   483k|    }
 7637|       |
 7638|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   186k|    begin = parse_align(begin, end, handler);
 7644|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   186k|    begin = parse_width(begin, end, handler);
 7650|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   186k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 186k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   186k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 186k, False: 0]
  ------------------
 7669|   186k|        handler.on_localized();
 7670|   186k|        ++begin;
 7671|   186k|    }
 7672|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   186k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 186k, False: 0]
  |  Branch (7677:25): [True: 0, False: 186k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   186k|    return begin;
 7686|   186k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7257|  1.46M|{
 7258|  1.46M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 1.04M, False: 411k]
  |  Branch (7258:33): [True: 1.04M, False: 0]
  ------------------
 7259|  1.46M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 411k, False: 0]
  |  Branch (7259:33): [True: 411k, False: 0]
  ------------------
 7260|  1.46M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   483k|    auto do_presentation = [&]() -> const CharT* {
 7610|   483k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 483k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   483k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 483k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   483k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   483k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 483k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   483k|        handler.on_type(type);
 7630|   483k|        return begin;
 7631|   483k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7205|  1.04M|{
 7206|  1.04M|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 1.04M]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 1.04M]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 1.04M]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 1.04M]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 1.04M]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 1.04M]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 1.04M]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 1.04M]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 1.04M]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 1.04M]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|   447k|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 447k, False: 600k]
  ------------------
 7225|   447k|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 1.04M]
  ------------------
 7226|   447k|            return presentation_type::float_hex;
 7227|  42.9k|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 42.9k, False: 1.00M]
  ------------------
 7228|  42.9k|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 1.04M]
  ------------------
 7229|  42.9k|            return presentation_type::float_scientific;
 7230|   215k|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 215k, False: 833k]
  ------------------
 7231|   215k|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 1.04M]
  ------------------
 7232|   215k|            return presentation_type::float_fixed;
 7233|   342k|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 342k, False: 706k]
  ------------------
 7234|   342k|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 1.04M]
  ------------------
 7235|   342k|            return presentation_type::float_general;
 7236|      0|        case 's':
  ------------------
  |  Branch (7236:9): [True: 0, False: 1.04M]
  ------------------
 7237|      0|            return presentation_type::string;
 7238|      0|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 0, False: 1.04M]
  ------------------
 7239|      0|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 1.04M]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 1.04M]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 1.04M]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 1.04M]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|      0|        default:
  ------------------
  |  Branch (7250:9): [True: 0, False: 1.04M]
  ------------------
 7251|      0|            return presentation_type::none;
 7252|  1.04M|    }
 7253|  1.04M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7282|   186k|{
 7283|   186k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   186k|    auto check_align = [](wchar_t ch) {
 7286|   186k|        switch (ch) {
 7287|   186k|            case L'<':
 7288|   186k|                return align_type::left;
 7289|   186k|            case L'>':
 7290|   186k|                return align_type::right;
 7291|   186k|            case L'^':
 7292|   186k|                return align_type::center;
 7293|   186k|            default:
 7294|   186k|                return align_type::none;
 7295|   186k|        }
 7296|   186k|    };
 7297|       |
 7298|   186k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   186k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 186k]
  |  |  |  Branch (865:45): [True: 0, False: 186k]
  |  |  |  Branch (865:45): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 7300|   186k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   186k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   186k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   186k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   186k|    const auto begin_before_fill = begin;
 7310|   186k|    begin += potential_fill_len;
 7311|       |
 7312|   186k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 186k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   186k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   186k|    const auto begin_after_fill = begin;
 7318|   186k|    ++begin;
 7319|       |
 7320|   186k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 186k, False: 0]
  ------------------
 7321|   186k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   186k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 186k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   186k|    }
 7329|       |
 7330|   186k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 186k, False: 0]
  ------------------
 7331|   186k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 186k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   186k|        return begin_before_fill;
 7336|   186k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   186k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7264|   411k|{
 7265|   411k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   411k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   411k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|       |    if constexpr (sizeof(CharT) != 1) {
 7267|       |        return 1;
 7268|       |    }
 7269|   411k|    else {
 7270|   411k|        const auto lengths =
 7271|   411k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|   411k|            "\3\4";
 7273|   411k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|   411k|        return len;
 7275|   411k|    }
 7276|   411k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|   373k|    auto check_align = [](wchar_t ch) {
 7286|   373k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 373k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 373k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 373k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   373k|            default:
  ------------------
  |  Branch (7293:13): [True: 373k, False: 0]
  ------------------
 7294|   373k|                return align_type::none;
 7295|   373k|        }
 7296|   373k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7347|   186k|{
 7348|   186k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   186k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 186k, False: 0]
  |  Branch (7350:33): [True: 0, False: 186k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   186k|    return begin;
 7361|   186k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7878|   186k|    {
 7879|   186k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   186k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 186k, False: 0]
  ------------------
 7881|   186k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 186k, False: 0]
  ------------------
 7882|   186k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 186k]
  ------------------
 7883|   186k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   186k|        Handler::on_localized();
 7891|   186k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7027|   634k|    {
 7028|   634k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7029|   634k|            m_specs.localized = true;
 7030|       |        }
 7031|       |        else {
 7032|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7033|       |        }
 7034|   634k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   669k|{
 9324|   669k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   669k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   669k|{
 9225|   669k|#define SCN_VISIT(Type)                                                \
 9226|   669k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   669k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   669k|    }                                                                  \
 9229|   669k|    else {                                                             \
 9230|   669k|        return vis(monostate_val);                                     \
 9231|   669k|    }
 9232|       |
 9233|   669k|    monostate monostate_val{};
 9234|       |
 9235|   669k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 669k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 669k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 669k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 669k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 669k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 669k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 669k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 669k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 669k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 669k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 669k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 669k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 669k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 669k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 669k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   217k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 217k, False: 452k]
  ------------------
 9267|   217k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   217k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   217k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   217k|    }                                                                  \
  |  | 9229|   217k|    else {                                                             \
  |  | 9230|   217k|        return vis(monostate_val);                                     \
  |  | 9231|   217k|    }
  ------------------
 9268|   442k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 225k, False: 444k]
  ------------------
 9269|   442k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   442k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   442k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   442k|    }                                                                  \
  |  | 9229|   442k|    else {                                                             \
  |  | 9230|   442k|        return vis(monostate_val);                                     \
  |  | 9231|   442k|    }
  ------------------
 9270|   669k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 227k, False: 442k]
  ------------------
 9271|   669k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   669k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   669k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   669k|    }                                                                  \
  |  | 9229|   669k|    else {                                                             \
  |  | 9230|   669k|        return vis(monostate_val);                                     \
  |  | 9231|   669k|    }
  ------------------
 9272|   669k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 669k]
  ------------------
 9273|   669k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   669k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   669k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   669k|    }                                                                  \
  |  | 9229|   669k|    else {                                                             \
  |  | 9230|   669k|        return vis(monostate_val);                                     \
  |  | 9231|   669k|    }
  ------------------
 9274|   669k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 669k]
  ------------------
 9275|   669k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   669k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   669k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   669k|    }                                                                  \
  |  | 9229|   669k|    else {                                                             \
  |  | 9230|   669k|        return vis(monostate_val);                                     \
  |  | 9231|   669k|    }
  ------------------
 9276|   669k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 669k]
  ------------------
 9277|   669k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   669k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   669k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   669k|    }                                                                  \
  |  | 9229|   669k|    else {                                                             \
  |  | 9230|   669k|        return vis(monostate_val);                                     \
  |  | 9231|   669k|    }
  ------------------
 9278|   669k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 669k]
  ------------------
 9279|   669k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   669k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   669k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   669k|    }                                                                  \
  |  | 9229|   669k|    else {                                                             \
  |  | 9230|   669k|        return vis(monostate_val);                                     \
  |  | 9231|   669k|    }
  ------------------
 9280|   669k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 669k]
  ------------------
 9281|   669k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   669k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   669k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   669k|    }                                                                  \
  |  | 9229|   669k|    else {                                                             \
  |  | 9230|   669k|        return vis(monostate_val);                                     \
  |  | 9231|   669k|    }
  ------------------
 9282|   669k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 669k]
  ------------------
 9283|   669k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   669k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   669k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   669k|    }                                                                  \
  |  | 9229|   669k|    else {                                                             \
  |  | 9230|   669k|        return vis(monostate_val);                                     \
  |  | 9231|   669k|    }
  ------------------
 9284|       |
 9285|   669k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 669k]
  ------------------
 9286|   669k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   669k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   669k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 669k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 669k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   669k|            SCN_CLANG_POP
 9303|   669k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|   790k|        : m_format{format},
 6280|   790k|          m_next_arg_id{next_arg_id},
 6281|   790k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   790k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   790k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   790k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   790k|    {
 6287|   790k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   790k|{
 7796|   790k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   790k|    handler.check_args_exhausted();
 7798|   790k|    return handler.get_error();
 7799|   790k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   790k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   790k|    auto begin = format.data();
 7764|   790k|    auto it = begin;
 7765|   790k|    const auto end = format.data() + format.size();
 7766|       |
 7767|  1.51M|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 790k, False: 720k]
  ------------------
 7768|   790k|        const auto ch = *it++;
 7769|   790k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 790k, False: 0]
  ------------------
 7770|   790k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   790k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   790k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 69.9k, False: 720k]
  ------------------
 7774|  69.9k|                return;
 7775|  69.9k|            }
 7776|   790k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   790k|    }
 7787|       |
 7788|   720k|    handler.on_literal_text(begin, end);
 7789|   720k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|   720k|    {
 8986|   720k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   720k|    static_cast<    \
  |  |  935|   720k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   720k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|   790k|{
 7693|   790k|    struct id_adapter {
 7694|   790k|        constexpr void operator()()
 7695|   790k|        {
 7696|   790k|            arg_id = handler.on_arg_id();
 7697|   790k|        }
 7698|   790k|        constexpr void operator()(std::size_t id)
 7699|   790k|        {
 7700|   790k|            arg_id = handler.on_arg_id(id);
 7701|   790k|        }
 7702|       |
 7703|   790k|        constexpr void on_error(const char* msg)
 7704|   790k|        {
 7705|   790k|            SCN_UNLIKELY_ATTR
 7706|   790k|            handler.on_error(msg);
 7707|   790k|        }
 7708|       |
 7709|   790k|        Handler& handler;
 7710|   790k|        std::size_t arg_id;
 7711|   790k|    };
 7712|       |
 7713|   790k|    ++begin;
 7714|   790k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 790k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   790k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 790k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   790k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 790k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   790k|    else {
 7726|   790k|        auto adapter = id_adapter{handler, 0};
 7727|   790k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   790k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 790k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   790k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 790k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   790k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 790k, False: 0]
  ------------------
 7738|   790k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 790k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   790k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   790k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 790k]
  |  |  |  Branch (865:45): [True: 0, False: 790k]
  |  |  |  Branch (865:45): [True: 0, False: 790k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   790k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   790k|    }
 7754|   790k|    return begin + 1;
 7755|   790k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   790k|{
 7194|   790k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   790k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   790k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   790k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 790k, False: 0]
  |  Branch (7195:26): [True: 0, False: 790k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   790k|    handler();
 7200|   790k|    return begin;
 7201|   790k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   790k|        {
 7696|   790k|            arg_id = handler.on_arg_id();
 7697|   790k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   790k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   790k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   790k|    {
 7874|   790k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   790k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   790k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   790k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7608|   790k|{
 7609|   790k|    auto do_presentation = [&]() -> const CharT* {
 7610|   790k|        if (*begin == CharT{'['}) {
 7611|   790k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   790k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   790k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   790k|                return begin;
 7617|   790k|            }
 7618|   790k|            handler.on_character_set_string(set);
 7619|   790k|            return begin;
 7620|   790k|        }
 7621|   790k|        if (*begin == CharT{'/'}) {
 7622|   790k|            return parse_presentation_regex(begin, end, handler);
 7623|   790k|        }
 7624|   790k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   790k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   790k|            handler.on_error("Invalid type specifier in format string");
 7627|   790k|            return begin;
 7628|   790k|        }
 7629|   790k|        handler.on_type(type);
 7630|   790k|        return begin;
 7631|   790k|    };
 7632|       |
 7633|   790k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 790k, False: 0]
  |  Branch (7633:28): [True: 790k, False: 0]
  ------------------
 7634|   790k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 790k, False: 0]
  |  Branch (7634:36): [True: 565k, False: 225k]
  ------------------
 7635|   565k|        return do_presentation();
 7636|   565k|    }
 7637|       |
 7638|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   225k|    begin = parse_align(begin, end, handler);
 7644|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   225k|    begin = parse_width(begin, end, handler);
 7650|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   225k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 225k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   225k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 225k, False: 0]
  ------------------
 7669|   225k|        handler.on_localized();
 7670|   225k|        ++begin;
 7671|   225k|    }
 7672|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   225k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 225k, False: 0]
  |  Branch (7677:25): [True: 0, False: 225k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   225k|    return begin;
 7686|   225k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   565k|    auto do_presentation = [&]() -> const CharT* {
 7610|   565k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 565k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   565k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 565k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   565k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   565k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 565k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   565k|        handler.on_type(type);
 7630|   565k|        return begin;
 7631|   565k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7282|   225k|{
 7283|   225k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   225k|    auto check_align = [](wchar_t ch) {
 7286|   225k|        switch (ch) {
 7287|   225k|            case L'<':
 7288|   225k|                return align_type::left;
 7289|   225k|            case L'>':
 7290|   225k|                return align_type::right;
 7291|   225k|            case L'^':
 7292|   225k|                return align_type::center;
 7293|   225k|            default:
 7294|   225k|                return align_type::none;
 7295|   225k|        }
 7296|   225k|    };
 7297|       |
 7298|   225k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   225k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  |  Branch (865:45): [True: 0, False: 225k]
  |  |  |  Branch (865:45): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7300|   225k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   225k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   225k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   225k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   225k|    const auto begin_before_fill = begin;
 7310|   225k|    begin += potential_fill_len;
 7311|       |
 7312|   225k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 225k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   225k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   225k|    const auto begin_after_fill = begin;
 7318|   225k|    ++begin;
 7319|       |
 7320|   225k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 225k, False: 0]
  ------------------
 7321|   225k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   225k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 225k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   225k|    }
 7329|       |
 7330|   225k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 225k, False: 0]
  ------------------
 7331|   225k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 225k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   225k|        return begin_before_fill;
 7336|   225k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   225k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|   450k|    auto check_align = [](wchar_t ch) {
 7286|   450k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 450k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 450k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 450k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   450k|            default:
  ------------------
  |  Branch (7293:13): [True: 450k, False: 0]
  ------------------
 7294|   450k|                return align_type::none;
 7295|   450k|        }
 7296|   450k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7347|   225k|{
 7348|   225k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   225k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 225k, False: 0]
  |  Branch (7350:33): [True: 0, False: 225k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   225k|    return begin;
 7361|   225k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7878|   225k|    {
 7879|   225k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   225k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 225k, False: 0]
  ------------------
 7881|   225k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 225k, False: 0]
  ------------------
 7882|   225k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 225k]
  ------------------
 7883|   225k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   225k|        Handler::on_localized();
 7891|   225k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   790k|{
 9324|   790k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   790k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   790k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   790k|{
 9225|   790k|#define SCN_VISIT(Type)                                                \
 9226|   790k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   790k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   790k|    }                                                                  \
 9229|   790k|    else {                                                             \
 9230|   790k|        return vis(monostate_val);                                     \
 9231|   790k|    }
 9232|       |
 9233|   790k|    monostate monostate_val{};
 9234|       |
 9235|   790k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 790k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 790k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 790k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 790k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 790k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 790k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 790k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 790k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 790k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 790k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 790k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 790k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 790k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 790k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 790k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   253k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 253k, False: 536k]
  ------------------
 9267|   253k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   253k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   253k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   253k|    }                                                                  \
  |  | 9229|   253k|    else {                                                             \
  |  | 9230|   253k|        return vis(monostate_val);                                     \
  |  | 9231|   253k|    }
  ------------------
 9268|   520k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 266k, False: 523k]
  ------------------
 9269|   520k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   520k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   520k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   520k|    }                                                                  \
  |  | 9229|   520k|    else {                                                             \
  |  | 9230|   520k|        return vis(monostate_val);                                     \
  |  | 9231|   520k|    }
  ------------------
 9270|   790k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 269k, False: 520k]
  ------------------
 9271|   790k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   790k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   790k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   790k|    }                                                                  \
  |  | 9229|   790k|    else {                                                             \
  |  | 9230|   790k|        return vis(monostate_val);                                     \
  |  | 9231|   790k|    }
  ------------------
 9272|   790k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 790k]
  ------------------
 9273|   790k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   790k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   790k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   790k|    }                                                                  \
  |  | 9229|   790k|    else {                                                             \
  |  | 9230|   790k|        return vis(monostate_val);                                     \
  |  | 9231|   790k|    }
  ------------------
 9274|   790k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 790k]
  ------------------
 9275|   790k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   790k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   790k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   790k|    }                                                                  \
  |  | 9229|   790k|    else {                                                             \
  |  | 9230|   790k|        return vis(monostate_val);                                     \
  |  | 9231|   790k|    }
  ------------------
 9276|   790k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 790k]
  ------------------
 9277|   790k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   790k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   790k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   790k|    }                                                                  \
  |  | 9229|   790k|    else {                                                             \
  |  | 9230|   790k|        return vis(monostate_val);                                     \
  |  | 9231|   790k|    }
  ------------------
 9278|   790k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 790k]
  ------------------
 9279|   790k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   790k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   790k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   790k|    }                                                                  \
  |  | 9229|   790k|    else {                                                             \
  |  | 9230|   790k|        return vis(monostate_val);                                     \
  |  | 9231|   790k|    }
  ------------------
 9280|   790k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 790k]
  ------------------
 9281|   790k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   790k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   790k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   790k|    }                                                                  \
  |  | 9229|   790k|    else {                                                             \
  |  | 9230|   790k|        return vis(monostate_val);                                     \
  |  | 9231|   790k|    }
  ------------------
 9282|   790k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 790k]
  ------------------
 9283|   790k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   790k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   790k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   790k|    }                                                                  \
  |  | 9229|   790k|    else {                                                             \
  |  | 9230|   790k|        return vis(monostate_val);                                     \
  |  | 9231|   790k|    }
  ------------------
 9284|       |
 9285|   790k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 790k]
  ------------------
 9286|   790k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   790k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   790k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 790k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 790k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   790k|            SCN_CLANG_POP
 9303|   790k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  90.9k|    {
 4352|  90.9k|        return sync(0);
 4353|  90.9k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|  1.12M|    {
 6182|  1.12M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  1.12M|        return static_cast<std::size_t>(m_desc &
 6187|  1.12M|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  1.12M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|  2.25M|    {
 6208|  2.25M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  2.25M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|  1.12M|    {
 6150|  1.12M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  1.12M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.12M|        const auto t = type(id);
 6162|  1.12M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|  1.12M|        basic_scan_arg<Context> arg;
 6167|  1.12M|        arg.m_type = t;
 6168|  1.12M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 1.12M, False: 0]
  ------------------
 6169|  1.12M|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  1.12M|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  1.12M|        return arg;
 6175|  1.12M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|  1.12M|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  1.12M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  1.12M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  1.12M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  1.12M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|  1.12M|    {
 6212|  1.12M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  1.12M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|  2.14M|    {
 5966|  2.14M|        return m_type != detail::arg_type::none_type;
 5967|  2.14M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   167k|{
 9324|   167k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   167k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   167k|{
 9225|   167k|#define SCN_VISIT(Type)                                                \
 9226|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   167k|    }                                                                  \
 9229|   167k|    else {                                                             \
 9230|   167k|        return vis(monostate_val);                                     \
 9231|   167k|    }
 9232|       |
 9233|   167k|    monostate monostate_val{};
 9234|       |
 9235|   167k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 167k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 167k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 167k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 167k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 167k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 167k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 167k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 167k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 167k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 167k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 167k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 167k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 167k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 167k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 167k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  47.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 47.6k, False: 119k]
  ------------------
 9267|  47.6k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  47.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  47.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  47.6k|    }                                                                  \
  |  | 9229|  47.6k|    else {                                                             \
  |  | 9230|  47.6k|        return vis(monostate_val);                                     \
  |  | 9231|  47.6k|    }
  ------------------
 9268|   106k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 58.8k, False: 108k]
  ------------------
 9269|   106k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9270|   167k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 60.5k, False: 106k]
  ------------------
 9271|   167k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   167k|    }                                                                  \
  |  | 9229|   167k|    else {                                                             \
  |  | 9230|   167k|        return vis(monostate_val);                                     \
  |  | 9231|   167k|    }
  ------------------
 9272|   167k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 167k]
  ------------------
 9273|   167k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   167k|    }                                                                  \
  |  | 9229|   167k|    else {                                                             \
  |  | 9230|   167k|        return vis(monostate_val);                                     \
  |  | 9231|   167k|    }
  ------------------
 9274|   167k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 167k]
  ------------------
 9275|   167k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   167k|    }                                                                  \
  |  | 9229|   167k|    else {                                                             \
  |  | 9230|   167k|        return vis(monostate_val);                                     \
  |  | 9231|   167k|    }
  ------------------
 9276|   167k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 167k]
  ------------------
 9277|   167k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   167k|    }                                                                  \
  |  | 9229|   167k|    else {                                                             \
  |  | 9230|   167k|        return vis(monostate_val);                                     \
  |  | 9231|   167k|    }
  ------------------
 9278|   167k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 167k]
  ------------------
 9279|   167k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   167k|    }                                                                  \
  |  | 9229|   167k|    else {                                                             \
  |  | 9230|   167k|        return vis(monostate_val);                                     \
  |  | 9231|   167k|    }
  ------------------
 9280|   167k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 167k]
  ------------------
 9281|   167k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   167k|    }                                                                  \
  |  | 9229|   167k|    else {                                                             \
  |  | 9230|   167k|        return vis(monostate_val);                                     \
  |  | 9231|   167k|    }
  ------------------
 9282|   167k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 167k]
  ------------------
 9283|   167k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   167k|    }                                                                  \
  |  | 9229|   167k|    else {                                                             \
  |  | 9230|   167k|        return vis(monostate_val);                                     \
  |  | 9231|   167k|    }
  ------------------
 9284|       |
 9285|   167k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 167k]
  ------------------
 9286|   167k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   167k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   167k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 167k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 167k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   167k|            SCN_CLANG_POP
 9303|   167k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  3.04M|{
 6011|  3.04M|    return arg.m_type;
 6012|  3.04M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  1.23M|{
 6023|  1.23M|    return arg.m_value;
 6024|  1.23M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   452k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   452k|    {
 8949|   452k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|   452k|        : m_format{format},
 6280|   452k|          m_next_arg_id{next_arg_id},
 6281|   452k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   452k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   452k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   452k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   452k|    {
 6287|   452k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   452k|    {
 3075|   452k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   452k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   452k|    {
 3041|   452k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   452k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   452k|{
 7796|   452k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   452k|    handler.check_args_exhausted();
 7798|   452k|    return handler.get_error();
 7799|   452k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   452k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   452k|    auto begin = format.data();
 7764|   452k|    auto it = begin;
 7765|   452k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   764k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 452k, False: 312k]
  ------------------
 7768|   452k|        const auto ch = *it++;
 7769|   452k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 452k, False: 0]
  ------------------
 7770|   452k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   452k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   452k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 139k, False: 312k]
  ------------------
 7774|   139k|                return;
 7775|   139k|            }
 7776|   452k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   452k|    }
 7787|       |
 7788|   312k|    handler.on_literal_text(begin, end);
 7789|   312k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|   452k|{
 7693|   452k|    struct id_adapter {
 7694|   452k|        constexpr void operator()()
 7695|   452k|        {
 7696|   452k|            arg_id = handler.on_arg_id();
 7697|   452k|        }
 7698|   452k|        constexpr void operator()(std::size_t id)
 7699|   452k|        {
 7700|   452k|            arg_id = handler.on_arg_id(id);
 7701|   452k|        }
 7702|       |
 7703|   452k|        constexpr void on_error(const char* msg)
 7704|   452k|        {
 7705|   452k|            SCN_UNLIKELY_ATTR
 7706|   452k|            handler.on_error(msg);
 7707|   452k|        }
 7708|       |
 7709|   452k|        Handler& handler;
 7710|   452k|        std::size_t arg_id;
 7711|   452k|    };
 7712|       |
 7713|   452k|    ++begin;
 7714|   452k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   452k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 452k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   452k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 452k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   452k|    else {
 7726|   452k|        auto adapter = id_adapter{handler, 0};
 7727|   452k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   452k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   452k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 452k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   452k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 452k, False: 0]
  ------------------
 7738|   452k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   452k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   452k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  |  Branch (865:45): [True: 0, False: 452k]
  |  |  |  Branch (865:45): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   452k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   452k|    }
 7754|   452k|    return begin + 1;
 7755|   452k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|   904k|    {
 8847|   904k|        return m_args.get(id);
 8848|   904k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|   904k|    {
 6315|   904k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 904k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   904k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   904k|        do_check_arg_id(id);
 6323|   904k|        return id;
 6324|   904k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|   904k|{
 6809|   904k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   904k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   904k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   452k|{
 7194|   452k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   452k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 452k, False: 0]
  |  Branch (7195:26): [True: 0, False: 452k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   452k|    handler();
 7200|   452k|    return begin;
 7201|   452k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   452k|        {
 7696|   452k|            arg_id = handler.on_arg_id();
 7697|   452k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|   904k|    {
 6310|   904k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   904k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   618k|{
 4691|   618k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 618k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   618k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   618k|                            ranges::default_sentinel};
 4697|   618k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   618k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   618k|    {
 4455|   618k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   618k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   618k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|  1.80M|    {
 6299|  1.80M|        return m_format.data();
 6300|  1.80M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   452k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   452k|    {
 7874|   452k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   452k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7608|   452k|{
 7609|   452k|    auto do_presentation = [&]() -> const CharT* {
 7610|   452k|        if (*begin == CharT{'['}) {
 7611|   452k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   452k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   452k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   452k|                return begin;
 7617|   452k|            }
 7618|   452k|            handler.on_character_set_string(set);
 7619|   452k|            return begin;
 7620|   452k|        }
 7621|   452k|        if (*begin == CharT{'/'}) {
 7622|   452k|            return parse_presentation_regex(begin, end, handler);
 7623|   452k|        }
 7624|   452k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   452k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   452k|            handler.on_error("Invalid type specifier in format string");
 7627|   452k|            return begin;
 7628|   452k|        }
 7629|   452k|        handler.on_type(type);
 7630|   452k|        return begin;
 7631|   452k|    };
 7632|       |
 7633|   452k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 452k, False: 0]
  |  Branch (7633:28): [True: 452k, False: 0]
  ------------------
 7634|   452k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 452k, False: 0]
  |  Branch (7634:36): [True: 341k, False: 111k]
  ------------------
 7635|   341k|        return do_presentation();
 7636|   341k|    }
 7637|       |
 7638|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   111k|    begin = parse_align(begin, end, handler);
 7644|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   111k|    begin = parse_width(begin, end, handler);
 7650|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   111k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 111k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   111k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 111k, False: 0]
  ------------------
 7669|   111k|        handler.on_localized();
 7670|   111k|        ++begin;
 7671|   111k|    }
 7672|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   111k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 111k, False: 0]
  |  Branch (7677:25): [True: 0, False: 111k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   111k|    return begin;
 7686|   111k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7257|   904k|{
 7258|   904k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 681k, False: 222k]
  |  Branch (7258:33): [True: 681k, False: 0]
  ------------------
 7259|   904k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 222k, False: 0]
  |  Branch (7259:33): [True: 222k, False: 0]
  ------------------
 7260|   904k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   341k|    auto do_presentation = [&]() -> const CharT* {
 7610|   341k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 341k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   341k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 341k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   341k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   341k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   341k|        handler.on_type(type);
 7630|   341k|        return begin;
 7631|   341k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7205|   681k|{
 7206|   681k|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 681k]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 681k]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 681k]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 681k]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 681k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 681k]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 681k]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 681k]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 681k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 681k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|   247k|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 247k, False: 434k]
  ------------------
 7225|   247k|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 681k]
  ------------------
 7226|   247k|            return presentation_type::float_hex;
 7227|  58.1k|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 58.1k, False: 623k]
  ------------------
 7228|  58.1k|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 681k]
  ------------------
 7229|  58.1k|            return presentation_type::float_scientific;
 7230|   169k|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 169k, False: 512k]
  ------------------
 7231|   169k|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 681k]
  ------------------
 7232|   169k|            return presentation_type::float_fixed;
 7233|   206k|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 206k, False: 475k]
  ------------------
 7234|   206k|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 681k]
  ------------------
 7235|   206k|            return presentation_type::float_general;
 7236|      0|        case 's':
  ------------------
  |  Branch (7236:9): [True: 0, False: 681k]
  ------------------
 7237|      0|            return presentation_type::string;
 7238|      0|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 0, False: 681k]
  ------------------
 7239|      0|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 681k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 681k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 681k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 681k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|      0|        default:
  ------------------
  |  Branch (7250:9): [True: 0, False: 681k]
  ------------------
 7251|      0|            return presentation_type::none;
 7252|   681k|    }
 7253|   681k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7282|   111k|{
 7283|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   111k|    auto check_align = [](wchar_t ch) {
 7286|   111k|        switch (ch) {
 7287|   111k|            case L'<':
 7288|   111k|                return align_type::left;
 7289|   111k|            case L'>':
 7290|   111k|                return align_type::right;
 7291|   111k|            case L'^':
 7292|   111k|                return align_type::center;
 7293|   111k|            default:
 7294|   111k|                return align_type::none;
 7295|   111k|        }
 7296|   111k|    };
 7297|       |
 7298|   111k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   111k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  |  Branch (865:45): [True: 0, False: 111k]
  |  |  |  Branch (865:45): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7300|   111k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   111k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   111k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   111k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   111k|    const auto begin_before_fill = begin;
 7310|   111k|    begin += potential_fill_len;
 7311|       |
 7312|   111k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 111k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   111k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   111k|    const auto begin_after_fill = begin;
 7318|   111k|    ++begin;
 7319|       |
 7320|   111k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 111k, False: 0]
  ------------------
 7321|   111k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   111k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 111k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   111k|    }
 7329|       |
 7330|   111k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 111k, False: 0]
  ------------------
 7331|   111k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 111k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   111k|        return begin_before_fill;
 7336|   111k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   111k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7264|   222k|{
 7265|   222k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|   222k|    if constexpr (sizeof(CharT) != 1) {
 7267|   222k|        return 1;
 7268|       |    }
 7269|       |    else {
 7270|       |        const auto lengths =
 7271|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|       |            "\3\4";
 7273|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|       |        return len;
 7275|       |    }
 7276|   222k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|   222k|    auto check_align = [](wchar_t ch) {
 7286|   222k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 222k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 222k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 222k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   222k|            default:
  ------------------
  |  Branch (7293:13): [True: 222k, False: 0]
  ------------------
 7294|   222k|                return align_type::none;
 7295|   222k|        }
 7296|   222k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7347|   111k|{
 7348|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   111k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 111k, False: 0]
  |  Branch (7350:33): [True: 0, False: 111k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   111k|    return begin;
 7361|   111k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7878|   111k|    {
 7879|   111k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   111k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 111k, False: 0]
  ------------------
 7881|   111k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 111k, False: 0]
  ------------------
 7882|   111k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 111k]
  ------------------
 7883|   111k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   111k|        Handler::on_localized();
 7891|   111k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   452k|{
 9324|   452k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   452k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   452k|{
 9225|   452k|#define SCN_VISIT(Type)                                                \
 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   452k|    }                                                                  \
 9229|   452k|    else {                                                             \
 9230|   452k|        return vis(monostate_val);                                     \
 9231|   452k|    }
 9232|       |
 9233|   452k|    monostate monostate_val{};
 9234|       |
 9235|   452k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 452k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 452k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 452k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 452k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 452k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 452k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 452k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 452k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 452k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 452k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 452k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 452k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 452k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 452k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 452k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   139k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 139k, False: 312k]
  ------------------
 9267|   139k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   139k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   139k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   139k|    }                                                                  \
  |  | 9229|   139k|    else {                                                             \
  |  | 9230|   139k|        return vis(monostate_val);                                     \
  |  | 9231|   139k|    }
  ------------------
 9268|   294k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 154k, False: 297k]
  ------------------
 9269|   294k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   294k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   294k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   294k|    }                                                                  \
  |  | 9229|   294k|    else {                                                             \
  |  | 9230|   294k|        return vis(monostate_val);                                     \
  |  | 9231|   294k|    }
  ------------------
 9270|   452k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 157k, False: 294k]
  ------------------
 9271|   452k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9272|   452k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 452k]
  ------------------
 9273|   452k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9274|   452k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 452k]
  ------------------
 9275|   452k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9276|   452k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 452k]
  ------------------
 9277|   452k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9278|   452k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 452k]
  ------------------
 9279|   452k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9280|   452k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 452k]
  ------------------
 9281|   452k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9282|   452k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 452k]
  ------------------
 9283|   452k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9284|       |
 9285|   452k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 452k]
  ------------------
 9286|   452k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   452k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   452k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 452k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 452k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   452k|            SCN_CLANG_POP
 9303|   452k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|   166k|{
 9324|   166k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   166k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   166k|{
 9225|   166k|#define SCN_VISIT(Type)                                                \
 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   166k|    }                                                                  \
 9229|   166k|    else {                                                             \
 9230|   166k|        return vis(monostate_val);                                     \
 9231|   166k|    }
 9232|       |
 9233|   166k|    monostate monostate_val{};
 9234|       |
 9235|   166k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 166k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 166k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 166k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 166k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 166k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 166k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 166k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 166k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 166k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 166k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 166k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 166k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 166k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 166k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 166k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  47.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 47.5k, False: 119k]
  ------------------
 9267|  47.5k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  47.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  47.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  47.5k|    }                                                                  \
  |  | 9229|  47.5k|    else {                                                             \
  |  | 9230|  47.5k|        return vis(monostate_val);                                     \
  |  | 9231|  47.5k|    }
  ------------------
 9268|   106k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 58.7k, False: 108k]
  ------------------
 9269|   106k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9270|   166k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 60.5k, False: 106k]
  ------------------
 9271|   166k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9272|   166k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 166k]
  ------------------
 9273|   166k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9274|   166k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 166k]
  ------------------
 9275|   166k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9276|   166k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 166k]
  ------------------
 9277|   166k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9278|   166k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 166k]
  ------------------
 9279|   166k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9280|   166k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 166k]
  ------------------
 9281|   166k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9282|   166k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 166k]
  ------------------
 9283|   166k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9284|       |
 9285|   166k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 166k]
  ------------------
 9286|   166k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   166k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   166k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 166k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 166k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   166k|            SCN_CLANG_POP
 9303|   166k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|   452k|        : m_format{format},
 6280|   452k|          m_next_arg_id{next_arg_id},
 6281|   452k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   452k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   452k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   452k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   452k|    {
 6287|   452k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   452k|{
 7796|   452k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   452k|    handler.check_args_exhausted();
 7798|   452k|    return handler.get_error();
 7799|   452k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   452k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   452k|    auto begin = format.data();
 7764|   452k|    auto it = begin;
 7765|   452k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   764k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 452k, False: 312k]
  ------------------
 7768|   452k|        const auto ch = *it++;
 7769|   452k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 452k, False: 0]
  ------------------
 7770|   452k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   452k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   452k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 139k, False: 312k]
  ------------------
 7774|   139k|                return;
 7775|   139k|            }
 7776|   452k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   452k|    }
 7787|       |
 7788|   312k|    handler.on_literal_text(begin, end);
 7789|   312k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|   312k|    {
 8986|   312k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   312k|    static_cast<    \
  |  |  935|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   312k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|   452k|{
 7693|   452k|    struct id_adapter {
 7694|   452k|        constexpr void operator()()
 7695|   452k|        {
 7696|   452k|            arg_id = handler.on_arg_id();
 7697|   452k|        }
 7698|   452k|        constexpr void operator()(std::size_t id)
 7699|   452k|        {
 7700|   452k|            arg_id = handler.on_arg_id(id);
 7701|   452k|        }
 7702|       |
 7703|   452k|        constexpr void on_error(const char* msg)
 7704|   452k|        {
 7705|   452k|            SCN_UNLIKELY_ATTR
 7706|   452k|            handler.on_error(msg);
 7707|   452k|        }
 7708|       |
 7709|   452k|        Handler& handler;
 7710|   452k|        std::size_t arg_id;
 7711|   452k|    };
 7712|       |
 7713|   452k|    ++begin;
 7714|   452k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   452k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 452k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   452k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 452k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   452k|    else {
 7726|   452k|        auto adapter = id_adapter{handler, 0};
 7727|   452k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   452k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   452k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 452k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   452k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 452k, False: 0]
  ------------------
 7738|   452k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   452k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   452k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  |  Branch (865:45): [True: 0, False: 452k]
  |  |  |  Branch (865:45): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   452k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   452k|    }
 7754|   452k|    return begin + 1;
 7755|   452k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   452k|{
 7194|   452k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   452k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 452k, False: 0]
  |  Branch (7195:26): [True: 0, False: 452k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   452k|    handler();
 7200|   452k|    return begin;
 7201|   452k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   452k|        {
 7696|   452k|            arg_id = handler.on_arg_id();
 7697|   452k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   452k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   452k|    {
 7874|   452k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   452k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7608|   452k|{
 7609|   452k|    auto do_presentation = [&]() -> const CharT* {
 7610|   452k|        if (*begin == CharT{'['}) {
 7611|   452k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   452k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   452k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   452k|                return begin;
 7617|   452k|            }
 7618|   452k|            handler.on_character_set_string(set);
 7619|   452k|            return begin;
 7620|   452k|        }
 7621|   452k|        if (*begin == CharT{'/'}) {
 7622|   452k|            return parse_presentation_regex(begin, end, handler);
 7623|   452k|        }
 7624|   452k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   452k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   452k|            handler.on_error("Invalid type specifier in format string");
 7627|   452k|            return begin;
 7628|   452k|        }
 7629|   452k|        handler.on_type(type);
 7630|   452k|        return begin;
 7631|   452k|    };
 7632|       |
 7633|   452k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 452k, False: 0]
  |  Branch (7633:28): [True: 452k, False: 0]
  ------------------
 7634|   452k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 452k, False: 0]
  |  Branch (7634:36): [True: 340k, False: 111k]
  ------------------
 7635|   340k|        return do_presentation();
 7636|   340k|    }
 7637|       |
 7638|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   111k|    begin = parse_align(begin, end, handler);
 7644|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   111k|    begin = parse_width(begin, end, handler);
 7650|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   111k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 111k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   111k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 111k, False: 0]
  ------------------
 7669|   111k|        handler.on_localized();
 7670|   111k|        ++begin;
 7671|   111k|    }
 7672|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   111k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 111k, False: 0]
  |  Branch (7677:25): [True: 0, False: 111k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   111k|    return begin;
 7686|   111k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   340k|    auto do_presentation = [&]() -> const CharT* {
 7610|   340k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 340k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   340k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 340k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   340k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   340k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 340k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   340k|        handler.on_type(type);
 7630|   340k|        return begin;
 7631|   340k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7282|   111k|{
 7283|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   111k|    auto check_align = [](wchar_t ch) {
 7286|   111k|        switch (ch) {
 7287|   111k|            case L'<':
 7288|   111k|                return align_type::left;
 7289|   111k|            case L'>':
 7290|   111k|                return align_type::right;
 7291|   111k|            case L'^':
 7292|   111k|                return align_type::center;
 7293|   111k|            default:
 7294|   111k|                return align_type::none;
 7295|   111k|        }
 7296|   111k|    };
 7297|       |
 7298|   111k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   111k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  |  Branch (865:45): [True: 0, False: 111k]
  |  |  |  Branch (865:45): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7300|   111k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   111k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   111k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   111k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   111k|    const auto begin_before_fill = begin;
 7310|   111k|    begin += potential_fill_len;
 7311|       |
 7312|   111k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 111k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   111k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   111k|    const auto begin_after_fill = begin;
 7318|   111k|    ++begin;
 7319|       |
 7320|   111k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 111k, False: 0]
  ------------------
 7321|   111k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   111k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 111k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   111k|    }
 7329|       |
 7330|   111k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 111k, False: 0]
  ------------------
 7331|   111k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 111k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   111k|        return begin_before_fill;
 7336|   111k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   111k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|   222k|    auto check_align = [](wchar_t ch) {
 7286|   222k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 222k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 222k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 222k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   222k|            default:
  ------------------
  |  Branch (7293:13): [True: 222k, False: 0]
  ------------------
 7294|   222k|                return align_type::none;
 7295|   222k|        }
 7296|   222k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7347|   111k|{
 7348|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   111k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 111k, False: 0]
  |  Branch (7350:33): [True: 0, False: 111k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   111k|    return begin;
 7361|   111k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7878|   111k|    {
 7879|   111k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   111k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 111k, False: 0]
  ------------------
 7881|   111k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 111k, False: 0]
  ------------------
 7882|   111k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 111k]
  ------------------
 7883|   111k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   111k|        Handler::on_localized();
 7891|   111k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   452k|{
 9324|   452k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   452k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   452k|{
 9225|   452k|#define SCN_VISIT(Type)                                                \
 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   452k|    }                                                                  \
 9229|   452k|    else {                                                             \
 9230|   452k|        return vis(monostate_val);                                     \
 9231|   452k|    }
 9232|       |
 9233|   452k|    monostate monostate_val{};
 9234|       |
 9235|   452k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 452k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 452k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 452k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 452k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 452k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 452k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 452k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 452k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 452k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 452k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 452k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 452k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 452k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 452k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 452k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   139k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 139k, False: 312k]
  ------------------
 9267|   139k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   139k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   139k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   139k|    }                                                                  \
  |  | 9229|   139k|    else {                                                             \
  |  | 9230|   139k|        return vis(monostate_val);                                     \
  |  | 9231|   139k|    }
  ------------------
 9268|   294k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 154k, False: 297k]
  ------------------
 9269|   294k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   294k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   294k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   294k|    }                                                                  \
  |  | 9229|   294k|    else {                                                             \
  |  | 9230|   294k|        return vis(monostate_val);                                     \
  |  | 9231|   294k|    }
  ------------------
 9270|   452k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 157k, False: 294k]
  ------------------
 9271|   452k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9272|   452k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 452k]
  ------------------
 9273|   452k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9274|   452k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 452k]
  ------------------
 9275|   452k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9276|   452k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 452k]
  ------------------
 9277|   452k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9278|   452k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 452k]
  ------------------
 9279|   452k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9280|   452k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 452k]
  ------------------
 9281|   452k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9282|   452k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 452k]
  ------------------
 9283|   452k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9284|       |
 9285|   452k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 452k]
  ------------------
 9286|   452k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   452k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   452k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 452k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 452k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   452k|            SCN_CLANG_POP
 9303|   452k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|   181k|    {
 4352|   181k|        return sync(0);
 4353|   181k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|   195k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|   111k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  85.8k|{
   89|  85.8k|    auto result = make_scan_result<Source, Args...>();
   90|  85.8k|    fill_scan_result(result,
   91|  85.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  85.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  85.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  85.8k|    return result;
   94|  85.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   281k|{
   44|   281k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   281k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  85.8k|{
  131|  85.8k|    auto result = make_scan_result<Source, Args...>();
  132|  85.8k|    fill_scan_result(result,
  133|  85.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  85.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  85.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  85.8k|    return result;
  136|  85.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   281k|{
   60|   281k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   281k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  15.8k|{
  171|  15.8k|    auto result = make_scan_result<Source, T>();
  172|  15.8k|    fill_scan_result(
  173|  15.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.8k|    return result;
  176|  15.8k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  55.6k|{
   72|  55.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  55.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  55.6k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  97.1k|{
   89|  97.1k|    auto result = make_scan_result<Source, Args...>();
   90|  97.1k|    fill_scan_result(result,
   91|  97.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  97.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  97.1k|    return result;
   94|  97.1k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  97.1k|{
  131|  97.1k|    auto result = make_scan_result<Source, Args...>();
  132|  97.1k|    fill_scan_result(result,
  133|  97.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  97.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  97.1k|    return result;
  136|  97.1k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  19.6k|{
  171|  19.6k|    auto result = make_scan_result<Source, T>();
  172|  19.6k|    fill_scan_result(
  173|  19.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  19.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.6k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.6k|    return result;
  176|  19.6k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  98.9k|{
   89|  98.9k|    auto result = make_scan_result<Source, Args...>();
   90|  98.9k|    fill_scan_result(result,
   91|  98.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  98.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  98.9k|    return result;
   94|  98.9k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  98.9k|{
  131|  98.9k|    auto result = make_scan_result<Source, Args...>();
  132|  98.9k|    fill_scan_result(result,
  133|  98.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  98.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  98.9k|    return result;
  136|  98.9k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  20.1k|{
  171|  20.1k|    auto result = make_scan_result<Source, T>();
  172|  20.1k|    fill_scan_result(
  173|  20.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  20.1k|                            detail::make_arg<wscan_context>(result->value())));
  175|  20.1k|    return result;
  176|  20.1k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  85.7k|{
   89|  85.7k|    auto result = make_scan_result<Source, Args...>();
   90|  85.7k|    fill_scan_result(result,
   91|  85.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  85.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  85.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  85.7k|    return result;
   94|  85.7k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   281k|{
   44|   281k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   281k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  85.7k|{
  131|  85.7k|    auto result = make_scan_result<Source, Args...>();
  132|  85.7k|    fill_scan_result(result,
  133|  85.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  85.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  85.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  85.7k|    return result;
  136|  85.7k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   281k|{
   60|   281k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   281k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  15.8k|{
  171|  15.8k|    auto result = make_scan_result<Source, T>();
  172|  15.8k|    fill_scan_result(
  173|  15.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.8k|    return result;
  176|  15.8k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  55.6k|{
   72|  55.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  55.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  55.6k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  97.0k|{
   89|  97.0k|    auto result = make_scan_result<Source, Args...>();
   90|  97.0k|    fill_scan_result(result,
   91|  97.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  97.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  97.0k|    return result;
   94|  97.0k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  97.0k|{
  131|  97.0k|    auto result = make_scan_result<Source, Args...>();
  132|  97.0k|    fill_scan_result(result,
  133|  97.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  97.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  97.0k|    return result;
  136|  97.0k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  19.5k|{
  171|  19.5k|    auto result = make_scan_result<Source, T>();
  172|  19.5k|    fill_scan_result(
  173|  19.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.5k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.5k|    return result;
  176|  19.5k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  98.8k|{
   89|  98.8k|    auto result = make_scan_result<Source, Args...>();
   90|  98.8k|    fill_scan_result(result,
   91|  98.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  98.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  98.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  98.8k|    return result;
   94|  98.8k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  98.8k|{
  131|  98.8k|    auto result = make_scan_result<Source, Args...>();
  132|  98.8k|    fill_scan_result(result,
  133|  98.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  98.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  98.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  98.8k|    return result;
  136|  98.8k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  20.1k|{
  171|  20.1k|    auto result = make_scan_result<Source, T>();
  172|  20.1k|    fill_scan_result(
  173|  20.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  20.1k|                            detail::make_arg<wscan_context>(result->value())));
  175|  20.1k|    return result;
  176|  20.1k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.48M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.48M|{
  309|  1.48M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.48M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   625k|{
  315|   625k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   625k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 312k, False: 312k]
  ------------------
  317|   625k|                    : std::locale{};
  318|   625k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  894|   614k|{
  895|   614k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   614k|                                  m_nan_payload_buffer, value);
  897|   614k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   614k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 598k, False: 16.3k]
  |  |  ------------------
  ------------------
  898|   598k|        value = this->setsign(value);
  899|   598k|        return n;
  900|   598k|    }
  901|       |
  902|  16.3k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 4.64k, False: 11.6k]
  ------------------
  903|  16.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 1.04k, False: 3.60k]
  ------------------
  904|  1.04k|        return detail::unexpected_scan_error(
  905|  1.04k|            scan_error::value_negative_overflow, n.error().msg());
  906|  1.04k|    }
  907|  15.2k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 959, False: 14.3k]
  ------------------
  908|  15.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 110, False: 849]
  ------------------
  909|    110|        return detail::unexpected_scan_error(
  910|    110|            scan_error::value_negative_underflow, n.error().msg());
  911|    110|    }
  912|  15.1k|    return n;
  913|  15.2k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  894|   288k|{
  895|   288k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   288k|                                  m_nan_payload_buffer, value);
  897|   288k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   288k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 253k, False: 34.3k]
  |  |  ------------------
  ------------------
  898|   253k|        value = this->setsign(value);
  899|   253k|        return n;
  900|   253k|    }
  901|       |
  902|  34.3k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 3.06k, False: 31.2k]
  ------------------
  903|  34.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 100, False: 2.96k]
  ------------------
  904|    100|        return detail::unexpected_scan_error(
  905|    100|            scan_error::value_negative_overflow, n.error().msg());
  906|    100|    }
  907|  34.2k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 830, False: 33.3k]
  ------------------
  908|  34.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 46, False: 784]
  ------------------
  909|     46|        return detail::unexpected_scan_error(
  910|     46|            scan_error::value_negative_underflow, n.error().msg());
  911|     46|    }
  912|  34.1k|    return n;
  913|  34.2k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|   643k|{
  895|   643k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   643k|                                  m_nan_payload_buffer, value);
  897|   643k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   643k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 629k, False: 13.9k]
  |  |  ------------------
  ------------------
  898|   629k|        value = this->setsign(value);
  899|   629k|        return n;
  900|   629k|    }
  901|       |
  902|  13.9k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 2.39k, False: 11.5k]
  ------------------
  903|  13.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 600, False: 1.79k]
  ------------------
  904|    600|        return detail::unexpected_scan_error(
  905|    600|            scan_error::value_negative_overflow, n.error().msg());
  906|    600|    }
  907|  13.3k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 306, False: 13.0k]
  ------------------
  908|  13.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 82, False: 224]
  ------------------
  909|     82|        return detail::unexpected_scan_error(
  910|     82|            scan_error::value_negative_underflow, n.error().msg());
  911|     82|    }
  912|  13.2k|    return n;
  913|  13.3k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|   339k|{
  895|   339k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   339k|                                  m_nan_payload_buffer, value);
  897|   339k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   339k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 306k, False: 32.8k]
  |  |  ------------------
  ------------------
  898|   306k|        value = this->setsign(value);
  899|   306k|        return n;
  900|   306k|    }
  901|       |
  902|  32.8k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 1.68k, False: 31.2k]
  ------------------
  903|  32.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 100, False: 1.58k]
  ------------------
  904|    100|        return detail::unexpected_scan_error(
  905|    100|            scan_error::value_negative_overflow, n.error().msg());
  906|    100|    }
  907|  32.7k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 216, False: 32.5k]
  ------------------
  908|  32.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 14, False: 202]
  ------------------
  909|     14|        return detail::unexpected_scan_error(
  910|     14|            scan_error::value_negative_underflow, n.error().msg());
  911|     14|    }
  912|  32.7k|    return n;
  913|  32.7k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  894|   649k|{
  895|   649k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   649k|                                  m_nan_payload_buffer, value);
  897|   649k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   649k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 636k, False: 12.2k]
  |  |  ------------------
  ------------------
  898|   636k|        value = this->setsign(value);
  899|   636k|        return n;
  900|   636k|    }
  901|       |
  902|  12.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 532, False: 11.6k]
  ------------------
  903|  12.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 238, False: 294]
  ------------------
  904|    238|        return detail::unexpected_scan_error(
  905|    238|            scan_error::value_negative_overflow, n.error().msg());
  906|    238|    }
  907|  11.9k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 104, False: 11.8k]
  ------------------
  908|  11.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 40, False: 64]
  ------------------
  909|     40|        return detail::unexpected_scan_error(
  910|     40|            scan_error::value_negative_underflow, n.error().msg());
  911|     40|    }
  912|  11.9k|    return n;
  913|  11.9k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  894|   346k|{
  895|   346k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   346k|                                  m_nan_payload_buffer, value);
  897|   346k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   346k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 314k, False: 31.7k]
  |  |  ------------------
  ------------------
  898|   314k|        value = this->setsign(value);
  899|   314k|        return n;
  900|   314k|    }
  901|       |
  902|  31.7k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 142, False: 31.5k]
  ------------------
  903|  31.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 14, False: 128]
  ------------------
  904|     14|        return detail::unexpected_scan_error(
  905|     14|            scan_error::value_negative_overflow, n.error().msg());
  906|     14|    }
  907|  31.6k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 92, False: 31.5k]
  ------------------
  908|  31.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 14, False: 78]
  ------------------
  909|     14|        return detail::unexpected_scan_error(
  910|     14|            scan_error::value_negative_underflow, n.error().msg());
  911|     14|    }
  912|  31.6k|    return n;
  913|  31.6k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|   428k|{
 1903|   428k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|   428k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|   497k|{
 1911|   497k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|   497k|    return sync_after_vscan(source, n);
 1913|   497k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|   281k|{
 1921|   281k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|   281k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|   281k|{
 1929|   281k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|   281k|    return sync_after_vscan(source, n);
 1931|   281k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   851k|{
  207|   851k|    return find_classic_impl(
  208|   851k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   851k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   851k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  2.03M|{
  215|  2.03M|    return find_classic_impl(
  216|  2.03M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  2.03M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  2.03M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|   428k|{
 1872|   428k|    return vscan_internal(source, format, args);
 1873|   428k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|   497k|{
 1878|   497k|    auto n = vscan_internal(source, format, args);
 1879|   497k|    return sync_after_vscan(source, n);
 1880|   497k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|   281k|{
 1886|   281k|    return vscan_internal(source, format, args);
 1887|   281k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|   281k|{
 1892|   281k|    auto n = vscan_internal(source, format, args);
 1893|   281k|    return sync_after_vscan(source, n);
 1894|   281k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  93.2k|{
 1958|  93.2k|    return vscan_value_internal(source, arg);
 1959|  93.2k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|   102k|{
 1963|   102k|    auto n = vscan_value_internal(source, arg);
 1964|   102k|    return sync_after_vscan(source, n);
 1965|   102k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  55.6k|{
 1971|  55.6k|    return vscan_value_internal(source, arg);
 1972|  55.6k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  55.6k|{
 1977|  55.6k|    auto n = vscan_value_internal(source, arg);
 1978|  55.6k|    return sync_after_vscan(source, n);
 1979|  55.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   851k|{
  131|   851k|    auto it = source.begin();
  132|       |
  133|  2.77M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 2.22M, False: 551k]
  ------------------
  134|  2.22M|        auto sv =
  135|  2.22M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  2.22M|                .substr(0, 8);
  137|       |
  138|  2.22M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.16M, False: 58.9k]
  ------------------
  139|  2.16M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.16M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.16M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 275k, False: 1.89M]
  ------------------
  142|   275k|                break;
  143|   275k|            }
  144|  1.89M|            continue;
  145|  2.16M|        }
  146|       |
  147|   194k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 159k, False: 34.9k]
  ------------------
  148|   159k|            auto tmp =
  149|   159k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   159k|            auto res = get_next_code_point(tmp);
  151|   159k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 23.9k, False: 135k]
  ------------------
  152|  23.9k|                return it;
  153|  23.9k|            }
  154|   135k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   135k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   135k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   135k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   135k|        }
  158|  58.9k|    }
  159|       |
  160|   827k|    return detail::make_string_view_iterator(source, it);
  161|   851k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  3.47M|{
  118|  3.47M|    static_assert(sizeof(*source.data()) == 1);
  119|  3.47M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  3.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  3.47M|    uint64_t word{};
  121|  3.47M|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  3.47M|    return has_byte_greater(word, 127) != 0;
  124|  3.47M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  13.2M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   159k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  2.03M|{
  131|  2.03M|    auto it = source.begin();
  132|       |
  133|  2.22M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 1.24M, False: 974k]
  ------------------
  134|  1.24M|        auto sv =
  135|  1.24M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  1.24M|                .substr(0, 8);
  137|       |
  138|  1.24M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 1.16M, False: 79.1k]
  ------------------
  139|  1.16M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  1.16M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  1.16M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 990k, False: 176k]
  ------------------
  142|   990k|                break;
  143|   990k|            }
  144|   176k|            continue;
  145|  1.16M|        }
  146|       |
  147|   144k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 137k, False: 6.74k]
  ------------------
  148|   137k|            auto tmp =
  149|   137k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   137k|            auto res = get_next_code_point(tmp);
  151|   137k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 72.3k, False: 65.0k]
  ------------------
  152|  72.3k|                return it;
  153|  72.3k|            }
  154|  65.0k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  65.0k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  65.0k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  65.0k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  65.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  65.0k|        }
  158|  79.1k|    }
  159|       |
  160|  1.96M|    return detail::make_string_view_iterator(source, it);
  161|  2.03M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  1.77M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   137k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   614k|{
  804|   614k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.26k, False: 611k]
  ------------------
  805|  3.26k|        value = std::numeric_limits<T>::infinity();
  806|  3.26k|        return 3;
  807|  3.26k|    }
  808|   611k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 2.96k, False: 608k]
  ------------------
  809|  2.96k|        value = std::numeric_limits<T>::infinity();
  810|  2.96k|        return 8;
  811|  2.96k|    }
  812|   608k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 26.8k, False: 581k]
  ------------------
  813|  26.8k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  26.8k|        return 3;
  815|  26.8k|    }
  816|   581k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 1.58k, False: 580k]
  ------------------
  817|  1.58k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  1.58k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  1.58k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  1.58k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  1.58k|    }
  848|       |
  849|   580k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   580k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   580k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   580k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 125k, False: 454k]
  ------------------
  851|   125k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.94k, False: 122k]
  |  |  ------------------
  ------------------
  852|  2.94k|            return detail::unexpected_scan_error(
  853|  2.94k|                scan_error::invalid_scanned_value,
  854|  2.94k|                "Invalid floating-point digit");
  855|  2.94k|        }
  856|   125k|    }
  857|   577k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.77k, False: 569k]
  |  |  ------------------
  ------------------
  858|  7.77k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  7.77k|                                             "Invalid floating-point digit");
  860|  7.77k|    }
  861|       |
  862|   569k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   569k|    else {
  879|       |        // Default to fast_float
  880|   569k|        return fast_float_impl<CharT, T>{data}(value);
  881|   569k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   569k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  739|   569k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   569k|    {
  741|   569k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  368|  2.07M|    {
  369|  2.07M|        return {kind, options};
  370|  2.07M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  744|   569k|    {
  745|   569k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 122k, False: 447k]
  ------------------
  746|   569k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 24.4k, False: 422k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|   146k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|   146k|                                              value);
  750|   146k|        }
  751|       |
  752|   422k|        const auto flags = get_flags();
  753|   422k|        const auto view = get_view();
  754|   422k|        const auto result = fast_float::from_chars(
  755|   422k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   422k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 422k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   422k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.81k, False: 417k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  4.81k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  4.81k|                                              value);
  766|  4.81k|        }
  767|       |
  768|   417k|        return result.ptr - view.data();
  769|   422k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   151k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   151k|    {
  709|   151k|#if !SCN_DISABLE_STRTOD
  710|   151k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   151k|    }
  717|   151k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  551|   151k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   151k|    {
  553|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  382|   219k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclERf:
  556|   151k|    {
  557|   151k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   151k|                           generic_strtod);
  559|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|   151k|    {
  389|   151k|        CharT* end{};
  390|   151k|        errno = 0;
  391|   151k|        value = strtod_cb(src, &end);
  392|   151k|        const auto saved_errno = errno;
  393|   151k|        auto chars_read = end - src;
  394|       |
  395|   151k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   151k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 5.60k, False: 146k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.60k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  5.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  5.60k|    }
  ------------------
  396|       |
  397|   146k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 121k, False: 24.3k]
  ------------------
  398|   146k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 121k, False: 0]
  ------------------
  399|   121k|            chars_read -= 2;
  400|   121k|        }
  401|       |
  402|   146k|        return chars_read;
  403|   151k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  431|   219k|    {
  432|   219k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 89.2k, False: 130k]
  |  Branch (432:37): [True: 0, False: 89.2k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   219k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 24.9k, False: 194k]
  ------------------
  440|   219k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 24.9k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   219k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 9.51k, False: 210k]
  |  Branch (447:34): [True: 1.78k, False: 7.72k]
  ------------------
  448|  1.78k|            SCN_UNLIKELY_ATTR
  449|  1.78k|            return detail::unexpected_scan_error(
  450|  1.78k|                scan_error::value_positive_underflow,
  451|  1.78k|                "strtod failed: underflow");
  452|  1.78k|        }
  453|       |
  454|   217k|        SCN_GCC_COMPAT_PUSH
  455|   217k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   217k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 217k, False: 0]
  ------------------
  458|   217k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 217k, False: 0]
  ------------------
  459|   217k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 7.70k, False: 210k]
  ------------------
  460|  7.70k|            SCN_UNLIKELY_ATTR
  461|  7.70k|            return detail::unexpected_scan_error(
  462|  7.70k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  7.70k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   210k|            return {};
  468|   217k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEf:
  343|   229k|{
  344|   229k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (344:12): [True: 91.0k, False: 138k]
  |  Branch (344:25): [True: 0, False: 138k]
  ------------------
  345|   229k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   151k|    {
  409|   151k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 147k, False: 4.12k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   147k|            auto first_space = read_until_classic_space(input.view());
  412|   147k|            input.assign(
  413|   147k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   147k|        }
  415|       |
  416|   151k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 122k, False: 29.2k]
  ------------------
  417|   122k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   122k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   122k|        }
  424|       |
  425|   151k|        return input.get_allocated_string().c_str();
  426|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  563|   151k|    {
  564|   151k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   151k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  471|   151k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   151k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|   151k|        if constexpr (std::is_same_v<T, float>) {
  497|   151k|            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   151k|#endif
  506|   151k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  723|  1.30M|    {
  724|  1.30M|        unsigned format_flags{};
  725|  1.30M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (725:13): [True: 1.29M, False: 10.6k]
  ------------------
  726|  1.29M|            format_flags |= fast_float::fixed;
  727|  1.29M|        }
  728|  1.30M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (728:13): [True: 1.10M, False: 196k]
  ------------------
  729|  1.10M|            format_flags |= fast_float::scientific;
  730|  1.10M|        }
  731|       |
  732|  1.30M|        return static_cast<fast_float::chars_format>(format_flags);
  733|  1.30M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  773|   422k|    {
  774|   422k|        if constexpr (sizeof(CharT) == 1) {
  775|   422k|            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|       |        else {
  783|       |            return std::u32string_view{
  784|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|       |                m_input.view().size()};
  786|       |        }
  787|   422k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   288k|{
  804|   288k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 288k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   288k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 288k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   288k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 288k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   288k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 288k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   288k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   288k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   288k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 72.6k, False: 215k]
  ------------------
  851|  72.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.88k, False: 63.8k]
  |  |  ------------------
  ------------------
  852|  8.88k|            return detail::unexpected_scan_error(
  853|  8.88k|                scan_error::invalid_scanned_value,
  854|  8.88k|                "Invalid floating-point digit");
  855|  8.88k|        }
  856|  72.6k|    }
  857|   279k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.5k, False: 257k]
  |  |  ------------------
  ------------------
  858|  21.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  21.5k|                                             "Invalid floating-point digit");
  860|  21.5k|    }
  861|       |
  862|   257k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   257k|    else {
  879|       |        // Default to fast_float
  880|   257k|        return fast_float_impl<CharT, T>{data}(value);
  881|   257k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   257k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  739|   257k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   257k|    {
  741|   257k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  368|  1.01M|    {
  369|  1.01M|        return {kind, options};
  370|  1.01M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  744|   257k|    {
  745|   257k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 63.7k, False: 193k]
  ------------------
  746|   257k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 468, False: 193k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|  64.2k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|  64.2k|                                              value);
  750|  64.2k|        }
  751|       |
  752|   193k|        const auto flags = get_flags();
  753|   193k|        const auto view = get_view();
  754|   193k|        const auto result = fast_float::from_chars(
  755|   193k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   193k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   193k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.79k, False: 189k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  3.79k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  3.79k|                                              value);
  766|  3.79k|        }
  767|       |
  768|   189k|        return result.ptr - view.data();
  769|   193k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  68.0k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  68.0k|    {
  709|  68.0k|#if !SCN_DISABLE_STRTOD
  710|  68.0k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  68.0k|    }
  717|  68.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  551|  68.0k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  68.0k|    {
  553|  68.0k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclERf:
  556|  68.0k|    {
  557|  68.0k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  68.0k|                           generic_strtod);
  559|  68.0k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|  68.0k|    {
  389|  68.0k|        CharT* end{};
  390|  68.0k|        errno = 0;
  391|  68.0k|        value = strtod_cb(src, &end);
  392|  68.0k|        const auto saved_errno = errno;
  393|  68.0k|        auto chars_read = end - src;
  394|       |
  395|  68.0k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  68.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  68.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.89k, False: 64.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.89k|    }
  ------------------
  396|       |
  397|  64.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 63.6k, False: 468]
  ------------------
  398|  64.1k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 63.6k, False: 0]
  ------------------
  399|  63.6k|            chars_read -= 2;
  400|  63.6k|        }
  401|       |
  402|  64.1k|        return chars_read;
  403|  68.0k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  68.0k|    {
  409|  68.0k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 65.6k, False: 2.42k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  65.6k|            auto first_space = read_until_classic_space(input.view());
  412|  65.6k|            input.assign(
  413|  65.6k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  65.6k|        }
  415|       |
  416|  68.0k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 63.7k, False: 4.26k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  63.7k|            else {
  421|  63.7k|                input.get_allocated_string().insert(0, L"0x");
  422|  63.7k|            }
  423|  63.7k|        }
  424|       |
  425|  68.0k|        return input.get_allocated_string().c_str();
  426|  68.0k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  563|  68.0k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  68.0k|        else {
  568|  68.0k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  68.0k|        }
  570|  68.0k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  509|  68.0k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  68.0k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|  68.0k|        if constexpr (std::is_same_v<T, float>) {
  535|  68.0k|            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  68.0k|#endif
  544|  68.0k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  773|   193k|    {
  774|       |        if constexpr (sizeof(CharT) == 1) {
  775|       |            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|   193k|        else {
  783|   193k|            return std::u32string_view{
  784|   193k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|   193k|                m_input.view().size()};
  786|   193k|        }
  787|   193k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   643k|{
  804|   643k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.69k, False: 639k]
  ------------------
  805|  3.69k|        value = std::numeric_limits<T>::infinity();
  806|  3.69k|        return 3;
  807|  3.69k|    }
  808|   639k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 3.13k, False: 636k]
  ------------------
  809|  3.13k|        value = std::numeric_limits<T>::infinity();
  810|  3.13k|        return 8;
  811|  3.13k|    }
  812|   636k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 27.3k, False: 608k]
  ------------------
  813|  27.3k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  27.3k|        return 3;
  815|  27.3k|    }
  816|   608k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 1.65k, False: 607k]
  ------------------
  817|  1.65k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  1.65k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  1.65k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  1.65k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  1.65k|    }
  848|       |
  849|   607k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   607k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 129k, False: 478k]
  ------------------
  851|   129k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.00k, False: 126k]
  |  |  ------------------
  ------------------
  852|  3.00k|            return detail::unexpected_scan_error(
  853|  3.00k|                scan_error::invalid_scanned_value,
  854|  3.00k|                "Invalid floating-point digit");
  855|  3.00k|        }
  856|   129k|    }
  857|   604k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.22k, False: 595k]
  |  |  ------------------
  ------------------
  858|  8.22k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  8.22k|                                             "Invalid floating-point digit");
  860|  8.22k|    }
  861|       |
  862|   595k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   595k|    else {
  879|       |        // Default to fast_float
  880|   595k|        return fast_float_impl<CharT, T>{data}(value);
  881|   595k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   595k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  739|   595k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   595k|    {
  741|   595k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  744|   595k|    {
  745|   595k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 126k, False: 469k]
  ------------------
  746|   595k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 26.1k, False: 443k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|   152k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|   152k|                                              value);
  750|   152k|        }
  751|       |
  752|   443k|        const auto flags = get_flags();
  753|   443k|        const auto view = get_view();
  754|   443k|        const auto result = fast_float::from_chars(
  755|   443k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   443k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   443k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.27k, False: 441k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  2.27k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  2.27k|                                              value);
  766|  2.27k|        }
  767|       |
  768|   441k|        return result.ptr - view.data();
  769|   443k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   154k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   154k|    {
  709|   154k|#if !SCN_DISABLE_STRTOD
  710|   154k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   154k|    }
  717|   154k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  551|   154k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   154k|    {
  553|   154k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  382|   220k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclERd:
  556|   154k|    {
  557|   154k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   154k|                           generic_strtod);
  559|   154k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|   154k|    {
  389|   154k|        CharT* end{};
  390|   154k|        errno = 0;
  391|   154k|        value = strtod_cb(src, &end);
  392|   154k|        const auto saved_errno = errno;
  393|   154k|        auto chars_read = end - src;
  394|       |
  395|   154k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   154k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.69k, False: 151k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.69k|    }
  ------------------
  396|       |
  397|   151k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 125k, False: 26.0k]
  ------------------
  398|   151k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 125k, False: 0]
  ------------------
  399|   125k|            chars_read -= 2;
  400|   125k|        }
  401|       |
  402|   151k|        return chars_read;
  403|   154k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  431|   220k|    {
  432|   220k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 88.6k, False: 131k]
  |  Branch (432:37): [True: 0, False: 88.6k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   220k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 26.6k, False: 193k]
  ------------------
  440|   220k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 26.6k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   220k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 4.59k, False: 215k]
  |  Branch (447:34): [True: 522, False: 4.07k]
  ------------------
  448|    522|            SCN_UNLIKELY_ATTR
  449|    522|            return detail::unexpected_scan_error(
  450|    522|                scan_error::value_positive_underflow,
  451|    522|                "strtod failed: underflow");
  452|    522|        }
  453|       |
  454|   220k|        SCN_GCC_COMPAT_PUSH
  455|   220k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   220k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 220k, False: 0]
  ------------------
  458|   220k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 220k, False: 0]
  ------------------
  459|   220k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 4.07k, False: 215k]
  ------------------
  460|  4.07k|            SCN_UNLIKELY_ATTR
  461|  4.07k|            return detail::unexpected_scan_error(
  462|  4.07k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  4.07k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   215k|            return {};
  468|   220k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEd:
  347|   225k|{
  348|   225k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (348:12): [True: 89.1k, False: 135k]
  |  Branch (348:24): [True: 0, False: 135k]
  ------------------
  349|   225k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   154k|    {
  409|   154k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 151k, False: 3.02k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   151k|            auto first_space = read_until_classic_space(input.view());
  412|   151k|            input.assign(
  413|   151k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   151k|        }
  415|       |
  416|   154k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 126k, False: 28.4k]
  ------------------
  417|   126k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   126k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   126k|        }
  424|       |
  425|   154k|        return input.get_allocated_string().c_str();
  426|   154k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  563|   154k|    {
  564|   154k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   154k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   154k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  471|   154k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   154k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|   154k|        else if constexpr (std::is_same_v<T, double>) {
  500|   154k|            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   154k|#endif
  506|   154k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  773|   443k|    {
  774|   443k|        if constexpr (sizeof(CharT) == 1) {
  775|   443k|            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|       |        else {
  783|       |            return std::u32string_view{
  784|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|       |                m_input.view().size()};
  786|       |        }
  787|   443k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   339k|{
  804|   339k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 339k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   339k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 339k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   339k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 339k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   339k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 339k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   339k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   339k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 72.6k, False: 266k]
  ------------------
  851|  72.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.89k, False: 63.8k]
  |  |  ------------------
  ------------------
  852|  8.89k|            return detail::unexpected_scan_error(
  853|  8.89k|                scan_error::invalid_scanned_value,
  854|  8.89k|                "Invalid floating-point digit");
  855|  8.89k|        }
  856|  72.6k|    }
  857|   330k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.1k, False: 308k]
  |  |  ------------------
  ------------------
  858|  22.1k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  22.1k|                                             "Invalid floating-point digit");
  860|  22.1k|    }
  861|       |
  862|   308k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   308k|    else {
  879|       |        // Default to fast_float
  880|   308k|        return fast_float_impl<CharT, T>{data}(value);
  881|   308k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   308k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  739|   308k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   308k|    {
  741|   308k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  744|   308k|    {
  745|   308k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 63.7k, False: 244k]
  ------------------
  746|   308k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 468, False: 243k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|  64.2k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|  64.2k|                                              value);
  750|  64.2k|        }
  751|       |
  752|   243k|        const auto flags = get_flags();
  753|   243k|        const auto view = get_view();
  754|   243k|        const auto result = fast_float::from_chars(
  755|   243k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   243k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 243k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   243k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.81k, False: 242k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  1.81k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  1.81k|                                              value);
  766|  1.81k|        }
  767|       |
  768|   242k|        return result.ptr - view.data();
  769|   243k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  66.0k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  66.0k|    {
  709|  66.0k|#if !SCN_DISABLE_STRTOD
  710|  66.0k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  66.0k|    }
  717|  66.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  551|  66.0k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  66.0k|    {
  553|  66.0k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclERd:
  556|  66.0k|    {
  557|  66.0k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  66.0k|                           generic_strtod);
  559|  66.0k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|  66.0k|    {
  389|  66.0k|        CharT* end{};
  390|  66.0k|        errno = 0;
  391|  66.0k|        value = strtod_cb(src, &end);
  392|  66.0k|        const auto saved_errno = errno;
  393|  66.0k|        auto chars_read = end - src;
  394|       |
  395|  66.0k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  66.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.90k, False: 64.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.90k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.90k|    }
  ------------------
  396|       |
  397|  64.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 63.6k, False: 468]
  ------------------
  398|  64.1k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 63.6k, False: 0]
  ------------------
  399|  63.6k|            chars_read -= 2;
  400|  63.6k|        }
  401|       |
  402|  64.1k|        return chars_read;
  403|  66.0k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  66.0k|    {
  409|  66.0k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 64.6k, False: 1.44k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  64.6k|            auto first_space = read_until_classic_space(input.view());
  412|  64.6k|            input.assign(
  413|  64.6k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  64.6k|        }
  415|       |
  416|  66.0k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 63.7k, False: 2.28k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  63.7k|            else {
  421|  63.7k|                input.get_allocated_string().insert(0, L"0x");
  422|  63.7k|            }
  423|  63.7k|        }
  424|       |
  425|  66.0k|        return input.get_allocated_string().c_str();
  426|  66.0k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  563|  66.0k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  66.0k|        else {
  568|  66.0k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  66.0k|        }
  570|  66.0k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  509|  66.0k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  66.0k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|  66.0k|        else if constexpr (std::is_same_v<T, double>) {
  538|  66.0k|            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  66.0k|#endif
  544|  66.0k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  773|   243k|    {
  774|       |        if constexpr (sizeof(CharT) == 1) {
  775|       |            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|   243k|        else {
  783|   243k|            return std::u32string_view{
  784|   243k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|   243k|                m_input.view().size()};
  786|   243k|        }
  787|   243k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   649k|{
  804|   649k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.82k, False: 645k]
  ------------------
  805|  3.82k|        value = std::numeric_limits<T>::infinity();
  806|  3.82k|        return 3;
  807|  3.82k|    }
  808|   645k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 3.20k, False: 642k]
  ------------------
  809|  3.20k|        value = std::numeric_limits<T>::infinity();
  810|  3.20k|        return 8;
  811|  3.20k|    }
  812|   642k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 27.4k, False: 614k]
  ------------------
  813|  27.4k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  27.4k|        return 3;
  815|  27.4k|    }
  816|   614k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 1.68k, False: 612k]
  ------------------
  817|  1.68k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  1.68k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  1.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  1.68k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  1.68k|    }
  848|       |
  849|   612k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   612k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   612k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   612k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 129k, False: 483k]
  ------------------
  851|   129k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.08k, False: 126k]
  |  |  ------------------
  ------------------
  852|  3.08k|            return detail::unexpected_scan_error(
  853|  3.08k|                scan_error::invalid_scanned_value,
  854|  3.08k|                "Invalid floating-point digit");
  855|  3.08k|        }
  856|   129k|    }
  857|   609k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   609k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.49k, False: 601k]
  |  |  ------------------
  ------------------
  858|  8.49k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  8.49k|                                             "Invalid floating-point digit");
  860|  8.49k|    }
  861|       |
  862|   601k|#if !SCN_DISABLE_FAST_FLOAT
  863|   601k|    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|   601k|        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|   601k|            return fast_float_fallback(data, value);
  876|   601k|        }
  877|       |    }
  878|       |    else {
  879|       |        // Default to fast_float
  880|       |        return fast_float_impl<CharT, T>{data}(value);
  881|       |    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   601k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   601k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   601k|    {
  709|   601k|#if !SCN_DISABLE_STRTOD
  710|   601k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   601k|    }
  717|   601k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  551|   601k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   601k|    {
  553|   601k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  382|   916k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclERe:
  556|   601k|    {
  557|   601k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   601k|                           generic_strtod);
  559|   601k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   601k|    {
  389|   601k|        CharT* end{};
  390|   601k|        errno = 0;
  391|   601k|        value = strtod_cb(src, &end);
  392|   601k|        const auto saved_errno = errno;
  393|   601k|        auto chars_read = end - src;
  394|       |
  395|   601k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   601k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 636, False: 600k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    636|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    636|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    636|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    636|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    636|    }
  ------------------
  396|       |
  397|   600k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 126k, False: 474k]
  ------------------
  398|   600k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 126k, False: 0]
  ------------------
  399|   126k|            chars_read -= 2;
  400|   126k|        }
  401|       |
  402|   600k|        return chars_read;
  403|   601k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  431|   916k|    {
  432|   916k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 415k, False: 500k]
  |  Branch (432:37): [True: 0, False: 415k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   916k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 26.6k, False: 889k]
  ------------------
  440|   916k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 26.6k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   916k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 870, False: 915k]
  |  Branch (447:34): [True: 196, False: 674]
  ------------------
  448|    196|            SCN_UNLIKELY_ATTR
  449|    196|            return detail::unexpected_scan_error(
  450|    196|                scan_error::value_positive_underflow,
  451|    196|                "strtod failed: underflow");
  452|    196|        }
  453|       |
  454|   915k|        SCN_GCC_COMPAT_PUSH
  455|   915k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   915k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 915k, False: 0]
  ------------------
  458|   915k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 915k, False: 0]
  ------------------
  459|   915k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 674, False: 915k]
  ------------------
  460|    674|            SCN_UNLIKELY_ATTR
  461|    674|            return detail::unexpected_scan_error(
  462|    674|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|    674|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   915k|            return {};
  468|   915k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEe:
  351|   917k|{
  352|   917k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (352:12): [True: 415k, False: 501k]
  |  Branch (352:26): [True: 0, False: 501k]
  ------------------
  353|   917k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   601k|    {
  409|   601k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 552k, False: 48.7k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   552k|            auto first_space = read_until_classic_space(input.view());
  412|   552k|            input.assign(
  413|   552k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   552k|        }
  415|       |
  416|   601k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 126k, False: 474k]
  ------------------
  417|   126k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   126k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   126k|        }
  424|       |
  425|   601k|        return input.get_allocated_string().c_str();
  426|   601k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  563|   601k|    {
  564|   601k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   601k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   601k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  471|   601k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   601k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|   601k|        else if constexpr (std::is_same_v<T, long double>) {
  503|   601k|            return std::strtold(str, str_end);
  504|   601k|        }
  505|   601k|#endif
  506|   601k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   346k|{
  804|   346k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 346k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   346k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 346k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   346k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 346k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   346k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 346k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   346k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   346k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   346k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   346k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 72.7k, False: 273k]
  ------------------
  851|  72.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.91k, False: 63.8k]
  |  |  ------------------
  ------------------
  852|  8.91k|            return detail::unexpected_scan_error(
  853|  8.91k|                scan_error::invalid_scanned_value,
  854|  8.91k|                "Invalid floating-point digit");
  855|  8.91k|        }
  856|  72.7k|    }
  857|   337k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.5k, False: 314k]
  |  |  ------------------
  ------------------
  858|  22.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  22.5k|                                             "Invalid floating-point digit");
  860|  22.5k|    }
  861|       |
  862|   314k|#if !SCN_DISABLE_FAST_FLOAT
  863|   314k|    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|   314k|        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|   314k|            return fast_float_fallback(data, value);
  876|   314k|        }
  877|       |    }
  878|       |    else {
  879|       |        // Default to fast_float
  880|       |        return fast_float_impl<CharT, T>{data}(value);
  881|       |    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   314k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   314k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   314k|    {
  709|   314k|#if !SCN_DISABLE_STRTOD
  710|   314k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   314k|    }
  717|   314k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  551|   314k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   314k|    {
  553|   314k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclERe:
  556|   314k|    {
  557|   314k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   314k|                           generic_strtod);
  559|   314k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   314k|    {
  389|   314k|        CharT* end{};
  390|   314k|        errno = 0;
  391|   314k|        value = strtod_cb(src, &end);
  392|   314k|        const auto saved_errno = errno;
  393|   314k|        auto chars_read = end - src;
  394|       |
  395|   314k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   314k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 234, False: 314k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    234|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    234|    }
  ------------------
  396|       |
  397|   314k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 63.7k, False: 250k]
  ------------------
  398|   314k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 63.7k, False: 0]
  ------------------
  399|  63.7k|            chars_read -= 2;
  400|  63.7k|        }
  401|       |
  402|   314k|        return chars_read;
  403|   314k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   314k|    {
  409|   314k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 308k, False: 6.49k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   308k|            auto first_space = read_until_classic_space(input.view());
  412|   308k|            input.assign(
  413|   308k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   308k|        }
  415|       |
  416|   314k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 63.7k, False: 250k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  63.7k|            else {
  421|  63.7k|                input.get_allocated_string().insert(0, L"0x");
  422|  63.7k|            }
  423|  63.7k|        }
  424|       |
  425|   314k|        return input.get_allocated_string().c_str();
  426|   314k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  563|   314k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|   314k|        else {
  568|   314k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|   314k|        }
  570|   314k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  509|   314k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|   314k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|   314k|        else if constexpr (std::is_same_v<T, long double>) {
  541|   314k|            return std::wcstold(str, str_end);
  542|   314k|        }
  543|   314k|#endif
  544|   314k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   994k|{
 1769|   994k|    const auto argcount = args.size();
 1770|   994k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 204k, False: 790k]
  |  Branch (1770:60): [True: 204k, False: 0]
  ------------------
 1771|   204k|        auto arg = args.get(0);
 1772|   204k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   204k|    static_cast<    \
  |  |  935|   204k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   204k|    }
 1774|       |
 1775|   790k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 790k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   790k|    SCN_UNLIKELY_ATTR
 1783|   790k|    {
 1784|   790k|        auto handler = format_handler<false, CharT>{
 1785|   790k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   790k|    static_cast<    \
  |  |  935|   790k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   790k|    static_cast<    \
  |  |  935|   790k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   790k|        return vscan_parse_format_string(format, handler);
 1787|   790k|    }
 1788|   790k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.85M|{
 1317|  1.85M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 1.46M, False: 390k]
  ------------------
 1318|  1.46M|        return false;
 1319|  1.46M|    }
 1320|   390k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 390k, False: 0]
  |  Branch (1320:39): [True: 390k, False: 0]
  ------------------
 1321|  1.85M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   306k|{
 1350|   306k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 306k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   306k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   306k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 306k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   306k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   306k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   306k|    static_cast<    \
  |  |  935|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   306k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   306k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   306k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   306k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.9k, False: 285k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.9k|    }                                                  \
  |  |  |  | 3939|   306k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   285k|    return it.position();
 1367|   306k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|   669k|        : format_handler_base{argcount},
 1593|   669k|          parse_ctx{source_tag<Source&&>, format},
 1594|   669k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   669k|    static_cast<    \
  |  |  935|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   669k|    static_cast<    \
  |  |  935|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   669k|    {
 1596|   669k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  2.36M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  2.36M|    {
 1412|  2.36M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  2.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|   669k|        : contiguous_ctx(source, args, loc)
 1544|   669k|    {
 1545|   669k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   669k|{
 1734|   669k|    const auto beg = handler.get_ctx().begin();
 1735|   669k|    detail::parse_format_string<false>(format, handler);
 1736|   669k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.9k, False: 599k]
  |  |  ------------------
  ------------------
 1737|  69.9k|        return unexpected(err.error());
 1738|  69.9k|    }
 1739|   599k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   669k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|  4.54M|    {
 1718|  4.54M|        return ctx.get();
 1719|  4.54M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|  4.54M|    {
 1549|  4.54M|        return contiguous_ctx;
 1550|  4.54M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|  1.26M|    {
 1600|  1.26M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.26M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.26M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   419k|    {
 1460|   419k|        error = unexpected(err);
 1461|   419k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|   669k|{
 1372|   669k|    auto arg = ctx.arg(id);
 1373|   669k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   669k|    return arg;
 1377|   669k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  2.36M|    {
 1486|  2.36M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  2.36M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  2.36M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  2.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.36M, False: 0]
  |  |  ------------------
  ------------------
 1498|  2.36M|            visited_args_lower64 |= (1ull << id);
 1499|  2.36M|            return;
 1500|  2.36M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  2.36M|    {
 1470|  2.36M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  2.36M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  2.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.36M, False: 0]
  |  |  ------------------
  ------------------
 1477|  2.36M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  2.36M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  2.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|   669k|    {
 1640|   669k|        return parse_ctx.next_arg_id();
 1641|   669k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|   669k|    {
 1680|   669k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   669k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   669k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 669k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   669k|        auto specs = detail::format_specs{};
 1693|   669k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   669k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   669k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   669k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   669k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 669k]
  |  Branch (1698:29): [True: 0, False: 669k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   669k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   669k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   669k|        on_visit_scan_arg(
 1710|   669k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   669k|                                           get_ctx().locale()},
 1712|   669k|            arg);
 1713|   669k|        return parse_ctx.begin();
 1714|   669k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|   669k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   669k|    {
 1391|   669k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|   669k|    {
 1651|   669k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 669k]
  |  Branch (1651:13): [True: 0, False: 669k]
  |  Branch (1651:29): [True: 0, False: 669k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   669k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   669k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.9k, False: 599k]
  |  |  ------------------
  ------------------
 1658|  69.9k|            on_error(r.error());
 1659|  69.9k|        }
 1660|   599k|        else {
 1661|   599k|            get_ctx().advance_to(*r);
 1662|   599k|        }
 1663|   669k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  2.36M|    {
 1419|  2.36M|        {
 1420|  2.36M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 2.36M]
  ------------------
 1421|  2.36M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 2.36M]
  ------------------
 1422|  2.36M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  2.36M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  2.36M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 2.36M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  2.36M|        }
 1430|       |
 1431|  2.36M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 2.36M, False: 0]
  ------------------
 1432|  2.36M|            return;
 1433|  2.36M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  9.45M|    {
 1465|  9.45M|        return error;
 1466|  9.45M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|   790k|        : format_handler_base{argcount},
 1593|   790k|          parse_ctx{source_tag<Source&&>, format},
 1594|   790k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   790k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   790k|    static_cast<    \
  |  |  935|   790k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   790k|    static_cast<    \
  |  |  935|   790k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   790k|    {
 1596|   790k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|   790k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   790k|    static_cast<    \
  |  |  935|   790k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   790k|    {
 1521|   790k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   790k|{
 1734|   790k|    const auto beg = handler.get_ctx().begin();
 1735|   790k|    detail::parse_format_string<false>(format, handler);
 1736|   790k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.9k, False: 720k]
  |  |  ------------------
  ------------------
 1737|  69.9k|        return unexpected(err.error());
 1738|  69.9k|    }
 1739|   720k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   790k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|  5.39M|    {
 1718|  5.39M|        return ctx.get();
 1719|  5.39M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|  5.39M|    {
 1525|  5.39M|        return ctx;
 1526|  5.39M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|  1.51M|    {
 1600|  1.51M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.51M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.51M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|   790k|{
 1372|   790k|    auto arg = ctx.arg(id);
 1373|   790k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 790k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   790k|    return arg;
 1377|   790k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|   790k|    {
 1640|   790k|        return parse_ctx.next_arg_id();
 1641|   790k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|   790k|    {
 1680|   790k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   790k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   790k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 790k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   790k|        auto specs = detail::format_specs{};
 1693|   790k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   790k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   790k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   790k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   790k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 790k]
  |  Branch (1698:29): [True: 0, False: 790k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   790k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 790k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   790k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   790k|        on_visit_scan_arg(
 1710|   790k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   790k|                                           get_ctx().locale()},
 1712|   790k|            arg);
 1713|   790k|        return parse_ctx.begin();
 1714|   790k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|   790k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   790k|    {
 1391|   790k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   790k|    {
 1651|   790k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 790k]
  |  Branch (1651:13): [True: 0, False: 790k]
  |  Branch (1651:29): [True: 0, False: 790k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   790k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   790k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   790k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.9k, False: 720k]
  |  |  ------------------
  ------------------
 1658|  69.9k|            on_error(r.error());
 1659|  69.9k|        }
 1660|   720k|        else {
 1661|   720k|            get_ctx().advance_to(*r);
 1662|   720k|        }
 1663|   790k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   856k|{
 1749|   856k|    const auto argcount = args.size();
 1750|   856k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 186k, False: 669k]
  |  Branch (1750:60): [True: 186k, False: 0]
  ------------------
 1751|   186k|        auto arg = args.get(0);
 1752|   186k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   186k|    static_cast<    \
  |  |  935|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   186k|    }
 1754|       |
 1755|   669k|    auto handler = format_handler<true, CharT>{
 1756|   669k|        ranges::subrange<const CharT*>{source.data(),
 1757|   669k|                                       source.data() + source.size()},
 1758|   669k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   669k|    static_cast<    \
  |  |  935|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   669k|    static_cast<    \
  |  |  935|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   669k|    return vscan_parse_format_string(format, handler);
 1760|   856k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   279k|{
 1330|   279k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   279k|    auto reader =
 1336|   279k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   279k|            ranges::subrange<const CharT*>{source.data(),
 1338|   279k|                                           source.data() + source.size()},
 1339|   279k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   279k|    static_cast<    \
  |  |  935|   279k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   279k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.9k, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.9k|    }                                                  \
  |  |  |  | 3939|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   258k|    return ranges::distance(source.data(), it);
 1342|   279k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  1.09M|{
 1849|  1.09M|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  1.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.00M, False: 90.9k]
  |  |  ------------------
  ------------------
 1850|  1.00M|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  1.00M|    }
 1856|  90.9k|    else {
 1857|  90.9k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.9k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  90.9k|    }
 1863|  1.09M|    return result;
 1864|  1.09M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   563k|{
 1749|   563k|    const auto argcount = args.size();
 1750|   563k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 111k, False: 452k]
  |  Branch (1750:60): [True: 111k, False: 0]
  ------------------
 1751|   111k|        auto arg = args.get(0);
 1752|   111k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   111k|    static_cast<    \
  |  |  935|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   111k|    }
 1754|       |
 1755|   452k|    auto handler = format_handler<true, CharT>{
 1756|   452k|        ranges::subrange<const CharT*>{source.data(),
 1757|   452k|                                       source.data() + source.size()},
 1758|   452k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   452k|    return vscan_parse_format_string(format, handler);
 1760|   563k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.12M|{
 1317|  1.12M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 904k, False: 222k]
  ------------------
 1318|   904k|        return false;
 1319|   904k|    }
 1320|   222k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 222k, False: 0]
  |  Branch (1320:39): [True: 222k, False: 0]
  ------------------
 1321|  1.12M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   167k|{
 1330|   167k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 167k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   167k|    auto reader =
 1336|   167k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   167k|            ranges::subrange<const CharT*>{source.data(),
 1338|   167k|                                           source.data() + source.size()},
 1339|   167k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   167k|    static_cast<    \
  |  |  935|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   167k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.9k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.9k|    }                                                  \
  |  |  |  | 3939|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   125k|    return ranges::distance(source.data(), it);
 1342|   167k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   452k|        : format_handler_base{argcount},
 1593|   452k|          parse_ctx{source_tag<Source&&>, format},
 1594|   452k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   452k|    {
 1596|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   452k|        : contiguous_ctx(source, args, loc)
 1544|   452k|    {
 1545|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   452k|{
 1734|   452k|    const auto beg = handler.get_ctx().begin();
 1735|   452k|    detail::parse_format_string<false>(format, handler);
 1736|   452k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 139k, False: 312k]
  |  |  ------------------
  ------------------
 1737|   139k|        return unexpected(err.error());
 1738|   139k|    }
 1739|   312k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|  2.88M|    {
 1718|  2.88M|        return ctx.get();
 1719|  2.88M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|  2.88M|    {
 1549|  2.88M|        return contiguous_ctx;
 1550|  2.88M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   764k|    {
 1600|   764k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 764k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   764k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   452k|{
 1372|   452k|    auto arg = ctx.arg(id);
 1373|   452k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   452k|    return arg;
 1377|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   452k|    {
 1640|   452k|        return parse_ctx.next_arg_id();
 1641|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   452k|    {
 1680|   452k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   452k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   452k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 452k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   452k|        auto specs = detail::format_specs{};
 1693|   452k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   452k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   452k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   452k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   452k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 452k]
  |  Branch (1698:29): [True: 0, False: 452k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   452k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   452k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   452k|        on_visit_scan_arg(
 1710|   452k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   452k|                                           get_ctx().locale()},
 1712|   452k|            arg);
 1713|   452k|        return parse_ctx.begin();
 1714|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   452k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   452k|    {
 1391|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   452k|    {
 1651|   452k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 452k]
  |  Branch (1651:13): [True: 0, False: 452k]
  |  Branch (1651:29): [True: 0, False: 452k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   452k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   452k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 139k, False: 312k]
  |  |  ------------------
  ------------------
 1658|   139k|            on_error(r.error());
 1659|   139k|        }
 1660|   312k|        else {
 1661|   312k|            get_ctx().advance_to(*r);
 1662|   312k|        }
 1663|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   563k|{
 1769|   563k|    const auto argcount = args.size();
 1770|   563k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 111k, False: 452k]
  |  Branch (1770:60): [True: 111k, False: 0]
  ------------------
 1771|   111k|        auto arg = args.get(0);
 1772|   111k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   111k|    static_cast<    \
  |  |  935|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   111k|    }
 1774|       |
 1775|   452k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 452k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   452k|    SCN_UNLIKELY_ATTR
 1783|   452k|    {
 1784|   452k|        auto handler = format_handler<false, CharT>{
 1785|   452k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   452k|        return vscan_parse_format_string(format, handler);
 1787|   452k|    }
 1788|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   166k|{
 1350|   166k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   166k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   166k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   166k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   166k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   166k|    static_cast<    \
  |  |  935|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   166k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.9k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.9k|    }                                                  \
  |  |  |  | 3939|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   124k|    return it.position();
 1367|   166k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   452k|        : format_handler_base{argcount},
 1593|   452k|          parse_ctx{source_tag<Source&&>, format},
 1594|   452k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   452k|    {
 1596|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   452k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   452k|    {
 1521|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   452k|{
 1734|   452k|    const auto beg = handler.get_ctx().begin();
 1735|   452k|    detail::parse_format_string<false>(format, handler);
 1736|   452k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 139k, False: 312k]
  |  |  ------------------
  ------------------
 1737|   139k|        return unexpected(err.error());
 1738|   139k|    }
 1739|   312k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|  2.88M|    {
 1718|  2.88M|        return ctx.get();
 1719|  2.88M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|  2.88M|    {
 1525|  2.88M|        return ctx;
 1526|  2.88M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   764k|    {
 1600|   764k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 764k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   764k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   452k|{
 1372|   452k|    auto arg = ctx.arg(id);
 1373|   452k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   452k|    return arg;
 1377|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   452k|    {
 1640|   452k|        return parse_ctx.next_arg_id();
 1641|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   452k|    {
 1680|   452k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   452k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   452k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 452k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   452k|        auto specs = detail::format_specs{};
 1693|   452k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   452k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   452k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   452k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   452k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 452k]
  |  Branch (1698:29): [True: 0, False: 452k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   452k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   452k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   452k|        on_visit_scan_arg(
 1710|   452k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   452k|                                           get_ctx().locale()},
 1712|   452k|            arg);
 1713|   452k|        return parse_ctx.begin();
 1714|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   452k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   452k|    {
 1391|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   452k|    {
 1651|   452k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 452k]
  |  Branch (1651:13): [True: 0, False: 452k]
  |  Branch (1651:29): [True: 0, False: 452k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   452k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   452k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 139k, False: 312k]
  |  |  ------------------
  ------------------
 1658|   139k|            on_error(r.error());
 1659|   139k|        }
 1660|   312k|        else {
 1661|   312k|            get_ctx().advance_to(*r);
 1662|   312k|        }
 1663|   452k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   618k|{
 1849|   618k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   618k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 437k, False: 181k]
  |  |  ------------------
  ------------------
 1850|   437k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 437k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   437k|    }
 1856|   181k|    else {
 1857|   181k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|   181k|    }
 1863|   618k|    return result;
 1864|   618k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  93.2k|{
 1795|  93.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  93.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  93.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|   102k|{
 1795|   102k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   102k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  55.6k|{
 1795|  55.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  55.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  55.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  55.6k|{
 1795|  55.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  55.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  55.6k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  2.33k|{
 1462|  2.33k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  2.33k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  2.33k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  2.33k|            return transcode_to_string_impl_to32(src, dest);
 1473|  2.33k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  2.33k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  2.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  2.33k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  2.33k|{
 1355|  2.33k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  2.33k|    auto it = src.begin();
 1358|   673k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 670k, False: 2.33k]
  ------------------
 1359|   670k|        auto res = get_next_code_point(
 1360|   670k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   670k|                                                                 src.end()));
 1362|   670k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   670k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.95k, False: 668k]
  |  |  ------------------
  ------------------
 1363|  1.95k|            dest.push_back(DestCharT{0xfffd});
 1364|  1.95k|        }
 1365|   668k|        else {
 1366|   668k|            dest.push_back(res.value);
 1367|   668k|        }
 1368|   670k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   670k|    }
 1370|  2.33k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   968k|{
 1279|   968k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   968k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   968k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   968k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   968k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.7k, False: 941k]
  |  |  ------------------
  ------------------
 1283|  26.7k|        return {get_start_for_next_code_point(input),
 1284|  26.7k|                detail::invalid_code_point};
 1285|  26.7k|    }
 1286|   941k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   941k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.61k, False: 937k]
  |  |  ------------------
  ------------------
 1287|  3.61k|        return {input.end(), detail::invalid_code_point};
 1288|  3.61k|    }
 1289|       |
 1290|   937k|    return {input.begin() + len,
 1291|   937k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   941k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  26.7k|{
 1265|  26.7k|    auto it = input.begin();
 1266|   172k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 164k, False: 7.25k]
  ------------------
 1267|   164k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 19.5k, False: 145k]
  ------------------
 1268|  19.5k|            break;
 1269|  19.5k|        }
 1270|   164k|    }
 1271|  26.7k|    return it;
 1272|  26.7k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  29.4M|    constexpr parse_error(code c) : m_code(c)
  808|  29.4M|    {
  809|  29.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  29.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  29.4M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  13.2M|    {
  823|  13.2M|        return a.m_code == b.m_code;
  824|  13.2M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  3.45M|    {
  827|  3.45M|        return !(a == b);
  828|  3.45M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|  1.35M|    clocale_restorer(int cat) : m_category(cat)
 1826|  1.35M|    {
 1827|  1.35M|        const auto loc = std::setlocale(cat, nullptr);
 1828|  1.35M|        std::strcpy(m_locbuf, loc);
 1829|  1.35M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|  1.35M|    {
 1832|       |        // Restore locale to what it was before
 1833|  1.35M|        std::setlocale(m_category, m_locbuf);
 1834|  1.35M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|  1.35M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|  1.35M|    {
 1856|  1.35M|        std::setlocale(cat, "C");
 1857|  1.35M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  2.36M|    {
 3051|  2.36M|        return m_msg == nullptr;
 3052|  2.36M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3686|  2.33M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  14.9M|{
  458|  14.9M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  14.9M|        static_cast<unsigned char>(ch))];
  460|  14.9M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  72.9k|{
  469|  72.9k|    return static_cast<unsigned char>(ch) <= 127;
  470|  72.9k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  3.47M|{
  539|  3.47M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.47M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  10.9M|{
  784|  10.9M|    return e != eof_error::good;
  785|  10.9M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  44.0k|{
  798|  44.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  44.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  44.0k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  44.0k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   215k|{
  845|   215k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|   215k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   215k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   215k|    return parse_error::eof;
  847|   215k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.45M|{
  854|  3.45M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.45M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.45M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 79.7k, False: 3.37M]
  ------------------
  859|  79.7k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  79.7k|    }
  861|       |
  862|  3.37M|    return detail::unexpected_scan_error(code, msg);
  863|  3.45M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.45M|{
  868|  3.45M|    return [code, msg](parse_error err) {
  869|  3.45M|        assert(err != parse_error::good);
  870|  3.45M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.45M|    };
  872|  3.45M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  2.45M|{
 2320|  2.45M|    unsigned char running_diff{0};
 2321|  9.21M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 6.75M, False: 2.45M]
  ------------------
 2322|  6.75M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  6.75M|    }
 2324|  2.45M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 77.7k, False: 2.37M]
  |  Branch (2324:33): [True: 16.2k, False: 2.35M]
  ------------------
 2325|  2.45M|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  18.3M|{
 3240|  18.3M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  18.3M|}
_ZN3scn2v44impl11char_to_intEw:
 3243|  3.39M|{
 3244|  3.39M|#if WCHAR_MIN < 0
 3245|  3.39M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 3.37M, False: 14.7k]
  |  Branch (3245:20): [True: 2.14M, False: 1.22M]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|  2.14M|        return char_to_int(static_cast<char>(ch));
 3250|  2.14M|    }
 3251|  1.24M|    return 255;
 3252|  3.39M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|  1.94M|{
 6047|  1.94M|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 1.94M]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|  1.94M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 1.94M]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|  1.94M|    return {};
 6061|  1.94M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.75M|    {
  304|  2.75M|        ranges::advance(x, n);
  305|  2.75M|        return x;
  306|  2.75M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.75M|    {
  268|  2.75M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.75M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.75M|    {
  151|  2.75M|        i += n;
  152|  2.75M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.26M|    {
  108|  3.26M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.26M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.26M|    {
   87|  3.26M|        return s - i;
   88|  3.26M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.00M|    {
  304|  2.00M|        ranges::advance(x, n);
  305|  2.00M|        return x;
  306|  2.00M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.00M|    {
  268|  2.00M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.00M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.00M|    {
  151|  2.00M|        i += n;
  152|  2.00M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   576k|    {
  108|   576k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   576k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   576k|    {
   87|   576k|        return s - i;
   88|   576k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|  1.93M|    {
 2993|  1.93M|        return m_current;
 2994|  1.93M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  1.21M|    {
 2993|  1.21M|        return m_current;
 2994|  1.21M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  1.09M|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  1.09M|                               detail::char_t<Range>>::forward_iterator>) {
  990|  1.09M|        auto beg = r.begin();
  991|  1.09M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 1.09M, False: 0]
  ------------------
  992|  1.09M|            return false;
  993|  1.09M|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  1.09M|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  2.87M|{
 1956|  2.87M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  2.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  2.87M|    else {
 1967|  2.87M|        auto it = range.begin();
 1968|  2.87M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 1.77M, False: 1.10M]
  ------------------
 1969|  1.77M|            return ranges::next(it, count);
 1970|  1.77M|        }
 1971|       |
 1972|  4.38M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.31M, False: 1.07M]
  ------------------
 1973|  3.31M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 35.1k, False: 3.27M]
  ------------------
 1974|  35.1k|                return unexpected(eof_error::eof);
 1975|  35.1k|            }
 1976|  3.31M|        }
 1977|       |
 1978|  1.07M|        return it;
 1979|  1.10M|    }
 1980|  2.87M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  2.87M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  2.87M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  2.87M|        else {
 1107|  2.87M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 2.87M, False: 0]
  ------------------
 1108|  2.87M|                return static_cast<size_t>(
 1109|  2.87M|                    r.begin().parent()->chars_available() -
 1110|  2.87M|                    r.begin().position());
 1111|  2.87M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  2.87M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  2.87M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  28.2M|    {
  763|  28.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  28.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.2M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.63M|        : m_fptr([](storage fn,
  743|  2.63M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.63M|              cvref<T> obj = *get<T>(fn);
  745|  2.63M|              if constexpr (std::is_void_v<R>) {
  746|  2.63M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.63M|              }
  748|  2.63M|              else {
  749|  2.63M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.63M|              }
  751|  2.63M|          }),
  752|  2.63M|          m_storage(std::addressof(f))
  753|  2.63M|    {
  754|  2.63M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  14.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.1M|              else {
  749|  14.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1M|              }
  751|  14.1M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.1M|        else if constexpr (std::is_object_v<T>) {
  688|  14.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.1M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.63M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.63M|        {
  662|  2.63M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  8.63M|    {
  763|  8.63M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  8.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.63M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.20M|        : m_fptr([](storage fn,
  743|  2.20M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.20M|              cvref<T> obj = *get<T>(fn);
  745|  2.20M|              if constexpr (std::is_void_v<R>) {
  746|  2.20M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.20M|              }
  748|  2.20M|              else {
  749|  2.20M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.20M|              }
  751|  2.20M|          }),
  752|  2.20M|          m_storage(std::addressof(f))
  753|  2.20M|    {
  754|  2.20M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  3.89M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.89M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.89M|              else {
  749|  3.89M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.89M|              }
  751|  3.89M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.89M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.89M|        else if constexpr (std::is_object_v<T>) {
  688|  3.89M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.89M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.20M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.20M|        {
  662|  2.20M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   790k|    {
 6075|   790k|        const bool need_skipped_width =
 6076|   790k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 790k]
  |  Branch (6076:33): [True: 0, False: 790k]
  ------------------
 6077|   790k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   790k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 790k]
  ------------------
 6081|   790k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 790k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   790k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 790k, False: 0]
  |  Branch (6085:56): [True: 790k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   790k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 790k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.56M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   790k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   790k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   790k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14.7k, False: 775k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  14.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  14.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  14.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  14.7k|    }                                                  \
  |  |  |  | 3939|   790k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   775k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.56M|                            make_eof_scan_error));
 6096|       |
 6097|  1.56M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 775k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   775k|            return result_type{it, 0};
 6105|  1.56M|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   790k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.10M|{
 2075|  2.10M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.10M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.10M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.10M|    else {
 2060|  2.10M|        auto first = range.begin();
 2061|  11.5M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 11.4M, False: 26.8k]
  ------------------
 2062|  11.4M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.07M, False: 9.39M]
  ------------------
 2063|  2.07M|                return first;
 2064|  2.07M|            }
 2065|  11.4M|        }
 2066|  26.8k|        return first;
 2067|  2.10M|    }
 2068|  2.10M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.85M|    {
  108|  1.85M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.85M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.85M|    {
   94|  1.85M|        iter_difference_t<I> counter{0};
   95|  18.5M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 16.6M, False: 1.85M]
  ------------------
   96|  16.6M|            ++i;
   97|  16.6M|            ++counter;
   98|  16.6M|        }
   99|  1.85M|        return counter;
  100|  1.85M|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.45M|    return [code, msg](parse_error err) {
  869|  3.45M|        assert(err != parse_error::good);
  870|  3.45M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.45M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   404k|    {
 1879|   404k|        auto stdloc = loc.get<std::locale>();
 1880|   404k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   404k|        grouping = numpunct.grouping();
 1882|   404k|        thousands_sep =
 1883|   404k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 404k]
  ------------------
 1884|   404k|        decimal_point = numpunct.decimal_point();
 1885|   404k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   404k|{
 1816|   404k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 404k, False: 0]
  ------------------
 1817|   404k|        return std::use_facet<Facet>(stdloc);
 1818|   404k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   404k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  3.07M|{
 1945|  3.07M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  3.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.5k, False: 3.05M]
  |  |  ------------------
  ------------------
 1946|  19.5k|        return unexpected(e);
 1947|  19.5k|    }
 1948|       |
 1949|  3.05M|    return ranges::next(range.begin());
 1950|  3.07M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  4.47M|{
  951|  4.47M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  4.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 39.0k, False: 4.43M]
  |  |  ------------------
  ------------------
  952|  39.0k|        return eof_error::eof;
  953|  39.0k|    }
  954|  4.43M|    return eof_error::good;
  955|  4.47M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  6.24M|{
  945|  6.24M|    return is_range_eof(r.begin(), r.end());
  946|  6.24M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  6.24M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.24M|    {
  938|  6.24M|        return begin == end;
  939|  6.24M|    }
  940|  6.24M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.05M|    {
  296|  3.05M|        ++x;
  297|  3.05M|        return x;
  298|  3.05M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|  1.18M|{
 3258|  1.18M|    auto r = read_one_of_code_unit(range, "+-");
 3259|  1.18M|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 900k, False: 286k]
  ------------------
 3260|   900k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 900k, False: 279]
  ------------------
 3261|   900k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   900k|        }
 3263|    279|        return unexpected(eof_error::eof);
 3264|   900k|    }
 3265|       |
 3266|   286k|    auto& it = *r;
 3267|   286k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 121k, False: 165k]
  ------------------
 3268|   121k|        return std::pair{it, sign_type::minus_sign};
 3269|   121k|    }
 3270|   165k|    return std::pair{it, sign_type::plus_sign};
 3271|   286k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  2.06M|{
 2372|  2.06M|    auto it = read_code_unit(range);
 2373|  2.06M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 2.04M]
  |  |  ------------------
  ------------------
 2374|  11.2k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  11.2k|    }
 2376|       |
 2377|  3.86M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 3.86M, False: 1.65M]
  ------------------
 2378|  3.86M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 397k, False: 3.46M]
  ------------------
 2379|   397k|            return *it;
 2380|   397k|        }
 2381|  3.86M|    }
 2382|       |
 2383|  1.65M|    return unexpected(parse_error::error);
 2384|  2.04M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  2.87M|{
 2331|  2.87M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  2.87M|    else {
 2344|  2.87M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  2.87M|            if (ch < 'A' || ch > 'Z') {
 2346|  2.87M|                return ch;
 2347|  2.87M|            }
 2348|  2.87M|            return static_cast<char_type>(ch +
 2349|  2.87M|                                          static_cast<char_type>('a' - 'A'));
 2350|  2.87M|        };
 2351|       |
 2352|  2.87M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  2.87M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.87M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.87M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 35.1k, False: 2.84M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  35.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  35.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  35.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  35.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  35.1k|    }                                                  \
  |  |  |  | 3939|  2.87M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  2.84M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  2.84M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  2.84M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.74M, False: 101k]
  |  |  ------------------
  ------------------
 2357|  2.84M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  2.84M|                    return ascii_tolower(a) ==
 2359|  2.84M|                           static_cast<detail::char_t<Range>>(b);
 2360|  2.84M|                }))) {
 2361|  2.74M|            return unexpected(parse_error::error);
 2362|  2.74M|        }
 2363|       |
 2364|   101k|        return it;
 2365|  2.84M|    }
 2366|  2.87M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|  3.27M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.27M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 2.95M, False: 321k]
  |  Branch (2345:29): [True: 265k, False: 56.6k]
  ------------------
 2346|  3.21M|                return ch;
 2347|  3.21M|            }
 2348|  56.6k|            return static_cast<char_type>(ch +
 2349|  56.6k|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.27M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|  1.01M|{
 2246|  1.01M|    auto it = read_code_unit(range);
 2247|  1.01M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.26k, False: 1.00M]
  |  |  ------------------
  ------------------
 2248|  8.26k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  8.26k|    }
 2250|       |
 2251|  1.00M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 821k, False: 187k]
  |  |  ------------------
  ------------------
 2252|  1.00M|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   821k|        return unexpected(parse_error::error);
 2254|   821k|    }
 2255|       |
 2256|   187k|    return *it;
 2257|  1.00M|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  2.10M|{
 2095|  2.10M|    auto it = read_while_code_unit(range, pred);
 2096|  2.10M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 856k, False: 1.24M]
  ------------------
 2097|   856k|        return unexpected(parse_error::error);
 2098|   856k|    }
 2099|  1.24M|    return it;
 2100|  2.10M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   960k|    {
 1720|   960k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   960k|                           ranges::common_range<Range>) {
 1737|   960k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   960k|            auto end_seg = range.end().contiguous_segment();
 1739|   960k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   960k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 144k, False: 815k]
  |  |  ------------------
  ------------------
 1740|   960k|                             detail::to_address(end_seg.end()))) {
 1741|   144k|                auto& str = m_storage.emplace();
 1742|   144k|                str.reserve(range.end().position() - range.begin().position());
 1743|   144k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   144k|                m_view = string_view_type{str};
 1745|   144k|                return;
 1746|   144k|            }
 1747|       |
 1748|   815k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   815k|                                                            end_seg.data());
 1750|   815k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   960k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  6.55M|    {
 1681|  6.55M|        return m_view;
 1682|  6.55M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  4.02M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   708k|    {
 6117|   708k|        const bool need_skipped_width =
 6118|   708k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 708k]
  |  Branch (6118:33): [True: 0, False: 708k]
  ------------------
 6119|   708k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   708k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 708k]
  ------------------
 6122|   708k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 708k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   708k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 708k, False: 0]
  ------------------
 6131|   708k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 708k]
  ------------------
 6132|   708k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   708k|        return result_type{rng.begin(), 0};
 6156|   708k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  1.39M|{
 1945|  1.39M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.81k, False: 1.39M]
  |  |  ------------------
  ------------------
 1946|  4.81k|        return unexpected(e);
 1947|  4.81k|    }
 1948|       |
 1949|  1.39M|    return ranges::next(range.begin());
 1950|  1.39M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  2.62M|{
  951|  2.62M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.6k, False: 2.60M]
  |  |  ------------------
  ------------------
  952|  20.6k|        return eof_error::eof;
  953|  20.6k|    }
  954|  2.60M|    return eof_error::good;
  955|  2.62M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  2.62M|{
  945|  2.62M|    return is_range_eof(r.begin(), r.end());
  946|  2.62M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  2.62M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.62M|    {
  938|  2.62M|        return begin == end;
  939|  2.62M|    }
  940|  2.62M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.39M|    {
  296|  1.39M|        ++x;
  297|  1.39M|        return x;
  298|  1.39M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   959k|{
 3258|   959k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   959k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 729k, False: 229k]
  ------------------
 3260|   729k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 729k, False: 90]
  ------------------
 3261|   729k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   729k|        }
 3263|     90|        return unexpected(eof_error::eof);
 3264|   729k|    }
 3265|       |
 3266|   229k|    auto& it = *r;
 3267|   229k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 108k, False: 121k]
  ------------------
 3268|   108k|        return std::pair{it, sign_type::minus_sign};
 3269|   108k|    }
 3270|   121k|    return std::pair{it, sign_type::plus_sign};
 3271|   229k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  1.11M|{
 2372|  1.11M|    auto it = read_code_unit(range);
 2373|  1.11M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 1.10M]
  |  |  ------------------
  ------------------
 2374|  2.01k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  2.01k|    }
 2376|       |
 2377|  2.08M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.08M, False: 853k]
  ------------------
 2378|  2.08M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 255k, False: 1.82M]
  ------------------
 2379|   255k|            return *it;
 2380|   255k|        }
 2381|  2.08M|    }
 2382|       |
 2383|   853k|    return unexpected(parse_error::error);
 2384|  1.10M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  2.48M|{
 2331|  2.48M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  2.48M|                  std::is_same_v<char_type, char>) {
 2335|  2.48M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 35.2k, False: 2.45M]
  ------------------
 2336|  35.2k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  35.2k|        }
 2338|  2.45M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 2.35M, False: 93.9k]
  ------------------
 2339|  2.35M|            return unexpected(parse_error::error);
 2340|  2.35M|        }
 2341|  93.9k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  2.48M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   285k|{
 2246|   285k|    auto it = read_code_unit(range);
 2247|   285k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.79k, False: 282k]
  |  |  ------------------
  ------------------
 2248|  2.79k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  2.79k|    }
 2250|       |
 2251|   282k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 233k, False: 49.2k]
  |  |  ------------------
  ------------------
 2252|   282k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   233k|        return unexpected(parse_error::error);
 2254|   233k|    }
 2255|       |
 2256|  49.2k|    return *it;
 2257|   282k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  3.59M|    {
 1602|  3.59M|        return sv;
 1603|  3.59M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   528k|{
 2075|   528k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   528k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   528k|{
 2056|   528k|    if constexpr (ranges::common_range<Range>) {
 2057|   528k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   528k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   945k|{
 3066|   945k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 945k, False: 0]
  ------------------
 3067|   945k|        auto it = read_while_classic_space(range);
 3068|   945k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   945k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   945k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.9k, False: 933k]
  |  |  ------------------
  ------------------
 3070|  11.9k|            return unexpected(e);
 3071|  11.9k|        }
 3072|       |
 3073|   933k|        return it;
 3074|   945k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   945k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   945k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   945k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   945k|        auto buf = make_contiguous_buffer(range);
 2220|   945k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   945k|        return ranges::next(range.begin(),
 2222|   945k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   945k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   945k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   945k|                  ranges::sized_range<Range>) {
 1785|   945k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   945k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   945k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   945k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   945k|    {
 1589|   945k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  2.90M|    {
  304|  2.90M|        ranges::advance(x, n);
  305|  2.90M|        return x;
  306|  2.90M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  3.86M|    {
  268|  3.86M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.86M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  3.86M|    {
  181|  18.3M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 14.4M, False: 3.86M]
  ------------------
  182|  14.4M|            ++i;
  183|  14.4M|        }
  184|  3.86M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   253k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   253k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   253k|            auto rd = make_reader<T, char_type>();
 6237|   253k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   253k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 253k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   253k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 253k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   253k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   253k|                return impl(rd, range, value);
 6242|   253k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   253k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.46M|    {
 3156|  1.46M|        reader_error_handler eh{};
 3157|  1.46M|        get_derived().check_specs_impl(specs, eh);
 3158|  1.46M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.46M]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|  1.46M|        return {};
 3163|  1.46M|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3167|  1.46M|    {
 3168|  1.46M|        return static_cast<Derived&>(*this);
 3169|  1.46M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  1.46M|    {
 4178|  1.46M|        detail::check_float_type_specs(specs, eh);
 4179|  1.46M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   253k|    {
 6162|   253k|        const bool need_skipped_width =
 6163|   253k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 253k]
  |  Branch (6163:33): [True: 0, False: 253k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   253k|        auto it = rng.begin();
 6167|   253k|        std::ptrdiff_t prefix_width = 0;
 6168|   253k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 253k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   253k|        else {
 6176|   253k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   253k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   253k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   253k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.45k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.45k|    }                                                  \
  |  |  |  | 3939|   253k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   249k|            std::tie(it, prefix_width) = prefix_result;
 6178|   249k|        }
 6179|   249k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   249k|        std::ptrdiff_t value_width = 0;
 6183|   249k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 249k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   249k|        else {
 6199|   249k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18.8k, False: 230k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.8k|    }                                                  \
  |  | 3939|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   230k|                                             specs, value, loc));
 6201|       |
 6202|   230k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 230k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   230k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   230k|        std::ptrdiff_t postfix_width = 0;
 6211|   230k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 226k, False: 3.55k]
  ------------------
 6212|   226k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   226k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   226k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   226k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   226k|                                 value_width));
 6216|   226k|            std::tie(it, postfix_width) = postfix_result;
 6217|   226k|        }
 6218|       |
 6219|   230k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   230k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 230k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   230k|            specs, prefix_width, value_width, postfix_width));
 6221|   230k|        return it;
 6222|   230k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3150|  3.34M|    {
 3151|  3.34M|        return true;
 3152|  3.34M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4249|  1.43M|    {
 4250|  1.43M|        unsigned options{};
 4251|  1.43M|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 404k, False: 1.02M]
  ------------------
 4252|   404k|            options |= float_reader_base::allow_thsep;
 4253|   404k|        }
 4254|       |
 4255|  1.43M|        SCN_GCC_COMPAT_PUSH
 4256|  1.43M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|  1.43M|        switch (specs.type) {
 4259|   212k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 212k, False: 1.22M]
  ------------------
 4260|   212k|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|  41.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 41.3k, False: 1.39M]
  ------------------
 4263|  41.3k|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|   439k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 439k, False: 995k]
  ------------------
 4266|   439k|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|   336k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 336k, False: 1.09M]
  ------------------
 4269|   336k|                return options | float_reader_base::allow_scientific |
 4270|   336k|                       float_reader_base::allow_fixed;
 4271|       |
 4272|   404k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 404k, False: 1.02M]
  ------------------
 4273|   404k|                return options | float_reader_base::allow_scientific |
 4274|   404k|                       float_reader_base::allow_fixed |
 4275|   404k|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 1.43M]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|  1.43M|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|  1.43M|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|  1.43M|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3701|  1.43M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  2.01M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  4.02M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3732|   614k|    {
 3733|   614k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   614k|        const std::ptrdiff_t sign_len =
 3736|   614k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 152k, False: 462k]
  ------------------
 3737|       |
 3738|   614k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   614k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 598k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  16.3k|    }                                                  \
  |  |  |  | 3939|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   598k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   598k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   614k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4089|  1.90M|    {
 4090|  1.90M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 1.90M, False: 0]
  ------------------
 4091|  1.90M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 1.90M, False: 0]
  ------------------
 4092|  1.90M|            return;
 4093|  1.90M|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  2.19M|    {
 1686|  2.19M|        return m_storage.has_value();
 1687|  2.19M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.28M|    {
 1691|  1.28M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.28M|        return *m_storage;
 1693|  1.28M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   249k|    {
 4203|   249k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   249k|#if !SCN_DISABLE_LOCALE
 4206|   249k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 69.8k, False: 179k]
  ------------------
 4207|  69.8k|            return read_impl<Range>(
 4208|  69.8k|                range, rd,
 4209|  69.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  69.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  69.8k|                },
 4212|  69.8k|                value, loc);
 4213|  69.8k|        }
 4214|   179k|#endif
 4215|       |
 4216|   179k|        return read_impl<Range>(
 4217|   179k|            range, rd,
 4218|   179k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   179k|                return r.read_source(SCN_FWD(args)...);
 4220|   179k|            },
 4221|   179k|            value);
 4222|   249k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   345k|    {
 4239|   345k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   345k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.3k, False: 324k]
  |  |  ------------------
  ------------------
 4241|  21.3k|            return unexpected(r.error());
 4242|  21.3k|        }
 4243|       |
 4244|   324k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   324k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   324k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   324k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.06k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.06k|    }                                                  \
  |  |  |  | 3939|   324k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   321k|        return ranges::next(range.begin(), n);
 4246|   324k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.07M|    {
  763|  1.07M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.07M|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  69.8k|        : m_fptr([](storage fn,
  743|  69.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.8k|              cvref<T> obj = *get<T>(fn);
  745|  69.8k|              if constexpr (std::is_void_v<R>) {
  746|  69.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  69.8k|              }
  748|  69.8k|              else {
  749|  69.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.8k|              }
  751|  69.8k|          }),
  752|  69.8k|          m_storage(std::addressof(f))
  753|  69.8k|    {
  754|  69.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  69.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  69.8k|              else {
  749|  69.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.8k|              }
  751|  69.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  69.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  69.8k|        else if constexpr (std::is_object_v<T>) {
  688|  69.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  69.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  69.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  69.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  69.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  69.8k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3720|   221k|    {
 3721|   221k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   221k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   221k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   221k|        return read_source_impl(range);
 3727|   221k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3746|  1.07M|    {
 3747|  1.07M|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|  1.07M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.07M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.07M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.07M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.07M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|  1.07M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|  1.07M|        auto it = sign_result.first;
 3750|  1.07M|        m_sign = sign_result.second;
 3751|       |
 3752|  1.07M|        auto digits_begin = it;
 3753|  1.07M|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|  1.07M|        else {
 3780|  1.07M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|  1.07M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.07M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 66.5k, False: 1.01M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  66.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  66.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  66.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  66.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  66.5k|    }                                                  \
  |  | 3939|  1.07M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|  1.01M|                it,
 3782|  1.01M|                do_read_source_impl(
 3783|  1.01M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|  1.01M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|  1.01M|        }
 3786|       |
 3787|  1.07M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|  1.01M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 1.00M, False: 5.52k]
  |  Branch (3789:48): [True: 1.00M, False: 4.83k]
  ------------------
 3790|  1.01M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 958k, False: 41.2k]
  ------------------
 3791|  1.01M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 956k, False: 2.51k]
  ------------------
 3792|   956k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   956k|        }
 3794|       |
 3795|  1.01M|        handle_separators();
 3796|       |
 3797|  1.01M|        return it;
 3798|  1.07M|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4032|  1.07M|    {
 4033|  1.07M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|  1.07M|        const bool allowed_nonhex =
 4035|  1.07M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|  1.07M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|  1.07M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 1.06M, False: 10.3k]
  |  Branch (4038:45): [True: 0, False: 1.06M]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|  1.07M|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 10.3k, False: 1.06M]
  ------------------
 4044|  10.3k|            return *r;
 4045|  10.3k|        }
 4046|       |
 4047|  1.06M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 1.02M, False: 43.7k]
  |  Branch (4047:45): [True: 1.32k, False: 1.02M]
  ------------------
 4048|  1.32k|            return unexpected(r.error());
 4049|  1.32k|        }
 4050|  1.06M|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 43.7k, False: 1.02M]
  ------------------
 4051|  43.7k|            return *r;
 4052|  43.7k|        }
 4053|       |
 4054|  1.02M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 722k, False: 298k]
  |  Branch (4054:28): [True: 228k, False: 494k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   228k|            auto it = range.begin();
 4058|       |
 4059|   228k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 12.5k, False: 215k]
  ------------------
 4060|  12.5k|                m_kind = float_kind::hex_with_prefix;
 4061|  12.5k|                it = *r;
 4062|  12.5k|            }
 4063|   215k|            else {
 4064|   215k|                m_kind = float_kind::hex_without_prefix;
 4065|   215k|            }
 4066|       |
 4067|   228k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   228k|        }
 4069|   793k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 298k, False: 494k]
  |  Branch (4069:29): [True: 298k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   298k|            m_kind = float_kind::generic;
 4073|   298k|            return read_regular_float(range);
 4074|   298k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   494k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   494k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.0k, False: 465k]
  |  |  ------------------
  ------------------
 4080|  29.0k|            m_kind = float_kind::hex_with_prefix;
 4081|  29.0k|            return read_hex(ranges::subrange{*r, range.end()});
 4082|  29.0k|        }
 4083|       |
 4084|   465k|        m_kind = float_kind::generic;
 4085|   465k|        return read_regular(range);
 4086|   494k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3840|  1.07M|    {
 3841|  1.07M|        auto it = range.begin();
 3842|  1.07M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 1.06M, False: 10.3k]
  ------------------
 3843|  1.06M|            return unexpected(r.error());
 3844|  1.06M|        }
 3845|  10.3k|        else {
 3846|  10.3k|            it = *r;
 3847|  10.3k|        }
 3848|       |
 3849|  10.3k|        if (auto r = read_matching_string_classic_nocase(
 3850|  10.3k|                ranges::subrange{it, range.end()}, "inity");
 3851|  10.3k|            !r) {
  ------------------
  |  Branch (3851:13): [True: 5.52k, False: 4.83k]
  ------------------
 3852|  5.52k|            m_kind = float_kind::inf_short;
 3853|  5.52k|            return it;
 3854|  5.52k|        }
 3855|  4.83k|        else {
 3856|  4.83k|            m_kind = float_kind::inf_long;
 3857|  4.83k|            return *r;
 3858|  4.83k|        }
 3859|  10.3k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3863|  1.06M|    {
 3864|  1.06M|        auto it = range.begin();
 3865|  1.06M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 1.02M, False: 45.0k]
  ------------------
 3866|  1.02M|            return r.transform_error(map_parse_error_to_scan_error(
 3867|  1.02M|                scan_error::invalid_scanned_value,
 3868|  1.02M|                "Invalid floating-point NaN value"));
 3869|  1.02M|        }
 3870|  45.0k|        else {
 3871|  45.0k|            it = *r;
 3872|  45.0k|        }
 3873|       |
 3874|  45.0k|        if (auto r =
 3875|  45.0k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|  45.0k|            !r) {
  ------------------
  |  Branch (3876:13): [True: 41.2k, False: 3.84k]
  ------------------
 3877|  41.2k|            m_kind = float_kind::nan_simple;
 3878|  41.2k|            return it;
 3879|  41.2k|        }
 3880|  3.84k|        else {
 3881|  3.84k|            it = *r;
 3882|  3.84k|        }
 3883|       |
 3884|  3.84k|        auto payload_beg_it = it;
 3885|  3.84k|        it = read_while_code_unit(
 3886|  3.84k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  3.84k|                return is_ascii_char(ch) &&
 3888|  3.84k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|  3.84k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|  3.84k|            });
 3891|  3.84k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|  3.84k|        m_kind = float_kind::nan_with_payload;
 3894|  3.84k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 2.51k, False: 1.32k]
  ------------------
 3895|  3.84k|                                             ')')) {
 3896|  2.51k|            return *r;
 3897|  2.51k|        }
 3898|  1.32k|        return detail::unexpected_scan_error(
 3899|  1.32k|            scan_error::invalid_scanned_value,
 3900|  1.32k|            "Invalid floating-point NaN payload");
 3901|  3.84k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  3.84k|        : m_fptr([](storage fn,
  743|  3.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.84k|              cvref<T> obj = *get<T>(fn);
  745|  3.84k|              if constexpr (std::is_void_v<R>) {
  746|  3.84k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.84k|              }
  748|  3.84k|              else {
  749|  3.84k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.84k|              }
  751|  3.84k|          }),
  752|  3.84k|          m_storage(std::addressof(f))
  753|  3.84k|    {
  754|  3.84k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  38.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.8k|              else {
  749|  38.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.8k|              }
  751|  38.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  38.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.8k|        else if constexpr (std::is_object_v<T>) {
  688|  38.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.8k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3886|  38.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  38.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3887:24): [True: 38.7k, False: 83]
  ------------------
 3888|  38.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3888:26): [True: 36.0k, False: 2.74k]
  |  Branch (3888:39): [True: 28.2k, False: 7.81k]
  |  Branch (3888:54): [True: 2.56k, False: 7.99k]
  |  Branch (3888:67): [True: 2.47k, False: 83]
  ------------------
 3889|  38.7k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3889:26): [True: 5.33k, False: 2.74k]
  |  Branch (3889:39): [True: 2.53k, False: 2.80k]
  |  Branch (3889:53): [True: 2.72k, False: 2.83k]
  ------------------
 3890|  38.8k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  3.84k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.84k|        {
  662|  3.84k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   722k|    {
 3834|   722k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   722k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3934|   257k|    {
 3935|   257k|        auto it = range.begin();
 3936|       |
 3937|   257k|        std::ptrdiff_t digits_count = 0;
 3938|   257k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|   257k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.25k, False: 248k]
  |  |  ------------------
  ------------------
 3940|  8.25k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|  8.25k|                scan_error::invalid_scanned_value,
 3942|  8.25k|                "Invalid hexadecimal floating-point value"));
 3943|  8.25k|        }
 3944|   248k|        else {
 3945|   248k|            digits_count += ranges::distance(it, *r);
 3946|   248k|            it = *r;
 3947|   248k|        }
 3948|       |
 3949|   248k|        m_integral_part_length = digits_count;
 3950|   248k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 38.4k, False: 210k]
  ------------------
 3951|   248k|                                             m_locale_options.decimal_point)) {
 3952|  38.4k|            it = *r;
 3953|  38.4k|        }
 3954|       |
 3955|   248k|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 34.8k, False: 214k]
  ------------------
 3956|   248k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|  34.8k|            digits_count += ranges::distance(it, *r);
 3958|  34.8k|            it = *r;
 3959|  34.8k|        }
 3960|       |
 3961|   248k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|   248k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|   248k|        return it;
 3970|   248k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3818|   506k|    {
 3819|   506k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 506k]
  |  |  |  Branch (865:45): [True: 0, False: 506k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|   506k|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|   506k|        return read_while1_code_unit(
 3828|   506k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|   506k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   506k|        : m_fptr([](storage fn,
  743|   506k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   506k|              cvref<T> obj = *get<T>(fn);
  745|   506k|              if constexpr (std::is_void_v<R>) {
  746|   506k|                  obj(static_cast<decltype(args)>(args)...);
  747|   506k|              }
  748|   506k|              else {
  749|   506k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   506k|              }
  751|   506k|          }),
  752|   506k|          m_storage(std::addressof(f))
  753|   506k|    {
  754|   506k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.70M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.70M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.70M|              else {
  749|  2.70M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.70M|              }
  751|  2.70M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.70M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.70M|        else if constexpr (std::is_object_v<T>) {
  688|  2.70M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.70M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3828|  2.70M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   506k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   506k|        {
  662|   506k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3906|   872k|    {
 3907|   872k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 110k, False: 762k]
  ------------------
 3908|   110k|            auto beg_exp_it = range.begin();
 3909|   110k|            auto it = *r;
 3910|       |
 3911|   110k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 110k, False: 279]
  ------------------
 3912|   110k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|   110k|                it = r_sign->first;
 3914|   110k|            }
 3915|       |
 3916|   110k|            if (auto r_exp = read_while1_code_unit(
 3917|   110k|                    ranges::subrange{it, range.end()},
 3918|   110k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|   110k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.78k, False: 108k]
  |  |  ------------------
  ------------------
 3920|  1.78k|                it = beg_exp_it;
 3921|  1.78k|            }
 3922|   108k|            else {
 3923|   108k|                it = *r_exp;
 3924|   108k|            }
 3925|       |
 3926|   110k|            return it;
 3927|   110k|        }
 3928|   762k|        return range.begin();
 3929|   872k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   110k|        : m_fptr([](storage fn,
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|   110k|              if constexpr (std::is_void_v<R>) {
  746|   110k|                  obj(static_cast<decltype(args)>(args)...);
  747|   110k|              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
  752|   110k|          m_storage(std::addressof(f))
  753|   110k|    {
  754|   110k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   348k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   348k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   348k|              else {
  749|   348k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   348k|              }
  751|   348k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   348k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   348k|        else if constexpr (std::is_object_v<T>) {
  688|   348k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   348k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3918|   348k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   110k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   110k|        {
  662|   110k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3975|   764k|    {
 3976|   764k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   764k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 656k, False: 107k]
  |  Branch (3977:50): [True: 20.3k, False: 636k]
  ------------------
 3978|       |
 3979|   764k|        auto it = ranges::begin(range);
 3980|   764k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   764k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   764k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   764k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 45.1k, False: 719k]
  |  |  ------------------
  ------------------
 3984|  45.1k|            return r.transform_error(
 3985|  45.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  45.1k|                                              "Invalid floating-point value"));
 3987|  45.1k|        }
 3988|   719k|        else {
 3989|   719k|            digits_count += ranges::distance(it, *r);
 3990|   719k|            it = *r;
 3991|   719k|        }
 3992|       |
 3993|   719k|        m_integral_part_length = digits_count;
 3994|   719k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 142k, False: 576k]
  ------------------
 3995|   719k|                                             m_locale_options.decimal_point)) {
 3996|   142k|            it = *r;
 3997|   142k|        }
 3998|       |
 3999|   719k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 131k, False: 587k]
  ------------------
 4000|   719k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|   131k|            digits_count += ranges::distance(it, *r);
 4002|   131k|            it = *r;
 4003|   131k|        }
 4004|       |
 4005|   719k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   719k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 719k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   719k|        auto beg_exp_it = it;
 4012|   719k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 623k, False: 95.6k]
  ------------------
 4013|   623k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   623k|        }
 4015|   719k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 19.5k, False: 699k]
  |  Branch (4015:29): [True: 11.8k, False: 7.71k]
  ------------------
 4016|  11.8k|            return detail::unexpected_scan_error(
 4017|  11.8k|                scan_error::invalid_scanned_value,
 4018|  11.8k|                "No exponent given to scientific float");
 4019|  11.8k|        }
 4020|       |
 4021|   707k|        m_kind =
 4022|   707k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 599k, False: 107k]
  ------------------
 4023|       |
 4024|   707k|        return it;
 4025|   719k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3803|  1.48M|    {
 3804|  1.48M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.48M]
  |  |  |  Branch (865:45): [True: 0, False: 1.48M]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|  1.48M|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|  1.48M|        return read_while1_code_unit(
 3813|  1.48M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|  1.48M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.48M|        : m_fptr([](storage fn,
  743|  1.48M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.48M|              cvref<T> obj = *get<T>(fn);
  745|  1.48M|              if constexpr (std::is_void_v<R>) {
  746|  1.48M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.48M|              }
  748|  1.48M|              else {
  749|  1.48M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.48M|              }
  751|  1.48M|          }),
  752|  1.48M|          m_storage(std::addressof(f))
  753|  1.48M|    {
  754|  1.48M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  8.38M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.38M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.38M|              else {
  749|  8.38M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.38M|              }
  751|  8.38M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.38M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.38M|        else if constexpr (std::is_object_v<T>) {
  688|  8.38M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.38M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3813|  8.38M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.48M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.48M|        {
  662|  1.48M|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   960k|    {
 1676|   960k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   960k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   960k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  69.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  69.8k|        {
  662|  69.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   179k|        : m_fptr([](storage fn,
  743|   179k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   179k|              cvref<T> obj = *get<T>(fn);
  745|   179k|              if constexpr (std::is_void_v<R>) {
  746|   179k|                  obj(static_cast<decltype(args)>(args)...);
  747|   179k|              }
  748|   179k|              else {
  749|   179k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   179k|              }
  751|   179k|          }),
  752|   179k|          m_storage(std::addressof(f))
  753|   179k|    {
  754|   179k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   179k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   179k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   179k|              else {
  749|   179k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   179k|              }
  751|   179k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   179k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   179k|        else if constexpr (std::is_object_v<T>) {
  688|   179k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   179k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   179k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   179k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   179k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3706|   855k|    {
 3707|   855k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   855k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 855k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   855k|        return read_source_impl(range);
 3713|   855k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   179k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   179k|        {
  662|   179k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   214k|    {
 4203|   214k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   214k|#if !SCN_DISABLE_LOCALE
 4206|   214k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 59.0k, False: 154k]
  ------------------
 4207|  59.0k|            return read_impl<Range>(
 4208|  59.0k|                range, rd,
 4209|  59.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  59.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  59.0k|                },
 4212|  59.0k|                value, loc);
 4213|  59.0k|        }
 4214|   154k|#endif
 4215|       |
 4216|   154k|        return read_impl<Range>(
 4217|   154k|            range, rd,
 4218|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   154k|                return r.read_source(SCN_FWD(args)...);
 4220|   154k|            },
 4221|   154k|            value);
 4222|   214k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   302k|    {
 4239|   302k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   302k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.2k, False: 290k]
  |  |  ------------------
  ------------------
 4241|  12.2k|            return unexpected(r.error());
 4242|  12.2k|        }
 4243|       |
 4244|   290k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.2k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.2k|    }                                                  \
  |  |  |  | 3939|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   277k|        return ranges::next(range.begin(), n);
 4246|   290k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   933k|    {
  763|   933k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   933k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   933k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  59.0k|        : m_fptr([](storage fn,
  743|  59.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.0k|              cvref<T> obj = *get<T>(fn);
  745|  59.0k|              if constexpr (std::is_void_v<R>) {
  746|  59.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.0k|              }
  748|  59.0k|              else {
  749|  59.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.0k|              }
  751|  59.0k|          }),
  752|  59.0k|          m_storage(std::addressof(f))
  753|  59.0k|    {
  754|  59.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  59.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.0k|              else {
  749|  59.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.0k|              }
  751|  59.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  59.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.0k|        else if constexpr (std::is_object_v<T>) {
  688|  59.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  59.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  59.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  59.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  59.0k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|   183k|    {
 3721|   183k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   183k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   183k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   183k|        return read_source_impl(range);
 3727|   183k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|   933k|    {
 3747|   933k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   933k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   933k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   933k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   933k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 933k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   933k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   933k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   933k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   933k|        auto it = sign_result.first;
 3750|   933k|        m_sign = sign_result.second;
 3751|       |
 3752|   933k|        auto digits_begin = it;
 3753|   933k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|   933k|                      ranges::sized_range<Range>) {
 3756|   933k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 933k]
  |  |  |  Branch (865:45): [True: 0, False: 933k]
  |  |  |  Branch (865:45): [True: 0, False: 933k]
  |  |  ------------------
  ------------------
 3757|   933k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|   933k|            else {
 3766|   933k|                auto cb = [&](const auto& rr)
 3767|   933k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   933k|                    auto res = read_all(rr);
 3769|   933k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|   933k|                        return detail::unexpected_scan_error(
 3771|   933k|                            scan_error::invalid_scanned_value,
 3772|   933k|                            "Invalid float value");
 3773|   933k|                    }
 3774|   933k|                    return res;
 3775|   933k|                };
 3776|   933k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|   933k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   933k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   933k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 37.6k, False: 896k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  37.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  37.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  37.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  37.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  37.6k|    }                                                  \
  |  | 3939|   933k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   933k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|   896k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|   933k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   933k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   933k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   896k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 891k, False: 5.26k]
  |  Branch (3789:48): [True: 886k, False: 4.46k]
  ------------------
 3790|   896k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 846k, False: 40.3k]
  ------------------
 3791|   896k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 843k, False: 2.39k]
  ------------------
 3792|   843k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   843k|        }
 3794|       |
 3795|   896k|        handle_separators();
 3796|       |
 3797|   896k|        return it;
 3798|   933k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|   933k|    {
 3841|   933k|        auto it = range.begin();
 3842|   933k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 924k, False: 9.72k]
  ------------------
 3843|   924k|            return unexpected(r.error());
 3844|   924k|        }
 3845|  9.72k|        else {
 3846|  9.72k|            it = *r;
 3847|  9.72k|        }
 3848|       |
 3849|  9.72k|        if (auto r = read_matching_string_classic_nocase(
 3850|  9.72k|                ranges::subrange{it, range.end()}, "inity");
 3851|  9.72k|            !r) {
  ------------------
  |  Branch (3851:13): [True: 5.26k, False: 4.46k]
  ------------------
 3852|  5.26k|            m_kind = float_kind::inf_short;
 3853|  5.26k|            return it;
 3854|  5.26k|        }
 3855|  4.46k|        else {
 3856|  4.46k|            m_kind = float_kind::inf_long;
 3857|  4.46k|            return *r;
 3858|  4.46k|        }
 3859|  9.72k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|   924k|    {
 3864|   924k|        auto it = range.begin();
 3865|   924k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 880k, False: 44.0k]
  ------------------
 3866|   880k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   880k|                scan_error::invalid_scanned_value,
 3868|   880k|                "Invalid floating-point NaN value"));
 3869|   880k|        }
 3870|  44.0k|        else {
 3871|  44.0k|            it = *r;
 3872|  44.0k|        }
 3873|       |
 3874|  44.0k|        if (auto r =
 3875|  44.0k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|  44.0k|            !r) {
  ------------------
  |  Branch (3876:13): [True: 40.3k, False: 3.67k]
  ------------------
 3877|  40.3k|            m_kind = float_kind::nan_simple;
 3878|  40.3k|            return it;
 3879|  40.3k|        }
 3880|  3.67k|        else {
 3881|  3.67k|            it = *r;
 3882|  3.67k|        }
 3883|       |
 3884|  3.67k|        auto payload_beg_it = it;
 3885|  3.67k|        it = read_while_code_unit(
 3886|  3.67k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  3.67k|                return is_ascii_char(ch) &&
 3888|  3.67k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|  3.67k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|  3.67k|            });
 3891|  3.67k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|  3.67k|        m_kind = float_kind::nan_with_payload;
 3894|  3.67k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 2.39k, False: 1.28k]
  ------------------
 3895|  3.67k|                                             ')')) {
 3896|  2.39k|            return *r;
 3897|  2.39k|        }
 3898|  1.28k|        return detail::unexpected_scan_error(
 3899|  1.28k|            scan_error::invalid_scanned_value,
 3900|  1.28k|            "Invalid floating-point NaN payload");
 3901|  3.67k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  3.67k|        : m_fptr([](storage fn,
  743|  3.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.67k|              cvref<T> obj = *get<T>(fn);
  745|  3.67k|              if constexpr (std::is_void_v<R>) {
  746|  3.67k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.67k|              }
  748|  3.67k|              else {
  749|  3.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.67k|              }
  751|  3.67k|          }),
  752|  3.67k|          m_storage(std::addressof(f))
  753|  3.67k|    {
  754|  3.67k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  34.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.0k|              else {
  749|  34.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.0k|              }
  751|  34.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  34.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.0k|        else if constexpr (std::is_object_v<T>) {
  688|  34.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.0k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3886|  34.0k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  34.0k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3887:24): [True: 34.0k, False: 83]
  ------------------
 3888|  34.0k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3888:26): [True: 31.4k, False: 2.59k]
  |  Branch (3888:39): [True: 23.6k, False: 7.80k]
  |  Branch (3888:54): [True: 2.55k, False: 7.84k]
  |  Branch (3888:67): [True: 2.47k, False: 83]
  ------------------
 3889|  34.0k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3889:26): [True: 5.33k, False: 2.59k]
  |  Branch (3889:39): [True: 2.53k, False: 2.80k]
  |  Branch (3889:53): [True: 2.72k, False: 2.68k]
  ------------------
 3890|  34.0k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  3.67k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.67k|        {
  662|  3.67k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   618k|    {
 3834|   618k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   618k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   524k|{
 2095|   524k|    auto it = read_while_code_unit(range, pred);
 2096|   524k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 222k, False: 301k]
  ------------------
 2097|   222k|        return unexpected(parse_error::error);
 2098|   222k|    }
 2099|   301k|    return it;
 2100|   524k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|   151k|    {
 3907|   151k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 25.7k, False: 125k]
  ------------------
 3908|  25.7k|            auto beg_exp_it = range.begin();
 3909|  25.7k|            auto it = *r;
 3910|       |
 3911|  25.7k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 25.6k, False: 90]
  ------------------
 3912|  25.7k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  25.6k|                it = r_sign->first;
 3914|  25.6k|            }
 3915|       |
 3916|  25.7k|            if (auto r_exp = read_while1_code_unit(
 3917|  25.7k|                    ranges::subrange{it, range.end()},
 3918|  25.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  25.7k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  25.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 646, False: 25.0k]
  |  |  ------------------
  ------------------
 3920|    646|                it = beg_exp_it;
 3921|    646|            }
 3922|  25.0k|            else {
 3923|  25.0k|                it = *r_exp;
 3924|  25.0k|            }
 3925|       |
 3926|  25.7k|            return it;
 3927|  25.7k|        }
 3928|   125k|        return range.begin();
 3929|   151k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  25.7k|        : m_fptr([](storage fn,
  743|  25.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.7k|              cvref<T> obj = *get<T>(fn);
  745|  25.7k|              if constexpr (std::is_void_v<R>) {
  746|  25.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.7k|              }
  748|  25.7k|              else {
  749|  25.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.7k|              }
  751|  25.7k|          }),
  752|  25.7k|          m_storage(std::addressof(f))
  753|  25.7k|    {
  754|  25.7k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  73.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  73.7k|              else {
  749|  73.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.7k|              }
  751|  73.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  73.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  73.7k|        else if constexpr (std::is_object_v<T>) {
  688|  73.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  73.7k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3918|  73.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  25.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  25.7k|        {
  662|  25.7k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|   261k|    {
 3976|   261k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   261k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 163k, False: 98.4k]
  |  Branch (3977:50): [True: 18.6k, False: 144k]
  ------------------
 3978|       |
 3979|   261k|        auto it = ranges::begin(range);
 3980|   261k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   261k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   261k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.9k, False: 237k]
  |  |  ------------------
  ------------------
 3984|  23.9k|            return r.transform_error(
 3985|  23.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  23.9k|                                              "Invalid floating-point value"));
 3987|  23.9k|        }
 3988|   237k|        else {
 3989|   237k|            digits_count += ranges::distance(it, *r);
 3990|   237k|            it = *r;
 3991|   237k|        }
 3992|       |
 3993|   237k|        m_integral_part_length = digits_count;
 3994|   237k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 43.1k, False: 194k]
  ------------------
 3995|   237k|                                             m_locale_options.decimal_point)) {
 3996|  43.1k|            it = *r;
 3997|  43.1k|        }
 3998|       |
 3999|   237k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 39.3k, False: 198k]
  ------------------
 4000|   237k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  39.3k|            digits_count += ranges::distance(it, *r);
 4002|  39.3k|            it = *r;
 4003|  39.3k|        }
 4004|       |
 4005|   237k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   237k|        auto beg_exp_it = it;
 4012|   237k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 151k, False: 86.0k]
  ------------------
 4013|   151k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   151k|        }
 4015|   237k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 17.3k, False: 220k]
  |  Branch (4015:29): [True: 11.5k, False: 5.87k]
  ------------------
 4016|  11.5k|            return detail::unexpected_scan_error(
 4017|  11.5k|                scan_error::invalid_scanned_value,
 4018|  11.5k|                "No exponent given to scientific float");
 4019|  11.5k|        }
 4020|       |
 4021|   225k|        m_kind =
 4022|   225k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 200k, False: 25.0k]
  ------------------
 4023|       |
 4024|   225k|        return it;
 4025|   237k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|   499k|    {
 3804|   499k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 499k]
  |  |  |  Branch (865:45): [True: 0, False: 499k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   499k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   499k|        return read_while1_code_unit(
 3813|   499k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   499k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   499k|        : m_fptr([](storage fn,
  743|   499k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   499k|              cvref<T> obj = *get<T>(fn);
  745|   499k|              if constexpr (std::is_void_v<R>) {
  746|   499k|                  obj(static_cast<decltype(args)>(args)...);
  747|   499k|              }
  748|   499k|              else {
  749|   499k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   499k|              }
  751|   499k|          }),
  752|   499k|          m_storage(std::addressof(f))
  753|   499k|    {
  754|   499k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.55M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.55M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.55M|              else {
  749|  2.55M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.55M|              }
  751|  2.55M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.55M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.55M|        else if constexpr (std::is_object_v<T>) {
  688|  2.55M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.55M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3813|  2.55M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   499k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   499k|        {
  662|   499k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|   933k|    {
 4033|   933k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   933k|        const bool allowed_nonhex =
 4035|   933k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   933k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   933k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 924k, False: 9.72k]
  |  Branch (4038:45): [True: 0, False: 924k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   933k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 9.72k, False: 924k]
  ------------------
 4044|  9.72k|            return *r;
 4045|  9.72k|        }
 4046|       |
 4047|   924k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 881k, False: 42.7k]
  |  Branch (4047:45): [True: 1.28k, False: 880k]
  ------------------
 4048|  1.28k|            return unexpected(r.error());
 4049|  1.28k|        }
 4050|   922k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 42.7k, False: 880k]
  ------------------
 4051|  42.7k|            return *r;
 4052|  42.7k|        }
 4053|       |
 4054|   880k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 618k, False: 261k]
  |  Branch (4054:28): [True: 187k, False: 431k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   187k|            auto it = range.begin();
 4058|       |
 4059|   187k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 10.3k, False: 176k]
  ------------------
 4060|  10.3k|                m_kind = float_kind::hex_with_prefix;
 4061|  10.3k|                it = *r;
 4062|  10.3k|            }
 4063|   176k|            else {
 4064|   176k|                m_kind = float_kind::hex_without_prefix;
 4065|   176k|            }
 4066|       |
 4067|   187k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   187k|        }
 4069|   693k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 261k, False: 431k]
  |  Branch (4069:29): [True: 261k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   261k|            m_kind = float_kind::generic;
 4073|   261k|            return read_regular_float(range);
 4074|   261k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   431k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.3k, False: 406k]
  |  |  ------------------
  ------------------
 4080|  25.3k|            m_kind = float_kind::hex_with_prefix;
 4081|  25.3k|            return read_hex(ranges::subrange{*r, range.end()});
 4082|  25.3k|        }
 4083|       |
 4084|   406k|        m_kind = float_kind::generic;
 4085|   406k|        return read_regular(range);
 4086|   431k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|   618k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   618k|                    auto res = read_all(rr);
 3769|   618k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 815, False: 617k]
  |  |  ------------------
  ------------------
 3770|    815|                        return detail::unexpected_scan_error(
 3771|    815|                            scan_error::invalid_scanned_value,
 3772|    815|                            "Invalid float value");
 3773|    815|                    }
 3774|   617k|                    return res;
 3775|   618k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   618k|{
 1938|   618k|    return ranges::next(range.begin(), range.end());
 1939|   618k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   618k|    {
  313|   618k|        ranges::advance(x, bound);
  314|   618k|        return x;
  315|   618k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   618k|    {
  275|   618k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   618k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   618k|    {
  190|   618k|        i = std::move(bound);
  191|   618k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   847k|    {
 1676|   847k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   847k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   847k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|   847k|    {
 1720|   847k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   847k|                      ranges::sized_range<Range>) {
 1725|   847k|            m_storage.reset();
 1726|   847k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   847k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  59.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.0k|        {
  662|  59.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   154k|        : m_fptr([](storage fn,
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|   154k|              if constexpr (std::is_void_v<R>) {
  746|   154k|                  obj(static_cast<decltype(args)>(args)...);
  747|   154k|              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
  752|   154k|          m_storage(std::addressof(f))
  753|   154k|    {
  754|   154k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   154k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   154k|        else if constexpr (std::is_object_v<T>) {
  688|   154k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   154k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   154k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   154k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|   750k|    {
 3707|   750k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   750k|        return read_source_impl(range);
 3713|   750k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   154k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   154k|        {
  662|   154k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   266k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   266k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   266k|            auto rd = make_reader<T, char_type>();
 6237|   266k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   266k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 266k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   266k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 266k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   266k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   266k|                return impl(rd, range, value);
 6242|   266k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   266k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   266k|    {
 6162|   266k|        const bool need_skipped_width =
 6163|   266k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 266k]
  |  Branch (6163:33): [True: 0, False: 266k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   266k|        auto it = rng.begin();
 6167|   266k|        std::ptrdiff_t prefix_width = 0;
 6168|   266k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 266k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   266k|        else {
 6176|   266k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   266k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   266k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   266k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.98k, False: 261k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.98k|    }                                                  \
  |  |  |  | 3939|   266k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   261k|            std::tie(it, prefix_width) = prefix_result;
 6178|   261k|        }
 6179|   261k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   261k|        std::ptrdiff_t value_width = 0;
 6183|   261k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 261k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   261k|        else {
 6199|   261k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18.3k, False: 243k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.3k|    }                                                  \
  |  | 3939|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   243k|                                             specs, value, loc));
 6201|       |
 6202|   243k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 243k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   243k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   243k|        std::ptrdiff_t postfix_width = 0;
 6211|   243k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 239k, False: 3.96k]
  ------------------
 6212|   239k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   239k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   239k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   239k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   239k|                                 value_width));
 6216|   239k|            std::tie(it, postfix_width) = postfix_result;
 6217|   239k|        }
 6218|       |
 6219|   243k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   243k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 243k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   243k|            specs, prefix_width, value_width, postfix_width));
 6221|   243k|        return it;
 6222|   243k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|   643k|    {
 3733|   643k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   643k|        const std::ptrdiff_t sign_len =
 3736|   643k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 159k, False: 483k]
  ------------------
 3737|       |
 3738|   643k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   643k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   643k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   643k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.9k, False: 629k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.9k|    }                                                  \
  |  |  |  | 3939|   643k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   629k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   643k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   261k|    {
 4203|   261k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   261k|#if !SCN_DISABLE_LOCALE
 4206|   261k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 75.1k, False: 186k]
  ------------------
 4207|  75.1k|            return read_impl<Range>(
 4208|  75.1k|                range, rd,
 4209|  75.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  75.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  75.1k|                },
 4212|  75.1k|                value, loc);
 4213|  75.1k|        }
 4214|   186k|#endif
 4215|       |
 4216|   186k|        return read_impl<Range>(
 4217|   186k|            range, rd,
 4218|   186k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   186k|                return r.read_source(SCN_FWD(args)...);
 4220|   186k|            },
 4221|   186k|            value);
 4222|   261k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   364k|    {
 4239|   364k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   364k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.2k, False: 341k]
  |  |  ------------------
  ------------------
 4241|  22.2k|            return unexpected(r.error());
 4242|  22.2k|        }
 4243|       |
 4244|   341k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   341k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   341k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   341k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.47k, False: 340k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.47k|    }                                                  \
  |  |  |  | 3939|   341k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   340k|        return ranges::next(range.begin(), n);
 4246|   341k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  75.1k|        : m_fptr([](storage fn,
  743|  75.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.1k|              cvref<T> obj = *get<T>(fn);
  745|  75.1k|              if constexpr (std::is_void_v<R>) {
  746|  75.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.1k|              }
  748|  75.1k|              else {
  749|  75.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.1k|              }
  751|  75.1k|          }),
  752|  75.1k|          m_storage(std::addressof(f))
  753|  75.1k|    {
  754|  75.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  75.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  75.1k|              else {
  749|  75.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.1k|              }
  751|  75.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  75.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  75.1k|        else if constexpr (std::is_object_v<T>) {
  688|  75.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  75.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  75.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  75.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  75.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  75.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  75.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  75.1k|        {
  662|  75.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   186k|        : m_fptr([](storage fn,
  743|   186k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   186k|              cvref<T> obj = *get<T>(fn);
  745|   186k|              if constexpr (std::is_void_v<R>) {
  746|   186k|                  obj(static_cast<decltype(args)>(args)...);
  747|   186k|              }
  748|   186k|              else {
  749|   186k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   186k|              }
  751|   186k|          }),
  752|   186k|          m_storage(std::addressof(f))
  753|   186k|    {
  754|   186k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   186k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   186k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   186k|              else {
  749|   186k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   186k|              }
  751|   186k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   186k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   186k|        else if constexpr (std::is_object_v<T>) {
  688|   186k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   186k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   186k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   186k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   186k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   186k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   186k|        {
  662|   186k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   221k|    {
 4203|   221k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   221k|#if !SCN_DISABLE_LOCALE
 4206|   221k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 61.7k, False: 159k]
  ------------------
 4207|  61.7k|            return read_impl<Range>(
 4208|  61.7k|                range, rd,
 4209|  61.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  61.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  61.7k|                },
 4212|  61.7k|                value, loc);
 4213|  61.7k|        }
 4214|   159k|#endif
 4215|       |
 4216|   159k|        return read_impl<Range>(
 4217|   159k|            range, rd,
 4218|   159k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   159k|                return r.read_source(SCN_FWD(args)...);
 4220|   159k|            },
 4221|   159k|            value);
 4222|   221k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   313k|    {
 4239|   313k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   313k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 301k]
  |  |  ------------------
  ------------------
 4241|  12.5k|            return unexpected(r.error());
 4242|  12.5k|        }
 4243|       |
 4244|   301k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.4k, False: 288k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.4k|    }                                                  \
  |  |  |  | 3939|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   288k|        return ranges::next(range.begin(), n);
 4246|   301k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  61.7k|        : m_fptr([](storage fn,
  743|  61.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.7k|              cvref<T> obj = *get<T>(fn);
  745|  61.7k|              if constexpr (std::is_void_v<R>) {
  746|  61.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  61.7k|              }
  748|  61.7k|              else {
  749|  61.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.7k|              }
  751|  61.7k|          }),
  752|  61.7k|          m_storage(std::addressof(f))
  753|  61.7k|    {
  754|  61.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  61.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  61.7k|              else {
  749|  61.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.7k|              }
  751|  61.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  61.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  61.7k|        else if constexpr (std::is_object_v<T>) {
  688|  61.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  61.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  61.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  61.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  61.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  61.7k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  61.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  61.7k|        {
  662|  61.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   159k|        : m_fptr([](storage fn,
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|   159k|              if constexpr (std::is_void_v<R>) {
  746|   159k|                  obj(static_cast<decltype(args)>(args)...);
  747|   159k|              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
  752|   159k|          m_storage(std::addressof(f))
  753|   159k|    {
  754|   159k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   159k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   159k|        else if constexpr (std::is_object_v<T>) {
  688|   159k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   159k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   159k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   159k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   159k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   159k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   159k|        {
  662|   159k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   269k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   269k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   269k|            auto rd = make_reader<T, char_type>();
 6237|   269k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   269k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 269k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   269k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 269k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   269k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   269k|                return impl(rd, range, value);
 6242|   269k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   269k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   269k|    {
 6162|   269k|        const bool need_skipped_width =
 6163|   269k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 269k]
  |  Branch (6163:33): [True: 0, False: 269k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   269k|        auto it = rng.begin();
 6167|   269k|        std::ptrdiff_t prefix_width = 0;
 6168|   269k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 269k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   269k|        else {
 6176|   269k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   269k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   269k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   269k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.29k, False: 264k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.29k|    }                                                  \
  |  |  |  | 3939|   269k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   264k|            std::tie(it, prefix_width) = prefix_result;
 6178|   264k|        }
 6179|   264k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   264k|        std::ptrdiff_t value_width = 0;
 6183|   264k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 264k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   264k|        else {
 6199|   264k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   264k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   264k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18.0k, False: 246k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.0k|    }                                                  \
  |  | 3939|   264k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   246k|                                             specs, value, loc));
 6201|       |
 6202|   246k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 246k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   246k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   246k|        std::ptrdiff_t postfix_width = 0;
 6211|   246k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 242k, False: 4.22k]
  ------------------
 6212|   242k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   242k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   242k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   242k|                                 value_width));
 6216|   242k|            std::tie(it, postfix_width) = postfix_result;
 6217|   242k|        }
 6218|       |
 6219|   246k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   246k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 246k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   246k|            specs, prefix_width, value_width, postfix_width));
 6221|   246k|        return it;
 6222|   246k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3732|   649k|    {
 3733|   649k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   649k|        const std::ptrdiff_t sign_len =
 3736|   649k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 163k, False: 486k]
  ------------------
 3737|       |
 3738|   649k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   649k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   649k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   649k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.2k, False: 636k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.2k|    }                                                  \
  |  |  |  | 3939|   649k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   636k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   636k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   649k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   264k|    {
 4203|   264k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   264k|#if !SCN_DISABLE_LOCALE
 4206|   264k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 76.1k, False: 188k]
  ------------------
 4207|  76.1k|            return read_impl<Range>(
 4208|  76.1k|                range, rd,
 4209|  76.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  76.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  76.1k|                },
 4212|  76.1k|                value, loc);
 4213|  76.1k|        }
 4214|   188k|#endif
 4215|       |
 4216|   188k|        return read_impl<Range>(
 4217|   188k|            range, rd,
 4218|   188k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   188k|                return r.read_source(SCN_FWD(args)...);
 4220|   188k|            },
 4221|   188k|            value);
 4222|   264k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   367k|    {
 4239|   367k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   367k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.8k, False: 344k]
  |  |  ------------------
  ------------------
 4241|  22.8k|            return unexpected(r.error());
 4242|  22.8k|        }
 4243|       |
 4244|   344k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   344k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   344k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   344k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 412, False: 344k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    412|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    412|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    412|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    412|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    412|    }                                                  \
  |  |  |  | 3939|   344k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   344k|        return ranges::next(range.begin(), n);
 4246|   344k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  76.1k|        : m_fptr([](storage fn,
  743|  76.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.1k|              cvref<T> obj = *get<T>(fn);
  745|  76.1k|              if constexpr (std::is_void_v<R>) {
  746|  76.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.1k|              }
  748|  76.1k|              else {
  749|  76.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.1k|              }
  751|  76.1k|          }),
  752|  76.1k|          m_storage(std::addressof(f))
  753|  76.1k|    {
  754|  76.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  76.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  76.1k|              else {
  749|  76.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.1k|              }
  751|  76.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  76.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  76.1k|        else if constexpr (std::is_object_v<T>) {
  688|  76.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  76.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  76.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  76.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  76.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  76.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  76.1k|        {
  662|  76.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   188k|        : m_fptr([](storage fn,
  743|   188k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   188k|              cvref<T> obj = *get<T>(fn);
  745|   188k|              if constexpr (std::is_void_v<R>) {
  746|   188k|                  obj(static_cast<decltype(args)>(args)...);
  747|   188k|              }
  748|   188k|              else {
  749|   188k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   188k|              }
  751|   188k|          }),
  752|   188k|          m_storage(std::addressof(f))
  753|   188k|    {
  754|   188k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   188k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   188k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   188k|              else {
  749|   188k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   188k|              }
  751|   188k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   188k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   188k|        else if constexpr (std::is_object_v<T>) {
  688|   188k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   188k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   188k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   188k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   188k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   188k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   188k|        {
  662|   188k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   223k|    {
 4203|   223k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   223k|#if !SCN_DISABLE_LOCALE
 4206|   223k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 62.7k, False: 160k]
  ------------------
 4207|  62.7k|            return read_impl<Range>(
 4208|  62.7k|                range, rd,
 4209|  62.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  62.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  62.7k|                },
 4212|  62.7k|                value, loc);
 4213|  62.7k|        }
 4214|   160k|#endif
 4215|       |
 4216|   160k|        return read_impl<Range>(
 4217|   160k|            range, rd,
 4218|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   160k|                return r.read_source(SCN_FWD(args)...);
 4220|   160k|            },
 4221|   160k|            value);
 4222|   223k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   317k|    {
 4239|   317k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   317k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.8k, False: 304k]
  |  |  ------------------
  ------------------
 4241|  12.8k|            return unexpected(r.error());
 4242|  12.8k|        }
 4243|       |
 4244|   304k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.8k, False: 292k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.8k|    }                                                  \
  |  |  |  | 3939|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   292k|        return ranges::next(range.begin(), n);
 4246|   304k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  62.7k|        : m_fptr([](storage fn,
  743|  62.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.7k|              cvref<T> obj = *get<T>(fn);
  745|  62.7k|              if constexpr (std::is_void_v<R>) {
  746|  62.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  62.7k|              }
  748|  62.7k|              else {
  749|  62.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.7k|              }
  751|  62.7k|          }),
  752|  62.7k|          m_storage(std::addressof(f))
  753|  62.7k|    {
  754|  62.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  62.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  62.7k|              else {
  749|  62.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.7k|              }
  751|  62.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  62.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  62.7k|        else if constexpr (std::is_object_v<T>) {
  688|  62.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  62.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  62.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  62.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  62.7k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  62.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  62.7k|        {
  662|  62.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   160k|        : m_fptr([](storage fn,
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
  752|   160k|          m_storage(std::addressof(f))
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   160k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  688|   160k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   160k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   160k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   160k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   160k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  1.09M|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  1.09M|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  1.09M|        else {
 1055|  1.09M|            return r.begin().contiguous_segment();
 1056|  1.09M|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  1.09M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   963k|{
 2160|   963k|    auto it = range.begin();
 2161|  1.78M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.77M, False: 15.2k]
  ------------------
 2162|  1.77M|        const auto val =
 2163|  1.77M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.77M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.77M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.75M, False: 12.4k]
  |  |  ------------------
  ------------------
 2165|  1.75M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.75M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.75M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 947k, False: 811k]
  ------------------
 2168|   947k|                return it;
 2169|   947k|            }
 2170|  1.75M|        }
 2171|   823k|        it = val.iterator;
 2172|   823k|    }
 2173|       |
 2174|  15.2k|    return it;
 2175|   963k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.77M|{
 1998|  1.77M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.77M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.77M|    auto it = range.begin();
 2002|  1.77M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.77M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.4k, False: 1.75M]
  |  |  ------------------
  ------------------
 2005|  12.4k|        ++it;
 2006|  12.4k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  12.4k|        return {it, {}};
 2008|  12.4k|    }
 2009|       |
 2010|  1.75M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.74M, False: 18.1k]
  ------------------
 2011|  1.74M|        ++it;
 2012|  1.74M|        return {it, string_type(1, *range.begin())};
 2013|  1.74M|    }
 2014|       |
 2015|  18.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  18.1k|    return {it, string_type{range.begin(), it}};
 2017|  1.75M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  12.4k|{
 1265|  12.4k|    auto it = input.begin();
 1266|  96.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 95.1k, False: 1.38k]
  ------------------
 1267|  95.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 11.0k, False: 84.1k]
  ------------------
 1268|  11.0k|            break;
 1269|  11.0k|        }
 1270|  95.1k|    }
 1271|  12.4k|    return it;
 1272|  12.4k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.1k|    {
  283|  18.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.1k|    {
  252|  18.1k|        constexpr iter_difference_t<I> zero{0};
  253|  18.1k|        iter_difference_t<I> counter{0};
  254|       |
  255|  54.9k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 37.8k, False: 17.1k]
  |  Branch (255:30): [True: 36.8k, False: 986]
  ------------------
  256|  36.8k|            ++i;
  257|  36.8k|            ++counter;
  258|  36.8k|        }
  259|       |
  260|  18.1k|        return counter;
  261|  18.1k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.77M|    {
 1989|  1.77M|        return !codepoint.empty();
 1990|  1.77M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   963k|{
 2181|   963k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   963k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  1.09M|{
 3066|  1.09M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.09M, False: 0]
  ------------------
 3067|  1.09M|        auto it = read_while_classic_space(range);
 3068|  1.09M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.09M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.2k, False: 1.07M]
  |  |  ------------------
  ------------------
 3070|  15.2k|            return unexpected(e);
 3071|  15.2k|        }
 3072|       |
 3073|  1.07M|        return it;
 3074|  1.09M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.09M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  1.09M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.09M|    else {
 2225|  1.09M|        auto it = range.begin();
 2226|       |
 2227|  1.09M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  1.09M|            auto seg = get_contiguous_beginning(range);
 2229|  1.09M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  1.09M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 129k, False: 963k]
  ------------------
 2231|   129k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|   129k|            }
 2233|   963k|            ranges::advance(it, seg.size());
 2234|   963k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.09M|            return detail::is_cp_space(cp);
 2238|  1.09M|        });
 2239|  1.09M|    }
 2240|  1.09M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   963k|        : m_fptr([](storage fn,
  743|   963k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   963k|              cvref<T> obj = *get<T>(fn);
  745|   963k|              if constexpr (std::is_void_v<R>) {
  746|   963k|                  obj(static_cast<decltype(args)>(args)...);
  747|   963k|              }
  748|   963k|              else {
  749|   963k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   963k|              }
  751|   963k|          }),
  752|   963k|          m_storage(std::addressof(f))
  753|   963k|    {
  754|   963k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.75M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.75M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.75M|              else {
  749|  1.75M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.75M|              }
  751|  1.75M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.75M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.75M|        else if constexpr (std::is_object_v<T>) {
  688|  1.75M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.75M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.75M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.75M|            return detail::is_cp_space(cp);
 2238|  1.75M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   963k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   963k|        {
  662|   963k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   618k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   618k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   618k|        auto beg = r.begin();
  991|   618k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 618k, False: 0]
  ------------------
  992|   618k|            return false;
  993|   618k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   618k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.62M|{
 1956|  1.62M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.62M|    else {
 1967|  1.62M|        auto it = range.begin();
 1968|  1.62M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 980k, False: 647k]
  ------------------
 1969|   980k|            return ranges::next(it, count);
 1970|   980k|        }
 1971|       |
 1972|  2.49M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.90M, False: 589k]
  ------------------
 1973|  1.90M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 58.6k, False: 1.84M]
  ------------------
 1974|  58.6k|                return unexpected(eof_error::eof);
 1975|  58.6k|            }
 1976|  1.90M|        }
 1977|       |
 1978|   589k|        return it;
 1979|   647k|    }
 1980|  1.62M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.62M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.62M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.62M|        else {
 1107|  1.62M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.62M, False: 0]
  ------------------
 1108|  1.62M|                return static_cast<size_t>(
 1109|  1.62M|                    r.begin().parent()->chars_available() -
 1110|  1.62M|                    r.begin().position());
 1111|  1.62M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.62M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.62M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  4.45M|    {
  763|  4.45M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  4.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.45M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.43M|        : m_fptr([](storage fn,
  743|  1.43M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.43M|              cvref<T> obj = *get<T>(fn);
  745|  1.43M|              if constexpr (std::is_void_v<R>) {
  746|  1.43M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.43M|              }
  748|  1.43M|              else {
  749|  1.43M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.43M|              }
  751|  1.43M|          }),
  752|  1.43M|          m_storage(std::addressof(f))
  753|  1.43M|    {
  754|  1.43M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.22M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.22M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.22M|              else {
  749|  2.22M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.22M|              }
  751|  2.22M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.22M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.22M|        else if constexpr (std::is_object_v<T>) {
  688|  2.22M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.22M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.43M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.43M|        {
  662|  1.43M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   452k|    {
 6075|   452k|        const bool need_skipped_width =
 6076|   452k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 452k]
  |  Branch (6076:33): [True: 0, False: 452k]
  ------------------
 6077|   452k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   452k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 452k]
  ------------------
 6081|   452k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 452k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   452k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 452k, False: 0]
  |  Branch (6085:56): [True: 452k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   452k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 452k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   901k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   452k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   452k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   452k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.24k, False: 448k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.24k|    }                                                  \
  |  |  |  | 3939|   452k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   448k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   901k|                            make_eof_scan_error));
 6096|       |
 6097|   901k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 448k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   448k|            return result_type{it, 0};
 6105|   901k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   452k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  1.07M|{
 2075|  1.07M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.07M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  1.07M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  1.07M|    else {
 2060|  1.07M|        auto first = range.begin();
 2061|  1.67M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.67M, False: 4.01k]
  ------------------
 2062|  1.67M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 1.06M, False: 606k]
  ------------------
 2063|  1.06M|                return first;
 2064|  1.06M|            }
 2065|  1.67M|        }
 2066|  4.01k|        return first;
 2067|  1.07M|    }
 2068|  1.07M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   759k|    {
  108|   759k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   759k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   759k|    {
   94|   759k|        iter_difference_t<I> counter{0};
   95|  2.07M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.31M, False: 759k]
  ------------------
   96|  1.31M|            ++i;
   97|  1.31M|            ++counter;
   98|  1.31M|        }
   99|   759k|        return counter;
  100|   759k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|   221k|    {
 1879|   221k|        auto stdloc = loc.get<std::locale>();
 1880|   221k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   221k|        grouping = numpunct.grouping();
 1882|   221k|        thousands_sep =
 1883|   221k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 221k]
  ------------------
 1884|   221k|        decimal_point = numpunct.decimal_point();
 1885|   221k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|   221k|{
 1816|   221k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 221k, False: 0]
  ------------------
 1817|   221k|        return std::use_facet<Facet>(stdloc);
 1818|   221k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   221k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.46M|{
 1945|  1.46M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.57k, False: 1.45M]
  |  |  ------------------
  ------------------
 1946|  2.57k|        return unexpected(e);
 1947|  2.57k|    }
 1948|       |
 1949|  1.45M|    return ranges::next(range.begin());
 1950|  1.46M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  2.24M|{
  951|  2.24M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.94k, False: 2.23M]
  |  |  ------------------
  ------------------
  952|  6.94k|        return eof_error::eof;
  953|  6.94k|    }
  954|  2.23M|    return eof_error::good;
  955|  2.24M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  3.31M|{
  945|  3.31M|    return is_range_eof(r.begin(), r.end());
  946|  3.31M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  3.31M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.31M|    {
  938|  3.31M|        return begin == end;
  939|  3.31M|    }
  940|  3.31M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.45M|    {
  296|  1.45M|        ++x;
  297|  1.45M|        return x;
  298|  1.45M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   629k|{
 3258|   629k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   629k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 622k, False: 6.39k]
  ------------------
 3260|   622k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 622k, False: 72]
  ------------------
 3261|   622k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   622k|        }
 3263|     72|        return unexpected(eof_error::eof);
 3264|   622k|    }
 3265|       |
 3266|  6.39k|    auto& it = *r;
 3267|  6.39k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 4.66k, False: 1.72k]
  ------------------
 3268|  4.66k|        return std::pair{it, sign_type::minus_sign};
 3269|  4.66k|    }
 3270|  1.72k|    return std::pair{it, sign_type::plus_sign};
 3271|  6.39k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  1.01M|{
 2372|  1.01M|    auto it = read_code_unit(range);
 2373|  1.01M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.42k, False: 1.01M]
  |  |  ------------------
  ------------------
 2374|  1.42k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  1.42k|    }
 2376|       |
 2377|  2.02M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.02M, False: 993k]
  ------------------
 2378|  2.02M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 20.9k, False: 2.00M]
  ------------------
 2379|  20.9k|            return *it;
 2380|  20.9k|        }
 2381|  2.02M|    }
 2382|       |
 2383|   993k|    return unexpected(parse_error::error);
 2384|  1.01M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  1.62M|{
 2331|  1.62M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.62M|    else {
 2344|  1.62M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.62M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.62M|                return ch;
 2347|  1.62M|            }
 2348|  1.62M|            return static_cast<char_type>(ch +
 2349|  1.62M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.62M|        };
 2351|       |
 2352|  1.62M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.62M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.62M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.62M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58.6k, False: 1.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  58.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  58.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  58.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  58.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  58.6k|    }                                                  \
  |  |  |  | 3939|  1.62M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.56M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.56M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.56M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56M, False: 905]
  |  |  ------------------
  ------------------
 2357|  1.56M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.56M|                    return ascii_tolower(a) ==
 2359|  1.56M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.56M|                }))) {
 2361|  1.56M|            return unexpected(parse_error::error);
 2362|  1.56M|        }
 2363|       |
 2364|    905|        return it;
 2365|  1.56M|    }
 2366|  1.62M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.83M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.83M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.45M, False: 386k]
  |  Branch (2345:29): [True: 372k, False: 13.6k]
  ------------------
 2346|  1.82M|                return ch;
 2347|  1.82M|            }
 2348|  13.6k|            return static_cast<char_type>(ch +
 2349|  13.6k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.83M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   443k|{
 2246|   443k|    auto it = read_code_unit(range);
 2247|   443k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.15k, False: 442k]
  |  |  ------------------
  ------------------
 2248|  1.15k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  1.15k|    }
 2250|       |
 2251|   442k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 438k, False: 4.30k]
  |  |  ------------------
  ------------------
 2252|   442k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   438k|        return unexpected(parse_error::error);
 2254|   438k|    }
 2255|       |
 2256|  4.30k|    return *it;
 2257|   442k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  1.07M|{
 2095|  1.07M|    auto it = read_while_code_unit(range, pred);
 2096|  1.07M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 612k, False: 460k]
  ------------------
 2097|   612k|        return unexpected(parse_error::error);
 2098|   612k|    }
 2099|   460k|    return it;
 2100|  1.07M|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   440k|    {
 1720|   440k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   440k|                           ranges::common_range<Range>) {
 1737|   440k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   440k|            auto end_seg = range.end().contiguous_segment();
 1739|   440k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.0k, False: 422k]
  |  |  ------------------
  ------------------
 1740|   440k|                             detail::to_address(end_seg.end()))) {
 1741|  18.0k|                auto& str = m_storage.emplace();
 1742|  18.0k|                str.reserve(range.end().position() - range.begin().position());
 1743|  18.0k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  18.0k|                m_view = string_view_type{str};
 1745|  18.0k|                return;
 1746|  18.0k|            }
 1747|       |
 1748|   422k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   422k|                                                            end_seg.data());
 1750|   422k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   440k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.88M|    {
 1681|  3.88M|        return m_view;
 1682|  3.88M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.45M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   310k|    {
 6117|   310k|        const bool need_skipped_width =
 6118|   310k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 310k]
  |  Branch (6118:33): [True: 0, False: 310k]
  ------------------
 6119|   310k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   310k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 310k]
  ------------------
 6122|   310k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 310k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   310k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 310k, False: 0]
  ------------------
 6131|   310k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 310k]
  ------------------
 6132|   310k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   310k|        return result_type{rng.begin(), 0};
 6156|   310k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.62M|{
 1956|  1.62M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.62M|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.62M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.62M|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 58.8k, False: 1.57M]
  ------------------
 1961|  58.8k|            return unexpected(eof_error::eof);
 1962|  58.8k|        }
 1963|       |
 1964|  1.57M|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.62M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  1.90M|{
 1998|  1.90M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.90M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.90M|    auto it = range.begin();
 2002|  1.90M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.90M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.90M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.90M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.90M, False: 0]
  ------------------
 2011|  1.90M|        ++it;
 2012|  1.90M|        return {it, string_type(1, *range.begin())};
 2013|  1.90M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.90M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  3.53M|{
  945|  3.53M|    return is_range_eof(r.begin(), r.end());
  946|  3.53M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  3.53M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.53M|    {
  938|  3.53M|        return begin == end;
  939|  3.53M|    }
  940|  3.53M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   399k|    {
  190|   399k|        i = std::move(bound);
  191|   399k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  1.90M|    {
 1989|  1.90M|        return !codepoint.empty();
 1990|  1.90M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.62M|{
  951|  1.62M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.01k, False: 1.61M]
  |  |  ------------------
  ------------------
  952|  5.01k|        return eof_error::eof;
  953|  5.01k|    }
  954|  1.61M|    return eof_error::good;
  955|  1.62M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   839k|{
 1945|   839k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 646, False: 838k]
  |  |  ------------------
  ------------------
 1946|    646|        return unexpected(e);
 1947|    646|    }
 1948|       |
 1949|   838k|    return ranges::next(range.begin());
 1950|   839k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   838k|    {
  296|   838k|        ++x;
  297|   838k|        return x;
  298|   838k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   620k|{
 3258|   620k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   620k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 615k, False: 4.32k]
  ------------------
 3260|   615k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 615k, False: 24]
  ------------------
 3261|   615k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   615k|        }
 3263|     24|        return unexpected(eof_error::eof);
 3264|   615k|    }
 3265|       |
 3266|  4.32k|    auto& it = *r;
 3267|  4.32k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 2.79k, False: 1.52k]
  ------------------
 3268|  2.79k|        return std::pair{it, sign_type::minus_sign};
 3269|  2.79k|    }
 3270|  1.52k|    return std::pair{it, sign_type::plus_sign};
 3271|  4.32k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   701k|{
 2372|   701k|    auto it = read_code_unit(range);
 2373|   701k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   701k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 324, False: 700k]
  |  |  ------------------
  ------------------
 2374|    324|        return unexpected(make_eof_parse_error(it.error()));
 2375|    324|    }
 2376|       |
 2377|  1.40M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.40M, False: 691k]
  ------------------
 2378|  1.40M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 9.44k, False: 1.39M]
  ------------------
 2379|  9.44k|            return *it;
 2380|  9.44k|        }
 2381|  1.40M|    }
 2382|       |
 2383|   691k|    return unexpected(parse_error::error);
 2384|   700k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  1.62M|{
 2331|  1.62M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.62M|    else {
 2344|  1.62M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.62M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.62M|                return ch;
 2347|  1.62M|            }
 2348|  1.62M|            return static_cast<char_type>(ch +
 2349|  1.62M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.62M|        };
 2351|       |
 2352|  1.62M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.62M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.62M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.62M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58.8k, False: 1.57M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  58.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  58.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  58.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  58.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  58.8k|    }                                                  \
  |  |  |  | 3939|  1.62M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.57M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.57M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.57M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56M, False: 905]
  |  |  ------------------
  ------------------
 2357|  1.57M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.57M|                    return ascii_tolower(a) ==
 2359|  1.57M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.57M|                }))) {
 2361|  1.56M|            return unexpected(parse_error::error);
 2362|  1.56M|        }
 2363|       |
 2364|    905|        return it;
 2365|  1.57M|    }
 2366|  1.62M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.83M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.83M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.45M, False: 387k]
  |  Branch (2345:29): [True: 373k, False: 13.7k]
  ------------------
 2346|  1.82M|                return ch;
 2347|  1.82M|            }
 2348|  13.7k|            return static_cast<char_type>(ch +
 2349|  13.7k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.83M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   137k|{
 2246|   137k|    auto it = read_code_unit(range);
 2247|   137k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 322, False: 137k]
  |  |  ------------------
  ------------------
 2248|    322|        return unexpected(make_eof_parse_error(it.error()));
 2249|    322|    }
 2250|       |
 2251|   137k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 135k, False: 1.67k]
  |  |  ------------------
  ------------------
 2252|   137k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   135k|        return unexpected(parse_error::error);
 2254|   135k|    }
 2255|       |
 2256|  1.67k|    return *it;
 2257|   137k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   358k|{
 2075|   358k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   358k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   358k|{
 2056|   358k|    if constexpr (ranges::common_range<Range>) {
 2057|   358k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   358k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   618k|{
 3066|   618k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 618k, False: 0]
  ------------------
 3067|   618k|        auto it = read_while_classic_space(range);
 3068|   618k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   618k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.78k, False: 615k]
  |  |  ------------------
  ------------------
 3070|  3.78k|            return unexpected(e);
 3071|  3.78k|        }
 3072|       |
 3073|   615k|        return it;
 3074|   618k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   618k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   618k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   618k|    else {
 2225|   618k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   618k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   618k|            return detail::is_cp_space(cp);
 2238|   618k|        });
 2239|   618k|    }
 2240|   618k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   618k|{
 2181|   618k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   618k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  1.05M|{
 2160|  1.05M|    auto it = range.begin();
 2161|  2.18M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.90M, False: 272k]
  ------------------
 2162|  1.90M|        const auto val =
 2163|  1.90M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.90M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.90M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.90M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.90M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.90M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.90M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 784k, False: 1.12M]
  ------------------
 2168|   784k|                return it;
 2169|   784k|            }
 2170|  1.90M|        }
 2171|  1.12M|        it = val.iterator;
 2172|  1.12M|    }
 2173|       |
 2174|   272k|    return it;
 2175|  1.05M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   618k|        : m_fptr([](storage fn,
  743|   618k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   618k|              cvref<T> obj = *get<T>(fn);
  745|   618k|              if constexpr (std::is_void_v<R>) {
  746|   618k|                  obj(static_cast<decltype(args)>(args)...);
  747|   618k|              }
  748|   618k|              else {
  749|   618k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   618k|              }
  751|   618k|          }),
  752|   618k|          m_storage(std::addressof(f))
  753|   618k|    {
  754|   618k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.06M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.06M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.06M|              else {
  749|  1.06M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.06M|              }
  751|  1.06M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.06M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.06M|        else if constexpr (std::is_object_v<T>) {
  688|  1.06M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.06M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  1.06M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.06M|            return detail::is_cp_space(cp);
 2238|  1.06M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   618k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   618k|        {
  662|   618k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.41M|    {
  304|  1.41M|        ranges::advance(x, n);
  305|  1.41M|        return x;
  306|  1.41M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.41M|    {
  268|  1.41M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.41M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.41M|    {
  181|  4.56M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 3.14M, False: 1.41M]
  ------------------
  182|  3.14M|            ++i;
  183|  3.14M|        }
  184|  1.41M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   139k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   139k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   139k|            auto rd = make_reader<T, char_type>();
 6237|   139k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   139k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 139k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   139k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 139k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   139k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   139k|                return impl(rd, range, value);
 6242|   139k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   139k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   904k|    {
 3156|   904k|        reader_error_handler eh{};
 3157|   904k|        get_derived().check_specs_impl(specs, eh);
 3158|   904k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 904k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   904k|        return {};
 3163|   904k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3167|   904k|    {
 3168|   904k|        return static_cast<Derived&>(*this);
 3169|   904k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|   904k|    {
 4178|   904k|        detail::check_float_type_specs(specs, eh);
 4179|   904k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   139k|    {
 6162|   139k|        const bool need_skipped_width =
 6163|   139k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 139k]
  |  Branch (6163:33): [True: 0, False: 139k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   139k|        auto it = rng.begin();
 6167|   139k|        std::ptrdiff_t prefix_width = 0;
 6168|   139k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 139k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   139k|        else {
 6176|   139k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.00k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.00k|    }                                                  \
  |  |  |  | 3939|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   138k|            std::tie(it, prefix_width) = prefix_result;
 6178|   138k|        }
 6179|   138k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   138k|        std::ptrdiff_t value_width = 0;
 6183|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 138k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   138k|        else {
 6199|   138k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.6k, False: 93.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.6k|    }                                                  \
  |  | 3939|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  93.2k|                                             specs, value, loc));
 6201|       |
 6202|  93.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 93.2k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  93.2k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  93.2k|        std::ptrdiff_t postfix_width = 0;
 6211|  93.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 92.7k, False: 470]
  ------------------
 6212|  92.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  92.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  92.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  92.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 92.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  92.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  92.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  92.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  92.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  92.7k|                                 value_width));
 6216|  92.7k|            std::tie(it, postfix_width) = postfix_result;
 6217|  92.7k|        }
 6218|       |
 6219|  93.2k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  93.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  93.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 93.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  93.2k|            specs, prefix_width, value_width, postfix_width));
 6221|  93.2k|        return it;
 6222|  93.2k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3150|  1.85M|    {
 3151|  1.85M|        return true;
 3152|  1.85M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4249|   898k|    {
 4250|   898k|        unsigned options{};
 4251|   898k|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 221k, False: 676k]
  ------------------
 4252|   221k|            options |= float_reader_base::allow_thsep;
 4253|   221k|        }
 4254|       |
 4255|   898k|        SCN_GCC_COMPAT_PUSH
 4256|   898k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|   898k|        switch (specs.type) {
 4259|   168k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 168k, False: 729k]
  ------------------
 4260|   168k|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|  57.7k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 57.7k, False: 840k]
  ------------------
 4263|  57.7k|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|   245k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 245k, False: 652k]
  ------------------
 4266|   245k|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|   204k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 204k, False: 693k]
  ------------------
 4269|   204k|                return options | float_reader_base::allow_scientific |
 4270|   204k|                       float_reader_base::allow_fixed;
 4271|       |
 4272|   221k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 221k, False: 676k]
  ------------------
 4273|   221k|                return options | float_reader_base::allow_scientific |
 4274|   221k|                       float_reader_base::allow_fixed |
 4275|   221k|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 898k]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|   898k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|   898k|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|   898k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3701|   898k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.22M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.45M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3732|   288k|    {
 3733|   288k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   288k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   288k|        const std::ptrdiff_t sign_len =
 3736|   288k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 1.97k, False: 286k]
  ------------------
 3737|       |
 3738|   288k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 34.3k, False: 253k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  34.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  34.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  34.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  34.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  34.3k|    }                                                  \
  |  |  |  | 3939|   288k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   253k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   288k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4089|   973k|    {
 4090|   973k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 973k, False: 0]
  ------------------
 4091|   973k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 973k, False: 0]
  ------------------
 4092|   973k|            return;
 4093|   973k|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|  1.08M|    {
 1686|  1.08M|        return m_storage.has_value();
 1687|  1.08M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|   640k|    {
 1691|   640k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|   640k|        return *m_storage;
 1693|   640k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   138k|    {
 4203|   138k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   138k|#if !SCN_DISABLE_LOCALE
 4206|   138k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 31.4k, False: 107k]
  ------------------
 4207|  31.4k|            return read_impl<Range>(
 4208|  31.4k|                range, rd,
 4209|  31.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  31.4k|                },
 4212|  31.4k|                value, loc);
 4213|  31.4k|        }
 4214|   107k|#endif
 4215|       |
 4216|   107k|        return read_impl<Range>(
 4217|   107k|            range, rd,
 4218|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   107k|                return r.read_source(SCN_FWD(args)...);
 4220|   107k|            },
 4221|   107k|            value);
 4222|   138k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   186k|    {
 4239|   186k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   186k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.3k, False: 128k]
  |  |  ------------------
  ------------------
 4241|  57.3k|            return unexpected(r.error());
 4242|  57.3k|        }
 4243|       |
 4244|   128k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.96k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.96k|    }                                                  \
  |  |  |  | 3939|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   126k|        return ranges::next(range.begin(), n);
 4246|   128k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   614k|    {
  763|   614k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   614k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  31.4k|        : m_fptr([](storage fn,
  743|  31.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.4k|              cvref<T> obj = *get<T>(fn);
  745|  31.4k|              if constexpr (std::is_void_v<R>) {
  746|  31.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.4k|              }
  748|  31.4k|              else {
  749|  31.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.4k|              }
  751|  31.4k|          }),
  752|  31.4k|          m_storage(std::addressof(f))
  753|  31.4k|    {
  754|  31.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  31.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.4k|              else {
  749|  31.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.4k|              }
  751|  31.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.4k|        else if constexpr (std::is_object_v<T>) {
  688|  31.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  31.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  31.4k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3720|   110k|    {
 3721|   110k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   110k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   110k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   110k|        return read_source_impl(range);
 3727|   110k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3746|   614k|    {
 3747|   614k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   614k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 614k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   614k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   614k|        auto it = sign_result.first;
 3750|   614k|        m_sign = sign_result.second;
 3751|       |
 3752|   614k|        auto digits_begin = it;
 3753|   614k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|   614k|        else {
 3780|   614k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 174k, False: 440k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|   174k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|   174k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   174k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   174k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|   174k|    }                                                  \
  |  | 3939|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|   440k|                it,
 3782|   440k|                do_read_source_impl(
 3783|   440k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|   440k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|   440k|        }
 3786|       |
 3787|   614k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   440k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 440k, False: 0]
  |  Branch (3789:48): [True: 440k, False: 0]
  ------------------
 3790|   440k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 440k, False: 0]
  ------------------
 3791|   440k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 440k, False: 0]
  ------------------
 3792|   440k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   440k|        }
 3794|       |
 3795|   440k|        handle_separators();
 3796|       |
 3797|   440k|        return it;
 3798|   614k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4032|   614k|    {
 4033|   614k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   614k|        const bool allowed_nonhex =
 4035|   614k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   614k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   614k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 614k, False: 0]
  |  Branch (4038:45): [True: 0, False: 614k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   614k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 614k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|   614k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 614k, False: 0]
  |  Branch (4047:45): [True: 0, False: 614k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|   614k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 614k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|   614k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 398k, False: 215k]
  |  Branch (4054:28): [True: 122k, False: 276k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   122k|            auto it = range.begin();
 4058|       |
 4059|   122k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 270, False: 122k]
  ------------------
 4060|    270|                m_kind = float_kind::hex_with_prefix;
 4061|    270|                it = *r;
 4062|    270|            }
 4063|   122k|            else {
 4064|   122k|                m_kind = float_kind::hex_without_prefix;
 4065|   122k|            }
 4066|       |
 4067|   122k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   122k|        }
 4069|   491k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 215k, False: 276k]
  |  Branch (4069:29): [True: 215k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   215k|            m_kind = float_kind::generic;
 4073|   215k|            return read_regular_float(range);
 4074|   215k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   276k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 635, False: 275k]
  |  |  ------------------
  ------------------
 4080|    635|            m_kind = float_kind::hex_with_prefix;
 4081|    635|            return read_hex(ranges::subrange{*r, range.end()});
 4082|    635|        }
 4083|       |
 4084|   275k|        m_kind = float_kind::generic;
 4085|   275k|        return read_regular(range);
 4086|   276k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3840|   614k|    {
 3841|   614k|        auto it = range.begin();
 3842|   614k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 614k, False: 0]
  ------------------
 3843|   614k|            return unexpected(r.error());
 3844|   614k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3863|   614k|    {
 3864|   614k|        auto it = range.begin();
 3865|   614k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 614k, False: 0]
  ------------------
 3866|   614k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   614k|                scan_error::invalid_scanned_value,
 3868|   614k|                "Invalid floating-point NaN value"));
 3869|   614k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   398k|    {
 3834|   398k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   398k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3934|   123k|    {
 3935|   123k|        auto it = range.begin();
 3936|       |
 3937|   123k|        std::ptrdiff_t digits_count = 0;
 3938|   123k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|   123k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.0k, False: 96.2k]
  |  |  ------------------
  ------------------
 3940|  27.0k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|  27.0k|                scan_error::invalid_scanned_value,
 3942|  27.0k|                "Invalid hexadecimal floating-point value"));
 3943|  27.0k|        }
 3944|  96.2k|        else {
 3945|  96.2k|            digits_count += ranges::distance(it, *r);
 3946|  96.2k|            it = *r;
 3947|  96.2k|        }
 3948|       |
 3949|  96.2k|        m_integral_part_length = digits_count;
 3950|  96.2k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 778, False: 95.4k]
  ------------------
 3951|  96.2k|                                             m_locale_options.decimal_point)) {
 3952|    778|            it = *r;
 3953|    778|        }
 3954|       |
 3955|  96.2k|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 650, False: 95.5k]
  ------------------
 3956|  96.2k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|    650|            digits_count += ranges::distance(it, *r);
 3958|    650|            it = *r;
 3959|    650|        }
 3960|       |
 3961|  96.2k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96.2k]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|  96.2k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|  96.2k|        return it;
 3970|  96.2k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3818|   219k|    {
 3819|   219k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 219k]
  |  |  |  Branch (865:45): [True: 0, False: 219k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|   219k|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|   219k|        return read_while1_code_unit(
 3828|   219k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|   219k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   219k|        : m_fptr([](storage fn,
  743|   219k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   219k|              cvref<T> obj = *get<T>(fn);
  745|   219k|              if constexpr (std::is_void_v<R>) {
  746|   219k|                  obj(static_cast<decltype(args)>(args)...);
  747|   219k|              }
  748|   219k|              else {
  749|   219k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   219k|              }
  751|   219k|          }),
  752|   219k|          m_storage(std::addressof(f))
  753|   219k|    {
  754|   219k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   349k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   349k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   349k|              else {
  749|   349k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   349k|              }
  751|   349k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   349k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   349k|        else if constexpr (std::is_object_v<T>) {
  688|   349k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   349k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3828|   349k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   219k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   219k|        {
  662|   219k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3906|   386k|    {
 3907|   386k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 14.5k, False: 372k]
  ------------------
 3908|  14.5k|            auto beg_exp_it = range.begin();
 3909|  14.5k|            auto it = *r;
 3910|       |
 3911|  14.5k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 14.5k, False: 72]
  ------------------
 3912|  14.5k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  14.5k|                it = r_sign->first;
 3914|  14.5k|            }
 3915|       |
 3916|  14.5k|            if (auto r_exp = read_while1_code_unit(
 3917|  14.5k|                    ranges::subrange{it, range.end()},
 3918|  14.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  14.5k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.18k, False: 13.3k]
  |  |  ------------------
  ------------------
 3920|  1.18k|                it = beg_exp_it;
 3921|  1.18k|            }
 3922|  13.3k|            else {
 3923|  13.3k|                it = *r_exp;
 3924|  13.3k|            }
 3925|       |
 3926|  14.5k|            return it;
 3927|  14.5k|        }
 3928|   372k|        return range.begin();
 3929|   386k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  14.5k|        : m_fptr([](storage fn,
  743|  14.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.5k|              cvref<T> obj = *get<T>(fn);
  745|  14.5k|              if constexpr (std::is_void_v<R>) {
  746|  14.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.5k|              }
  748|  14.5k|              else {
  749|  14.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.5k|              }
  751|  14.5k|          }),
  752|  14.5k|          m_storage(std::addressof(f))
  753|  14.5k|    {
  754|  14.5k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  46.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  46.7k|              else {
  749|  46.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.7k|              }
  751|  46.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  46.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  46.7k|        else if constexpr (std::is_object_v<T>) {
  688|  46.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  46.7k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3918|  46.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  14.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  14.5k|        {
  662|  14.5k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3975|   491k|    {
 3976|   491k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   491k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 406k, False: 84.4k]
  |  Branch (3977:50): [True: 28.8k, False: 378k]
  ------------------
 3978|       |
 3979|   491k|        auto it = ranges::begin(range);
 3980|   491k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   491k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   491k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 143k, False: 347k]
  |  |  ------------------
  ------------------
 3984|   143k|            return r.transform_error(
 3985|   143k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|   143k|                                              "Invalid floating-point value"));
 3987|   143k|        }
 3988|   347k|        else {
 3989|   347k|            digits_count += ranges::distance(it, *r);
 3990|   347k|            it = *r;
 3991|   347k|        }
 3992|       |
 3993|   347k|        m_integral_part_length = digits_count;
 3994|   347k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 3.52k, False: 344k]
  ------------------
 3995|   347k|                                             m_locale_options.decimal_point)) {
 3996|  3.52k|            it = *r;
 3997|  3.52k|        }
 3998|       |
 3999|   347k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 2.93k, False: 344k]
  ------------------
 4000|   347k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  2.93k|            digits_count += ranges::distance(it, *r);
 4002|  2.93k|            it = *r;
 4003|  2.93k|        }
 4004|       |
 4005|   347k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   347k|        auto beg_exp_it = it;
 4012|   347k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 290k, False: 56.9k]
  ------------------
 4013|   290k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   290k|        }
 4015|   347k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 5.04k, False: 342k]
  |  Branch (4015:29): [True: 3.79k, False: 1.25k]
  ------------------
 4016|  3.79k|            return detail::unexpected_scan_error(
 4017|  3.79k|                scan_error::invalid_scanned_value,
 4018|  3.79k|                "No exponent given to scientific float");
 4019|  3.79k|        }
 4020|       |
 4021|   343k|        m_kind =
 4022|   343k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 330k, False: 13.2k]
  ------------------
 4023|       |
 4024|   343k|        return it;
 4025|   347k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3803|   839k|    {
 3804|   839k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 839k]
  |  |  |  Branch (865:45): [True: 0, False: 839k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   839k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   839k|        return read_while1_code_unit(
 3813|   839k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   839k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   839k|        : m_fptr([](storage fn,
  743|   839k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   839k|              cvref<T> obj = *get<T>(fn);
  745|   839k|              if constexpr (std::is_void_v<R>) {
  746|   839k|                  obj(static_cast<decltype(args)>(args)...);
  747|   839k|              }
  748|   839k|              else {
  749|   839k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   839k|              }
  751|   839k|          }),
  752|   839k|          m_storage(std::addressof(f))
  753|   839k|    {
  754|   839k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.27M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27M|              else {
  749|  1.27M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27M|              }
  751|  1.27M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.27M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.27M|        else if constexpr (std::is_object_v<T>) {
  688|  1.27M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3813|  1.27M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   839k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   839k|        {
  662|   839k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   440k|    {
 1676|   440k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   440k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  31.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.4k|        {
  662|  31.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   107k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   107k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3706|   504k|    {
 3707|   504k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   504k|        return read_source_impl(range);
 3713|   504k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   138k|    {
 4203|   138k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   138k|#if !SCN_DISABLE_LOCALE
 4206|   138k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 31.5k, False: 107k]
  ------------------
 4207|  31.5k|            return read_impl<Range>(
 4208|  31.5k|                range, rd,
 4209|  31.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  31.5k|                },
 4212|  31.5k|                value, loc);
 4213|  31.5k|        }
 4214|   107k|#endif
 4215|       |
 4216|   107k|        return read_impl<Range>(
 4217|   107k|            range, rd,
 4218|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   107k|                return r.read_source(SCN_FWD(args)...);
 4220|   107k|            },
 4221|   107k|            value);
 4222|   138k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   186k|    {
 4239|   186k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   186k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.9k, False: 159k]
  |  |  ------------------
  ------------------
 4241|  26.9k|            return unexpected(r.error());
 4242|  26.9k|        }
 4243|       |
 4244|   159k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32.3k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  32.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  32.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  32.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  32.3k|    }                                                  \
  |  |  |  | 3939|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   126k|        return ranges::next(range.begin(), n);
 4246|   159k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   615k|    {
  763|   615k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   615k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  31.5k|        : m_fptr([](storage fn,
  743|  31.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.5k|              cvref<T> obj = *get<T>(fn);
  745|  31.5k|              if constexpr (std::is_void_v<R>) {
  746|  31.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.5k|              }
  748|  31.5k|              else {
  749|  31.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.5k|              }
  751|  31.5k|          }),
  752|  31.5k|          m_storage(std::addressof(f))
  753|  31.5k|    {
  754|  31.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  31.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.5k|              else {
  749|  31.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.5k|              }
  751|  31.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.5k|        else if constexpr (std::is_object_v<T>) {
  688|  31.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  31.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  31.5k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|   110k|    {
 3721|   110k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   110k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   110k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   110k|        return read_source_impl(range);
 3727|   110k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|   615k|    {
 3747|   615k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   615k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   615k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   615k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 615k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   615k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   615k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   615k|        auto it = sign_result.first;
 3750|   615k|        m_sign = sign_result.second;
 3751|       |
 3752|   615k|        auto digits_begin = it;
 3753|   615k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|   615k|                      ranges::sized_range<Range>) {
 3756|   615k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 615k]
  |  |  |  Branch (865:45): [True: 0, False: 615k]
  |  |  |  Branch (865:45): [True: 0, False: 615k]
  |  |  ------------------
  ------------------
 3757|   615k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|   615k|            else {
 3766|   615k|                auto cb = [&](const auto& rr)
 3767|   615k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   615k|                    auto res = read_all(rr);
 3769|   615k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|   615k|                        return detail::unexpected_scan_error(
 3771|   615k|                            scan_error::invalid_scanned_value,
 3772|   615k|                            "Invalid float value");
 3773|   615k|                    }
 3774|   615k|                    return res;
 3775|   615k|                };
 3776|   615k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|   615k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   615k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 81.7k, False: 533k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  81.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  81.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  81.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  81.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  81.7k|    }                                                  \
  |  | 3939|   615k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|   533k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|   615k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   615k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   615k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   533k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 533k, False: 0]
  |  Branch (3789:48): [True: 533k, False: 0]
  ------------------
 3790|   533k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 533k, False: 0]
  ------------------
 3791|   533k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 533k, False: 0]
  ------------------
 3792|   533k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   533k|        }
 3794|       |
 3795|   533k|        handle_separators();
 3796|       |
 3797|   533k|        return it;
 3798|   615k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|   615k|    {
 3841|   615k|        auto it = range.begin();
 3842|   615k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 615k, False: 0]
  ------------------
 3843|   615k|            return unexpected(r.error());
 3844|   615k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|   615k|    {
 3864|   615k|        auto it = range.begin();
 3865|   615k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 615k, False: 0]
  ------------------
 3866|   615k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   615k|                scan_error::invalid_scanned_value,
 3868|   615k|                "Invalid floating-point NaN value"));
 3869|   615k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   399k|    {
 3834|   399k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   399k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   358k|{
 2095|   358k|    auto it = read_while_code_unit(range, pred);
 2096|   358k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 214k, False: 143k]
  ------------------
 2097|   214k|        return unexpected(parse_error::error);
 2098|   214k|    }
 2099|   143k|    return it;
 2100|   358k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|  81.0k|    {
 3907|  81.0k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 5.11k, False: 75.8k]
  ------------------
 3908|  5.11k|            auto beg_exp_it = range.begin();
 3909|  5.11k|            auto it = *r;
 3910|       |
 3911|  5.11k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 5.09k, False: 24]
  ------------------
 3912|  5.11k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  5.09k|                it = r_sign->first;
 3914|  5.09k|            }
 3915|       |
 3916|  5.11k|            if (auto r_exp = read_while1_code_unit(
 3917|  5.11k|                    ranges::subrange{it, range.end()},
 3918|  5.11k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  5.11k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  5.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 454, False: 4.66k]
  |  |  ------------------
  ------------------
 3920|    454|                it = beg_exp_it;
 3921|    454|            }
 3922|  4.66k|            else {
 3923|  4.66k|                it = *r_exp;
 3924|  4.66k|            }
 3925|       |
 3926|  5.11k|            return it;
 3927|  5.11k|        }
 3928|  75.8k|        return range.begin();
 3929|  81.0k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  5.11k|        : m_fptr([](storage fn,
  743|  5.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.11k|              cvref<T> obj = *get<T>(fn);
  745|  5.11k|              if constexpr (std::is_void_v<R>) {
  746|  5.11k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.11k|              }
  748|  5.11k|              else {
  749|  5.11k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.11k|              }
  751|  5.11k|          }),
  752|  5.11k|          m_storage(std::addressof(f))
  753|  5.11k|    {
  754|  5.11k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  16.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.0k|              else {
  749|  16.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.0k|              }
  751|  16.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  16.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.0k|        else if constexpr (std::is_object_v<T>) {
  688|  16.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.0k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3918|  16.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  5.11k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.11k|        {
  662|  5.11k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|   215k|    {
 3976|   215k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   215k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 131k, False: 84.4k]
  |  Branch (3977:50): [True: 28.8k, False: 102k]
  ------------------
 3978|       |
 3979|   215k|        auto it = ranges::begin(range);
 3980|   215k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   215k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   215k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 77.8k, False: 137k]
  |  |  ------------------
  ------------------
 3984|  77.8k|            return r.transform_error(
 3985|  77.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  77.8k|                                              "Invalid floating-point value"));
 3987|  77.8k|        }
 3988|   137k|        else {
 3989|   137k|            digits_count += ranges::distance(it, *r);
 3990|   137k|            it = *r;
 3991|   137k|        }
 3992|       |
 3993|   137k|        m_integral_part_length = digits_count;
 3994|   137k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 1.67k, False: 136k]
  ------------------
 3995|   137k|                                             m_locale_options.decimal_point)) {
 3996|  1.67k|            it = *r;
 3997|  1.67k|        }
 3998|       |
 3999|   137k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 1.37k, False: 136k]
  ------------------
 4000|   137k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  1.37k|            digits_count += ranges::distance(it, *r);
 4002|  1.37k|            it = *r;
 4003|  1.37k|        }
 4004|       |
 4005|   137k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   137k|        auto beg_exp_it = it;
 4012|   137k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 81.0k, False: 56.9k]
  ------------------
 4013|  81.0k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|  81.0k|        }
 4015|   137k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 5.04k, False: 132k]
  |  Branch (4015:29): [True: 3.79k, False: 1.25k]
  ------------------
 4016|  3.79k|            return detail::unexpected_scan_error(
 4017|  3.79k|                scan_error::invalid_scanned_value,
 4018|  3.79k|                "No exponent given to scientific float");
 4019|  3.79k|        }
 4020|       |
 4021|   134k|        m_kind =
 4022|   134k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 129k, False: 4.66k]
  ------------------
 4023|       |
 4024|   134k|        return it;
 4025|   137k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|   353k|    {
 3804|   353k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 353k]
  |  |  |  Branch (865:45): [True: 0, False: 353k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   353k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   353k|        return read_while1_code_unit(
 3813|   353k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   353k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   353k|        : m_fptr([](storage fn,
  743|   353k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   353k|              cvref<T> obj = *get<T>(fn);
  745|   353k|              if constexpr (std::is_void_v<R>) {
  746|   353k|                  obj(static_cast<decltype(args)>(args)...);
  747|   353k|              }
  748|   353k|              else {
  749|   353k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   353k|              }
  751|   353k|          }),
  752|   353k|          m_storage(std::addressof(f))
  753|   353k|    {
  754|   353k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   534k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   534k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   534k|              else {
  749|   534k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   534k|              }
  751|   534k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   534k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   534k|        else if constexpr (std::is_object_v<T>) {
  688|   534k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   534k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3813|   534k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   353k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   353k|        {
  662|   353k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|   615k|    {
 4033|   615k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   615k|        const bool allowed_nonhex =
 4035|   615k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   615k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   615k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 615k, False: 0]
  |  Branch (4038:45): [True: 0, False: 615k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   615k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 615k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|   615k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 615k, False: 0]
  |  Branch (4047:45): [True: 0, False: 615k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|   615k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 615k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|   615k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 399k, False: 215k]
  |  Branch (4054:28): [True: 122k, False: 276k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   122k|            auto it = range.begin();
 4058|       |
 4059|   122k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 270, False: 122k]
  ------------------
 4060|    270|                m_kind = float_kind::hex_with_prefix;
 4061|    270|                it = *r;
 4062|    270|            }
 4063|   122k|            else {
 4064|   122k|                m_kind = float_kind::hex_without_prefix;
 4065|   122k|            }
 4066|       |
 4067|   122k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   122k|        }
 4069|   492k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 215k, False: 276k]
  |  Branch (4069:29): [True: 215k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   215k|            m_kind = float_kind::generic;
 4073|   215k|            return read_regular_float(range);
 4074|   215k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   276k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 635, False: 275k]
  |  |  ------------------
  ------------------
 4080|    635|            m_kind = float_kind::hex_with_prefix;
 4081|    635|            return read_hex(ranges::subrange{*r, range.end()});
 4082|    635|        }
 4083|       |
 4084|   275k|        m_kind = float_kind::generic;
 4085|   275k|        return read_regular(range);
 4086|   276k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|   399k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   399k|                    auto res = read_all(rr);
 3769|   399k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 171, False: 399k]
  |  |  ------------------
  ------------------
 3770|    171|                        return detail::unexpected_scan_error(
 3771|    171|                            scan_error::invalid_scanned_value,
 3772|    171|                            "Invalid float value");
 3773|    171|                    }
 3774|   399k|                    return res;
 3775|   399k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   399k|{
 1938|   399k|    return ranges::next(range.begin(), range.end());
 1939|   399k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   399k|    {
  313|   399k|        ranges::advance(x, bound);
  314|   399k|        return x;
  315|   399k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   399k|    {
  275|   399k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   399k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   533k|    {
 1676|   533k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   533k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   533k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|   533k|    {
 1720|   533k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   533k|                      ranges::sized_range<Range>) {
 1725|   533k|            m_storage.reset();
 1726|   533k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   533k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  31.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.5k|        {
  662|  31.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   107k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   107k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|   504k|    {
 3707|   504k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   504k|        return read_source_impl(range);
 3713|   504k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   154k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   154k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   154k|            auto rd = make_reader<T, char_type>();
 6237|   154k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   154k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 154k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   154k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 154k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   154k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   154k|                return impl(rd, range, value);
 6242|   154k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   154k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   154k|    {
 6162|   154k|        const bool need_skipped_width =
 6163|   154k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 154k]
  |  Branch (6163:33): [True: 0, False: 154k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   154k|        auto it = rng.begin();
 6167|   154k|        std::ptrdiff_t prefix_width = 0;
 6168|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 154k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   154k|        else {
 6176|   154k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.08k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.08k|    }                                                  \
  |  |  |  | 3939|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   153k|            std::tie(it, prefix_width) = prefix_result;
 6178|   153k|        }
 6179|   153k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   153k|        std::ptrdiff_t value_width = 0;
 6183|   153k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 153k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   153k|        else {
 6199|   153k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.5k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.5k|    }                                                  \
  |  | 3939|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   108k|                                             specs, value, loc));
 6201|       |
 6202|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 108k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   108k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   108k|        std::ptrdiff_t postfix_width = 0;
 6211|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 107k, False: 518]
  ------------------
 6212|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   107k|                                 value_width));
 6216|   107k|            std::tie(it, postfix_width) = postfix_result;
 6217|   107k|        }
 6218|       |
 6219|   108k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   108k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   108k|            specs, prefix_width, value_width, postfix_width));
 6221|   108k|        return it;
 6222|   108k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|   339k|    {
 3733|   339k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   339k|        const std::ptrdiff_t sign_len =
 3736|   339k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.03k, False: 337k]
  ------------------
 3737|       |
 3738|   339k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32.8k, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  32.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  32.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  32.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  32.8k|    }                                                  \
  |  |  |  | 3939|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   306k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   339k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   153k|    {
 4203|   153k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   153k|#if !SCN_DISABLE_LOCALE
 4206|   153k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 38.9k, False: 114k]
  ------------------
 4207|  38.9k|            return read_impl<Range>(
 4208|  38.9k|                range, rd,
 4209|  38.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  38.9k|                },
 4212|  38.9k|                value, loc);
 4213|  38.9k|        }
 4214|   114k|#endif
 4215|       |
 4216|   114k|        return read_impl<Range>(
 4217|   114k|            range, rd,
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
 4220|   114k|            },
 4221|   114k|            value);
 4222|   153k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   212k|    {
 4239|   212k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   212k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 58.2k, False: 153k]
  |  |  ------------------
  ------------------
 4241|  58.2k|            return unexpected(r.error());
 4242|  58.2k|        }
 4243|       |
 4244|   153k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 969, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    969|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    969|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    969|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    969|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    969|    }                                                  \
  |  |  |  | 3939|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   153k|        return ranges::next(range.begin(), n);
 4246|   153k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  38.9k|        : m_fptr([](storage fn,
  743|  38.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.9k|              cvref<T> obj = *get<T>(fn);
  745|  38.9k|              if constexpr (std::is_void_v<R>) {
  746|  38.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.9k|              }
  748|  38.9k|              else {
  749|  38.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.9k|              }
  751|  38.9k|          }),
  752|  38.9k|          m_storage(std::addressof(f))
  753|  38.9k|    {
  754|  38.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  38.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.9k|              else {
  749|  38.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.9k|              }
  751|  38.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.9k|        else if constexpr (std::is_object_v<T>) {
  688|  38.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  38.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  38.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  38.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.9k|        {
  662|  38.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   114k|        : m_fptr([](storage fn,
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|   114k|              if constexpr (std::is_void_v<R>) {
  746|   114k|                  obj(static_cast<decltype(args)>(args)...);
  747|   114k|              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
  752|   114k|          m_storage(std::addressof(f))
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   114k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   114k|        else if constexpr (std::is_object_v<T>) {
  688|   114k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   114k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   114k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   114k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   153k|    {
 4203|   153k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   153k|#if !SCN_DISABLE_LOCALE
 4206|   153k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 38.9k, False: 114k]
  ------------------
 4207|  38.9k|            return read_impl<Range>(
 4208|  38.9k|                range, rd,
 4209|  38.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  38.9k|                },
 4212|  38.9k|                value, loc);
 4213|  38.9k|        }
 4214|   114k|#endif
 4215|       |
 4216|   114k|        return read_impl<Range>(
 4217|   114k|            range, rd,
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
 4220|   114k|            },
 4221|   114k|            value);
 4222|   153k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   212k|    {
 4239|   212k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   212k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.2k, False: 185k]
  |  |  ------------------
  ------------------
 4241|  27.2k|            return unexpected(r.error());
 4242|  27.2k|        }
 4243|       |
 4244|   185k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   185k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   185k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   185k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.9k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.9k|    }                                                  \
  |  |  |  | 3939|   185k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   153k|        return ranges::next(range.begin(), n);
 4246|   185k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  38.9k|        : m_fptr([](storage fn,
  743|  38.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.9k|              cvref<T> obj = *get<T>(fn);
  745|  38.9k|              if constexpr (std::is_void_v<R>) {
  746|  38.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.9k|              }
  748|  38.9k|              else {
  749|  38.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.9k|              }
  751|  38.9k|          }),
  752|  38.9k|          m_storage(std::addressof(f))
  753|  38.9k|    {
  754|  38.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  38.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.9k|              else {
  749|  38.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.9k|              }
  751|  38.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.9k|        else if constexpr (std::is_object_v<T>) {
  688|  38.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  38.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  38.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  38.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.9k|        {
  662|  38.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   114k|        : m_fptr([](storage fn,
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|   114k|              if constexpr (std::is_void_v<R>) {
  746|   114k|                  obj(static_cast<decltype(args)>(args)...);
  747|   114k|              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
  752|   114k|          m_storage(std::addressof(f))
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   114k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   114k|        else if constexpr (std::is_object_v<T>) {
  688|   114k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   114k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   114k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   114k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   157k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   157k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   157k|            auto rd = make_reader<T, char_type>();
 6237|   157k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   157k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 157k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   157k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 157k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   157k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   157k|                return impl(rd, range, value);
 6242|   157k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   157k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   157k|    {
 6162|   157k|        const bool need_skipped_width =
 6163|   157k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 157k]
  |  Branch (6163:33): [True: 0, False: 157k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   157k|        auto it = rng.begin();
 6167|   157k|        std::ptrdiff_t prefix_width = 0;
 6168|   157k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 157k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   157k|        else {
 6176|   157k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.15k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.15k|    }                                                  \
  |  |  |  | 3939|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   156k|            std::tie(it, prefix_width) = prefix_result;
 6178|   156k|        }
 6179|   156k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   156k|        std::ptrdiff_t value_width = 0;
 6183|   156k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 156k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   156k|        else {
 6199|   156k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.5k, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.5k|    }                                                  \
  |  | 3939|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   110k|                                             specs, value, loc));
 6201|       |
 6202|   110k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 110k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   110k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   110k|        std::ptrdiff_t postfix_width = 0;
 6211|   110k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 110k, False: 566]
  ------------------
 6212|   110k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   110k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   110k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   110k|                                 value_width));
 6216|   110k|            std::tie(it, postfix_width) = postfix_result;
 6217|   110k|        }
 6218|       |
 6219|   110k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   110k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   110k|            specs, prefix_width, value_width, postfix_width));
 6221|   110k|        return it;
 6222|   110k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3732|   346k|    {
 3733|   346k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   346k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   346k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   346k|        const std::ptrdiff_t sign_len =
 3736|   346k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.09k, False: 344k]
  ------------------
 3737|       |
 3738|   346k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   346k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   346k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   346k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.7k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.7k|    }                                                  \
  |  |  |  | 3939|   346k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   314k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   346k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   156k|    {
 4203|   156k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   156k|#if !SCN_DISABLE_LOCALE
 4206|   156k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 40.0k, False: 116k]
  ------------------
 4207|  40.0k|            return read_impl<Range>(
 4208|  40.0k|                range, rd,
 4209|  40.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  40.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  40.0k|                },
 4212|  40.0k|                value, loc);
 4213|  40.0k|        }
 4214|   116k|#endif
 4215|       |
 4216|   116k|        return read_impl<Range>(
 4217|   116k|            range, rd,
 4218|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   116k|                return r.read_source(SCN_FWD(args)...);
 4220|   116k|            },
 4221|   116k|            value);
 4222|   156k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   216k|    {
 4239|   216k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   216k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 58.9k, False: 157k]
  |  |  ------------------
  ------------------
 4241|  58.9k|            return unexpected(r.error());
 4242|  58.9k|        }
 4243|       |
 4244|   157k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 141, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    141|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    141|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    141|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    141|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    141|    }                                                  \
  |  |  |  | 3939|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   157k|        return ranges::next(range.begin(), n);
 4246|   157k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  40.0k|        : m_fptr([](storage fn,
  743|  40.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.0k|              cvref<T> obj = *get<T>(fn);
  745|  40.0k|              if constexpr (std::is_void_v<R>) {
  746|  40.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.0k|              }
  748|  40.0k|              else {
  749|  40.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.0k|              }
  751|  40.0k|          }),
  752|  40.0k|          m_storage(std::addressof(f))
  753|  40.0k|    {
  754|  40.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  40.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.0k|              else {
  749|  40.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.0k|              }
  751|  40.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.0k|        else if constexpr (std::is_object_v<T>) {
  688|  40.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  40.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  40.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  40.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  40.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.0k|        {
  662|  40.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   116k|        : m_fptr([](storage fn,
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|   116k|              if constexpr (std::is_void_v<R>) {
  746|   116k|                  obj(static_cast<decltype(args)>(args)...);
  747|   116k|              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
  752|   116k|          m_storage(std::addressof(f))
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   116k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   116k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   116k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   156k|    {
 4203|   156k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   156k|#if !SCN_DISABLE_LOCALE
 4206|   156k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 40.1k, False: 116k]
  ------------------
 4207|  40.1k|            return read_impl<Range>(
 4208|  40.1k|                range, rd,
 4209|  40.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  40.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  40.1k|                },
 4212|  40.1k|                value, loc);
 4213|  40.1k|        }
 4214|   116k|#endif
 4215|       |
 4216|   116k|        return read_impl<Range>(
 4217|   116k|            range, rd,
 4218|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   116k|                return r.read_source(SCN_FWD(args)...);
 4220|   116k|            },
 4221|   116k|            value);
 4222|   156k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   216k|    {
 4239|   216k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   216k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.5k, False: 188k]
  |  |  ------------------
  ------------------
 4241|  27.5k|            return unexpected(r.error());
 4242|  27.5k|        }
 4243|       |
 4244|   188k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.5k, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.5k|    }                                                  \
  |  |  |  | 3939|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   157k|        return ranges::next(range.begin(), n);
 4246|   188k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  40.1k|        : m_fptr([](storage fn,
  743|  40.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.1k|              cvref<T> obj = *get<T>(fn);
  745|  40.1k|              if constexpr (std::is_void_v<R>) {
  746|  40.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.1k|              }
  748|  40.1k|              else {
  749|  40.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.1k|              }
  751|  40.1k|          }),
  752|  40.1k|          m_storage(std::addressof(f))
  753|  40.1k|    {
  754|  40.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  40.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.1k|              else {
  749|  40.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.1k|              }
  751|  40.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.1k|        else if constexpr (std::is_object_v<T>) {
  688|  40.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  40.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  40.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  40.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  40.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.1k|        {
  662|  40.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   116k|        : m_fptr([](storage fn,
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|   116k|              if constexpr (std::is_void_v<R>) {
  746|   116k|                  obj(static_cast<decltype(args)>(args)...);
  747|   116k|              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
  752|   116k|          m_storage(std::addressof(f))
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   116k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   116k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   116k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   618k|{
 2160|   618k|    auto it = range.begin();
 2161|  1.07M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.06M, False: 3.78k]
  ------------------
 2162|  1.06M|        const auto val =
 2163|  1.06M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.06M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.06M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.06M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.06M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.06M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 614k, False: 453k]
  ------------------
 2168|   614k|                return it;
 2169|   614k|            }
 2170|  1.06M|        }
 2171|   453k|        it = val.iterator;
 2172|   453k|    }
 2173|       |
 2174|  3.78k|    return it;
 2175|   618k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.06M|{
 1998|  1.06M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.06M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.06M|    auto it = range.begin();
 2002|  1.06M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.06M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.06M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.06M, False: 0]
  ------------------
 2011|  1.06M|        ++it;
 2012|  1.06M|        return {it, string_type(1, *range.begin())};
 2013|  1.06M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.06M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  1.06M|    {
 1989|  1.06M|        return !codepoint.empty();
 1990|  1.06M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   618k|{
 2181|   618k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   618k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   618k|{
 3066|   618k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 618k, False: 0]
  ------------------
 3067|   618k|        auto it = read_while_classic_space(range);
 3068|   618k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   618k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.78k, False: 614k]
  |  |  ------------------
  ------------------
 3070|  3.78k|            return unexpected(e);
 3071|  3.78k|        }
 3072|       |
 3073|   614k|        return it;
 3074|   618k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   618k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   618k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   618k|    else {
 2225|   618k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   618k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   618k|            return detail::is_cp_space(cp);
 2238|   618k|        });
 2239|   618k|    }
 2240|   618k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   618k|        : m_fptr([](storage fn,
  743|   618k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   618k|              cvref<T> obj = *get<T>(fn);
  745|   618k|              if constexpr (std::is_void_v<R>) {
  746|   618k|                  obj(static_cast<decltype(args)>(args)...);
  747|   618k|              }
  748|   618k|              else {
  749|   618k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   618k|              }
  751|   618k|          }),
  752|   618k|          m_storage(std::addressof(f))
  753|   618k|    {
  754|   618k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.06M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.06M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.06M|              else {
  749|  1.06M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.06M|              }
  751|  1.06M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.06M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.06M|        else if constexpr (std::is_object_v<T>) {
  688|  1.06M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.06M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.06M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.06M|            return detail::is_cp_space(cp);
 2238|  1.06M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   618k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   618k|        {
  662|   618k|        }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   851k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   851k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   851k|        auto buf = make_contiguous_buffer(range);
 2191|   851k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   851k|        return ranges::next(range.begin(),
 2193|   851k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   851k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|   851k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   851k|                  ranges::sized_range<Range>) {
 1785|   851k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   851k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   851k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|   851k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   851k|    {
 1589|   851k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   851k|    {
 1676|   851k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   851k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   851k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1719|   851k|    {
 1720|   851k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   851k|                                          std::basic_string<CharT>>) {
 1730|   851k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|   851k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   851k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   851k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4132|   598k|    {
 4133|   598k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 68.7k, False: 529k]
  ------------------
 4134|  68.7k|            return std::copysign(value, T{-1.0});
 4135|  68.7k|        }
 4136|   529k|        return std::copysign(value, T{1.0});
 4137|   598k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   438k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   438k|    else {
 2196|   438k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   438k|        return read_until_code_point(
 2208|   438k|            ranges::subrange{it, range.end()},
 2209|   438k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   438k|    }
 2211|   438k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   438k|        : m_fptr([](storage fn,
  743|   438k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   438k|              cvref<T> obj = *get<T>(fn);
  745|   438k|              if constexpr (std::is_void_v<R>) {
  746|   438k|                  obj(static_cast<decltype(args)>(args)...);
  747|   438k|              }
  748|   438k|              else {
  749|   438k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   438k|              }
  751|   438k|          }),
  752|   438k|          m_storage(std::addressof(f))
  753|   438k|    {
  754|   438k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   840k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   840k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   840k|              else {
  749|   840k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   840k|              }
  751|   840k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   840k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   840k|        else if constexpr (std::is_object_v<T>) {
  688|   840k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   840k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2209|   840k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   438k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   438k|        {
  662|   438k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   438k|    {
 1676|   438k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   438k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|   438k|    {
 1720|   438k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   438k|                                          std::basic_string<CharT>>) {
 1730|   438k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   438k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   438k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4132|   253k|    {
 4133|   253k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.01k, False: 252k]
  ------------------
 4134|  1.01k|            return std::copysign(value, T{-1.0});
 4135|  1.01k|        }
 4136|   252k|        return std::copysign(value, T{1.0});
 4137|   253k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4132|   629k|    {
 4133|   629k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 72.1k, False: 556k]
  ------------------
 4134|  72.1k|            return std::copysign(value, T{-1.0});
 4135|  72.1k|        }
 4136|   556k|        return std::copysign(value, T{1.0});
 4137|   629k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4132|   306k|    {
 4133|   306k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.06k, False: 305k]
  ------------------
 4134|  1.06k|            return std::copysign(value, T{-1.0});
 4135|  1.06k|        }
 4136|   305k|        return std::copysign(value, T{1.0});
 4137|   306k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4132|   636k|    {
 4133|   636k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 74.8k, False: 562k]
  ------------------
 4134|  74.8k|            return std::copysign(value, T{-1.0});
 4135|  74.8k|        }
 4136|   562k|        return std::copysign(value, T{1.0});
 4137|   636k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4132|   314k|    {
 4133|   314k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.20k, False: 313k]
  ------------------
 4134|  1.20k|            return std::copysign(value, T{-1.0});
 4135|  1.20k|        }
 4136|   313k|        return std::copysign(value, T{1.0});
 4137|   314k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   279k|{
 5835|   279k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.95k, False: 275k]
  |  |  ------------------
  ------------------
 5836|  3.95k|        return unexpected(e);
 5837|  3.95k|    }
 5838|       |
 5839|   275k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 275k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   275k|    return skip_classic_whitespace(range);
 5844|   275k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5910|  89.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  89.9k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  89.9k|            auto rd = make_reader<T, char_type>();
 5916|  89.9k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  89.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  89.9k|    {
 5903|  89.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  89.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  89.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  89.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.31k, False: 88.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.31k|    }                                                  \
  |  |  |  | 3939|  89.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  88.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  88.6k|                        .transform_error(make_eof_scan_error));
 5905|  88.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  89.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  88.6k|    {
 4185|  88.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  88.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  88.6k|        float_reader<CharT> rd{};
 4188|  88.6k|        return read_impl<Range>(
 4189|  88.6k|            range, rd,
 4190|  88.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  88.6k|                return r.read_source(SCN_FWD(args)...);
 4192|  88.6k|            },
 4193|  88.6k|            value);
 4194|  88.6k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3699|   576k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3685|   908k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  88.6k|        : m_fptr([](storage fn,
  743|  88.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.6k|              cvref<T> obj = *get<T>(fn);
  745|  88.6k|              if constexpr (std::is_void_v<R>) {
  746|  88.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  88.6k|              }
  748|  88.6k|              else {
  749|  88.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.6k|              }
  751|  88.6k|          }),
  752|  88.6k|          m_storage(std::addressof(f))
  753|  88.6k|    {
  754|  88.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  88.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  88.6k|              else {
  749|  88.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.6k|              }
  751|  88.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  88.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  88.6k|        else if constexpr (std::is_object_v<T>) {
  688|  88.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  88.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  88.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  88.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  88.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  88.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  88.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  88.6k|        {
  662|  88.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  94.1k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  94.1k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  94.1k|            auto rd = make_reader<T, char_type>();
 5916|  94.1k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  94.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  94.1k|    {
 5903|  94.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  94.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  94.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  94.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.49k, False: 92.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.49k|    }                                                  \
  |  |  |  | 3939|  94.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  92.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  92.6k|                        .transform_error(make_eof_scan_error));
 5905|  92.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  94.1k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  92.6k|    {
 4185|  92.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  92.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  92.6k|        float_reader<CharT> rd{};
 4188|  92.6k|        return read_impl<Range>(
 4189|  92.6k|            range, rd,
 4190|  92.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  92.6k|                return r.read_source(SCN_FWD(args)...);
 4192|  92.6k|            },
 4193|  92.6k|            value);
 4194|  92.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  92.6k|        : m_fptr([](storage fn,
  743|  92.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.6k|              cvref<T> obj = *get<T>(fn);
  745|  92.6k|              if constexpr (std::is_void_v<R>) {
  746|  92.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  92.6k|              }
  748|  92.6k|              else {
  749|  92.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.6k|              }
  751|  92.6k|          }),
  752|  92.6k|          m_storage(std::addressof(f))
  753|  92.6k|    {
  754|  92.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  92.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  92.6k|              else {
  749|  92.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.6k|              }
  751|  92.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  92.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  92.6k|        else if constexpr (std::is_object_v<T>) {
  688|  92.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  92.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  92.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  92.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  92.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  92.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  92.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  92.6k|        {
  662|  92.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5910|  95.7k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  95.7k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  95.7k|            auto rd = make_reader<T, char_type>();
 5916|  95.7k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  95.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  95.7k|    {
 5903|  95.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  95.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  95.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  95.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  95.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.62k, False: 94.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.62k|    }                                                  \
  |  |  |  | 3939|  95.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  94.1k|                        .transform_error(make_eof_scan_error));
 5905|  94.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  95.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  94.1k|    {
 4185|  94.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  94.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  94.1k|        float_reader<CharT> rd{};
 4188|  94.1k|        return read_impl<Range>(
 4189|  94.1k|            range, rd,
 4190|  94.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  94.1k|                return r.read_source(SCN_FWD(args)...);
 4192|  94.1k|            },
 4193|  94.1k|            value);
 4194|  94.1k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  94.1k|        : m_fptr([](storage fn,
  743|  94.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.1k|              cvref<T> obj = *get<T>(fn);
  745|  94.1k|              if constexpr (std::is_void_v<R>) {
  746|  94.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  94.1k|              }
  748|  94.1k|              else {
  749|  94.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.1k|              }
  751|  94.1k|          }),
  752|  94.1k|          m_storage(std::addressof(f))
  753|  94.1k|    {
  754|  94.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  94.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  94.1k|              else {
  749|  94.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.1k|              }
  751|  94.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  94.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  94.1k|        else if constexpr (std::is_object_v<T>) {
  688|  94.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  94.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  94.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  94.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  94.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  94.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  94.1k|        {
  662|  94.1k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   306k|{
 5835|   306k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.20k, False: 302k]
  |  |  ------------------
  ------------------
 5836|  4.20k|        return unexpected(e);
 5837|  4.20k|    }
 5838|       |
 5839|   302k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 302k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   302k|    return skip_classic_whitespace(range);
 5844|   302k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  97.7k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  97.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  97.7k|            auto rd = make_reader<T, char_type>();
 5920|  97.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 97.7k, False: 0]
  ------------------
 5921|  97.7k|                return impl(rd, range, value);
 5922|  97.7k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  97.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  97.7k|    {
 5903|  97.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  97.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  97.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  97.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  97.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.42k, False: 96.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.42k|    }                                                  \
  |  |  |  | 3939|  97.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  96.3k|                        .transform_error(make_eof_scan_error));
 5905|  96.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  97.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  96.3k|    {
 4185|  96.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  96.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  96.3k|        float_reader<CharT> rd{};
 4188|  96.3k|        return read_impl<Range>(
 4189|  96.3k|            range, rd,
 4190|  96.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  96.3k|                return r.read_source(SCN_FWD(args)...);
 4192|  96.3k|            },
 4193|  96.3k|            value);
 4194|  96.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  96.3k|        : m_fptr([](storage fn,
  743|  96.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.3k|              cvref<T> obj = *get<T>(fn);
  745|  96.3k|              if constexpr (std::is_void_v<R>) {
  746|  96.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  96.3k|              }
  748|  96.3k|              else {
  749|  96.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.3k|              }
  751|  96.3k|          }),
  752|  96.3k|          m_storage(std::addressof(f))
  753|  96.3k|    {
  754|  96.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  96.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  96.3k|              else {
  749|  96.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.3k|              }
  751|  96.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  96.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  96.3k|        else if constexpr (std::is_object_v<T>) {
  688|  96.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  96.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  96.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  96.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  96.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  96.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  96.3k|        {
  662|  96.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|   103k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   103k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   103k|            auto rd = make_reader<T, char_type>();
 5920|   103k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 103k, False: 0]
  ------------------
 5921|   103k|                return impl(rd, range, value);
 5922|   103k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   103k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|   103k|    {
 5903|   103k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.61k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.61k|    }                                                  \
  |  |  |  | 3939|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   102k|                        .transform_error(make_eof_scan_error));
 5905|   102k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   103k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|   102k|    {
 4185|   102k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   102k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|   102k|        float_reader<CharT> rd{};
 4188|   102k|        return read_impl<Range>(
 4189|   102k|            range, rd,
 4190|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   102k|                return r.read_source(SCN_FWD(args)...);
 4192|   102k|            },
 4193|   102k|            value);
 4194|   102k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   102k|        : m_fptr([](storage fn,
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
  752|   102k|          m_storage(std::addressof(f))
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   102k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  688|   102k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   102k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   102k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|   102k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   102k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|   104k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   104k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   104k|            auto rd = make_reader<T, char_type>();
 5920|   104k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 104k, False: 0]
  ------------------
 5921|   104k|                return impl(rd, range, value);
 5922|   104k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   104k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|   104k|    {
 5903|   104k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.73k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.73k|    }                                                  \
  |  |  |  | 3939|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   103k|                        .transform_error(make_eof_scan_error));
 5905|   103k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   104k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|   103k|    {
 4185|   103k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|   103k|        float_reader<CharT> rd{};
 4188|   103k|        return read_impl<Range>(
 4189|   103k|            range, rd,
 4190|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   103k|                return r.read_source(SCN_FWD(args)...);
 4192|   103k|            },
 4193|   103k|            value);
 4194|   103k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|   103k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|   669k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   669k|    static_cast<    \
  |  |  935|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   669k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   669k|          m_current(m_range.begin())
 2988|   669k|    {
 2989|   669k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|  1.26M|    {
 2998|  1.26M|        return m_range.end();
 2999|  1.26M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|   599k|    {
 3013|   599k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   599k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   599k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   599k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   599k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 599k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   599k|        }
 3019|   599k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   599k|    static_cast<    \
  |  |  935|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   599k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   669k|    {
 3003|   669k|        return ranges::subrange{begin(), end()};
 3004|   669k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   669k|    {
 6075|   669k|        const bool need_skipped_width =
 6076|   669k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 669k]
  |  Branch (6076:33): [True: 0, False: 669k]
  ------------------
 6077|   669k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   669k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 669k]
  ------------------
 6081|   669k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 669k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   669k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 669k, False: 0]
  |  Branch (6085:56): [True: 669k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   669k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 669k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.32M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   669k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   669k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   669k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.4k, False: 658k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.4k|    }                                                  \
  |  |  |  | 3939|   669k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   658k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.32M|                            make_eof_scan_error));
 6096|       |
 6097|  1.32M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 658k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   658k|            return result_type{it, 0};
 6105|  1.32M|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   669k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   589k|    {
 6117|   589k|        const bool need_skipped_width =
 6118|   589k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 589k]
  |  Branch (6118:33): [True: 0, False: 589k]
  ------------------
 6119|   589k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   589k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 589k]
  ------------------
 6122|   589k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 589k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   589k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 589k, False: 0]
  ------------------
 6131|   589k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 589k]
  ------------------
 6132|   589k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   589k|        return result_type{rng.begin(), 0};
 6156|   589k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6226|   217k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   217k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   217k|            auto rd = make_reader<T, char_type>();
 6232|   217k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   217k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 217k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   217k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   217k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   217k|    {
 6162|   217k|        const bool need_skipped_width =
 6163|   217k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 217k]
  |  Branch (6163:33): [True: 0, False: 217k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   217k|        auto it = rng.begin();
 6167|   217k|        std::ptrdiff_t prefix_width = 0;
 6168|   217k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 217k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   217k|        else {
 6176|   217k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.49k, False: 214k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.49k|    }                                                  \
  |  |  |  | 3939|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   214k|            std::tie(it, prefix_width) = prefix_result;
 6178|   214k|        }
 6179|   214k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   214k|        std::ptrdiff_t value_width = 0;
 6183|   214k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 214k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   214k|        else {
 6199|   214k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.8k, False: 194k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.8k|    }                                                  \
  |  | 3939|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   194k|                                             specs, value, loc));
 6201|       |
 6202|   194k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 194k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   194k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   194k|        std::ptrdiff_t postfix_width = 0;
 6211|   194k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 191k, False: 3.07k]
  ------------------
 6212|   191k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 191k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   191k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   191k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   191k|                                 value_width));
 6216|   191k|            std::tie(it, postfix_width) = postfix_result;
 6217|   191k|        }
 6218|       |
 6219|   194k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   194k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 194k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   194k|            specs, prefix_width, value_width, postfix_width));
 6221|   194k|        return it;
 6222|   194k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|   225k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   225k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   225k|            auto rd = make_reader<T, char_type>();
 6232|   225k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   225k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   225k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   225k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   225k|    {
 6162|   225k|        const bool need_skipped_width =
 6163|   225k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 225k]
  |  Branch (6163:33): [True: 0, False: 225k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   225k|        auto it = rng.begin();
 6167|   225k|        std::ptrdiff_t prefix_width = 0;
 6168|   225k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 225k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   225k|        else {
 6176|   225k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.84k, False: 221k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.84k|    }                                                  \
  |  |  |  | 3939|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   221k|            std::tie(it, prefix_width) = prefix_result;
 6178|   221k|        }
 6179|   221k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   221k|        std::ptrdiff_t value_width = 0;
 6183|   221k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 221k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   221k|        else {
 6199|   221k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.4k, False: 201k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.4k|    }                                                  \
  |  | 3939|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   201k|                                             specs, value, loc));
 6201|       |
 6202|   201k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 201k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   201k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   201k|        std::ptrdiff_t postfix_width = 0;
 6211|   201k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 198k, False: 3.38k]
  ------------------
 6212|   198k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   198k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   198k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   198k|                                 value_width));
 6216|   198k|            std::tie(it, postfix_width) = postfix_result;
 6217|   198k|        }
 6218|       |
 6219|   201k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   201k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 201k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   201k|            specs, prefix_width, value_width, postfix_width));
 6221|   201k|        return it;
 6222|   201k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6226|   227k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   227k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   227k|            auto rd = make_reader<T, char_type>();
 6232|   227k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   227k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 227k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   227k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   227k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   227k|    {
 6162|   227k|        const bool need_skipped_width =
 6163|   227k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 227k]
  |  Branch (6163:33): [True: 0, False: 227k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   227k|        auto it = rng.begin();
 6167|   227k|        std::ptrdiff_t prefix_width = 0;
 6168|   227k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 227k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   227k|        else {
 6176|   227k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.08k, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.08k|    }                                                  \
  |  |  |  | 3939|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   223k|            std::tie(it, prefix_width) = prefix_result;
 6178|   223k|        }
 6179|   223k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   223k|        std::ptrdiff_t value_width = 0;
 6183|   223k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 223k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   223k|        else {
 6199|   223k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.2k, False: 204k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.2k|    }                                                  \
  |  | 3939|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   204k|                                             specs, value, loc));
 6201|       |
 6202|   204k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 204k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   204k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   204k|        std::ptrdiff_t postfix_width = 0;
 6211|   204k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 200k, False: 3.60k]
  ------------------
 6212|   200k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   200k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   200k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   200k|                                 value_width));
 6216|   200k|            std::tie(it, postfix_width) = postfix_result;
 6217|   200k|        }
 6218|       |
 6219|   204k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   204k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 204k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   204k|            specs, prefix_width, value_width, postfix_width));
 6221|   204k|        return it;
 6222|   204k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   167k|{
 5835|   167k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 579, False: 166k]
  |  |  ------------------
  ------------------
 5836|    579|        return unexpected(e);
 5837|    579|    }
 5838|       |
 5839|   166k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 166k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   166k|    return skip_classic_whitespace(range);
 5844|   166k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5910|  47.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  47.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  47.6k|            auto rd = make_reader<T, char_type>();
 5916|  47.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  47.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  47.6k|    {
 5903|  47.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 327, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    327|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    327|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    327|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    327|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    327|    }                                                  \
  |  |  |  | 3939|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  47.2k|                        .transform_error(make_eof_scan_error));
 5905|  47.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  47.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  47.2k|    {
 4185|  47.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  47.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  47.2k|        float_reader<CharT> rd{};
 4188|  47.2k|        return read_impl<Range>(
 4189|  47.2k|            range, rd,
 4190|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.2k|                return r.read_source(SCN_FWD(args)...);
 4192|  47.2k|            },
 4193|  47.2k|            value);
 4194|  47.2k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3699|   331k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  47.2k|        : m_fptr([](storage fn,
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|  47.2k|              if constexpr (std::is_void_v<R>) {
  746|  47.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.2k|              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
  752|  47.2k|          m_storage(std::addressof(f))
  753|  47.2k|    {
  754|  47.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.2k|        else if constexpr (std::is_object_v<T>) {
  688|  47.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  47.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  47.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  47.2k|        {
  662|  47.2k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  58.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  58.8k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  58.8k|            auto rd = make_reader<T, char_type>();
 5916|  58.8k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  58.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  58.8k|    {
 5903|  58.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  58.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 378, False: 58.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    378|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    378|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    378|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    378|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    378|    }                                                  \
  |  |  |  | 3939|  58.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  58.4k|                        .transform_error(make_eof_scan_error));
 5905|  58.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  58.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  58.4k|    {
 4185|  58.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  58.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  58.4k|        float_reader<CharT> rd{};
 4188|  58.4k|        return read_impl<Range>(
 4189|  58.4k|            range, rd,
 4190|  58.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  58.4k|                return r.read_source(SCN_FWD(args)...);
 4192|  58.4k|            },
 4193|  58.4k|            value);
 4194|  58.4k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  58.4k|        : m_fptr([](storage fn,
  743|  58.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.4k|              cvref<T> obj = *get<T>(fn);
  745|  58.4k|              if constexpr (std::is_void_v<R>) {
  746|  58.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.4k|              }
  748|  58.4k|              else {
  749|  58.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.4k|              }
  751|  58.4k|          }),
  752|  58.4k|          m_storage(std::addressof(f))
  753|  58.4k|    {
  754|  58.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  58.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.4k|              else {
  749|  58.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.4k|              }
  751|  58.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  58.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.4k|        else if constexpr (std::is_object_v<T>) {
  688|  58.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  58.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  58.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  58.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  58.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  58.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  58.4k|        {
  662|  58.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5910|  60.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  60.5k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  60.5k|            auto rd = make_reader<T, char_type>();
 5916|  60.5k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  60.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  60.5k|    {
 5903|  60.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 423, False: 60.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    423|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    423|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    423|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    423|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    423|    }                                                  \
  |  |  |  | 3939|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  60.1k|                        .transform_error(make_eof_scan_error));
 5905|  60.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  60.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  60.1k|    {
 4185|  60.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  60.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  60.1k|        float_reader<CharT> rd{};
 4188|  60.1k|        return read_impl<Range>(
 4189|  60.1k|            range, rd,
 4190|  60.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  60.1k|                return r.read_source(SCN_FWD(args)...);
 4192|  60.1k|            },
 4193|  60.1k|            value);
 4194|  60.1k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  60.1k|        : m_fptr([](storage fn,
  743|  60.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.1k|              cvref<T> obj = *get<T>(fn);
  745|  60.1k|              if constexpr (std::is_void_v<R>) {
  746|  60.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.1k|              }
  748|  60.1k|              else {
  749|  60.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.1k|              }
  751|  60.1k|          }),
  752|  60.1k|          m_storage(std::addressof(f))
  753|  60.1k|    {
  754|  60.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  60.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.1k|              else {
  749|  60.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.1k|              }
  751|  60.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  60.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.1k|        else if constexpr (std::is_object_v<T>) {
  688|  60.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  60.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  60.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  60.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  60.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.1k|        {
  662|  60.1k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   452k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   452k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   452k|          m_current(m_range.begin())
 2988|   452k|    {
 2989|   452k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   764k|    {
 2998|   764k|        return m_range.end();
 2999|   764k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   312k|    {
 3013|   312k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   312k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   312k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   312k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   312k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 312k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   312k|        }
 3019|   312k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   312k|    static_cast<    \
  |  |  935|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   312k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   452k|    {
 3003|   452k|        return ranges::subrange{begin(), end()};
 3004|   452k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   452k|    {
 6075|   452k|        const bool need_skipped_width =
 6076|   452k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 452k]
  |  Branch (6076:33): [True: 0, False: 452k]
  ------------------
 6077|   452k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   452k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 452k]
  ------------------
 6081|   452k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 452k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   452k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 452k, False: 0]
  |  Branch (6085:56): [True: 452k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   452k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 452k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   901k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   452k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   452k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   452k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.24k, False: 449k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.24k|    }                                                  \
  |  |  |  | 3939|   452k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   901k|                            make_eof_scan_error));
 6096|       |
 6097|   901k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 449k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   449k|            return result_type{it, 0};
 6105|   901k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   452k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   310k|    {
 6117|   310k|        const bool need_skipped_width =
 6118|   310k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 310k]
  |  Branch (6118:33): [True: 0, False: 310k]
  ------------------
 6119|   310k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   310k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 310k]
  ------------------
 6122|   310k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 310k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   310k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 310k, False: 0]
  ------------------
 6131|   310k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 310k]
  ------------------
 6132|   310k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   310k|        return result_type{rng.begin(), 0};
 6156|   310k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6226|   139k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   139k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   139k|            auto rd = make_reader<T, char_type>();
 6232|   139k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   139k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 139k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   139k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   139k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   139k|    {
 6162|   139k|        const bool need_skipped_width =
 6163|   139k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 139k]
  |  Branch (6163:33): [True: 0, False: 139k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   139k|        auto it = rng.begin();
 6167|   139k|        std::ptrdiff_t prefix_width = 0;
 6168|   139k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 139k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   139k|        else {
 6176|   139k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.00k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.00k|    }                                                  \
  |  |  |  | 3939|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   138k|            std::tie(it, prefix_width) = prefix_result;
 6178|   138k|        }
 6179|   138k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   138k|        std::ptrdiff_t value_width = 0;
 6183|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 138k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   138k|        else {
 6199|   138k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.6k, False: 93.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.6k|    }                                                  \
  |  | 3939|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  93.3k|                                             specs, value, loc));
 6201|       |
 6202|  93.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 93.3k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  93.3k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  93.3k|        std::ptrdiff_t postfix_width = 0;
 6211|  93.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 92.8k, False: 470]
  ------------------
 6212|  92.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  92.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  92.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  92.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 92.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  92.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  92.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  92.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  92.8k|                                 value_width));
 6216|  92.8k|            std::tie(it, postfix_width) = postfix_result;
 6217|  92.8k|        }
 6218|       |
 6219|  93.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  93.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 93.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  93.3k|            specs, prefix_width, value_width, postfix_width));
 6221|  93.3k|        return it;
 6222|  93.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|   154k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   154k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   154k|            auto rd = make_reader<T, char_type>();
 6232|   154k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   154k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 154k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   154k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   154k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   154k|    {
 6162|   154k|        const bool need_skipped_width =
 6163|   154k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 154k]
  |  Branch (6163:33): [True: 0, False: 154k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   154k|        auto it = rng.begin();
 6167|   154k|        std::ptrdiff_t prefix_width = 0;
 6168|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 154k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   154k|        else {
 6176|   154k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.08k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.08k|    }                                                  \
  |  |  |  | 3939|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   153k|            std::tie(it, prefix_width) = prefix_result;
 6178|   153k|        }
 6179|   153k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   153k|        std::ptrdiff_t value_width = 0;
 6183|   153k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 153k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   153k|        else {
 6199|   153k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.5k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.5k|    }                                                  \
  |  | 3939|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   108k|                                             specs, value, loc));
 6201|       |
 6202|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 108k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   108k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   108k|        std::ptrdiff_t postfix_width = 0;
 6211|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 107k, False: 518]
  ------------------
 6212|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   107k|                                 value_width));
 6216|   107k|            std::tie(it, postfix_width) = postfix_result;
 6217|   107k|        }
 6218|       |
 6219|   108k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   108k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   108k|            specs, prefix_width, value_width, postfix_width));
 6221|   108k|        return it;
 6222|   108k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6226|   157k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   157k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   157k|            auto rd = make_reader<T, char_type>();
 6232|   157k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   157k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 157k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   157k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   157k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   157k|    {
 6162|   157k|        const bool need_skipped_width =
 6163|   157k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 157k]
  |  Branch (6163:33): [True: 0, False: 157k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   157k|        auto it = rng.begin();
 6167|   157k|        std::ptrdiff_t prefix_width = 0;
 6168|   157k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 157k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   157k|        else {
 6176|   157k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.15k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.15k|    }                                                  \
  |  |  |  | 3939|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   156k|            std::tie(it, prefix_width) = prefix_result;
 6178|   156k|        }
 6179|   156k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   156k|        std::ptrdiff_t value_width = 0;
 6183|   156k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 156k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   156k|        else {
 6199|   156k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.5k, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.5k|    }                                                  \
  |  | 3939|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   110k|                                             specs, value, loc));
 6201|       |
 6202|   110k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 110k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   110k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   110k|        std::ptrdiff_t postfix_width = 0;
 6211|   110k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 110k, False: 566]
  ------------------
 6212|   110k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   110k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   110k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   110k|                                 value_width));
 6216|   110k|            std::tie(it, postfix_width) = postfix_result;
 6217|   110k|        }
 6218|       |
 6219|   110k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   110k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   110k|            specs, prefix_width, value_width, postfix_width));
 6221|   110k|        return it;
 6222|   110k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   166k|{
 5835|   166k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 579, False: 166k]
  |  |  ------------------
  ------------------
 5836|    579|        return unexpected(e);
 5837|    579|    }
 5838|       |
 5839|   166k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 166k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   166k|    return skip_classic_whitespace(range);
 5844|   166k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  47.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  47.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  47.5k|            auto rd = make_reader<T, char_type>();
 5920|  47.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 47.5k, False: 0]
  ------------------
 5921|  47.5k|                return impl(rd, range, value);
 5922|  47.5k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  47.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  47.5k|    {
 5903|  47.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 327, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    327|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    327|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    327|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    327|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    327|    }                                                  \
  |  |  |  | 3939|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  47.2k|                        .transform_error(make_eof_scan_error));
 5905|  47.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  47.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  47.2k|    {
 4185|  47.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  47.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  47.2k|        float_reader<CharT> rd{};
 4188|  47.2k|        return read_impl<Range>(
 4189|  47.2k|            range, rd,
 4190|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.2k|                return r.read_source(SCN_FWD(args)...);
 4192|  47.2k|            },
 4193|  47.2k|            value);
 4194|  47.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  47.2k|        : m_fptr([](storage fn,
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|  47.2k|              if constexpr (std::is_void_v<R>) {
  746|  47.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.2k|              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
  752|  47.2k|          m_storage(std::addressof(f))
  753|  47.2k|    {
  754|  47.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.2k|        else if constexpr (std::is_object_v<T>) {
  688|  47.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  47.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  47.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  47.2k|        {
  662|  47.2k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  58.7k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  58.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  58.7k|            auto rd = make_reader<T, char_type>();
 5920|  58.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 58.7k, False: 0]
  ------------------
 5921|  58.7k|                return impl(rd, range, value);
 5922|  58.7k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  58.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  58.7k|    {
 5903|  58.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  58.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 378, False: 58.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    378|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    378|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    378|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    378|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    378|    }                                                  \
  |  |  |  | 3939|  58.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  58.4k|                        .transform_error(make_eof_scan_error));
 5905|  58.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  58.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  58.4k|    {
 4185|  58.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  58.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  58.4k|        float_reader<CharT> rd{};
 4188|  58.4k|        return read_impl<Range>(
 4189|  58.4k|            range, rd,
 4190|  58.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  58.4k|                return r.read_source(SCN_FWD(args)...);
 4192|  58.4k|            },
 4193|  58.4k|            value);
 4194|  58.4k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  58.4k|        : m_fptr([](storage fn,
  743|  58.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.4k|              cvref<T> obj = *get<T>(fn);
  745|  58.4k|              if constexpr (std::is_void_v<R>) {
  746|  58.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.4k|              }
  748|  58.4k|              else {
  749|  58.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.4k|              }
  751|  58.4k|          }),
  752|  58.4k|          m_storage(std::addressof(f))
  753|  58.4k|    {
  754|  58.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  58.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.4k|              else {
  749|  58.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.4k|              }
  751|  58.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  58.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.4k|        else if constexpr (std::is_object_v<T>) {
  688|  58.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  58.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  58.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  58.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  58.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  58.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  58.4k|        {
  662|  58.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  60.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  60.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  60.5k|            auto rd = make_reader<T, char_type>();
 5920|  60.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 60.5k, False: 0]
  ------------------
 5921|  60.5k|                return impl(rd, range, value);
 5922|  60.5k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  60.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  60.5k|    {
 5903|  60.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 423, False: 60.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    423|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    423|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    423|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    423|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    423|    }                                                  \
  |  |  |  | 3939|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  60.1k|                        .transform_error(make_eof_scan_error));
 5905|  60.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  60.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  60.1k|    {
 4185|  60.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  60.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  60.1k|        float_reader<CharT> rd{};
 4188|  60.1k|        return read_impl<Range>(
 4189|  60.1k|            range, rd,
 4190|  60.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  60.1k|                return r.read_source(SCN_FWD(args)...);
 4192|  60.1k|            },
 4193|  60.1k|            value);
 4194|  60.1k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  60.1k|        : m_fptr([](storage fn,
  743|  60.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.1k|              cvref<T> obj = *get<T>(fn);
  745|  60.1k|              if constexpr (std::is_void_v<R>) {
  746|  60.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.1k|              }
  748|  60.1k|              else {
  749|  60.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.1k|              }
  751|  60.1k|          }),
  752|  60.1k|          m_storage(std::addressof(f))
  753|  60.1k|    {
  754|  60.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  60.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.1k|              else {
  749|  60.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.1k|              }
  751|  60.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  60.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.1k|        else if constexpr (std::is_object_v<T>) {
  688|  60.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  60.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  60.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  60.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  60.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.1k|        {
  662|  60.1k|        }

LLVMFuzzerTestOneInput:
   54|  2.33k|{
   55|  2.33k|    scn::fuzz::run(data, size);
   56|  2.33k|    return 0;
   57|  2.33k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.33k|{
   33|  2.33k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.33k]
  |  Branch (33:35): [True: 0, False: 2.33k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.33k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.33k|    const auto& f =
   40|  2.33k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.33k|    do_basic_run(sv, f);
   42|       |
   43|  2.33k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.33k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.33k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.33k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.33k, False: 0]
  ------------------
   47|  2.33k|        do_basic_run(wsv_transcode, wf);
   48|  2.33k|    }
   49|  2.33k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.33k|{
   25|  2.33k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.33k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.33k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.33k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.33k|{
   25|  2.33k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.33k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.33k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.33k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.66k|{
   25|  4.66k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.66k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.66k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.66k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.66k|{
   25|  4.66k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.66k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.66k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.66k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  2.33k|{
   53|  2.33k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  2.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  2.33k|    string_buffer.resize(size);
   57|  2.33k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.33k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.33k|    const auto wsv_reinterpret_size =
   62|  2.33k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 67, False: 2.26k]
  ------------------
   63|  2.33k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.33k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  2.33k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.33k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  2.33k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  2.33k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  2.33k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.33k|{
  123|  2.33k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.33k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.33k|    buf.resize(sizeof...(Args));
  126|  2.33k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.33k|    return buf;
  128|  2.33k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  2.33k|{
  109|  2.33k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  2.33k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  2.33k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  2.33k|{
  186|  2.33k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  2.33k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  2.33k|                                   format_strings);
  189|  2.33k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.33k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.33k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   138k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   138k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   138k|            auto result = scn::scan<T>(
  140|   138k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   138k|                scn::runtime_format(f));
  142|   138k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 124k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   124k|            it = result->begin();
  146|   124k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.33k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   138k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   138k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   138k|            auto result = scn::scan<T>(
  155|   138k|                global_locale,
  156|   138k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   138k|                scn::runtime_format(f));
  158|   138k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 124k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   124k|            it = result->begin();
  162|   124k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.33k|    {
  167|  2.33k|        auto it = scn::ranges::begin(source);
  168|  29.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  29.9k|            auto result = scn::scan_value<T>(
  171|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  29.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.33k, False: 27.6k]
  ------------------
  173|  2.33k|                break;
  174|  2.33k|            }
  175|  27.6k|            it = result->begin();
  176|  27.6k|        }
  177|  2.33k|    }
  178|  2.33k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.33k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.33k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   143k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   143k|            auto result = scn::scan<T>(
  140|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   143k|                scn::runtime_format(f));
  142|   143k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 129k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   129k|            it = result->begin();
  146|   129k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.33k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   143k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   143k|            auto result = scn::scan<T>(
  155|   143k|                global_locale,
  156|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   143k|                scn::runtime_format(f));
  158|   143k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 129k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   129k|            it = result->begin();
  162|   129k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.33k|    {
  167|  2.33k|        auto it = scn::ranges::begin(source);
  168|  31.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  31.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  31.3k|            auto result = scn::scan_value<T>(
  171|  31.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  31.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.33k, False: 29.0k]
  ------------------
  173|  2.33k|                break;
  174|  2.33k|            }
  175|  29.0k|            it = result->begin();
  176|  29.0k|        }
  177|  2.33k|    }
  178|  2.33k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.33k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.33k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   145k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   145k|            auto result = scn::scan<T>(
  140|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   145k|                scn::runtime_format(f));
  142|   145k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 131k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   131k|            it = result->begin();
  146|   131k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.33k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   145k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   145k|            auto result = scn::scan<T>(
  155|   145k|                global_locale,
  156|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   145k|                scn::runtime_format(f));
  158|   145k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 131k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   131k|            it = result->begin();
  162|   131k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.33k|    {
  167|  2.33k|        auto it = scn::ranges::begin(source);
  168|  31.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  31.9k|            auto result = scn::scan_value<T>(
  171|  31.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  31.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.33k, False: 29.5k]
  ------------------
  173|  2.33k|                break;
  174|  2.33k|            }
  175|  29.5k|            it = result->begin();
  176|  29.5k|        }
  177|  2.33k|    }
  178|  2.33k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.33k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.33k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   159k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   159k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   159k|            auto result = scn::scan<T>(
  140|   159k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   159k|                scn::runtime_format(f));
  142|   159k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 145k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   145k|            it = result->begin();
  146|   145k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.33k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   159k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   159k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   159k|            auto result = scn::scan<T>(
  155|   159k|                global_locale,
  156|   159k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   159k|                scn::runtime_format(f));
  158|   159k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 145k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   145k|            it = result->begin();
  162|   145k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.33k|    {
  167|  2.33k|        auto it = scn::ranges::begin(source);
  168|  32.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  32.5k|            auto result = scn::scan_value<T>(
  171|  32.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  32.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.33k, False: 30.2k]
  ------------------
  173|  2.33k|                break;
  174|  2.33k|            }
  175|  30.2k|            it = result->begin();
  176|  30.2k|        }
  177|  2.33k|    }
  178|  2.33k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.33k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.33k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   168k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   168k|            auto result = scn::scan<T>(
  140|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   168k|                scn::runtime_format(f));
  142|   168k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 154k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   154k|            it = result->begin();
  146|   154k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.33k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   168k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   168k|            auto result = scn::scan<T>(
  155|   168k|                global_locale,
  156|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   168k|                scn::runtime_format(f));
  158|   168k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 154k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   154k|            it = result->begin();
  162|   154k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.33k|    {
  167|  2.33k|        auto it = scn::ranges::begin(source);
  168|  34.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  34.5k|            auto result = scn::scan_value<T>(
  171|  34.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  34.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.33k, False: 32.2k]
  ------------------
  173|  2.33k|                break;
  174|  2.33k|            }
  175|  32.2k|            it = result->begin();
  176|  32.2k|        }
  177|  2.33k|    }
  178|  2.33k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.33k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.33k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   169k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   169k|            auto result = scn::scan<T>(
  140|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   169k|                scn::runtime_format(f));
  142|   169k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 155k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   155k|            it = result->begin();
  146|   155k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.33k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   169k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   169k|            auto result = scn::scan<T>(
  155|   169k|                global_locale,
  156|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   169k|                scn::runtime_format(f));
  158|   169k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 155k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   155k|            it = result->begin();
  162|   155k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.33k|    {
  167|  2.33k|        auto it = scn::ranges::begin(source);
  168|  34.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  34.9k|            auto result = scn::scan_value<T>(
  171|  34.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  34.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.33k, False: 32.5k]
  ------------------
  173|  2.33k|                break;
  174|  2.33k|            }
  175|  32.5k|            it = result->begin();
  176|  32.5k|        }
  177|  2.33k|    }
  178|  2.33k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  2.33k|{
   91|  2.33k|    using char_type = ranges::range_value_t<Source>;
   92|  2.33k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  2.33k|    deque.clear();
   94|  2.33k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  2.33k|              std::back_inserter(deque));
   96|  2.33k|    return deque;
   97|  2.33k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  2.33k|{
   80|  2.33k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  2.33k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  2.33k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.33k|{
  123|  2.33k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.33k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.33k|    buf.resize(sizeof...(Args));
  126|  2.33k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.33k|    return buf;
  128|  2.33k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  2.33k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  2.33k|    else {
  113|  2.33k|        return wformat_string_view_buffer;
  114|  2.33k|    }
  115|  2.33k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  4.66k|{
  186|  4.66k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  4.66k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  4.66k|                                   format_strings);
  189|  4.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.66k|{
  134|       |    // Regular scan
  135|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.9k, False: 4.66k]
  ------------------
  136|  27.9k|        auto it = scn::ranges::begin(source);
  137|  85.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  85.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  85.8k|            auto result = scn::scan<T>(
  140|  85.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  85.8k|                scn::runtime_format(f));
  142|  85.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.9k, False: 57.8k]
  ------------------
  143|  27.9k|                break;
  144|  27.9k|            }
  145|  57.8k|            it = result->begin();
  146|  57.8k|        }
  147|  27.9k|    }
  148|       |
  149|       |    // scan localized
  150|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.9k, False: 4.66k]
  ------------------
  151|  27.9k|        auto it = scn::ranges::begin(source);
  152|  85.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  85.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  85.8k|            auto result = scn::scan<T>(
  155|  85.8k|                global_locale,
  156|  85.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  85.8k|                scn::runtime_format(f));
  158|  85.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.9k, False: 57.8k]
  ------------------
  159|  27.9k|                break;
  160|  27.9k|            }
  161|  57.8k|            it = result->begin();
  162|  57.8k|        }
  163|  27.9k|    }
  164|       |
  165|       |    // scan_value
  166|  4.66k|    {
  167|  4.66k|        auto it = scn::ranges::begin(source);
  168|  15.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.8k|            auto result = scn::scan_value<T>(
  171|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.66k, False: 11.2k]
  ------------------
  173|  4.66k|                break;
  174|  4.66k|            }
  175|  11.2k|            it = result->begin();
  176|  11.2k|        }
  177|  4.66k|    }
  178|  4.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.66k|{
  134|       |    // Regular scan
  135|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.9k, False: 4.66k]
  ------------------
  136|  27.9k|        auto it = scn::ranges::begin(source);
  137|  97.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  97.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  97.1k|            auto result = scn::scan<T>(
  140|  97.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  97.1k|                scn::runtime_format(f));
  142|  97.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.9k, False: 69.1k]
  ------------------
  143|  27.9k|                break;
  144|  27.9k|            }
  145|  69.1k|            it = result->begin();
  146|  69.1k|        }
  147|  27.9k|    }
  148|       |
  149|       |    // scan localized
  150|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.9k, False: 4.66k]
  ------------------
  151|  27.9k|        auto it = scn::ranges::begin(source);
  152|  97.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  97.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  97.1k|            auto result = scn::scan<T>(
  155|  97.1k|                global_locale,
  156|  97.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  97.1k|                scn::runtime_format(f));
  158|  97.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.9k, False: 69.1k]
  ------------------
  159|  27.9k|                break;
  160|  27.9k|            }
  161|  69.1k|            it = result->begin();
  162|  69.1k|        }
  163|  27.9k|    }
  164|       |
  165|       |    // scan_value
  166|  4.66k|    {
  167|  4.66k|        auto it = scn::ranges::begin(source);
  168|  19.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.6k|            auto result = scn::scan_value<T>(
  171|  19.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.66k, False: 14.9k]
  ------------------
  173|  4.66k|                break;
  174|  4.66k|            }
  175|  14.9k|            it = result->begin();
  176|  14.9k|        }
  177|  4.66k|    }
  178|  4.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.66k|{
  134|       |    // Regular scan
  135|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.9k, False: 4.66k]
  ------------------
  136|  27.9k|        auto it = scn::ranges::begin(source);
  137|  98.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  98.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  98.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  98.9k|            auto result = scn::scan<T>(
  140|  98.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  98.9k|                scn::runtime_format(f));
  142|  98.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.9k, False: 70.9k]
  ------------------
  143|  27.9k|                break;
  144|  27.9k|            }
  145|  70.9k|            it = result->begin();
  146|  70.9k|        }
  147|  27.9k|    }
  148|       |
  149|       |    // scan localized
  150|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.9k, False: 4.66k]
  ------------------
  151|  27.9k|        auto it = scn::ranges::begin(source);
  152|  98.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  98.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  98.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  98.9k|            auto result = scn::scan<T>(
  155|  98.9k|                global_locale,
  156|  98.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  98.9k|                scn::runtime_format(f));
  158|  98.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.9k, False: 70.9k]
  ------------------
  159|  27.9k|                break;
  160|  27.9k|            }
  161|  70.9k|            it = result->begin();
  162|  70.9k|        }
  163|  27.9k|    }
  164|       |
  165|       |    // scan_value
  166|  4.66k|    {
  167|  4.66k|        auto it = scn::ranges::begin(source);
  168|  20.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  20.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.1k|            auto result = scn::scan_value<T>(
  171|  20.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.66k, False: 15.5k]
  ------------------
  173|  4.66k|                break;
  174|  4.66k|            }
  175|  15.5k|            it = result->begin();
  176|  15.5k|        }
  177|  4.66k|    }
  178|  4.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.66k|{
  134|       |    // Regular scan
  135|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.9k, False: 4.66k]
  ------------------
  136|  27.9k|        auto it = scn::ranges::begin(source);
  137|  85.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  85.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  85.7k|            auto result = scn::scan<T>(
  140|  85.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  85.7k|                scn::runtime_format(f));
  142|  85.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.9k, False: 57.8k]
  ------------------
  143|  27.9k|                break;
  144|  27.9k|            }
  145|  57.8k|            it = result->begin();
  146|  57.8k|        }
  147|  27.9k|    }
  148|       |
  149|       |    // scan localized
  150|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.9k, False: 4.66k]
  ------------------
  151|  27.9k|        auto it = scn::ranges::begin(source);
  152|  85.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  85.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  85.7k|            auto result = scn::scan<T>(
  155|  85.7k|                global_locale,
  156|  85.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  85.7k|                scn::runtime_format(f));
  158|  85.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.9k, False: 57.8k]
  ------------------
  159|  27.9k|                break;
  160|  27.9k|            }
  161|  57.8k|            it = result->begin();
  162|  57.8k|        }
  163|  27.9k|    }
  164|       |
  165|       |    // scan_value
  166|  4.66k|    {
  167|  4.66k|        auto it = scn::ranges::begin(source);
  168|  15.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.8k|            auto result = scn::scan_value<T>(
  171|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.66k, False: 11.1k]
  ------------------
  173|  4.66k|                break;
  174|  4.66k|            }
  175|  11.1k|            it = result->begin();
  176|  11.1k|        }
  177|  4.66k|    }
  178|  4.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.66k|{
  134|       |    // Regular scan
  135|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.9k, False: 4.66k]
  ------------------
  136|  27.9k|        auto it = scn::ranges::begin(source);
  137|  97.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  97.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  97.0k|            auto result = scn::scan<T>(
  140|  97.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  97.0k|                scn::runtime_format(f));
  142|  97.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.9k, False: 69.0k]
  ------------------
  143|  27.9k|                break;
  144|  27.9k|            }
  145|  69.0k|            it = result->begin();
  146|  69.0k|        }
  147|  27.9k|    }
  148|       |
  149|       |    // scan localized
  150|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.9k, False: 4.66k]
  ------------------
  151|  27.9k|        auto it = scn::ranges::begin(source);
  152|  97.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  97.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  97.0k|            auto result = scn::scan<T>(
  155|  97.0k|                global_locale,
  156|  97.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  97.0k|                scn::runtime_format(f));
  158|  97.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.9k, False: 69.0k]
  ------------------
  159|  27.9k|                break;
  160|  27.9k|            }
  161|  69.0k|            it = result->begin();
  162|  69.0k|        }
  163|  27.9k|    }
  164|       |
  165|       |    // scan_value
  166|  4.66k|    {
  167|  4.66k|        auto it = scn::ranges::begin(source);
  168|  19.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.5k|            auto result = scn::scan_value<T>(
  171|  19.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.66k, False: 14.9k]
  ------------------
  173|  4.66k|                break;
  174|  4.66k|            }
  175|  14.9k|            it = result->begin();
  176|  14.9k|        }
  177|  4.66k|    }
  178|  4.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.66k|{
  134|       |    // Regular scan
  135|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.9k, False: 4.66k]
  ------------------
  136|  27.9k|        auto it = scn::ranges::begin(source);
  137|  98.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  98.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  98.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  98.8k|            auto result = scn::scan<T>(
  140|  98.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  98.8k|                scn::runtime_format(f));
  142|  98.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.9k, False: 70.8k]
  ------------------
  143|  27.9k|                break;
  144|  27.9k|            }
  145|  70.8k|            it = result->begin();
  146|  70.8k|        }
  147|  27.9k|    }
  148|       |
  149|       |    // scan localized
  150|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.9k, False: 4.66k]
  ------------------
  151|  27.9k|        auto it = scn::ranges::begin(source);
  152|  98.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  98.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  98.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  98.8k|            auto result = scn::scan<T>(
  155|  98.8k|                global_locale,
  156|  98.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  98.8k|                scn::runtime_format(f));
  158|  98.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.9k, False: 70.8k]
  ------------------
  159|  27.9k|                break;
  160|  27.9k|            }
  161|  70.8k|            it = result->begin();
  162|  70.8k|        }
  163|  27.9k|    }
  164|       |
  165|       |    // scan_value
  166|  4.66k|    {
  167|  4.66k|        auto it = scn::ranges::begin(source);
  168|  20.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  20.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.1k|            auto result = scn::scan_value<T>(
  171|  20.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.66k, False: 15.5k]
  ------------------
  173|  4.66k|                break;
  174|  4.66k|            }
  175|  15.5k|            it = result->begin();
  176|  15.5k|        }
  177|  4.66k|    }
  178|  4.66k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  4.66k|{
   91|  4.66k|    using char_type = ranges::range_value_t<Source>;
   92|  4.66k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  4.66k|    deque.clear();
   94|  4.66k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  4.66k|              std::back_inserter(deque));
   96|  4.66k|    return deque;
   97|  4.66k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  4.66k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  4.66k|    else {
   84|  4.66k|        return wnoncontiguous_buffer;
   85|  4.66k|    }
   86|  4.66k|}

