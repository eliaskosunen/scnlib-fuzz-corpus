_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   958k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   958k|  chars_format const fmt = options.format;
  277|   958k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   958k|  parsed_number_string_t<UC> answer;
  280|   958k|  answer.valid = false;
  281|   958k|  answer.too_many_digits = false;
  282|   958k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   958k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 958k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   958k|  UC const * const start_digits = p;
  303|       |
  304|   958k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  5.06M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 4.59M, False: 476k]
  |  Branch (306:25): [True: 4.11M, False: 482k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  4.11M|    i = 10 * i +
  310|  4.11M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  4.11M|    ++p;
  312|  4.11M|  }
  313|   958k|  UC const * const end_of_integer_part = p;
  314|   958k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   958k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   958k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   958k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 958k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   958k|  int64_t exponent = 0;
  324|   958k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 482k, False: 476k]
  |  Branch (324:49): [True: 179k, False: 302k]
  ------------------
  325|   958k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 179k, False: 779k]
  ------------------
  326|   179k|    ++p;
  327|   179k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   179k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   740k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 626k, False: 113k]
  |  Branch (332:27): [True: 560k, False: 66.2k]
  ------------------
  333|   560k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   560k|      ++p;
  335|   560k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   560k|    }
  337|   179k|    exponent = before - p;
  338|   179k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   179k|    digit_count -= exponent;
  340|   179k|  }
  341|   958k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   958k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 958k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   958k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 958k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   958k|  int64_t exp_number = 0;            // explicit exponential part
  351|   958k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 829k, False: 129k]
  ------------------
  352|   958k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 369k, False: 460k]
  ------------------
  353|   958k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 78.8k, False: 290k]
  |  Branch (353:29): [True: 50.3k, False: 240k]
  ------------------
  354|   958k|       ||
  355|   958k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   829k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 829k]
  ------------------
  356|   829k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   829k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   129k|    UC const * location_of_e = p;
  359|   129k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 78.8k, False: 50.3k]
  |  Branch (359:28): [True: 50.3k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   129k|      ++p;
  361|   129k|    }
  362|   129k|    bool neg_exp = false;
  363|   129k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 129k, False: 125]
  |  Branch (363:24): [True: 6.59k, False: 122k]
  ------------------
  364|  6.59k|      neg_exp = true;
  365|  6.59k|      ++p;
  366|   122k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 122k, False: 125]
  |  Branch (366:31): [True: 33.0k, False: 89.4k]
  ------------------
  367|  33.0k|      ++p;
  368|  33.0k|    }
  369|   129k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 175, False: 129k]
  |  Branch (369:24): [True: 500, False: 128k]
  ------------------
  370|    675|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 675]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    675|      p = location_of_e;
  376|   128k|    } else {
  377|   407k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 313k, False: 93.4k]
  |  Branch (377:29): [True: 278k, False: 35.0k]
  ------------------
  378|   278k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   278k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 252k, False: 26.0k]
  ------------------
  380|   252k|          exp_number = 10 * exp_number + digit;
  381|   252k|        }
  382|   278k|        ++p;
  383|   278k|      }
  384|   128k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 6.55k, False: 121k]
  ------------------
  385|   128k|      exponent += exp_number;
  386|   128k|    }
  387|   829k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   829k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 700k, False: 129k]
  |  Branch (389:44): [True: 0, False: 700k]
  ------------------
  390|   829k|  }
  391|   958k|  answer.lastmatch = p;
  392|   958k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   958k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 160k, False: 798k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   160k|    UC const * start = start_digits;
  405|   658k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 657k, False: 1.36k]
  |  Branch (405:32): [True: 490k, False: 166k]
  |  Branch (405:53): [True: 7.48k, False: 159k]
  ------------------
  406|   498k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 490k, False: 7.48k]
  ------------------
  407|   498k|      start++;
  408|   498k|    }
  409|       |
  410|   160k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 155k, False: 5.40k]
  ------------------
  411|   155k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   155k|      i = 0;
  416|   155k|      p = answer.integer.ptr;
  417|   155k|      UC const* int_end = p + answer.integer.len();
  418|   155k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.56M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.52M, False: 40.3k]
  |  Branch (419:54): [True: 1.40M, False: 114k]
  ------------------
  420|  1.40M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.40M|        ++p;
  422|  1.40M|      }
  423|   155k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 40.3k, False: 114k]
  ------------------
  424|  40.3k|        exponent = end_of_integer_part - p + exp_number;
  425|  40.3k|      }
  426|   114k|      else { // We have a value with a fractional component.
  427|   114k|        p = answer.fraction.ptr;
  428|   114k|        UC const* frac_end = p + answer.fraction.len();
  429|  2.03M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.91M, False: 114k]
  |  Branch (429:56): [True: 1.91M, False: 0]
  ------------------
  430|  1.91M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.91M|          ++p;
  432|  1.91M|        }
  433|   114k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   114k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   155k|    }
  437|   160k|  }
  438|   958k|  answer.exponent = exponent;
  439|   958k|  answer.mantissa = i;
  440|   958k|  return answer;
  441|   958k|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  5.66M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  5.66M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 148k, False: 5.51M]
  |  Branch (36:27): [True: 435k, False: 5.07M]
  ------------------
   37|  5.66M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   179k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   653k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 526k, False: 126k]
  |  Branch (249:43): [True: 473k, False: 53.4k]
  ------------------
  250|   473k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   473k|    p += 8;
  252|   473k|  }
  253|   179k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   526k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   526k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   526k|     0x8080808080808080));
  172|   526k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.20M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.20M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.20M|  uint64_t val;
   63|  1.20M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.20M|  return val;
   69|  1.20M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   675k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   675k|  const uint64_t mask = 0x000000FF000000FF;
  148|   675k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   675k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   675k|  val -= 0x3030303030303030;
  151|   675k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   675k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   675k|  return uint32_t(val);
  154|   675k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   202k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   202k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   202k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   202k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   202k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   295k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   295k|  chars_format const fmt = options.format;
  277|   295k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   295k|  parsed_number_string_t<UC> answer;
  280|   295k|  answer.valid = false;
  281|   295k|  answer.too_many_digits = false;
  282|   295k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   295k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 295k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   295k|  UC const * const start_digits = p;
  303|       |
  304|   295k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   621k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 416k, False: 205k]
  |  Branch (306:25): [True: 326k, False: 90.3k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   326k|    i = 10 * i +
  310|   326k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   326k|    ++p;
  312|   326k|  }
  313|   295k|  UC const * const end_of_integer_part = p;
  314|   295k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   295k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   295k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   295k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 295k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   295k|  int64_t exponent = 0;
  324|   295k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 90.3k, False: 205k]
  |  Branch (324:49): [True: 892, False: 89.4k]
  ------------------
  325|   295k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 892, False: 294k]
  ------------------
  326|    892|    ++p;
  327|    892|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|    892|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  3.13k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 2.48k, False: 656]
  |  Branch (332:27): [True: 2.24k, False: 236]
  ------------------
  333|  2.24k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  2.24k|      ++p;
  335|  2.24k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  2.24k|    }
  337|    892|    exponent = before - p;
  338|    892|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|    892|    digit_count -= exponent;
  340|    892|  }
  341|   295k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   295k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 295k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   295k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 295k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   295k|  int64_t exp_number = 0;            // explicit exponential part
  351|   295k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 234k, False: 61.2k]
  ------------------
  352|   295k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 89.7k, False: 144k]
  ------------------
  353|   295k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 179, False: 89.5k]
  |  Branch (353:29): [True: 9.38k, False: 80.1k]
  ------------------
  354|   295k|       ||
  355|   295k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   285k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 285k]
  ------------------
  356|   285k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   285k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  9.56k|    UC const * location_of_e = p;
  359|  9.56k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 179, False: 9.38k]
  |  Branch (359:28): [True: 9.38k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  9.56k|      ++p;
  361|  9.56k|    }
  362|  9.56k|    bool neg_exp = false;
  363|  9.56k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 9.54k, False: 20]
  |  Branch (363:24): [True: 2.05k, False: 7.48k]
  ------------------
  364|  2.05k|      neg_exp = true;
  365|  2.05k|      ++p;
  366|  7.50k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 7.48k, False: 20]
  |  Branch (366:31): [True: 199, False: 7.28k]
  ------------------
  367|    199|      ++p;
  368|    199|    }
  369|  9.56k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 30, False: 9.53k]
  |  Branch (369:24): [True: 360, False: 9.17k]
  ------------------
  370|    390|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 390]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    390|      p = location_of_e;
  376|  9.17k|    } else {
  377|  33.5k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 27.0k, False: 6.41k]
  |  Branch (377:29): [True: 24.3k, False: 2.75k]
  ------------------
  378|  24.3k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  24.3k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 23.2k, False: 1.10k]
  ------------------
  380|  23.2k|          exp_number = 10 * exp_number + digit;
  381|  23.2k|        }
  382|  24.3k|        ++p;
  383|  24.3k|      }
  384|  9.17k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 2.02k, False: 7.14k]
  ------------------
  385|  9.17k|      exponent += exp_number;
  386|  9.17k|    }
  387|   285k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   285k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 224k, False: 61.2k]
  |  Branch (389:44): [True: 0, False: 224k]
  ------------------
  390|   285k|  }
  391|   295k|  answer.lastmatch = p;
  392|   295k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   295k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 252, False: 295k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|    252|    UC const * start = start_digits;
  405|    288|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 288, False: 0]
  |  Branch (405:32): [True: 36, False: 252]
  |  Branch (405:53): [True: 0, False: 252]
  ------------------
  406|     36|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 36, False: 0]
  ------------------
  407|     36|      start++;
  408|     36|    }
  409|       |
  410|    252|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 216, False: 36]
  ------------------
  411|    216|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|    216|      i = 0;
  416|    216|      p = answer.integer.ptr;
  417|    216|      UC const* int_end = p + answer.integer.len();
  418|    216|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  3.63k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.49k, False: 144]
  |  Branch (419:54): [True: 3.42k, False: 72]
  ------------------
  420|  3.42k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.42k|        ++p;
  422|  3.42k|      }
  423|    216|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 144, False: 72]
  ------------------
  424|    144|        exponent = end_of_integer_part - p + exp_number;
  425|    144|      }
  426|     72|      else { // We have a value with a fractional component.
  427|     72|        p = answer.fraction.ptr;
  428|     72|        UC const* frac_end = p + answer.fraction.len();
  429|    756|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 684, False: 72]
  |  Branch (429:56): [True: 684, False: 0]
  ------------------
  430|    684|          i = i * 10 + uint64_t(*p - UC('0'));
  431|    684|          ++p;
  432|    684|        }
  433|     72|        exponent = answer.fraction.ptr - p + exp_number;
  434|     72|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|    216|    }
  437|    252|  }
  438|   295k|  answer.exponent = exponent;
  439|   295k|  answer.mantissa = i;
  440|   295k|  return answer;
  441|   295k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   455k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   455k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 92.2k, False: 363k]
  |  Branch (36:27): [True: 1.52k, False: 362k]
  ------------------
   37|   455k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|    892|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|    892|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|    892|    return;
  240|    892|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|  54.2k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   116k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   182k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   182k|    return small_mul(vec, y);
  565|   182k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   267k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   267k|  limb carry = 0;
  284|  1.05M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 787k, False: 267k]
  ------------------
  285|   787k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   787k|  }
  287|   267k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 153k, False: 113k]
  ------------------
  288|   153k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   153k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
  289|   153k|  }
  290|   267k|  return true;
  291|   267k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.03M|  constexpr size_t len() const noexcept {
   77|  2.03M|    return length;
   78|  2.03M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   787k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   787k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   787k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   787k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   787k|  carry = limb(z >> limb_bits);
  235|   787k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   787k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.17M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.17M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.17M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.17M|    return data[index];
   60|  2.17M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   219k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   219k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 219k, False: 0]
  ------------------
   93|   219k|      push_unchecked(value);
   94|   219k|      return true;
   95|   219k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   219k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   251k|  constexpr size_t capacity() const noexcept {
   83|   251k|    return size;
   84|   251k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   268k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   268k|    data[length] = value;
   88|   268k|    length++;
   89|   268k|  }
_ZN10fast_float6bigint3addEm:
  567|   182k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   182k|    return small_add(vec, y);
  569|   182k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   182k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   182k|  return small_add_from(vec, y, 0);
  277|   182k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   182k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   182k|  size_t index = start;
  259|   182k|  limb carry = y;
  260|   182k|  bool overflow;
  261|   278k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 150k, False: 128k]
  |  Branch (261:24): [True: 96.3k, False: 54.2k]
  ------------------
  262|  96.3k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|  96.3k|    carry = limb(overflow);
  264|  96.3k|    index += 1;
  265|  96.3k|  }
  266|   182k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 54.2k, False: 128k]
  ------------------
  267|  54.2k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  54.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 54.2k]
  |  |  ------------------
  ------------------
  268|  54.2k|  }
  269|   182k|  return true;
  270|   182k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   221k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   221k|  limb z;
  211|       |// gcc and clang
  212|   221k|#if defined(__has_builtin)
  213|   221k|  #if __has_builtin(__builtin_add_overflow)
  214|   221k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   221k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   221k|      return z;
  217|   221k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   221k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  4.30k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  4.30k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  4.30k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 4.30k]
  |  |  ------------------
  ------------------
  611|  4.30k|    return pow2(exp);
  612|  4.30k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  54.2k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  54.2k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  54.2k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  57.2k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.03k, False: 54.2k]
  ------------------
  582|  3.03k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.03k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.03k]
  |  |  ------------------
  ------------------
  583|  3.03k|      exp -= large_step;
  584|  3.03k|    }
  585|  54.2k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  54.2k|    uint32_t small_step = 27;
  587|  54.2k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  77.1k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 22.8k, False: 54.2k]
  ------------------
  593|  22.8k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  22.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 22.8k]
  |  |  ------------------
  ------------------
  594|  22.8k|      exp -= small_step;
  595|  22.8k|    }
  596|  54.2k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 46.9k, False: 7.31k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  46.9k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  46.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 46.9k]
  |  |  ------------------
  ------------------
  601|  46.9k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  46.9k|      );
  603|  46.9k|    }
  604|       |
  605|  54.2k|    return true;
  606|  54.2k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.03k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.03k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.03k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.03k|  } else {
  368|  3.03k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.03k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.03k]
  |  |  ------------------
  ------------------
  369|  3.03k|  }
  370|  3.03k|  return true;
  371|  3.03k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.03k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.03k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.03k|  stackvec<size> z(xs);
  338|  3.03k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.03k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.03k, False: 0]
  ------------------
  341|  3.03k|    limb y0 = y[0];
  342|  3.03k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.03k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.03k]
  |  |  ------------------
  ------------------
  343|  15.1k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 12.1k, False: 3.03k]
  ------------------
  344|  12.1k|      limb yi = y[index];
  345|  12.1k|      stackvec<size> zi;
  346|  12.1k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 12.1k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  12.1k|        zi.set_len(0);
  349|  12.1k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  12.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
  350|  12.1k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  12.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
  351|  12.1k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  12.1k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  12.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
  353|  12.1k|      }
  354|  12.1k|    }
  355|  3.03k|  }
  356|       |
  357|  3.03k|  x.normalize();
  358|  3.03k|  return true;
  359|  3.03k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.03k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.03k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.03k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.03k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  45.0k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  45.0k|    length = uint16_t(len);
   75|  45.0k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  15.1k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  15.1k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 15.1k, False: 0]
  ------------------
  108|  15.1k|      extend_unchecked(s);
  109|  15.1k|      return true;
  110|  15.1k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  15.1k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  15.1k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  15.1k|    limb* ptr = data + length;
  102|  15.1k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  15.1k|    set_len(len() + s.len());
  104|  15.1k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  12.1k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  12.1k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 12.1k]
  |  Branch (300:26): [True: 11.9k, False: 182]
  ------------------
  301|  11.9k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  11.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
  302|  11.9k|  }
  303|       |
  304|  12.1k|  bool carry = false;
  305|   102k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 90.4k, False: 12.1k]
  ------------------
  306|  90.4k|    limb xi = x[index + start];
  307|  90.4k|    limb yi = y[index];
  308|  90.4k|    bool c1 = false;
  309|  90.4k|    bool c2 = false;
  310|  90.4k|    xi = scalar_add(xi, yi, c1);
  311|  90.4k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 34.4k, False: 55.9k]
  ------------------
  312|  34.4k|      xi = scalar_add(xi, 1, c2);
  313|  34.4k|    }
  314|  90.4k|    x[index + start] = xi;
  315|  90.4k|    carry = c1 | c2;
  316|  90.4k|  }
  317|       |
  318|       |  // handle overflow
  319|  12.1k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 12.1k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  12.1k|  return true;
  323|  12.1k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  11.9k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  11.9k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 11.9k]
  ------------------
  132|      0|      return false;
  133|  11.9k|    } else {
  134|  11.9k|      resize_unchecked(new_len, value);
  135|  11.9k|      return true;
  136|  11.9k|    }
  137|  11.9k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  11.9k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  11.9k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 11.9k, False: 0]
  ------------------
  120|  11.9k|      size_t count = new_len - len();
  121|  11.9k|      limb* first = data + len();
  122|  11.9k|      limb* last = first + count;
  123|  11.9k|      ::std::fill(first, last, value);
  124|  11.9k|      set_len(new_len);
  125|  11.9k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  11.9k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  52.9k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  52.9k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 52.9k, False: 0]
  |  Branch (152:25): [True: 0, False: 52.9k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  52.9k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  65.1k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  65.1k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  65.1k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  65.1k|    size_t rindex = length - index - 1;
   69|  65.1k|    return data[rindex];
   70|  65.1k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  54.1k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  54.1k|    return shl(exp);
  574|  54.1k|  }
_ZN10fast_float6bigint3shlEm:
  530|  54.1k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  54.1k|    size_t rem = n % limb_bits;
  532|  54.1k|    size_t div = n / limb_bits;
  533|  54.1k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 49.9k, False: 4.21k]
  ------------------
  534|  49.9k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  49.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 49.9k]
  |  |  ------------------
  ------------------
  535|  49.9k|    }
  536|  54.1k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 5.84k, False: 48.3k]
  ------------------
  537|  5.84k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  5.84k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 5.84k]
  |  |  ------------------
  ------------------
  538|  5.84k|    }
  539|  54.1k|    return true;
  540|  54.1k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  49.9k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  49.9k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  49.9k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  49.9k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  49.9k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  49.9k|    size_t shl = n;
  493|  49.9k|    size_t shr = limb_bits - shl;
  494|  49.9k|    limb prev = 0;
  495|   163k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 113k, False: 49.9k]
  ------------------
  496|   113k|      limb xi = vec[index];
  497|   113k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   113k|      prev = xi;
  499|   113k|    }
  500|       |
  501|  49.9k|    limb carry = prev >> shr;
  502|  49.9k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 11.0k, False: 38.9k]
  ------------------
  503|  11.0k|      return vec.try_push(carry);
  504|  11.0k|    }
  505|  38.9k|    return true;
  506|  49.9k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  5.84k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  5.84k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  5.84k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  5.84k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 5.84k]
  ------------------
  512|      0|      return false;
  513|  5.84k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 5.84k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  5.84k|      limb* dst = vec.data + n;
  516|  5.84k|      const limb* src = vec.data;
  517|  5.84k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  5.84k|      limb* first = vec.data;
  520|  5.84k|      limb* last = first + n;
  521|  5.84k|      ::std::fill(first, last, 0);
  522|  5.84k|      vec.set_len(n + vec.len());
  523|  5.84k|      return true;
  524|  5.84k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  5.84k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  10.1k|  constexpr bool is_empty() const noexcept {
   80|  10.1k|    return length == 0;
   81|  10.1k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  4.30k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  4.30k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  4.30k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 4.30k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  4.30k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.22k, False: 3.08k]
  ------------------
  435|  1.22k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  3.08k|    } else {
  437|  3.08k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  3.08k|      truncated |= vec.nonzero(2);
  439|  3.08k|      return result;
  440|  3.08k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  4.30k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.22k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.22k|  truncated = false;
  167|  1.22k|  int shl = leading_zeroes(r0);
  168|  1.22k|  return r0 << shl;
  169|  1.22k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  3.08k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  3.08k|  int shl = leading_zeroes(r0);
  174|  3.08k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 3.04k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  3.04k|  } else {
  178|  3.04k|    int shr = 64 - shl;
  179|  3.04k|    truncated = (r1 << shl) != 0;
  180|  3.04k|    return (r0 << shl) | (r1 >> shr);
  181|  3.04k|  }
  182|  3.08k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  3.08k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  3.11k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 481, False: 2.63k]
  ------------------
  143|    481|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 443, False: 38]
  ------------------
  144|    443|        return true;
  145|    443|      }
  146|     38|      index++;
  147|     38|    }
  148|  2.63k|    return false;
  149|  3.08k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  4.30k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  4.30k|    int lz = ctlz();
  560|  4.30k|    return int(limb_bits * vec.len()) - lz;
  561|  4.30k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  4.30k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  4.30k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 4.30k]
  ------------------
  545|      0|      return 0;
  546|  4.30k|    } else {
  547|  4.30k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  4.30k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  4.30k|    }
  555|  4.30k|  }
_ZN10fast_float6bigintC2Em:
  418|  49.9k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  49.9k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  49.9k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  49.9k|    vec.normalize();
  426|  49.9k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  49.9k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  49.9k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 49.9k]
  ------------------
  464|      0|      return 1;
  465|  49.9k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 49.9k]
  ------------------
  466|      0|      return -1;
  467|  49.9k|    } else {
  468|  97.5k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 94.2k, False: 3.29k]
  ------------------
  469|  94.2k|        limb xi = vec[index - 1];
  470|  94.2k|        limb yi = other.vec[index - 1];
  471|  94.2k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 11.8k, False: 82.3k]
  ------------------
  472|  11.8k|          return 1;
  473|  82.3k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 34.7k, False: 47.5k]
  ------------------
  474|  34.7k|          return -1;
  475|  34.7k|        }
  476|  94.2k|      }
  477|  3.29k|      return 0;
  478|  49.9k|    }
  479|  49.9k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   188k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   188k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   188k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   188k|    return data[index];
   64|   188k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   209k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   209k|  adjusted_mantissa answer;
   96|   209k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.94k, False: 205k]
  |  Branch (96:19): [True: 1.06k, False: 204k]
  ------------------
   97|  5.01k|    answer.power2 = 0;
   98|  5.01k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  5.01k|    return answer;
  101|  5.01k|  }
  102|   204k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 6.57k, False: 197k]
  ------------------
  103|       |    // we want to get infinity:
  104|  6.57k|    answer.power2 = binary::infinite_power();
  105|  6.57k|    answer.mantissa = 0;
  106|  6.57k|    return answer;
  107|  6.57k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   197k|  int lz = leading_zeroes(w);
  112|   197k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   197k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   197k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   197k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   197k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   197k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 924, False: 196k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    924|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 108, False: 816]
  ------------------
  137|    108|      answer.power2 = 0;
  138|    108|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    108|      return answer;
  141|    108|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    816|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    816|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    816|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    816|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 816, False: 0]
  ------------------
  156|    816|    return answer;
  157|    924|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   196k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 67.7k, False: 129k]
  |  Branch (162:30): [True: 65.8k, False: 1.89k]
  |  Branch (162:77): [True: 59.6k, False: 6.14k]
  ------------------
  163|   196k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 7.45k, False: 52.2k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  7.45k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 3.46k, False: 3.98k]
  ------------------
  168|  3.46k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  3.46k|    }
  170|  7.45k|  }
  171|       |
  172|   196k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   196k|  answer.mantissa >>= 1;
  174|   196k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 13.1k, False: 183k]
  ------------------
  175|  13.1k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  13.1k|    answer.power2++; // undo previous addition
  177|  13.1k|  }
  178|       |
  179|   196k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   196k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.09k, False: 195k]
  ------------------
  181|  1.09k|    answer.power2 = binary::infinite_power();
  182|  1.09k|    answer.mantissa = 0;
  183|  1.09k|  }
  184|   196k|  return answer;
  185|   197k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   220k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   220k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   220k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   220k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   220k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   220k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   220k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 42.2k, False: 177k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  42.2k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  42.2k|    firstproduct.low += secondproduct.high;
   35|  42.2k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 29.9k, False: 12.3k]
  ------------------
   36|  29.9k|      firstproduct.high++;
   37|  29.9k|    }
   38|  42.2k|  }
   39|   220k|  return firstproduct;
   40|   220k|}
_ZN10fast_float6detail5powerEi:
   58|   435k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   435k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   435k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  22.0k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  22.0k|  int lz = leading_zeroes(w);
   82|  22.0k|  w <<= lz;
   83|  22.0k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  22.0k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  22.0k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  22.0k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  22.0k|  int hilz = int(w >> 63) ^ 1;
   69|  22.0k|  adjusted_mantissa answer;
   70|  22.0k|  answer.mantissa = w << hilz;
   71|  22.0k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  22.0k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  22.0k|  return answer;
   74|  22.0k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   190k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   190k|  adjusted_mantissa answer;
   96|   190k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.63k, False: 187k]
  |  Branch (96:19): [True: 282, False: 186k]
  ------------------
   97|  3.91k|    answer.power2 = 0;
   98|  3.91k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  3.91k|    return answer;
  101|  3.91k|  }
  102|   186k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.39k, False: 183k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.39k|    answer.power2 = binary::infinite_power();
  105|  3.39k|    answer.mantissa = 0;
  106|  3.39k|    return answer;
  107|  3.39k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   183k|  int lz = leading_zeroes(w);
  112|   183k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   183k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   183k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   183k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   183k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   183k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 2.67k, False: 180k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  2.67k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 52, False: 2.61k]
  ------------------
  137|     52|      answer.power2 = 0;
  138|     52|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     52|      return answer;
  141|     52|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  2.61k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  2.61k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  2.61k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  2.61k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 2.61k, False: 0]
  ------------------
  156|  2.61k|    return answer;
  157|  2.67k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   180k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 54.7k, False: 125k]
  |  Branch (162:30): [True: 30.1k, False: 24.6k]
  |  Branch (162:77): [True: 26.1k, False: 3.95k]
  ------------------
  163|   180k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 5.25k, False: 20.9k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  5.25k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.22k, False: 1.02k]
  ------------------
  168|  4.22k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.22k|    }
  170|  5.25k|  }
  171|       |
  172|   180k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   180k|  answer.mantissa >>= 1;
  174|   180k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 12.3k, False: 168k]
  ------------------
  175|  12.3k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  12.3k|    answer.power2++; // undo previous addition
  177|  12.3k|  }
  178|       |
  179|   180k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   180k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 244, False: 180k]
  ------------------
  181|    244|    answer.power2 = binary::infinite_power();
  182|    244|    answer.mantissa = 0;
  183|    244|  }
  184|   180k|  return answer;
  185|   183k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   215k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   215k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   215k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   215k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   215k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   215k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   215k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 86.8k, False: 128k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  86.8k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  86.8k|    firstproduct.low += secondproduct.high;
   35|  86.8k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 27.2k, False: 59.6k]
  ------------------
   36|  27.2k|      firstproduct.high++;
   37|  27.2k|    }
   38|  86.8k|  }
   39|   215k|  return firstproduct;
   40|   215k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  32.1k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  32.1k|  int lz = leading_zeroes(w);
   82|  32.1k|  w <<= lz;
   83|  32.1k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  32.1k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  32.1k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  32.1k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  32.1k|  int hilz = int(w >> 63) ^ 1;
   69|  32.1k|  adjusted_mantissa answer;
   70|  32.1k|  answer.mantissa = w << hilz;
   71|  32.1k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  32.1k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  32.1k|  return answer;
   74|  32.1k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  22.0k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  22.0k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  22.0k|  int32_t sci_exp = scientific_exponent(num);
  411|  22.0k|  size_t max_digits = binary_format<T>::max_digits();
  412|  22.0k|  size_t digits = 0;
  413|  22.0k|  bigint bigmant;
  414|  22.0k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  22.0k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  22.0k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 532, False: 21.5k]
  ------------------
  418|    532|    return positive_digit_comp<T>(bigmant, exponent);
  419|  21.5k|  } else {
  420|  21.5k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  21.5k|  }
  422|  22.0k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  54.2k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  54.2k|  uint64_t mantissa = num.mantissa;
   30|  54.2k|  int32_t exponent = int32_t(num.exponent);
   31|   271k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 217k, False: 54.2k]
  ------------------
   32|   217k|    mantissa /= 10000;
   33|   217k|    exponent += 4;
   34|   217k|  }
   35|   108k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 54.2k, False: 54.2k]
  ------------------
   36|  54.2k|    mantissa /= 100;
   37|  54.2k|    exponent += 2;
   38|  54.2k|  }
   39|  54.2k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 54.2k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  54.2k|  return exponent;
   44|  54.2k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  54.2k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  54.2k|  size_t counter = 0;
  245|  54.2k|  digits = 0;
  246|  54.2k|  limb value = 0;
  247|  54.2k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  54.2k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  54.2k|  UC const * p = num.integer.ptr;
  255|  54.2k|  UC const * pend = p + num.integer.len();
  256|  54.2k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   122k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 68.4k, False: 53.9k]
  ------------------
  259|   116k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 62.3k, False: 54.3k]
  |  Branch (259:45): [True: 48.4k, False: 13.9k]
  |  Branch (259:70): [True: 48.1k, False: 281]
  ------------------
  260|  48.1k|      parse_eight_digits(p, value, counter, digits);
  261|  48.1k|    }
  262|   213k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 197k, False: 16.4k]
  |  Branch (262:30): [True: 145k, False: 51.7k]
  |  Branch (262:43): [True: 145k, False: 281]
  ------------------
  263|   145k|      parse_one_digit(p, value, counter, digits);
  264|   145k|    }
  265|  68.4k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 281, False: 68.2k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    281|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    281|      bool truncated = is_truncated(p, pend);
  269|    281|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 249, False: 32]
  ------------------
  270|    249|        truncated |= is_truncated(num.fraction);
  271|    249|      }
  272|    281|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 179, False: 102]
  ------------------
  273|    179|        round_up_bigint(result, digits);
  274|    179|      }
  275|    281|      return;
  276|  68.2k|    } else {
  277|  68.2k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  68.2k|      counter = 0;
  279|  68.2k|      value = 0;
  280|  68.2k|    }
  281|  68.4k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  53.9k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 50.3k, False: 3.64k]
  ------------------
  285|  50.3k|    p = num.fraction.ptr;
  286|  50.3k|    pend = p + num.fraction.len();
  287|  50.3k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.17k, False: 48.1k]
  ------------------
  288|  2.17k|      skip_zeros(p, pend);
  289|  2.17k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   159k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 111k, False: 47.5k]
  ------------------
  292|   266k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 205k, False: 60.5k]
  |  Branch (292:47): [True: 155k, False: 49.9k]
  |  Branch (292:72): [True: 154k, False: 1.40k]
  ------------------
  293|   154k|        parse_eight_digits(p, value, counter, digits);
  294|   154k|      }
  295|   464k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 400k, False: 63.7k]
  |  Branch (295:32): [True: 354k, False: 46.0k]
  |  Branch (295:45): [True: 352k, False: 2.20k]
  ------------------
  296|   352k|        parse_one_digit(p, value, counter, digits);
  297|   352k|      }
  298|   111k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.79k, False: 109k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.79k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.79k|        bool truncated = is_truncated(p, pend);
  302|  2.79k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 1.95k, False: 833]
  ------------------
  303|  1.95k|          round_up_bigint(result, digits);
  304|  1.95k|        }
  305|  2.79k|        return;
  306|   109k|      } else {
  307|   109k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   109k|        counter = 0;
  309|   109k|        value = 0;
  310|   109k|      }
  311|   111k|    }
  312|  50.3k|  }
  313|       |
  314|  51.1k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 51.1k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  51.1k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  56.4k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  56.4k|  uint64_t val;
  161|  68.2k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 32.4k, False: 35.7k]
  ------------------
  162|  32.4k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  32.4k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 20.6k, False: 11.7k]
  ------------------
  164|  20.6k|      break;
  165|  20.6k|    }
  166|  11.7k|    first += int_cmp_len<UC>();
  167|  11.7k|  }
  168|   108k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 106k, False: 2.17k]
  ------------------
  169|   106k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 54.2k, False: 52.1k]
  ------------------
  170|  54.2k|      break;
  171|  54.2k|    }
  172|  52.1k|    first++;
  173|  52.1k|  }
  174|  56.4k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   202k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   202k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   202k|  p += 8;
  210|   202k|  counter += 8;
  211|   202k|  count += 8;
  212|   202k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   498k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   498k|  value = value * 10 + limb(*p - UC('0'));
  218|   498k|  p++;
  219|   498k|  counter++;
  220|   498k|  count++;
  221|   498k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   182k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   182k|  big.mul(power);
  226|   182k|  big.add(value);
  227|   182k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  3.32k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  3.32k|  uint64_t val;
  183|  7.76k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 5.62k, False: 2.13k]
  ------------------
  184|  5.62k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  5.62k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.18k, False: 4.44k]
  ------------------
  186|  1.18k|      return true;
  187|  1.18k|    }
  188|  4.44k|    first += int_cmp_len<UC>();
  189|  4.44k|  }
  190|  3.67k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 2.57k, False: 1.10k]
  ------------------
  191|  2.57k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.03k, False: 1.53k]
  ------------------
  192|  1.03k|      return true;
  193|  1.03k|    }
  194|  1.53k|    ++first;
  195|  1.53k|  }
  196|  1.10k|  return false;
  197|  2.13k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    249|bool is_truncated(span<const UC> s) noexcept {
  201|    249|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    249|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.13k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.13k|  add_native(big, 10, 1);
  234|  2.13k|  count++;
  235|  2.13k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    532|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    532|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    532|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    532|  adjusted_mantissa answer;
  324|    532|  bool truncated;
  325|    532|  answer.mantissa = bigmant.hi64(truncated);
  326|    532|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    532|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    532|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    532|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    532|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    532|    });
  333|    532|  });
  334|       |
  335|    532|  return answer;
  336|    532|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    532|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    532|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    532|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 532]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    532|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    532|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 532]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    532|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    532|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 532]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    532|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    532|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    532|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    532|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    532|    });
  333|    532|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    532|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    532|  const uint64_t mask
  125|    532|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 532]
  ------------------
  126|    532|    ? UINT64_MAX
  127|    532|    : (uint64_t(1) << shift) - 1;
  128|    532|  const uint64_t halfway
  129|    532|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 532]
  ------------------
  130|    532|    ? 0
  131|    532|    : uint64_t(1) << (shift - 1);
  132|    532|  uint64_t truncated_bits = am.mantissa & mask;
  133|    532|  bool is_above = truncated_bits > halfway;
  134|    532|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    532|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 532]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    532|  } else {
  140|    532|    am.mantissa >>= shift;
  141|    532|  }
  142|    532|  am.power2 += shift;
  143|       |
  144|    532|  bool is_odd = (am.mantissa & 1) == 1;
  145|    532|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    532|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    532|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    532|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 458]
  |  Branch (331:27): [True: 366, False: 92]
  |  Branch (331:41): [True: 58, False: 308]
  |  Branch (331:56): [True: 56, False: 344]
  |  Branch (331:66): [True: 32, False: 24]
  ------------------
  332|    532|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  21.5k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  21.5k|  bigint& real_digits = bigmant;
  347|  21.5k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  21.5k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  21.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  21.5k|  T b;
  354|  21.5k|  to_float(false, am_b, b);
  355|  21.5k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  21.5k|  bigint theor_digits(theor.mantissa);
  357|  21.5k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  21.5k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  21.5k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  21.5k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 21.5k, False: 0]
  ------------------
  363|  21.5k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  21.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  21.5k|  }
  365|  21.5k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 21.5k, False: 0]
  ------------------
  366|  21.5k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  21.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  21.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  21.5k|  int ord = real_digits.compare(theor_digits);
  373|  21.5k|  adjusted_mantissa answer = am;
  374|  21.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  21.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  21.5k|      (void)_;  // not needed, since we've done our comparison
  377|  21.5k|      (void)__; // not needed, since we've done our comparison
  378|  21.5k|      if (ord > 0) {
  379|  21.5k|        return true;
  380|  21.5k|      } else if (ord < 0) {
  381|  21.5k|        return false;
  382|  21.5k|      } else {
  383|  21.5k|        return is_odd;
  384|  21.5k|      }
  385|  21.5k|    });
  386|  21.5k|  });
  387|       |
  388|  21.5k|  return answer;
  389|  21.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  21.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  21.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  21.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 21.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  21.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  21.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 21.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  21.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  21.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 21.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  21.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  21.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  49.9k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  49.9k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 49.9k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  49.9k|  } else {
  153|  49.9k|    am.mantissa >>= shift;
  154|  49.9k|  }
  155|  49.9k|  am.power2 += shift;
  156|  49.9k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  21.5k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  21.5k|  adjusted_mantissa am = to_extended(value);
   84|  21.5k|  am.mantissa <<= 1;
   85|  21.5k|  am.mantissa += 1;
   86|  21.5k|  am.power2 -= 1;
   87|  21.5k|  return am;
   88|  21.5k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  21.5k|adjusted_mantissa to_extended(T value) noexcept {
   50|  21.5k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  21.5k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  21.5k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  21.5k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  21.5k|  adjusted_mantissa am;
   56|  21.5k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  21.5k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  21.5k|  ::memcpy(&bits, &value, sizeof(T));
   62|  21.5k|#endif
   63|  21.5k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 21.5k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  21.5k|  } else {
   68|       |    // normal
   69|  21.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  21.5k|    am.power2 -= bias;
   71|  21.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  21.5k|  }
   73|       |
   74|  21.5k|  return am;
   75|  21.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  21.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  21.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  21.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 21.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  21.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  21.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 21.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  21.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  21.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 21.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  21.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  21.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  21.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  21.5k|      (void)_;  // not needed, since we've done our comparison
  377|  21.5k|      (void)__; // not needed, since we've done our comparison
  378|  21.5k|      if (ord > 0) {
  379|  21.5k|        return true;
  380|  21.5k|      } else if (ord < 0) {
  381|  21.5k|        return false;
  382|  21.5k|      } else {
  383|  21.5k|        return is_odd;
  384|  21.5k|      }
  385|  21.5k|    });
  386|  21.5k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  21.5k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  21.5k|  const uint64_t mask
  125|  21.5k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 21.5k]
  ------------------
  126|  21.5k|    ? UINT64_MAX
  127|  21.5k|    : (uint64_t(1) << shift) - 1;
  128|  21.5k|  const uint64_t halfway
  129|  21.5k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 21.5k]
  ------------------
  130|  21.5k|    ? 0
  131|  21.5k|    : uint64_t(1) << (shift - 1);
  132|  21.5k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  21.5k|  bool is_above = truncated_bits > halfway;
  134|  21.5k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  21.5k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 21.5k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  21.5k|  } else {
  140|  21.5k|    am.mantissa >>= shift;
  141|  21.5k|  }
  142|  21.5k|  am.power2 += shift;
  143|       |
  144|  21.5k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  21.5k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  21.5k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  21.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  21.5k|      (void)_;  // not needed, since we've done our comparison
  377|  21.5k|      (void)__; // not needed, since we've done our comparison
  378|  21.5k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 21.3k]
  ------------------
  379|    210|        return true;
  380|  21.3k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 18.5k, False: 2.80k]
  ------------------
  381|  18.5k|        return false;
  382|  18.5k|      } else {
  383|  2.80k|        return is_odd;
  384|  2.80k|      }
  385|  21.5k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  32.1k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  32.1k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  32.1k|  int32_t sci_exp = scientific_exponent(num);
  411|  32.1k|  size_t max_digits = binary_format<T>::max_digits();
  412|  32.1k|  size_t digits = 0;
  413|  32.1k|  bigint bigmant;
  414|  32.1k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  32.1k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  32.1k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 3.77k, False: 28.3k]
  ------------------
  418|  3.77k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  28.3k|  } else {
  420|  28.3k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  28.3k|  }
  422|  32.1k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  3.77k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  3.77k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  3.77k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  3.77k|  adjusted_mantissa answer;
  324|  3.77k|  bool truncated;
  325|  3.77k|  answer.mantissa = bigmant.hi64(truncated);
  326|  3.77k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  3.77k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  3.77k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.77k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.77k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.77k|    });
  333|  3.77k|  });
  334|       |
  335|  3.77k|  return answer;
  336|  3.77k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  3.77k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  3.77k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  3.77k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 3.77k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  3.77k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  3.77k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 690, False: 3.08k]
  ------------------
  109|    690|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    690|    am.power2++;
  111|    690|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  3.77k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  3.77k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 3.77k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  3.77k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  3.77k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.77k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.77k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.77k|    });
  333|  3.77k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  3.77k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  3.77k|  const uint64_t mask
  125|  3.77k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 3.77k]
  ------------------
  126|  3.77k|    ? UINT64_MAX
  127|  3.77k|    : (uint64_t(1) << shift) - 1;
  128|  3.77k|  const uint64_t halfway
  129|  3.77k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 3.77k]
  ------------------
  130|  3.77k|    ? 0
  131|  3.77k|    : uint64_t(1) << (shift - 1);
  132|  3.77k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  3.77k|  bool is_above = truncated_bits > halfway;
  134|  3.77k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  3.77k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 3.77k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  3.77k|  } else {
  140|  3.77k|    am.mantissa >>= shift;
  141|  3.77k|  }
  142|  3.77k|  am.power2 += shift;
  143|       |
  144|  3.77k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  3.77k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  3.77k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  3.77k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.77k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 762, False: 3.01k]
  |  Branch (331:27): [True: 2.44k, False: 570]
  |  Branch (331:41): [True: 679, False: 1.76k]
  |  Branch (331:56): [True: 280, False: 2.05k]
  |  Branch (331:66): [True: 60, False: 220]
  ------------------
  332|  3.77k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  28.3k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  28.3k|  bigint& real_digits = bigmant;
  347|  28.3k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  28.3k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  28.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  28.3k|  T b;
  354|  28.3k|  to_float(false, am_b, b);
  355|  28.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  28.3k|  bigint theor_digits(theor.mantissa);
  357|  28.3k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  28.3k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  28.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  28.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 28.3k, False: 0]
  ------------------
  363|  28.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  28.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  28.3k|  }
  365|  28.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.47k, False: 25.9k]
  ------------------
  366|  2.47k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.47k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  25.9k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 25.8k, False: 74]
  ------------------
  368|  25.8k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  25.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  25.8k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  28.3k|  int ord = real_digits.compare(theor_digits);
  373|  28.3k|  adjusted_mantissa answer = am;
  374|  28.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  28.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  28.3k|      (void)_;  // not needed, since we've done our comparison
  377|  28.3k|      (void)__; // not needed, since we've done our comparison
  378|  28.3k|      if (ord > 0) {
  379|  28.3k|        return true;
  380|  28.3k|      } else if (ord < 0) {
  381|  28.3k|        return false;
  382|  28.3k|      } else {
  383|  28.3k|        return is_odd;
  384|  28.3k|      }
  385|  28.3k|    });
  386|  28.3k|  });
  387|       |
  388|  28.3k|  return answer;
  389|  28.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  28.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  28.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  28.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 104, False: 28.2k]
  ------------------
   96|       |    // have a denormal float
   97|    104|    int32_t shift = -am.power2 + 1;
   98|    104|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    104|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 104, False: 0]
  ------------------
  101|    104|    return;
  102|    104|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  28.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  28.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 28.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  28.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  28.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 28.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  28.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  28.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  28.3k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  28.3k|  adjusted_mantissa am = to_extended(value);
   84|  28.3k|  am.mantissa <<= 1;
   85|  28.3k|  am.mantissa += 1;
   86|  28.3k|  am.power2 -= 1;
   87|  28.3k|  return am;
   88|  28.3k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  28.3k|adjusted_mantissa to_extended(T value) noexcept {
   50|  28.3k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  28.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  28.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  28.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  28.3k|  adjusted_mantissa am;
   56|  28.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  28.3k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  28.3k|  ::memcpy(&bits, &value, sizeof(T));
   62|  28.3k|#endif
   63|  28.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 104, False: 28.2k]
  ------------------
   64|       |    // denormal
   65|    104|    am.power2 = 1 - bias;
   66|    104|    am.mantissa = bits & mantissa_mask;
   67|  28.2k|  } else {
   68|       |    // normal
   69|  28.2k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  28.2k|    am.power2 -= bias;
   71|  28.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  28.2k|  }
   73|       |
   74|  28.3k|  return am;
   75|  28.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  28.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  28.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  28.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 104, False: 28.2k]
  ------------------
   96|       |    // have a denormal float
   97|    104|    int32_t shift = -am.power2 + 1;
   98|    104|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    104|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 104, False: 0]
  ------------------
  101|    104|    return;
  102|    104|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  28.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  28.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 88, False: 28.1k]
  ------------------
  109|     88|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     88|    am.power2++;
  111|     88|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  28.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  28.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 28.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  28.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  28.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  28.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  28.3k|      (void)_;  // not needed, since we've done our comparison
  377|  28.3k|      (void)__; // not needed, since we've done our comparison
  378|  28.3k|      if (ord > 0) {
  379|  28.3k|        return true;
  380|  28.3k|      } else if (ord < 0) {
  381|  28.3k|        return false;
  382|  28.3k|      } else {
  383|  28.3k|        return is_odd;
  384|  28.3k|      }
  385|  28.3k|    });
  386|  28.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  28.3k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  28.3k|  const uint64_t mask
  125|  28.3k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 28.3k]
  ------------------
  126|  28.3k|    ? UINT64_MAX
  127|  28.3k|    : (uint64_t(1) << shift) - 1;
  128|  28.3k|  const uint64_t halfway
  129|  28.3k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 28.3k]
  ------------------
  130|  28.3k|    ? 0
  131|  28.3k|    : uint64_t(1) << (shift - 1);
  132|  28.3k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  28.3k|  bool is_above = truncated_bits > halfway;
  134|  28.3k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  28.3k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 28.3k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  28.3k|  } else {
  140|  28.3k|    am.mantissa >>= shift;
  141|  28.3k|  }
  142|  28.3k|  am.power2 += shift;
  143|       |
  144|  28.3k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  28.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  28.3k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  28.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  28.3k|      (void)_;  // not needed, since we've done our comparison
  377|  28.3k|      (void)__; // not needed, since we've done our comparison
  378|  28.3k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 11.6k, False: 16.7k]
  ------------------
  379|  11.6k|        return true;
  380|  16.7k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 16.2k, False: 488]
  ------------------
  381|  16.2k|        return false;
  382|  16.2k|      } else {
  383|    488|        return is_odd;
  384|    488|      }
  385|  28.3k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  1.91M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.13M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   374k|  constexpr size_t len() const noexcept {
  238|   374k|    return length;
  239|   374k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   613k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   613k|  return -10;
  469|   613k|#endif
  470|   613k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   573k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   573k|  return 10;
  517|   573k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   503k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   503k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   503k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  1.46M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  1.46M|  return 23;
  477|  1.46M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   480k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   480k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   480k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   508k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   205k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   205k|  return -65;
  568|   205k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   204k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   204k|  return 38;
  559|   204k|}
_ZN10fast_float14leading_zeroesEm:
  268|   444k|int leading_zeroes(uint64_t input_num) {
  269|   444k|  assert(input_num > 0);
  270|   444k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   444k|  return __builtin_clzll(input_num);
  285|   444k|#endif
  286|   444k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   564k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   564k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   564k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   564k|  answer.low = uint64_t(r);
  337|   564k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   564k|  return answer;
  342|   564k|}
_ZN10fast_float8value128C2Ev:
  251|   564k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   242k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   242k|  return -127;
  500|   242k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|  67.7k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|  67.7k|  return -17;
  493|  67.7k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|  65.8k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|  65.8k|  return 10;
  485|  65.8k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   155k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   155k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 54.2k, False: 100k]
  |  Branch (352:38): [True: 0, False: 100k]
  ------------------
  353|   155k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  22.0k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  22.0k|  return 114;
  575|  22.0k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|  92.1k|{
  650|  92.1k|    return sizeof(uint64_t) / sizeof(UC);
  651|  92.1k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  38.0k|{
  644|  38.0k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  38.0k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  38.0k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  72.4k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   193k|  constexpr size_t len() const noexcept {
  238|   193k|    return length;
  239|   193k|  }
_ZNK10fast_float4spanImEixEm:
  241|   105k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   105k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   105k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   105k|    return ptr[index];
  244|   105k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   154k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   154k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   154k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   154k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   154k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   154k|  ::memcpy(&value, &word, sizeof(T));
  615|   154k|#endif
  616|   154k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   154k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   379k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   379k|  return 0xFF;
  507|   379k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|   958k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   590k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   296k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|    288|  constexpr size_t len() const noexcept {
  238|    288|    return length;
  239|    288|  }
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   295k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   640k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   640k|  return -22;
  461|   640k|#endif
  462|   640k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   634k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   634k|  return 22;
  514|   634k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   533k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   533k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   533k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  1.51M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  1.51M|  return 52;
  474|  1.51M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   529k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   529k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   529k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   187k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   187k|  return -342;
  564|   187k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   186k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   186k|  return 308;
  555|   186k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   247k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   247k|  return -1023;
  497|   247k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  54.7k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  54.7k|  return -4;
  489|  54.7k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  30.1k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  30.1k|  return 23;
  481|  30.1k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  32.1k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  32.1k|  return 769;
  572|  32.1k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   140k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   140k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   140k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   140k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   140k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   140k|  ::memcpy(&value, &word, sizeof(T));
  615|   140k|#endif
  616|   140k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   140k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   356k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   356k|  return 0x7FF;
  504|   356k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   470k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   470k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   470k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   470k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   470k|    return from_chars_advanced(first, last, value, options);
  143|   470k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   470k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   470k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   470k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   470k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   470k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 470k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   470k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   470k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 470k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   470k|  answer.ec = std::errc(); // be optimistic
  221|   470k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   470k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 430k, False: 39.5k]
  |  Branch (227:69): [True: 405k, False: 24.9k]
  |  Branch (227:131): [True: 363k, False: 42.0k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   363k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 363k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   363k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 340k, False: 22.9k]
  ------------------
  239|   340k|        value = T(pns.mantissa);
  240|   340k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 7.97k, False: 332k]
  ------------------
  241|   332k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   340k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 340k]
  ------------------
  243|   340k|        return answer;
  244|   340k|      }
  245|   363k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   363k|  }
  262|   129k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   129k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 76.3k, False: 53.0k]
  |  Branch (263:29): [True: 76.3k, False: 0]
  ------------------
  264|  76.3k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 22.0k, False: 54.2k]
  ------------------
  265|  22.0k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  22.0k|    }
  267|  76.3k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   129k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 22.0k, False: 107k]
  ------------------
  271|   129k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   129k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 125k, False: 3.55k]
  |  Branch (273:29): [True: 14.0k, False: 111k]
  |  Branch (273:49): [True: 772, False: 13.2k]
  |  Branch (273:68): [True: 4.14k, False: 124k]
  ------------------
  274|  4.91k|    answer.ec = std::errc::result_out_of_range;
  275|  4.91k|  }
  276|   129k|  return answer;
  277|   470k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.03M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.03M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.03M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.03M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.03M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.03M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   143k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   143k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   143k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   143k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   143k|    return from_chars_advanced(first, last, value, options);
  143|   143k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   143k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   143k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   143k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   143k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   143k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 143k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   143k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   143k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 143k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   143k|  answer.ec = std::errc(); // be optimistic
  221|   143k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   143k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 142k, False: 856]
  |  Branch (227:69): [True: 140k, False: 2.44k]
  |  Branch (227:131): [True: 140k, False: 90]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   140k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 140k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   140k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 139k, False: 230]
  ------------------
  239|   139k|        value = T(pns.mantissa);
  240|   139k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 272, False: 139k]
  ------------------
  241|   139k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   139k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 139k]
  ------------------
  243|   139k|        return answer;
  244|   139k|      }
  245|   140k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   140k|  }
  262|  3.62k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  3.62k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 108, False: 3.51k]
  |  Branch (263:29): [True: 108, False: 0]
  ------------------
  264|    108|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 108]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    108|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  3.62k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 3.62k]
  ------------------
  271|  3.62k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  3.62k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 3.23k, False: 394]
  |  Branch (273:29): [True: 2.54k, False: 684]
  |  Branch (273:49): [True: 620, False: 1.92k]
  |  Branch (273:68): [True: 1.92k, False: 1.07k]
  ------------------
  274|  2.54k|    answer.ec = std::errc::result_out_of_range;
  275|  2.54k|  }
  276|  3.62k|  return answer;
  277|   143k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   488k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   488k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   488k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   488k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   488k|    return from_chars_advanced(first, last, value, options);
  143|   488k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   488k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   488k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   488k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   488k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   488k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 488k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   488k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   488k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 488k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   488k|  answer.ec = std::errc(); // be optimistic
  221|   488k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   488k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 483k, False: 5.79k]
  |  Branch (227:69): [True: 458k, False: 24.1k]
  |  Branch (227:131): [True: 385k, False: 73.8k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   385k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 385k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   385k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 380k, False: 4.42k]
  ------------------
  239|   380k|        value = T(pns.mantissa);
  240|   380k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 21.2k, False: 359k]
  ------------------
  241|   359k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   380k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 380k]
  ------------------
  243|   380k|        return answer;
  244|   380k|      }
  245|   385k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   385k|  }
  262|   108k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   108k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 78.6k, False: 29.5k]
  |  Branch (263:29): [True: 78.6k, False: 0]
  ------------------
  264|  78.6k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 32.1k, False: 46.5k]
  ------------------
  265|  32.1k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  32.1k|    }
  267|  78.6k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   108k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 32.1k, False: 76.0k]
  ------------------
  271|   108k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   108k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 105k, False: 3.23k]
  |  Branch (273:29): [True: 8.88k, False: 96.1k]
  |  Branch (273:49): [True: 182, False: 8.69k]
  |  Branch (273:68): [True: 2.07k, False: 105k]
  ------------------
  274|  2.25k|    answer.ec = std::errc::result_out_of_range;
  275|  2.25k|  }
  276|   108k|  return answer;
  277|   488k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   152k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   152k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   152k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   152k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   152k|    return from_chars_advanced(first, last, value, options);
  143|   152k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   152k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   152k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   152k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   152k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   152k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 152k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   152k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   152k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 152k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   152k|  answer.ec = std::errc(); // be optimistic
  221|   152k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   152k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 151k, False: 936]
  |  Branch (227:69): [True: 148k, False: 2.54k]
  |  Branch (227:131): [True: 148k, False: 108]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   148k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 148k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   148k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 148k, False: 72]
  ------------------
  239|   148k|        value = T(pns.mantissa);
  240|   148k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 368, False: 148k]
  ------------------
  241|   148k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   148k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 148k]
  ------------------
  243|   148k|        return answer;
  244|   148k|      }
  245|   148k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   148k|  }
  262|  3.66k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  3.66k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 108, False: 3.55k]
  |  Branch (263:29): [True: 108, False: 0]
  ------------------
  264|    108|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 108]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    108|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  3.66k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 3.66k]
  ------------------
  271|  3.66k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  3.66k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 3.26k, False: 394]
  |  Branch (273:29): [True: 1.32k, False: 1.94k]
  |  Branch (273:49): [True: 96, False: 1.23k]
  |  Branch (273:68): [True: 1.23k, False: 2.33k]
  ------------------
  274|  1.32k|    answer.ec = std::errc::result_out_of_range;
  275|  1.32k|  }
  276|  3.66k|  return answer;
  277|   152k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  3.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.08M|{
 3807|  3.08M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.08M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.08M|    }
 3810|  3.08M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.08M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.08M|    }
 3813|  3.08M|    else {
 3814|       |        // utf-32
 3815|  3.08M|        static_assert(sizeof(U) == 4);
 3816|  3.08M|        SCN_UNUSED(ch);
 3817|  3.08M|        return 1;
 3818|  3.08M|    }
 3819|  3.08M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.08M|{
 3771|  3.08M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.08M|    SCN_GCC_COMPAT_PUSH
 3774|  3.08M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.08M|    constexpr char lengths[] =
 3776|  3.08M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.08M|        "\1\1\1\1\1\1\1\1"
 3778|  3.08M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.08M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.08M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.08M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.08M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.08M|    SCN_GCC_COMPAT_POP
 3785|  3.08M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  2.79M|{
 4013|  2.79M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  2.79M|        return decode_utf8_code_point_exhaustive(input);
 4015|  2.79M|    }
 4016|  2.79M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  2.79M|        return decode_utf16_code_point_exhaustive(input);
 4018|  2.79M|    }
 4019|  2.79M|    else {
 4020|  2.79M|        SCN_EXPECT(input.size() == 1);
 4021|  2.79M|        auto cp = static_cast<char32_t>(input.front());
 4022|  2.79M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  2.79M|            return invalid_code_point;
 4024|  2.79M|        }
 4025|  2.79M|        return cp;
 4026|  2.79M|    }
 4027|  2.79M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  2.79M|{
 3826|  2.79M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  2.79M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  2.79M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  2.79M|    };
 3831|       |
 3832|  2.79M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.72M, False: 63.9k]
  ------------------
 3833|  2.72M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 630, False: 2.72M]
  ------------------
 3834|    630|            SCN_UNLIKELY_ATTR
 3835|    630|            return invalid_code_point;
 3836|    630|        }
 3837|  2.72M|        return static_cast<char32_t>(input[0]);
 3838|  2.72M|    }
 3839|       |
 3840|  63.9k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 58.1k, False: 5.86k]
  ------------------
 3841|  58.1k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 140, False: 57.9k]
  ------------------
 3842|    140|            SCN_UNLIKELY_ATTR
 3843|    140|            return invalid_code_point;
 3844|    140|        }
 3845|  57.9k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 5.19k, False: 52.7k]
  ------------------
 3846|  5.19k|            SCN_UNLIKELY_ATTR
 3847|  5.19k|            return invalid_code_point;
 3848|  5.19k|        }
 3849|       |
 3850|  52.7k|        char32_t cp{};
 3851|  52.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  52.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  52.7k|        return cp;
 3854|  57.9k|    }
 3855|       |
 3856|  5.86k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 3.45k, False: 2.41k]
  ------------------
 3857|  3.45k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 113, False: 3.34k]
  ------------------
 3858|    113|            SCN_UNLIKELY_ATTR
 3859|    113|            return invalid_code_point;
 3860|    113|        }
 3861|  3.34k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 1.35k, False: 1.99k]
  ------------------
 3862|  3.34k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 598, False: 1.39k]
  ------------------
 3863|  1.95k|            SCN_UNLIKELY_ATTR
 3864|  1.95k|            return invalid_code_point;
 3865|  1.95k|        }
 3866|       |
 3867|  1.39k|        char32_t cp{};
 3868|  1.39k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  1.39k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  1.39k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  1.39k|        return cp;
 3872|  3.34k|    }
 3873|       |
 3874|  2.41k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 2.41k, False: 0]
  ------------------
 3875|  2.41k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 2.41k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  2.41k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 488, False: 1.92k]
  ------------------
 3880|    488|            SCN_UNLIKELY_ATTR
 3881|    488|            return invalid_code_point;
 3882|    488|        }
 3883|  1.92k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 516, False: 1.40k]
  ------------------
 3884|  1.92k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 563, False: 844]
  ------------------
 3885|  1.92k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 542, False: 302]
  ------------------
 3886|  1.62k|            SCN_UNLIKELY_ATTR
 3887|  1.62k|            return invalid_code_point;
 3888|  1.62k|        }
 3889|       |
 3890|    302|        char32_t cp{};
 3891|    302|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|    302|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|    302|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|    302|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|    302|        return cp;
 3896|  1.92k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  67.4k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  67.4k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  67.4k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  4.71M|{
 3699|  4.71M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  4.71M|                                          decltype(first), decltype(last)> &&
 3701|  4.71M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  4.71M|        return {first, last};
 3703|  4.71M|    }
 3704|  4.71M|    else {
 3705|  4.71M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  4.71M|                                       to_address(first), to_address(last)))};
 3707|  4.71M|    }
 3708|  4.71M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  14.3M|{
  326|  14.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  14.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  14.3M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  16.4M|{
  304|  16.4M|    return p;
  305|  16.4M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.51M|{
 3730|  7.51M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  7.51M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  7.51M|                      decltype(it)> &&
 3733|  7.51M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  7.51M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.51M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.51M|        return it;
 3736|  7.51M|    }
 3737|  7.51M|    else {
 3738|  7.51M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  7.51M|    }
 3740|  7.51M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  85.2k|    {
 2724|  85.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  85.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  85.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  85.2k|    {
 2705|  85.2k|        return decay_copy(t.begin());
 2706|  85.2k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  10.9M|{
 1949|  10.9M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.06M|    {
 2781|  2.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.06M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.06M|    {
 2763|  2.06M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.06M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   150k|{
 8867|   150k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   150k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   150k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   150k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|   646k|{
 5396|   646k|    detail::check_scan_arg_types<Args...>();
 5397|   646k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   646k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  1.00M|{
 5135|  1.00M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.00M|                  "Scan argument types must be default constructible");
 5137|  1.00M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.00M|                  "Scan argument types must be Destructible");
 5139|  1.00M|    static_assert(
 5140|  1.00M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.00M|        "Scan argument types must not be references");
 5142|  1.00M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|   646k|    {
 5349|   646k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   646k|    {
 5360|   646k|        return {detail::make_arg<
 5361|   646k|            kind, Context,
 5362|   646k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   646k|                                 typename Context::char_type>::value>(args)...};
 5364|   646k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   646k|{
 5170|   646k|    return make_value<Context>(value).ref_value;
 5171|   646k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|   714k|{
 5120|   714k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   714k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   714k|                                  needs_context_tag>) {
 5124|   714k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   714k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   714k|    }
 5126|   714k|    else {
 5127|   714k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   714k|            value, context_tag<Context>{}));
 5129|   714k|    }
 5130|   714k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|   714k|    {                                                                        \
 4959|   714k|        return val;                                                          \
 4960|   714k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  1.00M|{
 5089|  1.00M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.00M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.00M|    constexpr bool scannable_char =
 5093|  1.00M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.00M|    static_assert(scannable_char,
 5095|  1.00M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.00M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.00M|    constexpr bool scannable_const =
 5099|  1.00M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.00M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.00M|    constexpr bool scannable_disabled =
 5103|  1.00M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.00M|    static_assert(scannable_disabled,
 5105|  1.00M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.00M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.00M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.00M|    static_assert(
 5110|  1.00M|        scannable,
 5111|  1.00M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.00M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.00M|    return arg_value{arg};
 5115|  1.00M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|  1.00M|    {
 4902|  1.00M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   465k|{
 8654|   465k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   465k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   465k|{
 8591|   465k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   465k|    auto result = vscan_impl(buffer, format, args);
 8594|   465k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.3k, False: 427k]
  |  |  ------------------
  ------------------
 8595|  38.3k|        return unexpected(result.error());
 8596|  38.3k|    }
 8597|   427k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   465k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  1.03M|{
 4720|  1.03M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.03M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.03M|                  "\n"
 4724|  1.03M|                  "Unsupported range type given as input to a scanning "
 4725|  1.03M|                  "function.\n"
 4726|  1.03M|                  "A range needs to have a character type (value type) "
 4727|  1.03M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.03M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.03M|                  "to be included.\n"
 4730|  1.03M|                  "See the scnlib documentation for more details.");
 4731|  1.03M|    static_assert(
 4732|  1.03M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.03M|        "\n"
 4734|  1.03M|        "Unsupported range type given as input to a scanning "
 4735|  1.03M|        "function.\n"
 4736|  1.03M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.03M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.03M|        "not supported.");
 4739|  1.03M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.03M|                  "\n"
 4741|  1.03M|                  "Unsupported range type given as input to a scanning "
 4742|  1.03M|                  "function.\n"
 4743|  1.03M|                  "file_marker_found cannot be used as an "
 4744|  1.03M|                  "source range type to scn::scan.\n"
 4745|  1.03M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.03M|                  "and do not provide an explicit source range, "
 4747|  1.03M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.03M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.03M|                  "\n"
 4750|  1.03M|                  "Unsupported range type given as input to a scanning "
 4751|  1.03M|                  "function.\n"
 4752|  1.03M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.03M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.03M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.03M|                  "\n"
 4756|  1.03M|                  "Unsupported range type given as input to a scanning "
 4757|  1.03M|                  "function.\n"
 4758|  1.03M|                  "A range needs to model forward_range and have a valid "
 4759|  1.03M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.03M|                  "Examples of scannable ranges are std::string, "
 4761|  1.03M|                  "std::string_view, "
 4762|  1.03M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.03M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.03M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.03M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  1.03M|{
 4659|  1.03M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  1.03M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  1.03M|    }
 4662|  1.03M|    else {
 4663|  1.03M|        return invalid_char_type{};
 4664|  1.03M|    }
 4665|  1.03M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.03M|    {
 2855|  1.03M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.03M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.03M|    {
 2836|  1.03M|        return t.data();
 2837|  1.03M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  1.03M|    {
 3231|  1.03M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 14.1k, False: 1.01M]
  ------------------
 3232|  1.03M|                   ? nullptr
 3233|  1.03M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.03M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.03M|    {
 3005|  1.03M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.03M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.03M|    {
 2978|  1.03M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.03M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  5.66M|    {
 3339|  5.66M|        return m_iterator == m_sentinel;
 3340|  5.66M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  2.05M|    {
 3185|  2.05M|        return static_cast<const D&>(*this);
 3186|  2.05M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.96M|    {
 2724|  1.96M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.96M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.96M|    {
 2705|  1.96M|        return decay_copy(t.begin());
 2706|  1.96M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  24.8M|    {
 3330|  24.8M|        return m_iterator;
 3331|  24.8M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.03M|    {
 2930|  1.03M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.03M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.03M|    {
 2896|  1.03M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.03M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  4.07M|{
 1949|  4.07M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.07M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  5.69M|    {
 3346|  5.69M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  5.69M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  10.1M|    {
 1598|  10.1M|        return has_value();
 1599|  10.1M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  20.1M|    {
  485|  20.1M|        return m_has_value;
  486|  20.1M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   754k|    {
 1604|   754k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   754k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   754k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   754k|        return this->get_unexpected().error();
 1606|   754k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   754k|    {
  468|   754k|        return m_unexpected;
  469|   754k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  5.83M|    {
  361|  5.83M|        return m_unexpected;
  362|  5.83M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  2.85M|    {
  347|  2.85M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.85M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.85M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  83.1k|    {
 1476|  83.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  83.1k|    {
  447|  83.1k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  6.27M|    {
  356|  6.27M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.27M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.27M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.03M|    {
 1177|  1.03M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   949k|{
 5923|   949k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   949k|                      ranges::iterator_t<SourceRange>>) {
 5925|   949k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   949k|    }
 5927|   949k|    else {
 5928|   949k|        auto it = ranges::begin(source);
 5929|   949k|        while (n > 0) {
 5930|   949k|            --n;
 5931|   949k|            ++it;
 5932|   949k|        }
 5933|   949k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   949k|    }
 5935|   949k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.84M|    {
 2724|  5.84M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.84M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.84M|    {
 2705|  5.84M|        return decay_copy(t.begin());
 2706|  5.84M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   949k|{
 5910|   949k|    return ranges::end(source);
 5911|   949k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   949k|    {
 2781|   949k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   949k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   949k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   949k|    {
 2763|   949k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   949k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   949k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  12.1M|    {
 3334|  12.1M|        return m_sentinel;
 3335|  12.1M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  3.97M|    {
 1653|  3.97M|        return value();
 1654|  3.97M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  9.17M|    {
 1627|  9.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.17M|        return this->get_value();
 1629|  9.17M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  9.17M|    {
  451|  9.17M|        return m_value;
  452|  9.17M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   949k|    {
 1430|   949k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   949k|    {
  437|   949k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   301k|    {
 7975|   301k|        return m_str;
 7976|   301k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   646k|    {
 5426|   646k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|   646k|    {
 5379|   646k|        return m_argptrs;
 5380|   646k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  1.99M|    {
 5478|  1.99M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   301k|{
 8820|   301k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.5k, False: 276k]
  |  |  ------------------
  ------------------
 8821|  25.5k|        return unexpected(result.error());
 8822|  25.5k|    }
 8823|   276k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   276k|    static_cast<    \
  |  |  929|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   276k|    static_cast<    \
  |  |  929|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   301k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.03M|    {
 1598|  1.03M|        return has_value();
 1599|  1.03M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.06M|    {
  485|  2.06M|        return m_has_value;
  486|  2.06M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  83.1k|    {
 1604|  83.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  83.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  83.1k|        return this->get_unexpected().error();
 1606|  83.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  83.1k|    {
  468|  83.1k|        return m_unexpected;
  469|  83.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.7k|    {
 1476|  27.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.7k|    {
  447|  27.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   334k|    {
 1177|   334k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   854k|    {
 1653|   854k|        return value();
 1654|   854k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   949k|    {
 1627|   949k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   949k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   949k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   949k|        return this->get_value();
 1629|   949k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   949k|    {
  451|   949k|        return m_value;
  452|   949k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   306k|    {
 5830|   306k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|   949k|    {
 5681|   949k|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|   836k|    {
 5616|   836k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   306k|    {
 1430|   306k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   306k|    {
  437|   306k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|   646k|    {
 5374|   646k|        return m_args;
 5375|   646k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  9.70M|    {
 3316|  9.70M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  1.99M|{
 7691|  1.99M|    return s;
 7692|  1.99M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  1.99M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   301k|    {
 7971|   301k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   334k|    {
 1598|   334k|        return has_value();
 1599|   334k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   641k|    {
  485|   641k|        return m_has_value;
  486|   641k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   306k|    {
 1673|   306k|        return &value();
 1674|   306k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   306k|    {
 1627|   306k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   306k|        return this->get_value();
 1629|   306k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   306k|    {
  451|   306k|        return m_value;
  452|   306k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   949k|    {
 5698|   949k|        return ranges::begin(m_range);
 5699|   949k|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   150k|{
 8934|   150k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   150k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   150k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   150k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   465k|{
 8672|   465k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   465k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   465k|{
 8607|   465k|#if !SCN_DISABLE_LOCALE
 8608|   465k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   465k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   465k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   465k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   465k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.3k, False: 427k]
  |  |  ------------------
  ------------------
 8615|  38.3k|        return unexpected(result.error());
 8616|  38.3k|    }
 8617|   427k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   465k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  32.6k|{
 8973|  32.6k|    T value;
 8974|  32.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  32.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 30.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  30.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  30.5k|    static_cast<    \
  |  |  929|  30.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  30.5k|    static_cast<    \
  |  |  929|  30.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  32.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  68.2k|{
 5155|  68.2k|    check_scan_arg_types<T>();
 5156|       |
 5157|  68.2k|    basic_scan_arg<Context> arg;
 5158|  68.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  68.2k|    arg.m_value = make_value<Context>(value);
 5160|  68.2k|    return arg;
 5161|  68.2k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  2.20M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  3.09M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   101k|{
 8685|   101k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   101k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   101k|{
 8631|   101k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   101k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   101k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.39k, False: 95.4k]
  |  |  ------------------
  ------------------
 8635|  6.39k|        return unexpected(result.error());
 8636|  6.39k|    }
 8637|  95.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  95.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   101k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  95.4k|    {
 1663|  95.4k|        return std::move(value());
 1664|  95.4k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   156k|{
 8867|   156k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   156k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   156k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   156k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|   671k|{
 5396|   671k|    detail::check_scan_arg_types<Args...>();
 5397|   671k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   671k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  1.04M|{
 5135|  1.04M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.04M|                  "Scan argument types must be default constructible");
 5137|  1.04M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.04M|                  "Scan argument types must be Destructible");
 5139|  1.04M|    static_assert(
 5140|  1.04M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.04M|        "Scan argument types must not be references");
 5142|  1.04M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|   671k|    {
 5349|   671k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   671k|    {
 5360|   671k|        return {detail::make_arg<
 5361|   671k|            kind, Context,
 5362|   671k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   671k|                                 typename Context::char_type>::value>(args)...};
 5364|   671k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   671k|{
 5170|   671k|    return make_value<Context>(value).ref_value;
 5171|   671k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|   742k|{
 5120|   742k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   742k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   742k|                                  needs_context_tag>) {
 5124|   742k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   742k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   742k|    }
 5126|   742k|    else {
 5127|   742k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   742k|            value, context_tag<Context>{}));
 5129|   742k|    }
 5130|   742k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|   742k|    {                                                                        \
 4959|   742k|        return val;                                                          \
 4960|   742k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  1.04M|{
 5089|  1.04M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.04M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.04M|    constexpr bool scannable_char =
 5093|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.04M|    static_assert(scannable_char,
 5095|  1.04M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.04M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.04M|    constexpr bool scannable_const =
 5099|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.04M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.04M|    constexpr bool scannable_disabled =
 5103|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.04M|    static_assert(scannable_disabled,
 5105|  1.04M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.04M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.04M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.04M|    static_assert(
 5110|  1.04M|        scannable,
 5111|  1.04M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.04M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.04M|    return arg_value{arg};
 5115|  1.04M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  1.04M|    {
 4902|  1.04M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   312k|    {
 7975|   312k|        return m_str;
 7976|   312k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   671k|    {
 5426|   671k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|   671k|    {
 5379|   671k|        return m_argptrs;
 5380|   671k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   312k|{
 8820|   312k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.5k, False: 287k]
  |  |  ------------------
  ------------------
 8821|  25.5k|        return unexpected(result.error());
 8822|  25.5k|    }
 8823|   287k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   287k|    static_cast<    \
  |  |  929|   287k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   287k|    static_cast<    \
  |  |  929|   287k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   312k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.7k|    {
 1476|  27.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.7k|    {
  447|  27.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   347k|    {
 1177|   347k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   319k|    {
 5830|   319k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|   875k|    {
 5616|   875k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   319k|    {
 1430|   319k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   319k|    {
  437|   319k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|   671k|    {
 5374|   671k|        return m_args;
 5375|   671k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   312k|    {
 7971|   312k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   347k|    {
 1598|   347k|        return has_value();
 1599|   347k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   666k|    {
  485|   666k|        return m_has_value;
  486|   666k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   319k|    {
 1673|   319k|        return &value();
 1674|   319k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   319k|    {
 1627|   319k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   319k|        return this->get_value();
 1629|   319k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   319k|    {
  451|   319k|        return m_value;
  452|   319k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   156k|{
 8934|   156k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   156k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   156k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   156k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  34.2k|{
 8973|  34.2k|    T value;
 8974|  34.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  34.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  34.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 32.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  34.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  32.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.1k|    static_cast<    \
  |  |  929|  32.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.1k|    static_cast<    \
  |  |  929|  32.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  34.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  71.4k|{
 5155|  71.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  71.4k|    basic_scan_arg<Context> arg;
 5158|  71.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  71.4k|    arg.m_value = make_value<Context>(value);
 5160|  71.4k|    return arg;
 5161|  71.4k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   158k|{
 8867|   158k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   158k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   158k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   158k|    static_cast<    \
  |  |  929|   158k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   158k|    static_cast<    \
  |  |  929|   158k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   158k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|   678k|{
 5396|   678k|    detail::check_scan_arg_types<Args...>();
 5397|   678k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   678k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  1.05M|{
 5135|  1.05M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.05M|                  "Scan argument types must be default constructible");
 5137|  1.05M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.05M|                  "Scan argument types must be Destructible");
 5139|  1.05M|    static_assert(
 5140|  1.05M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.05M|        "Scan argument types must not be references");
 5142|  1.05M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|   678k|    {
 5349|   678k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   678k|    {
 5360|   678k|        return {detail::make_arg<
 5361|   678k|            kind, Context,
 5362|   678k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   678k|                                 typename Context::char_type>::value>(args)...};
 5364|   678k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   678k|{
 5170|   678k|    return make_value<Context>(value).ref_value;
 5171|   678k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|   751k|{
 5120|   751k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   751k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   751k|                                  needs_context_tag>) {
 5124|   751k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   751k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   751k|    }
 5126|   751k|    else {
 5127|   751k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   751k|            value, context_tag<Context>{}));
 5129|   751k|    }
 5130|   751k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|   751k|    {                                                                        \
 4959|   751k|        return val;                                                          \
 4960|   751k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  1.05M|{
 5089|  1.05M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.05M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.05M|    constexpr bool scannable_char =
 5093|  1.05M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.05M|    static_assert(scannable_char,
 5095|  1.05M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.05M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.05M|    constexpr bool scannable_const =
 5099|  1.05M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.05M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.05M|    constexpr bool scannable_disabled =
 5103|  1.05M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.05M|    static_assert(scannable_disabled,
 5105|  1.05M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.05M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.05M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.05M|    static_assert(
 5110|  1.05M|        scannable,
 5111|  1.05M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.05M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.05M|    return arg_value{arg};
 5115|  1.05M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  1.05M|    {
 4902|  1.05M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   316k|    {
 7975|   316k|        return m_str;
 7976|   316k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   678k|    {
 5426|   678k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|   678k|    {
 5379|   678k|        return m_argptrs;
 5380|   678k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   316k|{
 8820|   316k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.5k, False: 290k]
  |  |  ------------------
  ------------------
 8821|  25.5k|        return unexpected(result.error());
 8822|  25.5k|    }
 8823|   290k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   290k|    static_cast<    \
  |  |  929|   290k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   290k|    static_cast<    \
  |  |  929|   290k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   316k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.7k|    {
 1476|  27.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.7k|    {
  447|  27.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   351k|    {
 1177|   351k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   323k|    {
 5830|   323k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|   888k|    {
 5616|   888k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   323k|    {
 1430|   323k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   323k|    {
  437|   323k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|   678k|    {
 5374|   678k|        return m_args;
 5375|   678k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   316k|    {
 7971|   316k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   351k|    {
 1598|   351k|        return has_value();
 1599|   351k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   675k|    {
  485|   675k|        return m_has_value;
  486|   675k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   323k|    {
 1673|   323k|        return &value();
 1674|   323k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   323k|    {
 1627|   323k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   323k|        return this->get_value();
 1629|   323k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   323k|    {
  451|   323k|        return m_value;
  452|   323k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   158k|{
 8934|   158k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   158k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   158k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   158k|    static_cast<    \
  |  |  929|   158k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   158k|    static_cast<    \
  |  |  929|   158k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   158k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  34.8k|{
 8973|  34.8k|    T value;
 8974|  34.8k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  34.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  34.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 32.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  34.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  32.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  34.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  72.4k|{
 5155|  72.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  72.4k|    basic_scan_arg<Context> arg;
 5158|  72.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  72.4k|    arg.m_value = make_value<Context>(value);
 5160|  72.4k|    return arg;
 5161|  72.4k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  83.1k|    {
 2724|  83.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  83.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  83.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  83.1k|    {
 2705|  83.1k|        return decay_copy(t.begin());
 2706|  83.1k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  49.8M|{
 1949|  49.8M|    return SCN_FWD(t);
  ------------------
  |  |  930|  49.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  49.8M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.35M|    {
 2781|  2.35M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.35M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.35M|    {
 2763|  2.35M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.35M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   172k|{
 8867|   172k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   172k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   172k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   172k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   532k|{
 8654|   532k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   532k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   532k|{
 8591|   532k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   532k|    auto result = vscan_impl(buffer, format, args);
 8594|   532k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.3k, False: 494k]
  |  |  ------------------
  ------------------
 8595|  38.3k|        return unexpected(result.error());
 8596|  38.3k|    }
 8597|   494k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   532k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  1.17M|{
 4720|  1.17M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.17M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.17M|                  "\n"
 4724|  1.17M|                  "Unsupported range type given as input to a scanning "
 4725|  1.17M|                  "function.\n"
 4726|  1.17M|                  "A range needs to have a character type (value type) "
 4727|  1.17M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.17M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.17M|                  "to be included.\n"
 4730|  1.17M|                  "See the scnlib documentation for more details.");
 4731|  1.17M|    static_assert(
 4732|  1.17M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.17M|        "\n"
 4734|  1.17M|        "Unsupported range type given as input to a scanning "
 4735|  1.17M|        "function.\n"
 4736|  1.17M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.17M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.17M|        "not supported.");
 4739|  1.17M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.17M|                  "\n"
 4741|  1.17M|                  "Unsupported range type given as input to a scanning "
 4742|  1.17M|                  "function.\n"
 4743|  1.17M|                  "file_marker_found cannot be used as an "
 4744|  1.17M|                  "source range type to scn::scan.\n"
 4745|  1.17M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.17M|                  "and do not provide an explicit source range, "
 4747|  1.17M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.17M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.17M|                  "\n"
 4750|  1.17M|                  "Unsupported range type given as input to a scanning "
 4751|  1.17M|                  "function.\n"
 4752|  1.17M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.17M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.17M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.17M|                  "\n"
 4756|  1.17M|                  "Unsupported range type given as input to a scanning "
 4757|  1.17M|                  "function.\n"
 4758|  1.17M|                  "A range needs to model forward_range and have a valid "
 4759|  1.17M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.17M|                  "Examples of scannable ranges are std::string, "
 4761|  1.17M|                  "std::string_view, "
 4762|  1.17M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.17M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.17M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.17M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.17M|{
 4690|  1.17M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  1.17M|        return file_marker_found{};
 4692|  1.17M|    }
 4693|  1.17M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  1.17M|        if constexpr (ranges::range<Range>) {
 4695|  1.17M|            return insufficient_range{};
 4696|  1.17M|        }
 4697|  1.17M|        else {
 4698|  1.17M|            return invalid_input_range{};
 4699|  1.17M|        }
 4700|  1.17M|    }
 4701|  1.17M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  1.17M|        return invalid_char_type{};
 4703|  1.17M|    }
 4704|  1.17M|    else {
 4705|  1.17M|        return make_forward_scan_buffer(r);
 4706|  1.17M|    }
 4707|  1.17M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  1.17M|{
 4524|  1.17M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.17M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  1.17M|    {
 4411|  1.17M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  1.17M|    {
 4382|  1.17M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  1.17M|    {
 4151|  1.17M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  1.17M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.26M|    {
 2724|  2.26M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.26M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.26M|    {
 2705|  2.26M|        return decay_copy(t.begin());
 2706|  2.26M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  3.35M|    {
 3330|  3.35M|        return m_iterator;
 3331|  3.35M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  14.5M|    {
 4415|  14.5M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 278k, False: 14.2M]
  ------------------
 4416|   278k|            return false;
 4417|   278k|        }
 4418|  14.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  14.2M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  14.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  14.2M|        }
 4421|  14.2M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 13.0M, False: 1.15M]
  ------------------
 4422|  13.0M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  13.0M|                                          this->m_current_view.begin(),
 4424|  13.0M|                                          this->m_current_view.end());
 4425|  13.0M|        }
 4426|  14.2M|        m_latest = *m_cursor;
 4427|  14.2M|        ++m_cursor;
 4428|  14.2M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  14.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  14.2M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  14.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  14.2M|        }
 4432|  14.2M|        return true;
 4433|  14.2M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  42.9M|    {
 2781|  42.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  42.9M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  42.9M|    {
 2763|  42.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  42.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  42.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  44.0M|    {
 3334|  44.0M|        return m_sentinel;
 3335|  44.0M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  1.17M|    {
 4071|  1.17M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.17M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.17M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  83.1k|    {
 1476|  83.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  83.1k|    {
  447|  83.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.17M|    {
 1177|  1.17M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.09M|{
 5923|  1.09M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.09M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.09M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.09M|    }
 5927|  1.09M|    else {
 5928|  1.09M|        auto it = ranges::begin(source);
 5929|  1.09M|        while (n > 0) {
 5930|  1.09M|            --n;
 5931|  1.09M|            ++it;
 5932|  1.09M|        }
 5933|  1.09M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.09M|    }
 5935|  1.09M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.09M|    {
 2724|  1.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.09M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.09M|    {
 2705|  1.09M|        return decay_copy(t.begin());
 2706|  1.09M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  1.09M|{
 5910|  1.09M|    return ranges::end(source);
 5911|  1.09M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.09M|    {
 2781|  1.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.09M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.09M|    {
 2763|  1.09M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.09M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  1.09M|    {
 1430|  1.09M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  1.09M|    {
  437|  1.09M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   344k|    {
 7975|   344k|        return m_str;
 7976|   344k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   344k|{
 8820|   344k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.5k, False: 318k]
  |  |  ------------------
  ------------------
 8821|  25.5k|        return unexpected(result.error());
 8822|  25.5k|    }
 8823|   318k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   318k|    static_cast<    \
  |  |  929|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   318k|    static_cast<    \
  |  |  929|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   344k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.17M|    {
 1598|  1.17M|        return has_value();
 1599|  1.17M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.35M|    {
  485|  2.35M|        return m_has_value;
  486|  2.35M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  83.1k|    {
 1604|  83.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  83.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  83.1k|        return this->get_unexpected().error();
 1606|  83.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  83.1k|    {
  468|  83.1k|        return m_unexpected;
  469|  83.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.7k|    {
 1476|  27.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.7k|    {
  447|  27.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   379k|    {
 1177|   379k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   988k|    {
 1653|   988k|        return value();
 1654|   988k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  1.09M|    {
 1627|  1.09M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.09M|        return this->get_value();
 1629|  1.09M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.09M|    {
  451|  1.09M|        return m_value;
  452|  1.09M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   352k|    {
 5830|   352k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  1.09M|    {
 5681|  1.09M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   352k|    {
 1430|   352k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   352k|    {
  437|   352k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  2.26M|    {
 3316|  2.26M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   344k|    {
 7971|   344k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   379k|    {
 1598|   379k|        return has_value();
 1599|   379k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   731k|    {
  485|   731k|        return m_has_value;
  486|   731k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   352k|    {
 1673|   352k|        return &value();
 1674|   352k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   352k|    {
 1627|   352k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   352k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   352k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   352k|        return this->get_value();
 1629|   352k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   352k|    {
  451|   352k|        return m_value;
  452|   352k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  1.09M|    {
 5698|  1.09M|        return ranges::begin(m_range);
 5699|  1.09M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   172k|{
 8934|   172k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   172k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   172k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   172k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   532k|{
 8672|   532k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   532k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   532k|{
 8607|   532k|#if !SCN_DISABLE_LOCALE
 8608|   532k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   532k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   532k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   532k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   532k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.3k, False: 494k]
  |  |  ------------------
  ------------------
 8615|  38.3k|        return unexpected(result.error());
 8616|  38.3k|    }
 8617|   494k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   532k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  35.5k|{
 8973|  35.5k|    T value;
 8974|  35.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  35.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  35.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 33.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  35.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  33.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.4k|    static_cast<    \
  |  |  929|  33.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.4k|    static_cast<    \
  |  |  929|  33.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  35.5k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   110k|{
 8685|   110k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   110k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   110k|{
 8631|   110k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   110k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   110k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.39k, False: 103k]
  |  |  ------------------
  ------------------
 8635|  6.39k|        return unexpected(result.error());
 8636|  6.39k|    }
 8637|   103k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   110k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   103k|    {
 1663|   103k|        return std::move(value());
 1664|   103k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   179k|{
 8867|   179k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   179k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   179k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   179k|    static_cast<    \
  |  |  929|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   179k|    static_cast<    \
  |  |  929|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   179k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   358k|    {
 7975|   358k|        return m_str;
 7976|   358k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   358k|{
 8820|   358k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.5k, False: 332k]
  |  |  ------------------
  ------------------
 8821|  25.5k|        return unexpected(result.error());
 8822|  25.5k|    }
 8823|   332k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   332k|    static_cast<    \
  |  |  929|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   332k|    static_cast<    \
  |  |  929|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   358k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.7k|    {
 1476|  27.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.7k|    {
  447|  27.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   395k|    {
 1177|   395k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   367k|    {
 5830|   367k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   367k|    {
 1430|   367k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   367k|    {
  437|   367k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   358k|    {
 7971|   358k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   395k|    {
 1598|   395k|        return has_value();
 1599|   395k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   763k|    {
  485|   763k|        return m_has_value;
  486|   763k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   367k|    {
 1673|   367k|        return &value();
 1674|   367k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   367k|    {
 1627|   367k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   367k|        return this->get_value();
 1629|   367k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   367k|    {
  451|   367k|        return m_value;
  452|   367k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   179k|{
 8934|   179k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   179k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   179k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   179k|    static_cast<    \
  |  |  929|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   179k|    static_cast<    \
  |  |  929|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   179k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  37.2k|{
 8973|  37.2k|    T value;
 8974|  37.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  37.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  37.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  37.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  37.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 35.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  37.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  35.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  35.0k|    static_cast<    \
  |  |  929|  35.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  35.0k|    static_cast<    \
  |  |  929|  35.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  37.2k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   181k|{
 8867|   181k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   181k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   181k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   181k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   362k|    {
 7975|   362k|        return m_str;
 7976|   362k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   362k|{
 8820|   362k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.5k, False: 336k]
  |  |  ------------------
  ------------------
 8821|  25.5k|        return unexpected(result.error());
 8822|  25.5k|    }
 8823|   336k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   336k|    static_cast<    \
  |  |  929|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   336k|    static_cast<    \
  |  |  929|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   362k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.7k|    {
 1476|  27.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.7k|    {
  447|  27.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   399k|    {
 1177|   399k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   372k|    {
 5830|   372k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   372k|    {
 1430|   372k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   372k|    {
  437|   372k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   362k|    {
 7971|   362k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   399k|    {
 1598|   399k|        return has_value();
 1599|   399k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   771k|    {
  485|   771k|        return m_has_value;
  486|   771k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   372k|    {
 1673|   372k|        return &value();
 1674|   372k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   372k|    {
 1627|   372k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   372k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   372k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   372k|        return this->get_value();
 1629|   372k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   372k|    {
  451|   372k|        return m_value;
  452|   372k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   181k|{
 8934|   181k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   181k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   181k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   181k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  37.6k|{
 8973|  37.6k|    T value;
 8974|  37.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  37.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  37.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  37.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  37.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 35.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  37.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  35.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  35.4k|    static_cast<    \
  |  |  929|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  35.4k|    static_cast<    \
  |  |  929|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  37.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   170k|    {
 2724|   170k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   170k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   170k|    {
 2705|   170k|        return decay_copy(t.begin());
 2706|   170k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  2.88M|{
 1949|  2.88M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.88M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   895k|    {
 2781|   895k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   895k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   895k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   895k|    {
 2763|   895k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   895k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   895k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   264k|{
 5396|   264k|    detail::check_scan_arg_types<Args...>();
 5397|   264k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   264k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   264k|    {
 5349|   264k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   264k|    {
 5360|   264k|        return {detail::make_arg<
 5361|   264k|            kind, Context,
 5362|   264k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   264k|                                 typename Context::char_type>::value>(args)...};
 5364|   264k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   264k|{
 5170|   264k|    return make_value<Context>(value).ref_value;
 5171|   264k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   288k|{
 5120|   288k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   288k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   288k|                                  needs_context_tag>) {
 5124|   288k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   288k|    }
 5126|   288k|    else {
 5127|   288k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   288k|            value, context_tag<Context>{}));
 5129|   288k|    }
 5130|   288k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   288k|    {                                                                        \
 4959|   288k|        return val;                                                          \
 4960|   288k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   203k|{
 8591|   203k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   203k|    auto result = vscan_impl(buffer, format, args);
 8594|   203k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.7k, False: 126k]
  |  |  ------------------
  ------------------
 8595|  76.7k|        return unexpected(result.error());
 8596|  76.7k|    }
 8597|   126k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   203k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   445k|{
 4720|   445k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   445k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   445k|                  "\n"
 4724|   445k|                  "Unsupported range type given as input to a scanning "
 4725|   445k|                  "function.\n"
 4726|   445k|                  "A range needs to have a character type (value type) "
 4727|   445k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   445k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   445k|                  "to be included.\n"
 4730|   445k|                  "See the scnlib documentation for more details.");
 4731|   445k|    static_assert(
 4732|   445k|        !std::is_same_v<T, custom_char_traits>,
 4733|   445k|        "\n"
 4734|   445k|        "Unsupported range type given as input to a scanning "
 4735|   445k|        "function.\n"
 4736|   445k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   445k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   445k|        "not supported.");
 4739|   445k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   445k|                  "\n"
 4741|   445k|                  "Unsupported range type given as input to a scanning "
 4742|   445k|                  "function.\n"
 4743|   445k|                  "file_marker_found cannot be used as an "
 4744|   445k|                  "source range type to scn::scan.\n"
 4745|   445k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   445k|                  "and do not provide an explicit source range, "
 4747|   445k|                  "or use scn::scan with a FILE* directly.");
 4748|   445k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   445k|                  "\n"
 4750|   445k|                  "Unsupported range type given as input to a scanning "
 4751|   445k|                  "function.\n"
 4752|   445k|                  "In order to be scannable, a range needs to satisfy "
 4753|   445k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   445k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   445k|                  "\n"
 4756|   445k|                  "Unsupported range type given as input to a scanning "
 4757|   445k|                  "function.\n"
 4758|   445k|                  "A range needs to model forward_range and have a valid "
 4759|   445k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   445k|                  "Examples of scannable ranges are std::string, "
 4761|   445k|                  "std::string_view, "
 4762|   445k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   445k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   445k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   445k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   445k|{
 4659|   445k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   445k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   445k|    }
 4662|   445k|    else {
 4663|   445k|        return invalid_char_type{};
 4664|   445k|    }
 4665|   445k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   445k|    {
 2855|   445k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   445k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   445k|    {
 2836|   445k|        return t.data();
 2837|   445k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   445k|    {
 3231|   445k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.35k, False: 444k]
  ------------------
 3232|   445k|                   ? nullptr
 3233|   445k|                   : std::addressof(*ranges::begin(derived()));
 3234|   445k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   445k|    {
 3005|   445k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   445k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   445k|    {
 2978|   445k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   445k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   813k|    {
 3339|   813k|        return m_iterator == m_sentinel;
 3340|   813k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   890k|    {
 3185|   890k|        return static_cast<const D&>(*this);
 3186|   890k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   723k|    {
 2724|   723k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   723k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   723k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   723k|    {
 2705|   723k|        return decay_copy(t.begin());
 2706|   723k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  15.1M|    {
 3330|  15.1M|        return m_iterator;
 3331|  15.1M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   445k|    {
 2930|   445k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   445k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   445k|    {
 2896|   445k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   445k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  1.96M|    {
 3346|  1.96M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.96M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   166k|    {
 1476|   166k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   166k|    {
  447|   166k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   445k|    {
 1177|   445k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   279k|{
 5923|   279k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   279k|                      ranges::iterator_t<SourceRange>>) {
 5925|   279k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   279k|    }
 5927|   279k|    else {
 5928|   279k|        auto it = ranges::begin(source);
 5929|   279k|        while (n > 0) {
 5930|   279k|            --n;
 5931|   279k|            ++it;
 5932|   279k|        }
 5933|   279k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   279k|    }
 5935|   279k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   819k|    {
 2724|   819k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   819k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   819k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   819k|    {
 2705|   819k|        return decay_copy(t.begin());
 2706|   819k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   279k|{
 5910|   279k|    return ranges::end(source);
 5911|   279k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   279k|    {
 2781|   279k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   279k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   279k|    {
 2763|   279k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   279k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  8.60M|    {
 3334|  8.60M|        return m_sentinel;
 3335|  8.60M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   279k|    {
 1430|   279k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   279k|    {
  437|   279k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   132k|    {
 7975|   132k|        return m_str;
 7976|   132k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   264k|    {
 5426|   264k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   264k|    {
 5379|   264k|        return m_argptrs;
 5380|   264k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   814k|    {
 5478|   814k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   132k|{
 8820|   132k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.1k, False: 81.0k]
  |  |  ------------------
  ------------------
 8821|  51.1k|        return unexpected(result.error());
 8822|  51.1k|    }
 8823|  81.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  81.0k|    static_cast<    \
  |  |  929|  81.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  81.0k|    static_cast<    \
  |  |  929|  81.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   132k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   445k|    {
 1598|   445k|        return has_value();
 1599|   445k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   891k|    {
  485|   891k|        return m_has_value;
  486|   891k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   166k|    {
 1604|   166k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   166k|        return this->get_unexpected().error();
 1606|   166k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   166k|    {
  468|   166k|        return m_unexpected;
  469|   166k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  55.4k|    {
 1476|  55.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  55.4k|    {
  447|  55.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   144k|    {
 1177|   144k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   253k|    {
 1653|   253k|        return value();
 1654|   253k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   279k|    {
 1627|   279k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   279k|        return this->get_value();
 1629|   279k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   279k|    {
  451|   279k|        return m_value;
  452|   279k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|  88.9k|    {
 5830|  88.9k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|   279k|    {
 5681|   279k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  88.9k|    {
 1430|  88.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  88.9k|    {
  437|  88.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   264k|    {
 5374|   264k|        return m_args;
 5375|   264k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  5.40M|    {
 3316|  5.40M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   814k|{
 7696|   814k|    return s;
 7697|   814k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   814k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   132k|    {
 7971|   132k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   144k|    {
 1598|   144k|        return has_value();
 1599|   144k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   233k|    {
  485|   233k|        return m_has_value;
  486|   233k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|  88.9k|    {
 1673|  88.9k|        return &value();
 1674|  88.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  88.9k|    {
 1627|  88.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  88.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  88.9k|        return this->get_value();
 1629|  88.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  88.9k|    {
  451|  88.9k|        return m_value;
  452|  88.9k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   279k|    {
 5698|   279k|        return ranges::begin(m_range);
 5699|   279k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   203k|{
 8607|   203k|#if !SCN_DISABLE_LOCALE
 8608|   203k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   203k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   203k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   203k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   203k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.7k, False: 126k]
  |  |  ------------------
  ------------------
 8615|  76.7k|        return unexpected(result.error());
 8616|  76.7k|    }
 8617|   126k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   203k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  24.3k|{
 5155|  24.3k|    check_scan_arg_types<T>();
 5156|       |
 5157|  24.3k|    basic_scan_arg<Context> arg;
 5158|  24.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  24.3k|    arg.m_value = make_value<Context>(value);
 5160|  24.3k|    return arg;
 5161|  24.3k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   891k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  38.3k|{
 8631|  38.3k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  38.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  38.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  38.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.7k, False: 25.5k]
  |  |  ------------------
  ------------------
 8635|  12.7k|        return unexpected(result.error());
 8636|  12.7k|    }
 8637|  25.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  38.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  25.5k|    {
 1663|  25.5k|        return std::move(value());
 1664|  25.5k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   272k|{
 5396|   272k|    detail::check_scan_arg_types<Args...>();
 5397|   272k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   272k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   272k|    {
 5349|   272k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   272k|    {
 5360|   272k|        return {detail::make_arg<
 5361|   272k|            kind, Context,
 5362|   272k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   272k|                                 typename Context::char_type>::value>(args)...};
 5364|   272k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   272k|{
 5170|   272k|    return make_value<Context>(value).ref_value;
 5171|   272k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   298k|{
 5120|   298k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   298k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   298k|                                  needs_context_tag>) {
 5124|   298k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   298k|    }
 5126|   298k|    else {
 5127|   298k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   298k|            value, context_tag<Context>{}));
 5129|   298k|    }
 5130|   298k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   298k|    {                                                                        \
 4959|   298k|        return val;                                                          \
 4960|   298k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   136k|    {
 7975|   136k|        return m_str;
 7976|   136k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   272k|    {
 5426|   272k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   272k|    {
 5379|   272k|        return m_argptrs;
 5380|   272k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   136k|{
 8820|   136k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.1k, False: 85.3k]
  |  |  ------------------
  ------------------
 8821|  51.1k|        return unexpected(result.error());
 8822|  51.1k|    }
 8823|  85.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  85.3k|    static_cast<    \
  |  |  929|  85.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  85.3k|    static_cast<    \
  |  |  929|  85.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   136k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  55.4k|    {
 1476|  55.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  55.4k|    {
  447|  55.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   149k|    {
 1177|   149k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|  93.9k|    {
 5830|  93.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  93.9k|    {
 1430|  93.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  93.9k|    {
  437|  93.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   272k|    {
 5374|   272k|        return m_args;
 5375|   272k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   136k|    {
 7971|   136k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   149k|    {
 1598|   149k|        return has_value();
 1599|   149k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   243k|    {
  485|   243k|        return m_has_value;
  486|   243k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|  93.9k|    {
 1673|  93.9k|        return &value();
 1674|  93.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  93.9k|    {
 1627|  93.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  93.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  93.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  93.9k|        return this->get_value();
 1629|  93.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  93.9k|    {
  451|  93.9k|        return m_value;
  452|  93.9k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  25.7k|{
 5155|  25.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  25.7k|    basic_scan_arg<Context> arg;
 5158|  25.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  25.7k|    arg.m_value = make_value<Context>(value);
 5160|  25.7k|    return arg;
 5161|  25.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   277k|{
 5396|   277k|    detail::check_scan_arg_types<Args...>();
 5397|   277k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   277k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   277k|    {
 5349|   277k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   277k|    {
 5360|   277k|        return {detail::make_arg<
 5361|   277k|            kind, Context,
 5362|   277k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   277k|                                 typename Context::char_type>::value>(args)...};
 5364|   277k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   277k|{
 5170|   277k|    return make_value<Context>(value).ref_value;
 5171|   277k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   303k|{
 5120|   303k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   303k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   303k|                                  needs_context_tag>) {
 5124|   303k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   303k|    }
 5126|   303k|    else {
 5127|   303k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   303k|            value, context_tag<Context>{}));
 5129|   303k|    }
 5130|   303k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   303k|    {                                                                        \
 4959|   303k|        return val;                                                          \
 4960|   303k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   138k|    {
 7975|   138k|        return m_str;
 7976|   138k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   277k|    {
 5426|   277k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   277k|    {
 5379|   277k|        return m_argptrs;
 5380|   277k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   138k|{
 8820|   138k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.1k, False: 87.5k]
  |  |  ------------------
  ------------------
 8821|  51.1k|        return unexpected(result.error());
 8822|  51.1k|    }
 8823|  87.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  87.5k|    static_cast<    \
  |  |  929|  87.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  87.5k|    static_cast<    \
  |  |  929|  87.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   138k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  55.4k|    {
 1476|  55.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  55.4k|    {
  447|  55.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   151k|    {
 1177|   151k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  96.5k|    {
 5830|  96.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  96.5k|    {
 1430|  96.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  96.5k|    {
  437|  96.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   277k|    {
 5374|   277k|        return m_args;
 5375|   277k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   138k|    {
 7971|   138k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   151k|    {
 1598|   151k|        return has_value();
 1599|   151k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   248k|    {
  485|   248k|        return m_has_value;
  486|   248k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  96.5k|    {
 1673|  96.5k|        return &value();
 1674|  96.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  96.5k|    {
 1627|  96.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  96.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  96.5k|        return this->get_value();
 1629|  96.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  96.5k|    {
  451|  96.5k|        return m_value;
  452|  96.5k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  26.4k|{
 5155|  26.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  26.4k|    basic_scan_arg<Context> arg;
 5158|  26.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  26.4k|    arg.m_value = make_value<Context>(value);
 5160|  26.4k|    return arg;
 5161|  26.4k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   166k|    {
 2724|   166k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   166k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   166k|    {
 2705|   166k|        return decay_copy(t.begin());
 2706|   166k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  8.59M|{
 1949|  8.59M|    return SCN_FWD(t);
  ------------------
  |  |  930|  8.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  8.59M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   890k|    {
 2781|   890k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   890k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   890k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   890k|    {
 2763|   890k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   890k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   890k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   203k|{
 8591|   203k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   203k|    auto result = vscan_impl(buffer, format, args);
 8594|   203k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.7k, False: 126k]
  |  |  ------------------
  ------------------
 8595|  76.7k|        return unexpected(result.error());
 8596|  76.7k|    }
 8597|   126k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   203k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   445k|{
 4720|   445k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   445k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   445k|                  "\n"
 4724|   445k|                  "Unsupported range type given as input to a scanning "
 4725|   445k|                  "function.\n"
 4726|   445k|                  "A range needs to have a character type (value type) "
 4727|   445k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   445k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   445k|                  "to be included.\n"
 4730|   445k|                  "See the scnlib documentation for more details.");
 4731|   445k|    static_assert(
 4732|   445k|        !std::is_same_v<T, custom_char_traits>,
 4733|   445k|        "\n"
 4734|   445k|        "Unsupported range type given as input to a scanning "
 4735|   445k|        "function.\n"
 4736|   445k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   445k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   445k|        "not supported.");
 4739|   445k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   445k|                  "\n"
 4741|   445k|                  "Unsupported range type given as input to a scanning "
 4742|   445k|                  "function.\n"
 4743|   445k|                  "file_marker_found cannot be used as an "
 4744|   445k|                  "source range type to scn::scan.\n"
 4745|   445k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   445k|                  "and do not provide an explicit source range, "
 4747|   445k|                  "or use scn::scan with a FILE* directly.");
 4748|   445k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   445k|                  "\n"
 4750|   445k|                  "Unsupported range type given as input to a scanning "
 4751|   445k|                  "function.\n"
 4752|   445k|                  "In order to be scannable, a range needs to satisfy "
 4753|   445k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   445k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   445k|                  "\n"
 4756|   445k|                  "Unsupported range type given as input to a scanning "
 4757|   445k|                  "function.\n"
 4758|   445k|                  "A range needs to model forward_range and have a valid "
 4759|   445k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   445k|                  "Examples of scannable ranges are std::string, "
 4761|   445k|                  "std::string_view, "
 4762|   445k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   445k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   445k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   445k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   445k|{
 4690|   445k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   445k|        return file_marker_found{};
 4692|   445k|    }
 4693|   445k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   445k|        if constexpr (ranges::range<Range>) {
 4695|   445k|            return insufficient_range{};
 4696|   445k|        }
 4697|   445k|        else {
 4698|   445k|            return invalid_input_range{};
 4699|   445k|        }
 4700|   445k|    }
 4701|   445k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   445k|        return invalid_char_type{};
 4703|   445k|    }
 4704|   445k|    else {
 4705|   445k|        return make_forward_scan_buffer(r);
 4706|   445k|    }
 4707|   445k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   445k|{
 4524|   445k|    return basic_scan_forward_buffer_impl(range);
 4525|   445k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   445k|    {
 4411|   445k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   445k|    {
 4382|   445k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   445k|    {
 4151|   445k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   445k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   724k|    {
 2724|   724k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   724k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   724k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   724k|    {
 2705|   724k|        return decay_copy(t.begin());
 2706|   724k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  1.00M|    {
 3330|  1.00M|        return m_iterator;
 3331|  1.00M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  2.19M|    {
 4415|  2.19M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 161k, False: 2.02M]
  ------------------
 4416|   161k|            return false;
 4417|   161k|        }
 4418|  2.02M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  2.02M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  2.02M|        }
 4421|  2.02M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.58M, False: 444k]
  ------------------
 4422|  1.58M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.58M|                                          this->m_current_view.begin(),
 4424|  1.58M|                                          this->m_current_view.end());
 4425|  1.58M|        }
 4426|  2.02M|        m_latest = *m_cursor;
 4427|  2.02M|        ++m_cursor;
 4428|  2.02M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  2.02M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  2.02M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  2.02M|        }
 4432|  2.02M|        return true;
 4433|  2.02M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.25M|    {
 2781|  6.25M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.25M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.25M|    {
 2763|  6.25M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.25M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  6.53M|    {
 3334|  6.53M|        return m_sentinel;
 3335|  6.53M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   445k|    {
 4071|   445k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   445k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   445k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   166k|    {
 1476|   166k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   166k|    {
  447|   166k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   445k|    {
 1177|   445k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   279k|{
 5923|   279k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   279k|                      ranges::iterator_t<SourceRange>>) {
 5925|   279k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   279k|    }
 5927|   279k|    else {
 5928|   279k|        auto it = ranges::begin(source);
 5929|   279k|        while (n > 0) {
 5930|   279k|            --n;
 5931|   279k|            ++it;
 5932|   279k|        }
 5933|   279k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   279k|    }
 5935|   279k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   279k|    {
 2724|   279k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   279k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   279k|    {
 2705|   279k|        return decay_copy(t.begin());
 2706|   279k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   279k|{
 5910|   279k|    return ranges::end(source);
 5911|   279k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   279k|    {
 2781|   279k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   279k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   279k|    {
 2763|   279k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   279k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   279k|    {
 1430|   279k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   279k|    {
  437|   279k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   132k|    {
 7975|   132k|        return m_str;
 7976|   132k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   132k|{
 8820|   132k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.1k, False: 80.9k]
  |  |  ------------------
  ------------------
 8821|  51.1k|        return unexpected(result.error());
 8822|  51.1k|    }
 8823|  80.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  80.9k|    static_cast<    \
  |  |  929|  80.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  80.9k|    static_cast<    \
  |  |  929|  80.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   132k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   445k|    {
 1598|   445k|        return has_value();
 1599|   445k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   890k|    {
  485|   890k|        return m_has_value;
  486|   890k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   166k|    {
 1604|   166k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   166k|        return this->get_unexpected().error();
 1606|   166k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   166k|    {
  468|   166k|        return m_unexpected;
  469|   166k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  55.4k|    {
 1476|  55.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  55.4k|    {
  447|  55.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   144k|    {
 1177|   144k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   253k|    {
 1653|   253k|        return value();
 1654|   253k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   279k|    {
 1627|   279k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   279k|        return this->get_value();
 1629|   279k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   279k|    {
  451|   279k|        return m_value;
  452|   279k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|  88.8k|    {
 5830|  88.8k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   279k|    {
 5681|   279k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  88.8k|    {
 1430|  88.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  88.8k|    {
  437|  88.8k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   724k|    {
 3316|   724k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   132k|    {
 7971|   132k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   144k|    {
 1598|   144k|        return has_value();
 1599|   144k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   233k|    {
  485|   233k|        return m_has_value;
  486|   233k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|  88.8k|    {
 1673|  88.8k|        return &value();
 1674|  88.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  88.8k|    {
 1627|  88.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  88.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  88.8k|        return this->get_value();
 1629|  88.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  88.8k|    {
  451|  88.8k|        return m_value;
  452|  88.8k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   279k|    {
 5698|   279k|        return ranges::begin(m_range);
 5699|   279k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   203k|{
 8607|   203k|#if !SCN_DISABLE_LOCALE
 8608|   203k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   203k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   203k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   203k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   203k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.7k, False: 126k]
  |  |  ------------------
  ------------------
 8615|  76.7k|        return unexpected(result.error());
 8616|  76.7k|    }
 8617|   126k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   203k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  38.2k|{
 8631|  38.2k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  38.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  38.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.7k, False: 25.4k]
  |  |  ------------------
  ------------------
 8635|  12.7k|        return unexpected(result.error());
 8636|  12.7k|    }
 8637|  25.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  38.2k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  25.4k|    {
 1663|  25.4k|        return std::move(value());
 1664|  25.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   136k|    {
 7975|   136k|        return m_str;
 7976|   136k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   136k|{
 8820|   136k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.1k, False: 85.2k]
  |  |  ------------------
  ------------------
 8821|  51.1k|        return unexpected(result.error());
 8822|  51.1k|    }
 8823|  85.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  85.2k|    static_cast<    \
  |  |  929|  85.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  85.2k|    static_cast<    \
  |  |  929|  85.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   136k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  55.4k|    {
 1476|  55.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  55.4k|    {
  447|  55.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   149k|    {
 1177|   149k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  93.8k|    {
 5830|  93.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  93.8k|    {
 1430|  93.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  93.8k|    {
  437|  93.8k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   136k|    {
 7971|   136k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   149k|    {
 1598|   149k|        return has_value();
 1599|   149k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   243k|    {
  485|   243k|        return m_has_value;
  486|   243k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  93.8k|    {
 1673|  93.8k|        return &value();
 1674|  93.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  93.8k|    {
 1627|  93.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  93.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  93.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  93.8k|        return this->get_value();
 1629|  93.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  93.8k|    {
  451|  93.8k|        return m_value;
  452|  93.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   138k|    {
 7975|   138k|        return m_str;
 7976|   138k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   138k|{
 8820|   138k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.1k, False: 87.5k]
  |  |  ------------------
  ------------------
 8821|  51.1k|        return unexpected(result.error());
 8822|  51.1k|    }
 8823|  87.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  87.5k|    static_cast<    \
  |  |  929|  87.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  87.5k|    static_cast<    \
  |  |  929|  87.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   138k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  55.4k|    {
 1476|  55.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  55.4k|    {
  447|  55.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   151k|    {
 1177|   151k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  96.4k|    {
 5830|  96.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  96.4k|    {
 1430|  96.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  96.4k|    {
  437|  96.4k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   138k|    {
 7971|   138k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   151k|    {
 1598|   151k|        return has_value();
 1599|   151k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   248k|    {
  485|   248k|        return m_has_value;
  486|   248k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  96.4k|    {
 1673|  96.4k|        return &value();
 1674|  96.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  96.4k|    {
 1627|  96.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  96.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  96.4k|        return this->get_value();
 1629|  96.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  96.4k|    {
  451|  96.4k|        return m_value;
  452|  96.4k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  3.43M|    {
 3568|  3.43M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.43M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  3.43M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  14.2M|    {
 3574|  14.2M|        return m_code == good;
 3575|  14.2M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   383k|    {
 3585|   383k|        return m_code;
 3586|   383k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  53.0M|    {
 3330|  53.0M|        return m_iterator;
 3331|  53.0M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  18.1M|    {
 3330|  18.1M|        return m_iterator;
 3331|  18.1M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  2.23M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   597k|    {
 6272|   597k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|   597k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|   597k|            m_specs.localized = true;
 6274|   597k|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|   597k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  1.63M|    {
 6303|  1.63M|        m_specs.type = type;
 6304|  1.63M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  2.23M|    {
 6376|  2.23M|        return static_cast<bool>(m_error);
 6377|  2.23M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   383k|{
 3609|   383k|    return a.code() == b;
 3610|   383k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   383k|{
 3613|   383k|    return !(a == b);
 3614|   383k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   597k|{
 7063|   597k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 597k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 597k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 597k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 597k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 597k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 597k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 597k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 597k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 597k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 597k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 597k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 597k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 597k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 597k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 597k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 597k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   191k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 191k, False: 406k]
  ------------------
 7091|   392k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 201k, False: 396k]
  ------------------
 7092|   597k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 205k, False: 392k]
  ------------------
 7093|   597k|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 597k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 597k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 597k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 597k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 597k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 597k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   597k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   597k|            SCN_CLANG_POP
 7110|   597k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   597k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.60M|    {
 2896|  2.60M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.60M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  2.60M|    {
 2930|  2.60M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.60M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  2.60M|    {
 2953|  2.60M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  2.60M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  2.60M|    {
 2962|  2.60M|        return fn::impl(std::forward<T>(t));
 2963|  2.60M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|    983|{
 3654|    983|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    983|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    983|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.22k|{
 3654|  2.22k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.22k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  26.8k|{
 3654|  26.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  26.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  26.8k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  2.23M|{
 7193|  2.23M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 1.63M, False: 597k]
  ------------------
 7194|  2.23M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 1.63M]
  ------------------
 7195|  1.63M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 1.63M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  2.23M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   330M|    {
 4195|   330M|        return m_end == nullptr;
 4196|   330M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   891k|{
 3715|   891k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   891k|                                          const CharT*, const CharT*>) {
 3717|   891k|        return {first, last};
 3718|   891k|    }
 3719|   891k|    else {
 3720|   891k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   891k|    }
 3722|   891k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  4.42M|    {
 4211|  4.42M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 4.42M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  4.42M|        return parent()->get_segment_starting_at(position());
 4217|  4.42M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   183M|    {
 4205|   183M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   183M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   183M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   183M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  4.42M|    {
 4101|  4.42M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92M, False: 2.50M]
  |  |  ------------------
  ------------------
 4102|  4.42M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  1.92M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  1.92M|        }
 4105|  2.50M|        const auto start = pos - m_putback_buffer.size();
 4106|  2.50M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  2.50M|        return m_current_view.substr(start);
 4108|  2.50M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  3.08M|    {
 4200|  3.08M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  3.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  3.08M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  3.08M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  8.12M|    {
 4190|  8.12M|        return m_position;
 4191|  8.12M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  3.52M|    {
 4123|  3.52M|        return m_is_contiguous;
 4124|  3.52M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  57.0M|    {
 4195|  57.0M|        return m_end == nullptr;
 4196|  57.0M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   271k|{
 3715|   271k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   271k|                                          const CharT*, const CharT*>) {
 3717|   271k|        return {first, last};
 3718|   271k|    }
 3719|   271k|    else {
 3720|   271k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   271k|    }
 3722|   271k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  1.00M|    {
 4211|  1.00M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 1.00M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  1.00M|        return parent()->get_segment_starting_at(position());
 4217|  1.00M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  30.5M|    {
 4205|  30.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  30.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  30.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  30.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  1.00M|    {
 4101|  1.00M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 551k, False: 456k]
  |  |  ------------------
  ------------------
 4102|  1.00M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   551k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   551k|        }
 4105|   456k|        const auto start = pos - m_putback_buffer.size();
 4106|   456k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   456k|        return m_current_view.substr(start);
 4108|   456k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  1.15M|    {
 4200|  1.15M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.15M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.15M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  2.25M|    {
 4190|  2.25M|        return m_position;
 4191|  2.25M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.33M|    {
 4123|  1.33M|        return m_is_contiguous;
 4124|  1.33M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  9.24M|    {
 3180|  9.24M|        return static_cast<D&>(*this);
 3181|  9.24M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  4.62M|    {
 2978|  4.62M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  4.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  4.62M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  4.62M|    {
 3005|  4.62M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  4.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  4.62M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  4.62M|    {
 3221|  4.62M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 11.2k, False: 4.61M]
  ------------------
 3222|  4.62M|                   ? nullptr
 3223|  4.62M|                   : std::addressof(*ranges::begin(derived()));
 3224|  4.62M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   734k|    {
 3180|   734k|        return static_cast<D&>(*this);
 3181|   734k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   367k|    {
 2978|   367k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   367k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   367k|    {
 3005|   367k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   367k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   367k|    {
 3221|   367k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 367k]
  ------------------
 3222|   367k|                   ? nullptr
 3223|   367k|                   : std::addressof(*ranges::begin(derived()));
 3224|   367k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|   844k|    {
 8169|   844k|        return ranges::subrange{begin(), end()};
 8170|   844k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  2.46M|    {
 8153|  2.46M|        return m_current;
 8154|  2.46M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|   844k|    {
 8161|   844k|        return ranges::default_sentinel;
 8162|   844k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  12.9M|    {
 3316|  12.9M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  4.74M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.17M|    {
 1837|  1.17M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.17M|                                            std::forward<F>(f));
 1839|  1.17M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.17M|{
 1323|  1.17M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.17M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.17M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.17M|            return result(*std::forward<Exp>(exp));
 1327|  1.17M|        }
 1328|       |
 1329|  1.17M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.17M|        return result(unexpect, monostate{});
 1331|  1.17M|    }
 1332|  1.17M|    else {
 1333|  1.17M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.17M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.17M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.15M, False: 18.5k]
  |  |  ------------------
  ------------------
 1335|  1.17M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.17M|                   : result(unexpect,
 1337|  18.5k|                            trivial_invoke(std::forward<F>(f),
 1338|  18.5k|                                           std::forward<Exp>(exp).error()));
 1339|  1.17M|    }
 1340|  1.17M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  12.4M|    {
  485|  12.4M|        return m_has_value;
  486|  12.4M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  4.20M|    {
 1663|  4.20M|        return std::move(value());
 1664|  4.20M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  4.82M|    {
 1627|  4.82M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.82M|        return this->get_value();
 1629|  4.82M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  4.82M|    {
  451|  4.82M|        return m_value;
  452|  4.82M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  5.20M|    {
 1430|  5.20M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  5.20M|    {
  437|  5.20M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.63M|    {
 1177|  6.63M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  40.9k|{
 1211|  40.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  40.9k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  53.6k|    {
 1614|  53.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  53.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  53.6k|        return std::move(this->get_unexpected().error());
 1616|  53.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  72.2k|    {
  468|  72.2k|        return m_unexpected;
  469|  72.2k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   399k|    {
  361|   399k|        return m_unexpected;
  362|   399k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.16M|    {
 1486|  1.16M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.36M|    {
  447|  1.36M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   330k|    {
 8169|   330k|        return ranges::subrange{begin(), end()};
 8170|   330k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   863k|    {
 8153|   863k|        return m_current;
 8154|   863k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   330k|    {
 8161|   330k|        return ranges::default_sentinel;
 8162|   330k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  4.38M|    {
 3316|  4.38M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   445k|    {
 1837|   445k|        return detail::transform_error_impl(std::move(*this),
 1838|   445k|                                            std::forward<F>(f));
 1839|   445k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   445k|{
 1323|   445k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   445k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   445k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   445k|            return result(*std::forward<Exp>(exp));
 1327|   445k|        }
 1328|       |
 1329|   445k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   445k|        return result(unexpect, monostate{});
 1331|   445k|    }
 1332|   445k|    else {
 1333|   445k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   445k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   445k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 442k, False: 3.23k]
  |  |  ------------------
  ------------------
 1335|   445k|                   ? result(*std::forward<Exp>(exp))
 1336|   445k|                   : result(unexpect,
 1337|  3.23k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.23k|                                           std::forward<Exp>(exp).error()));
 1339|   445k|    }
 1340|   445k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.18M|    {
  485|  4.18M|        return m_has_value;
  486|  4.18M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.54M|    {
 1663|  1.54M|        return std::move(value());
 1664|  1.54M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.55M|    {
 1627|  1.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.55M|        return this->get_value();
 1629|  1.55M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.55M|    {
  451|  1.55M|        return m_value;
  452|  1.55M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  1.48M|    {
 1430|  1.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.48M|    {
  437|  1.48M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.54M|    {
 1177|  2.54M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  52.1k|    {
 1614|  52.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  52.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  52.1k|        return std::move(this->get_unexpected().error());
 1616|  52.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  53.8k|    {
  468|  53.8k|        return m_unexpected;
  469|  53.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   603k|    {
 1486|   603k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.05M|    {
  447|  1.05M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   145k|    {
  347|   145k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   145k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   145k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   183k|    {
 1476|   183k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.17M|    {
  447|  1.17M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.82M|    {
 1177|  5.82M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  4.58M|    {
 1430|  4.58M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.58M|    {
  437|  4.58M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  6.82M|    {
 1598|  6.82M|        return has_value();
 1599|  6.82M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  10.7M|    {
  485|  10.7M|        return m_has_value;
  486|  10.7M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   220k|    {
 1604|   220k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   220k|        return this->get_unexpected().error();
 1606|   220k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   220k|    {
  468|   220k|        return m_unexpected;
  469|   220k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  2.95M|    {
 1663|  2.95M|        return std::move(value());
 1664|  2.95M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.66M|    {
 1627|  3.66M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.66M|        return this->get_value();
 1629|  3.66M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.66M|    {
  451|  3.66M|        return m_value;
  452|  3.66M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   369k|    {
 1476|   369k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   887k|    {
  447|   887k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.54M|    {
 1177|  2.54M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.65M|    {
 1430|  1.65M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.65M|    {
  437|  1.65M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  2.98M|    {
 1598|  2.98M|        return has_value();
 1599|  2.98M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  4.72M|    {
  485|  4.72M|        return m_has_value;
  486|  4.72M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   445k|    {
 1604|   445k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   445k|        return this->get_unexpected().error();
 1606|   445k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   445k|    {
  468|   445k|        return m_unexpected;
  469|   445k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.08M|    {
 1663|  1.08M|        return std::move(value());
 1664|  1.08M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.29M|    {
 1627|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.29M|        return this->get_value();
 1629|  1.29M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.29M|    {
  451|  1.29M|        return m_value;
  452|  1.29M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.03M|    {
 1837|  1.03M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.03M|                                            std::forward<F>(f));
 1839|  1.03M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.03M|{
 1323|  1.03M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.03M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.03M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.03M|            return result(*std::forward<Exp>(exp));
 1327|  1.03M|        }
 1328|       |
 1329|  1.03M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.03M|        return result(unexpect, monostate{});
 1331|  1.03M|    }
 1332|  1.03M|    else {
 1333|  1.03M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.03M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.01M, False: 15.9k]
  |  |  ------------------
  ------------------
 1335|  1.03M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.03M|                   : result(unexpect,
 1337|  15.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  15.9k|                                           std::forward<Exp>(exp).error()));
 1339|  1.03M|    }
 1340|  1.03M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.92M|    {
  485|  3.92M|        return m_has_value;
  486|  3.92M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.01M|    {
 1663|  1.01M|        return std::move(value());
 1664|  1.01M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.35M|    {
 1627|  1.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.35M|        return this->get_value();
 1629|  1.35M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.35M|    {
  451|  1.35M|        return m_value;
  452|  1.35M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  15.9k|    {
 1614|  15.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  15.9k|        return std::move(this->get_unexpected().error());
 1616|  15.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  20.7k|    {
  468|  20.7k|        return m_unexpected;
  469|  20.7k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   994k|    {
 1486|   994k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  9.78M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   205k|    {
 1476|   205k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  10.3M|    {
 4280|  10.3M|        return x.is_at_end();
 4281|  10.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  25.1M|    {
 4324|  25.1M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 25.1M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  25.1M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 25.1M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  25.1M|        return !read_at_position();
 4331|  25.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   107M|    {
 4304|   107M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   107M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   107M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 107M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   107M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   107M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 93.3M, False: 14.5M]
  |  |  ------------------
  ------------------
 4311|  93.3M|            return true;
 4312|  93.3M|        }
 4313|       |
 4314|  28.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 14.5M, False: 14.2M]
  ------------------
 4315|  14.5M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 278k, False: 14.2M]
  ------------------
 4316|   278k|                return false;
 4317|   278k|            }
 4318|  14.5M|        }
 4319|  14.2M|        return true;
 4320|  14.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   139M|    {
 4081|   139M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   139M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  28.1M|    {
 4239|  28.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  28.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  28.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 28.1M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  28.1M|        auto res = read_at_position();
 4248|  28.1M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  28.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  28.1M|        return parent()->get_character_at(m_position);
 4250|  28.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  28.1M|    {
 4112|  28.1M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  28.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.8M, False: 10.2M]
  |  |  ------------------
  ------------------
 4113|  28.1M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  17.8M|            return m_putback_buffer[pos];
 4115|  17.8M|        }
 4116|  10.2M|        const auto start = pos - m_putback_buffer.size();
 4117|  10.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  10.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  10.2M|        return m_current_view[start];
 4119|  10.2M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  7.50M|    {
 1430|  7.50M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  7.50M|    {
  437|  7.50M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.57M|    {
 1177|  7.57M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   133k|    {
  347|   133k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   133k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   133k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  72.2k|    {
 1476|  72.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  72.2k|    {
  447|  72.2k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   200k|    {
  356|   200k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   200k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   200k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  3.31M|    {
 1598|  3.31M|        return has_value();
 1599|  3.31M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|   616k|    {
 1653|   616k|        return value();
 1654|   616k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  26.2M|    {
 4274|  26.2M|        return !(lhs == rhs);
 4275|  26.2M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  29.3M|    {
 4269|  29.3M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 29.3M, False: 0]
  |  Branch (4269:46): [True: 3.89M, False: 25.4M]
  ------------------
 4270|  29.3M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  54.6M|    {
 4225|  54.6M|        ++m_position;
 4226|  54.6M|        (void)read_at_position();
 4227|  54.6M|        return *this;
 4228|  54.6M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  66.3k|    {
  347|  66.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  66.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  66.3k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  13.9k|    {
 1476|  13.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  13.9k|    {
  447|  13.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.61M|    {
 1177|  1.61M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.59M|    {
 1430|  1.59M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  1.59M|    {
  437|  1.59M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.61M|    {
 1598|  1.61M|        return has_value();
 1599|  1.61M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.22M|    {
  485|  3.22M|        return m_has_value;
  486|  3.22M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  13.9k|    {
 1604|  13.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.9k|        return this->get_unexpected().error();
 1606|  13.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.9k|    {
  468|  13.9k|        return m_unexpected;
  469|  13.9k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.59M|    {
 1663|  1.59M|        return std::move(value());
 1664|  1.59M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.59M|    {
 1627|  1.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.59M|        return this->get_value();
 1629|  1.59M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.59M|    {
  451|  1.59M|        return m_value;
  452|  1.59M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  36.0M|    {
 3334|  36.0M|        return m_sentinel;
 3335|  36.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|  60.6k|    {
  347|  60.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  60.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  60.6k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  12.2M|    {
  361|  12.2M|        return m_unexpected;
  362|  12.2M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  3.35M|    {
  356|  3.35M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.35M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.35M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  14.9M|    {
  347|  14.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  14.9M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  14.9M|    {
  361|  14.9M|        return m_unexpected;
  362|  14.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  14.9M|    {
  356|  14.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  14.9M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   133k|{
 1211|   133k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   133k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.16M|    {
  347|  3.16M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.16M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.16M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  18.5k|    {
 1604|  18.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  18.5k|        return this->get_unexpected().error();
 1606|  18.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.19M|    {
 1476|  1.19M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  1.23M|    {
  447|  1.23M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.9M|    {
 1177|  12.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|   622k|    {
 1430|   622k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   622k|    {
  437|   622k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  6.54M|    {
 1476|  6.54M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  6.54M|    {
  447|  6.54M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  14.0M|    {
 1598|  14.0M|        return has_value();
 1599|  14.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  24.8M|    {
  485|  24.8M|        return m_has_value;
  486|  24.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  3.29M|    {
 1604|  3.29M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.29M|        return this->get_unexpected().error();
 1606|  3.29M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.29M|    {
  468|  3.29M|        return m_unexpected;
  469|  3.29M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  1.27M|    {
 1430|  1.27M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.27M|    {
  437|  1.27M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.27M|    {
 1177|  1.27M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    309|    {
 1476|    309|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    309|    {
  447|    309|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  3.29M|    {
 1653|  3.29M|        return value();
 1654|  3.29M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  6.35M|    {
 1627|  6.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.35M|        return this->get_value();
 1629|  6.35M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.35M|    {
  451|  6.35M|        return m_value;
  452|  6.35M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   113k|    {
 1598|   113k|        return has_value();
 1599|   113k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  2.54M|    {
  485|  2.54M|        return m_has_value;
  486|  2.54M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.15M|    {
 1663|  1.15M|        return std::move(value());
 1664|  1.15M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.27M|    {
 1627|  1.27M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.27M|        return this->get_value();
 1629|  1.27M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.27M|    {
  451|  1.27M|        return m_value;
  452|  1.27M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.08M|    {
 1837|  3.08M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.08M|                                            std::forward<F>(f));
 1839|  3.08M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  3.08M|{
 1323|  3.08M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.08M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.08M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.08M|            return result(*std::forward<Exp>(exp));
 1327|  3.08M|        }
 1328|       |
 1329|  3.08M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.08M|        return result(unexpect, monostate{});
 1331|  3.08M|    }
 1332|  3.08M|    else {
 1333|  3.08M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.08M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.05M, False: 35.1k]
  |  |  ------------------
  ------------------
 1335|  3.08M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.08M|                   : result(unexpect,
 1337|  35.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  35.1k|                                           std::forward<Exp>(exp).error()));
 1339|  3.08M|    }
 1340|  3.08M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  4.50M|    {
 1430|  4.50M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  4.50M|    {
  437|  4.50M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  35.1k|    {
 1486|  35.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.05M|    {
 1663|  3.05M|        return std::move(value());
 1664|  3.05M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  1.33M|    {
 3330|  1.33M|        return m_iterator;
 3331|  1.33M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  1.33M|    {
 3334|  1.33M|        return m_sentinel;
 3335|  1.33M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  7.78M|    {
 1598|  7.78M|        return has_value();
 1599|  7.78M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  12.2M|    {
  485|  12.2M|        return m_has_value;
  486|  12.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   272k|    {
 1604|   272k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   272k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   272k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   272k|        return this->get_unexpected().error();
 1606|   272k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   272k|    {
  468|   272k|        return m_unexpected;
  469|   272k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.34M|    {
 1663|  3.34M|        return std::move(value());
 1664|  3.34M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  4.17M|    {
 1627|  4.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.17M|        return this->get_value();
 1629|  4.17M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.17M|    {
  451|  4.17M|        return m_value;
  452|  4.17M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.07M|{
  326|  2.07M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.07M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  1.03M|    {
 3316|  1.03M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  14.7M|    {
 4291|  14.7M|        return !x.is_at_end();
 4292|  14.7M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  20.7k|    {
 1476|  20.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  20.7k|    {
  447|  20.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.55M|    {
 1177|  2.55M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.53M|    {
 1430|  2.53M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.53M|    {
  437|  2.53M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  1.52M|    {
 1598|  1.52M|        return has_value();
 1599|  1.52M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|   335k|    {
 1653|   335k|        return value();
 1654|   335k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  11.4k|    {
 1476|  11.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  11.4k|    {
  447|  11.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.38M|    {
 1177|  1.38M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  1.36M|    {
 1430|  1.36M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  1.36M|    {
  437|  1.36M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.38M|    {
 1598|  1.38M|        return has_value();
 1599|  1.38M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.76M|    {
  485|  2.76M|        return m_has_value;
  486|  2.76M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  11.4k|    {
 1604|  11.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.4k|        return this->get_unexpected().error();
 1606|  11.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.4k|    {
  468|  11.4k|        return m_unexpected;
  469|  11.4k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  1.36M|    {
 1663|  1.36M|        return std::move(value());
 1664|  1.36M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  1.36M|    {
 1627|  1.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.36M|        return this->get_value();
 1629|  1.36M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.36M|    {
  451|  1.36M|        return m_value;
  452|  1.36M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  4.74k|    {
 1604|  4.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.74k|        return this->get_unexpected().error();
 1606|  4.74k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.04M|    {
 1476|  1.04M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.04M|    {
  447|  1.04M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.81M|    {
 1177|  5.81M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|   341k|    {
 1430|   341k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   341k|    {
  437|   341k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  3.99M|    {
 1476|  3.99M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  3.99M|    {
  447|  3.99M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  6.83M|    {
 1598|  6.83M|        return has_value();
 1599|  6.83M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  11.6M|    {
  485|  11.6M|        return m_has_value;
  486|  11.6M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  2.77M|    {
 1604|  2.77M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.77M|        return this->get_unexpected().error();
 1606|  2.77M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.77M|    {
  468|  2.77M|        return m_unexpected;
  469|  2.77M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  1.04M|    {
 1430|  1.04M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.04M|    {
  437|  1.04M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.04M|    {
 1177|  1.04M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    102|    {
 1476|    102|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    102|    {
  447|    102|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.08M|    {
 1653|  1.08M|        return value();
 1654|  1.08M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.08M|    {
 1627|  1.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.08M|        return this->get_value();
 1629|  1.08M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.08M|    {
  451|  1.08M|        return m_value;
  452|  1.08M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  28.6k|    {
 1598|  28.6k|        return has_value();
 1599|  28.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  2.09M|    {
  485|  2.09M|        return m_has_value;
  486|  2.09M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.01M|    {
 1663|  1.01M|        return std::move(value());
 1664|  1.01M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.04M|    {
 1627|  1.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.04M|        return this->get_value();
 1629|  1.04M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.04M|    {
  451|  1.04M|        return m_value;
  452|  1.04M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|   438k|    {
 1430|   438k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   438k|    {
  437|   438k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.95M|    {
 2855|  1.95M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.95M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.95M|    {
 2836|  1.95M|        return t.data();
 2837|  1.95M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   754k|    {
 1476|   754k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   754k|    {
  447|   754k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.55M|    {
 1177|  8.55M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  7.68M|    {
 1430|  7.68M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  7.68M|    {
  437|  7.68M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  5.20M|    {
 1663|  5.20M|        return std::move(value());
 1664|  5.20M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.23M|{
 1211|  3.23M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.23M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.15M|    {
 1837|  1.15M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.15M|                                            std::forward<F>(f));
 1839|  1.15M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.15M|{
 1323|  1.15M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.15M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.15M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.15M|            return result(*std::forward<Exp>(exp));
 1327|  1.15M|        }
 1328|       |
 1329|  1.15M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.15M|        return result(unexpect, monostate{});
 1331|  1.15M|    }
 1332|  1.15M|    else {
 1333|  1.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.15M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.15M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.15M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.15M|    }
 1340|  1.15M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.15M|    {
 1430|  1.15M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.15M|    {
  437|  1.15M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.15M|    {
 1177|  1.15M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.15M|    {
 1598|  1.15M|        return has_value();
 1599|  1.15M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.31M|    {
  485|  2.31M|        return m_has_value;
  486|  2.31M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.15M|    {
 1663|  1.15M|        return std::move(value());
 1664|  1.15M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.15M|    {
 1627|  1.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.15M|        return this->get_value();
 1629|  1.15M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.15M|    {
  451|  1.15M|        return m_value;
  452|  1.15M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.14M|    {
 1823|  1.14M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.14M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  1.14M|{
 1323|  1.14M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.14M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.14M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.14M|            return result(*std::forward<Exp>(exp));
 1327|  1.14M|        }
 1328|       |
 1329|  1.14M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.14M|        return result(unexpect, monostate{});
 1331|  1.14M|    }
 1332|  1.14M|    else {
 1333|  1.14M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.14M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 1335|  1.14M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.14M|                   : result(unexpect,
 1337|  1.14M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.14M|                                           std::forward<Exp>(exp).error()));
 1339|  1.14M|    }
 1340|  1.14M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|  61.6k|    {
 1430|  61.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  61.6k|    {
  437|  61.6k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   827k|    {
 1653|   827k|        return value();
 1654|   827k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   265k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   113k|    {
 1673|   113k|        return &value();
 1674|   113k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   829k|    {
 2724|   829k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   829k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   829k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   829k|    {
 2705|   829k|        return decay_copy(t.begin());
 2706|   829k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   829k|{
 1949|   829k|    return SCN_FWD(t);
  ------------------
  |  |  930|   829k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   829k|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   508k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.01M|    {
 1837|  1.01M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.01M|                                            std::forward<F>(f));
 1839|  1.01M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.01M|{
 1323|  1.01M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.01M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.01M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.01M|            return result(*std::forward<Exp>(exp));
 1327|  1.01M|        }
 1328|       |
 1329|  1.01M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.01M|        return result(unexpect, monostate{});
 1331|  1.01M|    }
 1332|  1.01M|    else {
 1333|  1.01M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.01M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.01M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.01M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.01M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.01M|    }
 1340|  1.01M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.01M|    {
 1430|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.01M|    {
  437|  1.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.01M|    {
 1177|  1.01M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.01M|    {
 1598|  1.01M|        return has_value();
 1599|  1.01M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.03M|    {
  485|  2.03M|        return m_has_value;
  486|  2.03M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.01M|    {
 1663|  1.01M|        return std::move(value());
 1664|  1.01M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.01M|    {
 1627|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.01M|        return this->get_value();
 1629|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.01M|    {
  451|  1.01M|        return m_value;
  452|  1.01M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|   978k|    {
 1823|   978k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   978k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   978k|{
 1323|   978k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   978k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   978k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   978k|            return result(*std::forward<Exp>(exp));
 1327|   978k|        }
 1328|       |
 1329|   978k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   978k|        return result(unexpect, monostate{});
 1331|   978k|    }
 1332|   978k|    else {
 1333|   978k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   978k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   978k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 978k]
  |  |  ------------------
  ------------------
 1335|   978k|                   ? result(*std::forward<Exp>(exp))
 1336|   978k|                   : result(unexpect,
 1337|   978k|                            trivial_invoke(std::forward<F>(f),
 1338|   978k|                                           std::forward<Exp>(exp).error()));
 1339|   978k|    }
 1340|   978k|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|  60.4k|    {
 1430|  60.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  60.4k|    {
  437|  60.4k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   978k|    {
 3648|   978k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   710k|    {
 1653|   710k|        return value();
 1654|   710k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  28.5k|    {
 1673|  28.5k|        return &value();
 1674|  28.5k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  1.14M|    {
 3648|  1.14M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   455k|    {
 1476|   455k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  3.64M|    {
 4280|  3.64M|        return x.is_at_end();
 4281|  3.64M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  5.65M|    {
 4324|  5.65M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 5.65M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  5.65M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 5.65M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  5.65M|        return !read_at_position();
 4331|  5.65M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  17.6M|    {
 4304|  17.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  17.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  17.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 17.6M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  17.6M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  17.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.4M, False: 2.19M]
  |  |  ------------------
  ------------------
 4311|  15.4M|            return true;
 4312|  15.4M|        }
 4313|       |
 4314|  4.22M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 2.19M, False: 2.02M]
  ------------------
 4315|  2.19M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 161k, False: 2.02M]
  ------------------
 4316|   161k|                return false;
 4317|   161k|            }
 4318|  2.19M|        }
 4319|  2.02M|        return true;
 4320|  2.19M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  23.0M|    {
 4081|  23.0M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  23.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  5.51M|    {
 4239|  5.51M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  5.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  5.51M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 5.51M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  5.51M|        auto res = read_at_position();
 4248|  5.51M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  5.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  5.51M|        return parent()->get_character_at(m_position);
 4250|  5.51M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  5.51M|    {
 4112|  5.51M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  5.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.68M, False: 831k]
  |  |  ------------------
  ------------------
 4113|  5.51M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  4.68M|            return m_putback_buffer[pos];
 4115|  4.68M|        }
 4116|   831k|        const auto start = pos - m_putback_buffer.size();
 4117|   831k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   831k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   831k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   831k|        return m_current_view[start];
 4119|   831k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.95M|{
 3807|  1.95M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.95M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.95M|    }
 3810|  1.95M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.95M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.95M|    }
 3813|  1.95M|    else {
 3814|       |        // utf-32
 3815|  1.95M|        static_assert(sizeof(U) == 4);
 3816|  1.95M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.95M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.95M|        return 1;
 3818|  1.95M|    }
 3819|  1.95M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  2.51M|    {
 1430|  2.51M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  2.51M|    {
  437|  2.51M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.57M|    {
 1177|  2.57M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  53.8k|    {
 1476|  53.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  53.8k|    {
  447|  53.8k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   972k|    {
 1598|   972k|        return has_value();
 1599|   972k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  12.4k|    {
 1653|  12.4k|        return value();
 1654|  12.4k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  2.58M|    {
 4274|  2.58M|        return !(lhs == rhs);
 4275|  2.58M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  3.55M|    {
 4269|  3.55M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 3.55M, False: 0]
  |  Branch (4269:46): [True: 1.16M, False: 2.39M]
  ------------------
 4270|  3.55M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  6.49M|    {
 4225|  6.49M|        ++m_position;
 4226|  6.49M|        (void)read_at_position();
 4227|  6.49M|        return *this;
 4228|  6.49M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.95M|{
 4013|  1.95M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.95M|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.95M|    }
 4016|  1.95M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.95M|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.95M|    }
 4019|  1.95M|    else {
 4020|  1.95M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.95M|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.95M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180k, False: 1.77M]
  |  |  ------------------
  ------------------
 4023|   180k|            return invalid_code_point;
 4024|   180k|        }
 4025|  1.77M|        return cp;
 4026|  1.95M|    }
 4027|  1.95M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.40k|    {
 1476|  2.40k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.40k|    {
  447|  2.40k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   532k|    {
 1177|   532k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   529k|    {
 1430|   529k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   529k|    {
  437|   529k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   532k|    {
 1598|   532k|        return has_value();
 1599|   532k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.06M|    {
  485|  1.06M|        return m_has_value;
  486|  1.06M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.40k|    {
 1604|  2.40k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.40k|        return this->get_unexpected().error();
 1606|  2.40k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.40k|    {
  468|  2.40k|        return m_unexpected;
  469|  2.40k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   529k|    {
 1663|   529k|        return std::move(value());
 1664|   529k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   529k|    {
 1627|   529k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   529k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   529k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   529k|        return this->get_value();
 1629|   529k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   529k|    {
  451|   529k|        return m_value;
  452|   529k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  9.26M|    {
 3334|  9.26M|        return m_sentinel;
 3335|  9.26M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.65k|    {
 1604|  1.65k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.65k|        return this->get_unexpected().error();
 1606|  1.65k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   492k|    {
 1476|   492k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   541k|    {
  447|   541k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.45M|    {
 1177|  4.45M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  12.4k|    {
 1430|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  12.4k|    {
  437|  12.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.50M|    {
 1476|  2.50M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.50M|    {
  447|  2.50M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  4.90M|    {
 1598|  4.90M|        return has_value();
 1599|  4.90M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  8.73M|    {
  485|  8.73M|        return m_has_value;
  486|  8.73M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.53M|    {
 1604|  1.53M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.53M|        return this->get_unexpected().error();
 1606|  1.53M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.53M|    {
  468|  1.53M|        return m_unexpected;
  469|  1.53M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   450k|    {
 1430|   450k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   450k|    {
  437|   450k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   450k|    {
 1177|   450k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   589k|    {
 1653|   589k|        return value();
 1654|   589k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.69M|    {
 1627|  1.69M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.69M|        return this->get_value();
 1629|  1.69M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.69M|    {
  451|  1.69M|        return m_value;
  452|  1.69M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  8.27k|    {
 1598|  8.27k|        return has_value();
 1599|  8.27k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   900k|    {
  485|   900k|        return m_has_value;
  486|   900k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   442k|    {
 1663|   442k|        return std::move(value());
 1664|   442k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   450k|    {
 1627|   450k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   450k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   450k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   450k|        return this->get_value();
 1629|   450k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   450k|    {
  451|   450k|        return m_value;
  452|   450k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.15M|    {
 1837|  1.15M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.15M|                                            std::forward<F>(f));
 1839|  1.15M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.15M|{
 1323|  1.15M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.15M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.15M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.15M|            return result(*std::forward<Exp>(exp));
 1327|  1.15M|        }
 1328|       |
 1329|  1.15M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.15M|        return result(unexpect, monostate{});
 1331|  1.15M|    }
 1332|  1.15M|    else {
 1333|  1.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.10M, False: 48.9k]
  |  |  ------------------
  ------------------
 1335|  1.15M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.15M|                   : result(unexpect,
 1337|  48.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  48.9k|                                           std::forward<Exp>(exp).error()));
 1339|  1.15M|    }
 1340|  1.15M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  1.39M|    {
 1430|  1.39M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.39M|    {
  437|  1.39M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  48.9k|    {
 1486|  48.9k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.10M|    {
 1663|  1.10M|        return std::move(value());
 1664|  1.10M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   301k|    {
 3330|   301k|        return m_iterator;
 3331|   301k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   301k|    {
 3334|   301k|        return m_sentinel;
 3335|   301k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.98M|    {
 1598|  2.98M|        return has_value();
 1599|  2.98M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.80M|    {
  485|  4.80M|        return m_has_value;
  486|  4.80M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   616k|    {
 1604|   616k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   616k|        return this->get_unexpected().error();
 1606|   616k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   616k|    {
  468|   616k|        return m_unexpected;
  469|   616k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.00M|    {
 1663|  1.00M|        return std::move(value());
 1664|  1.00M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.20M|    {
 1627|  1.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.20M|        return this->get_value();
 1629|  1.20M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.20M|    {
  451|  1.20M|        return m_value;
  452|  1.20M|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   562k|{
  304|   562k|    return p;
  305|   562k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   562k|{
  326|   562k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   562k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   281k|    {
 3316|   281k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  2.01M|    {
 4291|  2.01M|        return !x.is_at_end();
 4292|  2.01M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  52.6k|    {
 1476|  52.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  52.6k|    {
  447|  52.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.20M|    {
 1177|  2.20M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.14M|    {
 1430|  2.14M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.14M|    {
  437|  2.14M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   599k|    {
 1598|   599k|        return has_value();
 1599|   599k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.80M|    {
  485|  3.80M|        return m_has_value;
  486|  3.80M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  5.21k|    {
 1653|  5.21k|        return value();
 1654|  5.21k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.55M|    {
 1627|  1.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.55M|        return this->get_value();
 1629|  1.55M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.55M|    {
  451|  1.55M|        return m_value;
  452|  1.55M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.40k|    {
 1476|  2.40k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.40k|    {
  447|  2.40k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   532k|    {
 1177|   532k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   530k|    {
 1430|   530k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   530k|    {
  437|   530k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   445k|    {
 1837|   445k|        return detail::transform_error_impl(std::move(*this),
 1838|   445k|                                            std::forward<F>(f));
 1839|   445k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   445k|{
 1323|   445k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   445k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   445k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   445k|            return result(*std::forward<Exp>(exp));
 1327|   445k|        }
 1328|       |
 1329|   445k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   445k|        return result(unexpect, monostate{});
 1331|   445k|    }
 1332|   445k|    else {
 1333|   445k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   445k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   445k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 442k, False: 3.23k]
  |  |  ------------------
  ------------------
 1335|   445k|                   ? result(*std::forward<Exp>(exp))
 1336|   445k|                   : result(unexpect,
 1337|  3.23k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.23k|                                           std::forward<Exp>(exp).error()));
 1339|   445k|    }
 1340|   445k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.54M|    {
 1663|  1.54M|        return std::move(value());
 1664|  1.54M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  52.2k|    {
 1614|  52.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  52.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  52.2k|        return std::move(this->get_unexpected().error());
 1616|  52.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  52.6k|    {
  468|  52.6k|        return m_unexpected;
  469|  52.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   517k|    {
 1486|   517k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   532k|    {
 1598|   532k|        return has_value();
 1599|   532k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.06M|    {
  485|  1.06M|        return m_has_value;
  486|  1.06M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.40k|    {
 1604|  2.40k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.40k|        return this->get_unexpected().error();
 1606|  2.40k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.40k|    {
  468|  2.40k|        return m_unexpected;
  469|  2.40k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   530k|    {
 1663|   530k|        return std::move(value());
 1664|   530k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   530k|    {
 1627|   530k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   530k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   530k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   530k|        return this->get_value();
 1629|   530k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   530k|    {
  451|   530k|        return m_value;
  452|   530k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    410|    {
 1604|    410|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    410|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    410|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    410|        return this->get_unexpected().error();
 1606|    410|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   491k|    {
 1476|   491k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   540k|    {
  447|   540k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.62M|    {
 1177|  3.62M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  5.21k|    {
 1430|  5.21k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  5.21k|    {
  437|  5.21k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  1.87M|    {
 1476|  1.87M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.87M|    {
  447|  1.87M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  4.06M|    {
 1598|  4.06M|        return has_value();
 1599|  4.06M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  7.34M|    {
  485|  7.34M|        return m_has_value;
  486|  7.34M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.44M|    {
 1604|  1.44M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.44M|        return this->get_unexpected().error();
 1606|  1.44M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.44M|    {
  468|  1.44M|        return m_unexpected;
  469|  1.44M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   445k|    {
 1430|   445k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   445k|    {
  437|   445k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   445k|    {
 1177|   445k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|   208k|    {
 1653|   208k|        return value();
 1654|   208k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.31M|    {
 1627|  1.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.31M|        return this->get_value();
 1629|  1.31M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.31M|    {
  451|  1.31M|        return m_value;
  452|  1.31M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.90k|    {
 1598|  2.90k|        return has_value();
 1599|  2.90k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   890k|    {
  485|   890k|        return m_has_value;
  486|   890k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   442k|    {
 1663|   442k|        return std::move(value());
 1664|   442k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   445k|    {
 1627|   445k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   445k|        return this->get_value();
 1629|   445k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   445k|    {
  451|   445k|        return m_value;
  452|   445k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.15M|    {
 1837|  1.15M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.15M|                                            std::forward<F>(f));
 1839|  1.15M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.15M|{
 1323|  1.15M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.15M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.15M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.15M|            return result(*std::forward<Exp>(exp));
 1327|  1.15M|        }
 1328|       |
 1329|  1.15M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.15M|        return result(unexpect, monostate{});
 1331|  1.15M|    }
 1332|  1.15M|    else {
 1333|  1.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.10M, False: 49.0k]
  |  |  ------------------
  ------------------
 1335|  1.15M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.15M|                   : result(unexpect,
 1337|  49.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  49.0k|                                           std::forward<Exp>(exp).error()));
 1339|  1.15M|    }
 1340|  1.15M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.20M|    {
 1430|  1.20M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.20M|    {
  437|  1.20M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  49.0k|    {
 1486|  49.0k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.10M|    {
 1663|  1.10M|        return std::move(value());
 1664|  1.10M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   367k|    {
 2855|   367k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   367k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   367k|    {
 2836|   367k|        return t.data();
 2837|   367k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   442k|    {
 1837|   442k|        return detail::transform_error_impl(std::move(*this),
 1838|   442k|                                            std::forward<F>(f));
 1839|   442k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   442k|{
 1323|   442k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   442k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   442k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   442k|            return result(*std::forward<Exp>(exp));
 1327|   442k|        }
 1328|       |
 1329|   442k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   442k|        return result(unexpect, monostate{});
 1331|   442k|    }
 1332|   442k|    else {
 1333|   442k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   442k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   442k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 442k, False: 0]
  |  |  ------------------
  ------------------
 1335|   442k|                   ? result(*std::forward<Exp>(exp))
 1336|   442k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   442k|    }
 1340|   442k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   442k|    {
 1430|   442k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   442k|    {
  437|   442k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   442k|    {
 1177|   442k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   442k|    {
 1598|   442k|        return has_value();
 1599|   442k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   884k|    {
  485|   884k|        return m_has_value;
  486|   884k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   442k|    {
 1663|   442k|        return std::move(value());
 1664|   442k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   442k|    {
 1627|   442k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   442k|        return this->get_value();
 1629|   442k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   442k|    {
  451|   442k|        return m_value;
  452|   442k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   600k|    {
 1823|   600k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   600k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   600k|{
 1323|   600k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   600k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   600k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   600k|            return result(*std::forward<Exp>(exp));
 1327|   600k|        }
 1328|       |
 1329|   600k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   600k|        return result(unexpect, monostate{});
 1331|   600k|    }
 1332|   600k|    else {
 1333|   600k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   600k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   600k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 600k]
  |  |  ------------------
  ------------------
 1335|   600k|                   ? result(*std::forward<Exp>(exp))
 1336|   600k|                   : result(unexpect,
 1337|   600k|                            trivial_invoke(std::forward<F>(f),
 1338|   600k|                                           std::forward<Exp>(exp).error()));
 1339|   600k|    }
 1340|   600k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   202k|    {
 1653|   202k|        return value();
 1654|   202k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|  80.3k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  8.20k|    {
 1673|  8.20k|        return &value();
 1674|  8.20k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   361k|    {
 2724|   361k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   361k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   361k|    {
 2705|   361k|        return decay_copy(t.begin());
 2706|   361k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   361k|{
 1949|   361k|    return SCN_FWD(t);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   361k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   189k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   442k|    {
 1837|   442k|        return detail::transform_error_impl(std::move(*this),
 1838|   442k|                                            std::forward<F>(f));
 1839|   442k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   442k|{
 1323|   442k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   442k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   442k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   442k|            return result(*std::forward<Exp>(exp));
 1327|   442k|        }
 1328|       |
 1329|   442k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   442k|        return result(unexpect, monostate{});
 1331|   442k|    }
 1332|   442k|    else {
 1333|   442k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   442k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   442k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 442k, False: 0]
  |  |  ------------------
  ------------------
 1335|   442k|                   ? result(*std::forward<Exp>(exp))
 1336|   442k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   442k|    }
 1340|   442k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   442k|    {
 1430|   442k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   442k|    {
  437|   442k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   442k|    {
 1177|   442k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   442k|    {
 1598|   442k|        return has_value();
 1599|   442k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   884k|    {
  485|   884k|        return m_has_value;
  486|   884k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   442k|    {
 1663|   442k|        return std::move(value());
 1664|   442k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   442k|    {
 1627|   442k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   442k|        return this->get_value();
 1629|   442k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   442k|    {
  451|   442k|        return m_value;
  452|   442k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   514k|    {
 1823|   514k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   514k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   514k|{
 1323|   514k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   514k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   514k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   514k|            return result(*std::forward<Exp>(exp));
 1327|   514k|        }
 1328|       |
 1329|   514k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   514k|        return result(unexpect, monostate{});
 1331|   514k|    }
 1332|   514k|    else {
 1333|   514k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   514k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   514k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 514k]
  |  |  ------------------
  ------------------
 1335|   514k|                   ? result(*std::forward<Exp>(exp))
 1336|   514k|                   : result(unexpect,
 1337|   514k|                            trivial_invoke(std::forward<F>(f),
 1338|   514k|                                           std::forward<Exp>(exp).error()));
 1339|   514k|    }
 1340|   514k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   514k|    {
 3648|   514k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   202k|    {
 1653|   202k|        return value();
 1654|   202k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  2.87k|    {
 1673|  2.87k|        return &value();
 1674|  2.87k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   600k|    {
 3648|   600k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   116k|    {
 1430|   116k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   116k|    {
  437|   116k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   114k|{
 3654|   114k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   114k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   922k|    {
 2855|   922k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   922k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   922k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   922k|    {
 2836|   922k|        return t.data();
 2837|   922k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  1.99M|    {
 5466|  1.99M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.99M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  1.99M|        return static_cast<std::size_t>(m_desc &
 5471|  1.99M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  1.99M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  3.99M|    {
 5491|  3.99M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  3.99M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  1.99M|    {
 5434|  1.99M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.99M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  1.99M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.99M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  1.99M|        const auto t = type(id);
 5446|  1.99M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.99M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  1.99M|        basic_scan_arg<Context> arg;
 5451|  1.99M|        arg.m_type = t;
 5452|  1.99M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 1.99M, False: 0]
  ------------------
 5453|  1.99M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  1.99M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  1.99M|        return arg;
 5459|  1.99M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  1.99M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  1.99M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  1.99M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  1.99M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  1.99M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  1.99M|    {
 5495|  1.99M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  1.99M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  3.78M|    {
 5247|  3.78M|        return m_type != detail::arg_type::none_type;
 5248|  3.78M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   305k|{
 8417|   305k|#define SCN_VISIT(Type)                                         \
 8418|   305k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   305k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   305k|    }                                                           \
 8421|   305k|    else {                                                      \
 8422|   305k|        return vis(monostate_val);                              \
 8423|   305k|    }
 8424|       |
 8425|   305k|    monostate monostate_val{};
 8426|       |
 8427|   305k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 305k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 305k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 305k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 305k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 305k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 305k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 305k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 305k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 305k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 305k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 305k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 305k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 305k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 305k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 305k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  98.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 98.0k, False: 207k]
  ------------------
 8459|  98.0k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  98.0k|    }                                                           \
  |  | 8421|  98.0k|    else {                                                      \
  |  | 8422|  98.0k|        return vis(monostate_val);                              \
  |  | 8423|  98.0k|    }
  ------------------
 8460|   102k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 102k, False: 202k]
  ------------------
 8461|   102k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   102k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   102k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   102k|    }                                                           \
  |  | 8421|   102k|    else {                                                      \
  |  | 8422|   102k|        return vis(monostate_val);                              \
  |  | 8423|   102k|    }
  ------------------
 8462|   104k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 104k, False: 200k]
  ------------------
 8463|   104k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   104k|    }                                                           \
  |  | 8421|   104k|    else {                                                      \
  |  | 8422|   104k|        return vis(monostate_val);                              \
  |  | 8423|   104k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 305k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 305k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 305k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 305k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 305k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 305k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 305k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 305k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 305k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   305k|            SCN_CLANG_POP
 8495|   305k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  1.57M|    {
 5545|  1.57M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   844k|    {
 8138|   844k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  1.57M|    {
 8056|  1.57M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  1.17M|{
 4344|  1.17M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.17M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.17M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.17M|                            ranges::default_sentinel};
 4350|  1.17M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  1.17M|    {
 4177|  1.17M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.17M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.17M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   331k|{
 8417|   331k|#define SCN_VISIT(Type)                                         \
 8418|   331k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   331k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   331k|    }                                                           \
 8421|   331k|    else {                                                      \
 8422|   331k|        return vis(monostate_val);                              \
 8423|   331k|    }
 8424|       |
 8425|   331k|    monostate monostate_val{};
 8426|       |
 8427|   331k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 331k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 331k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 331k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 331k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 331k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 331k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 331k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 331k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 331k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 331k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 331k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 331k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 331k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 331k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 331k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   106k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 106k, False: 224k]
  ------------------
 8459|   106k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   106k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   106k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   106k|    }                                                           \
  |  | 8421|   106k|    else {                                                      \
  |  | 8422|   106k|        return vis(monostate_val);                              \
  |  | 8423|   106k|    }
  ------------------
 8460|   111k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 111k, False: 219k]
  ------------------
 8461|   111k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   111k|    }                                                           \
  |  | 8421|   111k|    else {                                                      \
  |  | 8422|   111k|        return vis(monostate_val);                              \
  |  | 8423|   111k|    }
  ------------------
 8462|   112k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 112k, False: 218k]
  ------------------
 8463|   112k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   112k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   112k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   112k|    }                                                           \
  |  | 8421|   112k|    else {                                                      \
  |  | 8422|   112k|        return vis(monostate_val);                              \
  |  | 8423|   112k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 331k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 331k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 331k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 331k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 331k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 331k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 331k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 331k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 331k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   331k|            SCN_CLANG_POP
 8495|   331k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   727k|{
 7044|   727k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   727k|    handler.check_args_exhausted();
 7046|   727k|    return handler.get_error();
 7047|   727k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   727k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   727k|    auto begin = format.data();
 7013|   727k|    auto it = begin;
 7014|   727k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.39M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 727k, False: 663k]
  ------------------
 7017|   727k|        const auto ch = *it++;
 7018|   727k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 727k, False: 0]
  ------------------
 7019|   727k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   727k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   727k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 63.9k, False: 663k]
  ------------------
 7023|  63.9k|                return;
 7024|  63.9k|            }
 7025|   727k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   727k|    }
 7036|       |
 7037|   663k|    handler.on_literal_text(begin, end);
 7038|   663k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   727k|{
 6942|   727k|    struct id_adapter {
 6943|   727k|        constexpr void operator()()
 6944|   727k|        {
 6945|   727k|            arg_id = handler.on_arg_id();
 6946|   727k|        }
 6947|   727k|        constexpr void operator()(std::size_t id)
 6948|   727k|        {
 6949|   727k|            arg_id = handler.on_arg_id(id);
 6950|   727k|        }
 6951|       |
 6952|   727k|        constexpr void on_error(const char* msg)
 6953|   727k|        {
 6954|   727k|            SCN_UNLIKELY_ATTR
 6955|   727k|            handler.on_error(msg);
 6956|   727k|        }
 6957|       |
 6958|   727k|        Handler& handler;
 6959|   727k|        std::size_t arg_id;
 6960|   727k|    };
 6961|       |
 6962|   727k|    ++begin;
 6963|   727k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 727k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   727k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 727k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   727k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 727k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   727k|    else {
 6975|   727k|        auto adapter = id_adapter{handler, 0};
 6976|   727k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   727k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 727k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   727k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 727k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   727k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 727k, False: 0]
  ------------------
 6987|   727k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 727k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   727k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   727k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 727k]
  |  |  |  Branch (859:45): [True: 0, False: 727k]
  |  |  |  Branch (859:45): [True: 0, False: 727k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   727k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   727k|    }
 7003|   727k|    return begin + 1;
 7004|   727k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  1.57M|    {
 8039|  1.57M|        return m_args.get(id);
 8040|  1.57M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  1.57M|    {
 8049|  1.57M|        return m_locale;
 8050|  1.57M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  1.57M|    {
 5566|  1.57M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.57M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  1.57M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  1.57M|        do_check_arg_id(id);
 5574|  1.57M|        return id;
 5575|  1.57M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  1.57M|{
 6054|  1.57M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  1.57M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  1.57M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   727k|{
 6443|   727k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   727k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   727k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   727k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 727k, False: 0]
  |  Branch (6444:26): [True: 0, False: 727k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   727k|    handler();
 6449|   727k|    return begin;
 6450|   727k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   727k|        {
 6945|   727k|            arg_id = handler.on_arg_id();
 6946|   727k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  3.14M|    {
 5252|  3.14M|        return m_type;
 5253|  3.14M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  1.57M|    {
 5561|  1.57M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  1.57M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  3.14M|    {
 5550|  3.14M|        return m_format.data();
 5551|  3.14M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   727k|    {
 7122|   727k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   727k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   727k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   727k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   727k|{
 6858|   727k|    auto do_presentation = [&]() -> const CharT* {
 6859|   727k|        if (*begin == CharT{'['}) {
 6860|   727k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   727k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   727k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   727k|                return begin;
 6866|   727k|            }
 6867|   727k|            handler.on_character_set_string(set);
 6868|   727k|            return begin;
 6869|   727k|        }
 6870|   727k|        if (*begin == CharT{'/'}) {
 6871|   727k|            return parse_presentation_regex(begin, end, handler);
 6872|   727k|        }
 6873|   727k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   727k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   727k|            handler.on_error("Invalid type specifier in format string");
 6876|   727k|            return begin;
 6877|   727k|        }
 6878|   727k|        handler.on_type(type);
 6879|   727k|        return begin;
 6880|   727k|    };
 6881|       |
 6882|   727k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 727k, False: 0]
  |  Branch (6882:28): [True: 727k, False: 0]
  ------------------
 6883|   727k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 727k, False: 0]
  |  Branch (6883:36): [True: 524k, False: 203k]
  ------------------
 6884|   524k|        return do_presentation();
 6885|   524k|    }
 6886|       |
 6887|   203k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 203k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   203k|    begin = parse_align(begin, end, handler);
 6893|   203k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 203k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   203k|    begin = parse_width(begin, end, handler);
 6899|   203k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 203k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   203k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 203k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   203k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 203k, False: 0]
  ------------------
 6918|   203k|        handler.on_localized();
 6919|   203k|        ++begin;
 6920|   203k|    }
 6921|   203k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 203k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   203k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 203k, False: 0]
  |  Branch (6926:25): [True: 0, False: 203k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   203k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 203k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   203k|    return begin;
 6935|   203k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  1.57M|{
 6507|  1.57M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.12M, False: 444k]
  |  Branch (6507:33): [True: 1.12M, False: 0]
  ------------------
 6508|  1.57M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 444k, False: 0]
  |  Branch (6508:33): [True: 444k, False: 0]
  ------------------
 6509|  1.57M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   524k|    auto do_presentation = [&]() -> const CharT* {
 6859|   524k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 524k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   524k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 524k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   524k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   524k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   524k|        handler.on_type(type);
 6879|   524k|        return begin;
 6880|   524k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  1.12M|{
 6455|  1.12M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.12M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.12M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.12M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.12M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.12M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.12M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.12M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.12M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.12M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.12M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   482k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 482k, False: 644k]
  ------------------
 6474|   482k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.12M]
  ------------------
 6475|   482k|            return presentation_type::float_hex;
 6476|  41.0k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 41.0k, False: 1.08M]
  ------------------
 6477|  41.0k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.12M]
  ------------------
 6478|  41.0k|            return presentation_type::float_scientific;
 6479|   225k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 225k, False: 901k]
  ------------------
 6480|   225k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.12M]
  ------------------
 6481|   225k|            return presentation_type::float_fixed;
 6482|   377k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 377k, False: 749k]
  ------------------
 6483|   377k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.12M]
  ------------------
 6484|   377k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.12M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.12M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.12M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.12M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.12M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.12M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.12M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  1.12M|    }
 6502|  1.12M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   203k|{
 6532|   203k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   203k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   203k|    auto check_align = [](wchar_t ch) {
 6535|   203k|        switch (ch) {
 6536|   203k|            case L'<':
 6537|   203k|                return align_type::left;
 6538|   203k|            case L'>':
 6539|   203k|                return align_type::right;
 6540|   203k|            case L'^':
 6541|   203k|                return align_type::center;
 6542|   203k|            default:
 6543|   203k|                return align_type::none;
 6544|   203k|        }
 6545|   203k|    };
 6546|       |
 6547|   203k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   203k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 203k]
  |  |  |  Branch (859:45): [True: 0, False: 203k]
  |  |  |  Branch (859:45): [True: 0, False: 203k]
  |  |  ------------------
  ------------------
 6549|   203k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   203k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   203k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   203k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   203k|    const auto begin_before_fill = begin;
 6559|   203k|    begin += potential_fill_len;
 6560|       |
 6561|   203k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 203k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   203k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   203k|    const auto begin_after_fill = begin;
 6567|   203k|    ++begin;
 6568|       |
 6569|   203k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 203k, False: 0]
  ------------------
 6570|   203k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 203k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   203k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 203k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   203k|    }
 6578|       |
 6579|   203k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 203k, False: 0]
  ------------------
 6580|   203k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 203k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   203k|        return begin_before_fill;
 6585|   203k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   203k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   444k|{
 6514|   444k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   444k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   444k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   444k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   444k|        return 1;
 6517|   444k|    }
 6518|   444k|    else {
 6519|   444k|        const auto lengths =
 6520|   444k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   444k|            "\3\4";
 6522|   444k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   444k|        return len;
 6524|   444k|    }
 6525|   444k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   407k|    auto check_align = [](wchar_t ch) {
 6535|   407k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 407k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 407k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 407k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   407k|            default:
  ------------------
  |  Branch (6542:13): [True: 407k, False: 0]
  ------------------
 6543|   407k|                return align_type::none;
 6544|   407k|        }
 6545|   407k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   203k|{
 6597|   203k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   203k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   203k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 203k, False: 0]
  |  Branch (6599:33): [True: 0, False: 203k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   203k|    return begin;
 6610|   203k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   203k|    {
 7127|   203k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   203k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 203k, False: 0]
  ------------------
 7129|   203k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 203k, False: 0]
  ------------------
 7130|   203k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 203k]
  ------------------
 7131|   203k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   203k|        Handler::on_localized();
 7139|   203k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   727k|{
 8417|   727k|#define SCN_VISIT(Type)                                         \
 8418|   727k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   727k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   727k|    }                                                           \
 8421|   727k|    else {                                                      \
 8422|   727k|        return vis(monostate_val);                              \
 8423|   727k|    }
 8424|       |
 8425|   727k|    monostate monostate_val{};
 8426|       |
 8427|   727k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 727k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 727k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 727k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 727k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 727k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 727k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 727k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 727k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 727k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 727k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 727k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 727k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 727k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 727k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 727k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   236k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 236k, False: 491k]
  ------------------
 8459|   236k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   236k|    }                                                           \
  |  | 8421|   236k|    else {                                                      \
  |  | 8422|   236k|        return vis(monostate_val);                              \
  |  | 8423|   236k|    }
  ------------------
 8460|   244k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 244k, False: 483k]
  ------------------
 8461|   244k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   244k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   244k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   244k|    }                                                           \
  |  | 8421|   244k|    else {                                                      \
  |  | 8422|   244k|        return vis(monostate_val);                              \
  |  | 8423|   244k|    }
  ------------------
 8462|   246k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 246k, False: 480k]
  ------------------
 8463|   246k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   246k|    }                                                           \
  |  | 8421|   246k|    else {                                                      \
  |  | 8422|   246k|        return vis(monostate_val);                              \
  |  | 8423|   246k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 727k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 727k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 727k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 727k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 727k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 727k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 727k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 727k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 727k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   727k|            SCN_CLANG_POP
 8495|   727k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   844k|{
 7044|   844k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   844k|    handler.check_args_exhausted();
 7046|   844k|    return handler.get_error();
 7047|   844k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   844k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   844k|    auto begin = format.data();
 7013|   844k|    auto it = begin;
 7014|   844k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.62M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 844k, False: 780k]
  ------------------
 7017|   844k|        const auto ch = *it++;
 7018|   844k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 844k, False: 0]
  ------------------
 7019|   844k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   844k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   844k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 63.9k, False: 780k]
  ------------------
 7023|  63.9k|                return;
 7024|  63.9k|            }
 7025|   844k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   844k|    }
 7036|       |
 7037|   780k|    handler.on_literal_text(begin, end);
 7038|   780k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|   780k|    {
 8175|   780k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   780k|    static_cast<    \
  |  |  929|   780k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   780k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|   844k|{
 6942|   844k|    struct id_adapter {
 6943|   844k|        constexpr void operator()()
 6944|   844k|        {
 6945|   844k|            arg_id = handler.on_arg_id();
 6946|   844k|        }
 6947|   844k|        constexpr void operator()(std::size_t id)
 6948|   844k|        {
 6949|   844k|            arg_id = handler.on_arg_id(id);
 6950|   844k|        }
 6951|       |
 6952|   844k|        constexpr void on_error(const char* msg)
 6953|   844k|        {
 6954|   844k|            SCN_UNLIKELY_ATTR
 6955|   844k|            handler.on_error(msg);
 6956|   844k|        }
 6957|       |
 6958|   844k|        Handler& handler;
 6959|   844k|        std::size_t arg_id;
 6960|   844k|    };
 6961|       |
 6962|   844k|    ++begin;
 6963|   844k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   844k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 844k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   844k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 844k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   844k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 844k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   844k|    else {
 6975|   844k|        auto adapter = id_adapter{handler, 0};
 6976|   844k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   844k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   844k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 844k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   844k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 844k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   844k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 844k, False: 0]
  ------------------
 6987|   844k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   844k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 844k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   844k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   844k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 844k]
  |  |  |  Branch (859:45): [True: 0, False: 844k]
  |  |  |  Branch (859:45): [True: 0, False: 844k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   844k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   844k|    }
 7003|   844k|    return begin + 1;
 7004|   844k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   844k|{
 6443|   844k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   844k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   844k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   844k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 844k, False: 0]
  |  Branch (6444:26): [True: 0, False: 844k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   844k|    handler();
 6449|   844k|    return begin;
 6450|   844k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   844k|        {
 6945|   844k|            arg_id = handler.on_arg_id();
 6946|   844k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   844k|    {
 7122|   844k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   844k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   844k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   844k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|   844k|{
 6858|   844k|    auto do_presentation = [&]() -> const CharT* {
 6859|   844k|        if (*begin == CharT{'['}) {
 6860|   844k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   844k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   844k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   844k|                return begin;
 6866|   844k|            }
 6867|   844k|            handler.on_character_set_string(set);
 6868|   844k|            return begin;
 6869|   844k|        }
 6870|   844k|        if (*begin == CharT{'/'}) {
 6871|   844k|            return parse_presentation_regex(begin, end, handler);
 6872|   844k|        }
 6873|   844k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   844k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   844k|            handler.on_error("Invalid type specifier in format string");
 6876|   844k|            return begin;
 6877|   844k|        }
 6878|   844k|        handler.on_type(type);
 6879|   844k|        return begin;
 6880|   844k|    };
 6881|       |
 6882|   844k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 844k, False: 0]
  |  Branch (6882:28): [True: 844k, False: 0]
  ------------------
 6883|   844k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 844k, False: 0]
  |  Branch (6883:36): [True: 603k, False: 240k]
  ------------------
 6884|   603k|        return do_presentation();
 6885|   603k|    }
 6886|       |
 6887|   240k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   240k|    begin = parse_align(begin, end, handler);
 6893|   240k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   240k|    begin = parse_width(begin, end, handler);
 6899|   240k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   240k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 240k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   240k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 240k, False: 0]
  ------------------
 6918|   240k|        handler.on_localized();
 6919|   240k|        ++begin;
 6920|   240k|    }
 6921|   240k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   240k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 240k, False: 0]
  |  Branch (6926:25): [True: 0, False: 240k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   240k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   240k|    return begin;
 6935|   240k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   603k|    auto do_presentation = [&]() -> const CharT* {
 6859|   603k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 603k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   603k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 603k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   603k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   603k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   603k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 603k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   603k|        handler.on_type(type);
 6879|   603k|        return begin;
 6880|   603k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   240k|{
 6532|   240k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   240k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   240k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   240k|    auto check_align = [](wchar_t ch) {
 6535|   240k|        switch (ch) {
 6536|   240k|            case L'<':
 6537|   240k|                return align_type::left;
 6538|   240k|            case L'>':
 6539|   240k|                return align_type::right;
 6540|   240k|            case L'^':
 6541|   240k|                return align_type::center;
 6542|   240k|            default:
 6543|   240k|                return align_type::none;
 6544|   240k|        }
 6545|   240k|    };
 6546|       |
 6547|   240k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   240k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  |  Branch (859:45): [True: 0, False: 240k]
  |  |  |  Branch (859:45): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
 6549|   240k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   240k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   240k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   240k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   240k|    const auto begin_before_fill = begin;
 6559|   240k|    begin += potential_fill_len;
 6560|       |
 6561|   240k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 240k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   240k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   240k|    const auto begin_after_fill = begin;
 6567|   240k|    ++begin;
 6568|       |
 6569|   240k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 240k, False: 0]
  ------------------
 6570|   240k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   240k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 240k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   240k|    }
 6578|       |
 6579|   240k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 240k, False: 0]
  ------------------
 6580|   240k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 240k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   240k|        return begin_before_fill;
 6585|   240k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   240k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   481k|    auto check_align = [](wchar_t ch) {
 6535|   481k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 481k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 481k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 481k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   481k|            default:
  ------------------
  |  Branch (6542:13): [True: 481k, False: 0]
  ------------------
 6543|   481k|                return align_type::none;
 6544|   481k|        }
 6545|   481k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   240k|{
 6597|   240k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   240k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   240k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   240k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 240k, False: 0]
  |  Branch (6599:33): [True: 0, False: 240k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   240k|    return begin;
 6610|   240k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   240k|    {
 7127|   240k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   240k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 240k, False: 0]
  ------------------
 7129|   240k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 240k, False: 0]
  ------------------
 7130|   240k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 240k]
  ------------------
 7131|   240k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   240k|        Handler::on_localized();
 7139|   240k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   844k|{
 8417|   844k|#define SCN_VISIT(Type)                                         \
 8418|   844k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   844k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   844k|    }                                                           \
 8421|   844k|    else {                                                      \
 8422|   844k|        return vis(monostate_val);                              \
 8423|   844k|    }
 8424|       |
 8425|   844k|    monostate monostate_val{};
 8426|       |
 8427|   844k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 844k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 844k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 844k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 844k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 844k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 844k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 844k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 844k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 844k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 844k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 844k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 844k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 844k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 844k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 844k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   273k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 273k, False: 570k]
  ------------------
 8459|   273k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   273k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   273k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   273k|    }                                                           \
  |  | 8421|   273k|    else {                                                      \
  |  | 8422|   273k|        return vis(monostate_val);                              \
  |  | 8423|   273k|    }
  ------------------
 8460|   284k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 284k, False: 560k]
  ------------------
 8461|   284k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   284k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   284k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   284k|    }                                                           \
  |  | 8421|   284k|    else {                                                      \
  |  | 8422|   284k|        return vis(monostate_val);                              \
  |  | 8423|   284k|    }
  ------------------
 8462|   286k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 286k, False: 557k]
  ------------------
 8463|   286k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   286k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   286k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   286k|    }                                                           \
  |  | 8421|   286k|    else {                                                      \
  |  | 8422|   286k|        return vis(monostate_val);                              \
  |  | 8423|   286k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 844k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 844k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 844k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 844k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 844k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 844k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 844k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 844k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 844k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   844k|            SCN_CLANG_POP
 8495|   844k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  83.1k|    {
 4076|  83.1k|        sync(0);
 4077|  83.1k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   814k|    {
 5466|   814k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 814k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   814k|        return static_cast<std::size_t>(m_desc &
 5471|   814k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   814k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.62M|    {
 5491|  1.62M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.62M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   814k|    {
 5434|   814k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 814k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   814k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 814k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   814k|        const auto t = type(id);
 5446|   814k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 814k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   814k|        basic_scan_arg<Context> arg;
 5451|   814k|        arg.m_type = t;
 5452|   814k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 814k, False: 0]
  ------------------
 5453|   814k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   814k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   814k|        return arg;
 5459|   814k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   814k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   814k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   814k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   814k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   814k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   814k|    {
 5495|   814k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   814k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.55M|    {
 5247|  1.55M|        return m_type != detail::arg_type::none_type;
 5248|  1.55M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   114k|{
 8417|   114k|#define SCN_VISIT(Type)                                         \
 8418|   114k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   114k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   114k|    }                                                           \
 8421|   114k|    else {                                                      \
 8422|   114k|        return vis(monostate_val);                              \
 8423|   114k|    }
 8424|       |
 8425|   114k|    monostate monostate_val{};
 8426|       |
 8427|   114k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 114k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 114k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 114k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 114k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 114k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 114k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 114k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 114k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 114k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 114k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 114k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 114k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 114k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 114k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 114k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  36.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 36.5k, False: 78.4k]
  ------------------
 8459|  36.5k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  36.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  36.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  36.5k|    }                                                           \
  |  | 8421|  36.5k|    else {                                                      \
  |  | 8422|  36.5k|        return vis(monostate_val);                              \
  |  | 8423|  36.5k|    }
  ------------------
 8460|  38.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 38.6k, False: 76.2k]
  ------------------
 8461|  38.6k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  38.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  38.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.6k|    }                                                           \
  |  | 8421|  38.6k|    else {                                                      \
  |  | 8422|  38.6k|        return vis(monostate_val);                              \
  |  | 8423|  38.6k|    }
  ------------------
 8462|  39.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 39.7k, False: 75.1k]
  ------------------
 8463|  39.7k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  39.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  39.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  39.7k|    }                                                           \
  |  | 8421|  39.7k|    else {                                                      \
  |  | 8422|  39.7k|        return vis(monostate_val);                              \
  |  | 8423|  39.7k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 114k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 114k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 114k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 114k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 114k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 114k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 114k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 114k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 114k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   114k|            SCN_CLANG_POP
 8495|   114k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   661k|    {
 5545|   661k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   330k|    {
 8138|   330k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   661k|    {
 8056|   661k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   330k|{
 7044|   330k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   330k|    handler.check_args_exhausted();
 7046|   330k|    return handler.get_error();
 7047|   330k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   330k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   330k|    auto begin = format.data();
 7013|   330k|    auto it = begin;
 7014|   330k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   533k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 330k, False: 202k]
  ------------------
 7017|   330k|        const auto ch = *it++;
 7018|   330k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 330k, False: 0]
  ------------------
 7019|   330k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   330k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   330k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 127k, False: 202k]
  ------------------
 7023|   127k|                return;
 7024|   127k|            }
 7025|   330k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   330k|    }
 7036|       |
 7037|   202k|    handler.on_literal_text(begin, end);
 7038|   202k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   330k|{
 6942|   330k|    struct id_adapter {
 6943|   330k|        constexpr void operator()()
 6944|   330k|        {
 6945|   330k|            arg_id = handler.on_arg_id();
 6946|   330k|        }
 6947|   330k|        constexpr void operator()(std::size_t id)
 6948|   330k|        {
 6949|   330k|            arg_id = handler.on_arg_id(id);
 6950|   330k|        }
 6951|       |
 6952|   330k|        constexpr void on_error(const char* msg)
 6953|   330k|        {
 6954|   330k|            SCN_UNLIKELY_ATTR
 6955|   330k|            handler.on_error(msg);
 6956|   330k|        }
 6957|       |
 6958|   330k|        Handler& handler;
 6959|   330k|        std::size_t arg_id;
 6960|   330k|    };
 6961|       |
 6962|   330k|    ++begin;
 6963|   330k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   330k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 330k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   330k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 330k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   330k|    else {
 6975|   330k|        auto adapter = id_adapter{handler, 0};
 6976|   330k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   330k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   330k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 330k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   330k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 330k, False: 0]
  ------------------
 6987|   330k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   330k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   330k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   661k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  |  Branch (859:45): [True: 0, False: 330k]
  |  |  |  Branch (859:45): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   330k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   330k|    }
 7003|   330k|    return begin + 1;
 7004|   330k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   661k|    {
 8039|   661k|        return m_args.get(id);
 8040|   661k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   661k|    {
 8049|   661k|        return m_locale;
 8050|   661k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   661k|    {
 5566|   661k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   661k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 661k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   661k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   661k|        do_check_arg_id(id);
 5574|   661k|        return id;
 5575|   661k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   661k|{
 6054|   661k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   661k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   661k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   330k|{
 6443|   330k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   330k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 330k, False: 0]
  |  Branch (6444:26): [True: 0, False: 330k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   330k|    handler();
 6449|   330k|    return begin;
 6450|   330k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   330k|        {
 6945|   330k|            arg_id = handler.on_arg_id();
 6946|   330k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.32M|    {
 5252|  1.32M|        return m_type;
 5253|  1.32M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   661k|    {
 5561|   661k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   661k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   445k|{
 4344|   445k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 445k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   445k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   445k|                            ranges::default_sentinel};
 4350|   445k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   445k|    {
 4177|   445k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   445k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   445k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.32M|    {
 5550|  1.32M|        return m_format.data();
 5551|  1.32M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   330k|    {
 7122|   330k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   330k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   330k|{
 6858|   330k|    auto do_presentation = [&]() -> const CharT* {
 6859|   330k|        if (*begin == CharT{'['}) {
 6860|   330k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   330k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   330k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   330k|                return begin;
 6866|   330k|            }
 6867|   330k|            handler.on_character_set_string(set);
 6868|   330k|            return begin;
 6869|   330k|        }
 6870|   330k|        if (*begin == CharT{'/'}) {
 6871|   330k|            return parse_presentation_regex(begin, end, handler);
 6872|   330k|        }
 6873|   330k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   330k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   330k|            handler.on_error("Invalid type specifier in format string");
 6876|   330k|            return begin;
 6877|   330k|        }
 6878|   330k|        handler.on_type(type);
 6879|   330k|        return begin;
 6880|   330k|    };
 6881|       |
 6882|   330k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 330k, False: 0]
  |  Branch (6882:28): [True: 330k, False: 0]
  ------------------
 6883|   330k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 330k, False: 0]
  |  Branch (6883:36): [True: 254k, False: 76.6k]
  ------------------
 6884|   254k|        return do_presentation();
 6885|   254k|    }
 6886|       |
 6887|  76.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  76.6k|    begin = parse_align(begin, end, handler);
 6893|  76.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  76.6k|    begin = parse_width(begin, end, handler);
 6899|  76.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  76.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 76.6k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  76.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 76.6k, False: 0]
  ------------------
 6918|  76.6k|        handler.on_localized();
 6919|  76.6k|        ++begin;
 6920|  76.6k|    }
 6921|  76.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  76.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 76.6k, False: 0]
  |  Branch (6926:25): [True: 0, False: 76.6k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  76.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  76.6k|    return begin;
 6935|  76.6k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   661k|{
 6507|   661k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 508k, False: 153k]
  |  Branch (6507:33): [True: 508k, False: 0]
  ------------------
 6508|   661k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 153k, False: 0]
  |  Branch (6508:33): [True: 153k, False: 0]
  ------------------
 6509|   661k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   254k|    auto do_presentation = [&]() -> const CharT* {
 6859|   254k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 254k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   254k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 254k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   254k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   254k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 254k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   254k|        handler.on_type(type);
 6879|   254k|        return begin;
 6880|   254k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   508k|{
 6455|   508k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 508k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 508k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 508k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 508k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 508k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 508k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 508k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 508k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 508k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 508k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   161k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 161k, False: 346k]
  ------------------
 6474|   161k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 508k]
  ------------------
 6475|   161k|            return presentation_type::float_hex;
 6476|  52.2k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 52.2k, False: 455k]
  ------------------
 6477|  52.2k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 508k]
  ------------------
 6478|  52.2k|            return presentation_type::float_scientific;
 6479|   142k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 142k, False: 365k]
  ------------------
 6480|   142k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 508k]
  ------------------
 6481|   142k|            return presentation_type::float_fixed;
 6482|   151k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 151k, False: 356k]
  ------------------
 6483|   151k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 508k]
  ------------------
 6484|   151k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 508k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 508k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 508k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 508k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 508k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 508k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 508k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   508k|    }
 6502|   508k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  76.6k|{
 6532|  76.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  76.6k|    auto check_align = [](wchar_t ch) {
 6535|  76.6k|        switch (ch) {
 6536|  76.6k|            case L'<':
 6537|  76.6k|                return align_type::left;
 6538|  76.6k|            case L'>':
 6539|  76.6k|                return align_type::right;
 6540|  76.6k|            case L'^':
 6541|  76.6k|                return align_type::center;
 6542|  76.6k|            default:
 6543|  76.6k|                return align_type::none;
 6544|  76.6k|        }
 6545|  76.6k|    };
 6546|       |
 6547|  76.6k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  76.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.6k]
  |  |  |  Branch (859:45): [True: 0, False: 76.6k]
  |  |  |  Branch (859:45): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
 6549|  76.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  76.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  76.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  76.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  76.6k|    const auto begin_before_fill = begin;
 6559|  76.6k|    begin += potential_fill_len;
 6560|       |
 6561|  76.6k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 76.6k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  76.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  76.6k|    const auto begin_after_fill = begin;
 6567|  76.6k|    ++begin;
 6568|       |
 6569|  76.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 76.6k, False: 0]
  ------------------
 6570|  76.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  76.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 76.6k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  76.6k|    }
 6578|       |
 6579|  76.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 76.6k, False: 0]
  ------------------
 6580|  76.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 76.6k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  76.6k|        return begin_before_fill;
 6585|  76.6k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  76.6k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   153k|{
 6514|   153k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   153k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   153k|        return 1;
 6517|   153k|    }
 6518|   153k|    else {
 6519|   153k|        const auto lengths =
 6520|   153k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   153k|            "\3\4";
 6522|   153k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   153k|        return len;
 6524|   153k|    }
 6525|   153k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   153k|    auto check_align = [](wchar_t ch) {
 6535|   153k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 153k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 153k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 153k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   153k|            default:
  ------------------
  |  Branch (6542:13): [True: 153k, False: 0]
  ------------------
 6543|   153k|                return align_type::none;
 6544|   153k|        }
 6545|   153k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  76.6k|{
 6597|  76.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  76.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 76.6k, False: 0]
  |  Branch (6599:33): [True: 0, False: 76.6k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  76.6k|    return begin;
 6610|  76.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  76.6k|    {
 7127|  76.6k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  76.6k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 76.6k, False: 0]
  ------------------
 7129|  76.6k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 76.6k, False: 0]
  ------------------
 7130|  76.6k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 76.6k]
  ------------------
 7131|  76.6k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  76.6k|        Handler::on_localized();
 7139|  76.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   330k|{
 8417|   330k|#define SCN_VISIT(Type)                                         \
 8418|   330k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   330k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   330k|    }                                                           \
 8421|   330k|    else {                                                      \
 8422|   330k|        return vis(monostate_val);                              \
 8423|   330k|    }
 8424|       |
 8425|   330k|    monostate monostate_val{};
 8426|       |
 8427|   330k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 330k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 330k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 330k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 330k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 330k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 330k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 330k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 330k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 330k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 330k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 330k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 330k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 330k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 330k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 330k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   107k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 107k, False: 222k]
  ------------------
 8459|   107k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   107k|    }                                                           \
  |  | 8421|   107k|    else {                                                      \
  |  | 8422|   107k|        return vis(monostate_val);                              \
  |  | 8423|   107k|    }
  ------------------
 8460|   110k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 110k, False: 220k]
  ------------------
 8461|   110k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   110k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   110k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   110k|    }                                                           \
  |  | 8421|   110k|    else {                                                      \
  |  | 8422|   110k|        return vis(monostate_val);                              \
  |  | 8423|   110k|    }
  ------------------
 8462|   112k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 112k, False: 218k]
  ------------------
 8463|   112k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   112k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   112k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   112k|    }                                                           \
  |  | 8421|   112k|    else {                                                      \
  |  | 8422|   112k|        return vis(monostate_val);                              \
  |  | 8423|   112k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 330k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 330k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 330k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 330k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 330k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 330k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 330k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 330k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 330k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   330k|            SCN_CLANG_POP
 8495|   330k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   114k|{
 8417|   114k|#define SCN_VISIT(Type)                                         \
 8418|   114k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   114k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   114k|    }                                                           \
 8421|   114k|    else {                                                      \
 8422|   114k|        return vis(monostate_val);                              \
 8423|   114k|    }
 8424|       |
 8425|   114k|    monostate monostate_val{};
 8426|       |
 8427|   114k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 114k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 114k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 114k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 114k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 114k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 114k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 114k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 114k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 114k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 114k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 114k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 114k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 114k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 114k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 114k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  36.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 36.4k, False: 78.3k]
  ------------------
 8459|  36.4k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  36.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  36.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  36.4k|    }                                                           \
  |  | 8421|  36.4k|    else {                                                      \
  |  | 8422|  36.4k|        return vis(monostate_val);                              \
  |  | 8423|  36.4k|    }
  ------------------
 8460|  38.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 38.6k, False: 76.2k]
  ------------------
 8461|  38.6k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  38.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  38.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.6k|    }                                                           \
  |  | 8421|  38.6k|    else {                                                      \
  |  | 8422|  38.6k|        return vis(monostate_val);                              \
  |  | 8423|  38.6k|    }
  ------------------
 8462|  39.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 39.7k, False: 75.0k]
  ------------------
 8463|  39.7k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  39.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  39.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  39.7k|    }                                                           \
  |  | 8421|  39.7k|    else {                                                      \
  |  | 8422|  39.7k|        return vis(monostate_val);                              \
  |  | 8423|  39.7k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 114k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 114k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 114k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 114k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 114k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 114k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 114k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 114k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 114k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   114k|            SCN_CLANG_POP
 8495|   114k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   330k|{
 7044|   330k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   330k|    handler.check_args_exhausted();
 7046|   330k|    return handler.get_error();
 7047|   330k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   330k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   330k|    auto begin = format.data();
 7013|   330k|    auto it = begin;
 7014|   330k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   533k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 330k, False: 202k]
  ------------------
 7017|   330k|        const auto ch = *it++;
 7018|   330k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 330k, False: 0]
  ------------------
 7019|   330k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   330k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   330k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 127k, False: 202k]
  ------------------
 7023|   127k|                return;
 7024|   127k|            }
 7025|   330k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   330k|    }
 7036|       |
 7037|   202k|    handler.on_literal_text(begin, end);
 7038|   202k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   202k|    {
 8175|   202k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   202k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   330k|{
 6942|   330k|    struct id_adapter {
 6943|   330k|        constexpr void operator()()
 6944|   330k|        {
 6945|   330k|            arg_id = handler.on_arg_id();
 6946|   330k|        }
 6947|   330k|        constexpr void operator()(std::size_t id)
 6948|   330k|        {
 6949|   330k|            arg_id = handler.on_arg_id(id);
 6950|   330k|        }
 6951|       |
 6952|   330k|        constexpr void on_error(const char* msg)
 6953|   330k|        {
 6954|   330k|            SCN_UNLIKELY_ATTR
 6955|   330k|            handler.on_error(msg);
 6956|   330k|        }
 6957|       |
 6958|   330k|        Handler& handler;
 6959|   330k|        std::size_t arg_id;
 6960|   330k|    };
 6961|       |
 6962|   330k|    ++begin;
 6963|   330k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   330k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 330k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   330k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 330k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   330k|    else {
 6975|   330k|        auto adapter = id_adapter{handler, 0};
 6976|   330k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   330k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   330k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 330k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   330k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 330k, False: 0]
  ------------------
 6987|   330k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   330k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   330k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   661k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  |  Branch (859:45): [True: 0, False: 330k]
  |  |  |  Branch (859:45): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   330k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   330k|    }
 7003|   330k|    return begin + 1;
 7004|   330k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   330k|{
 6443|   330k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   330k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 330k, False: 0]
  |  Branch (6444:26): [True: 0, False: 330k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   330k|    handler();
 6449|   330k|    return begin;
 6450|   330k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   330k|        {
 6945|   330k|            arg_id = handler.on_arg_id();
 6946|   330k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   330k|    {
 7122|   330k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   330k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   330k|{
 6858|   330k|    auto do_presentation = [&]() -> const CharT* {
 6859|   330k|        if (*begin == CharT{'['}) {
 6860|   330k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   330k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   330k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   330k|                return begin;
 6866|   330k|            }
 6867|   330k|            handler.on_character_set_string(set);
 6868|   330k|            return begin;
 6869|   330k|        }
 6870|   330k|        if (*begin == CharT{'/'}) {
 6871|   330k|            return parse_presentation_regex(begin, end, handler);
 6872|   330k|        }
 6873|   330k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   330k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   330k|            handler.on_error("Invalid type specifier in format string");
 6876|   330k|            return begin;
 6877|   330k|        }
 6878|   330k|        handler.on_type(type);
 6879|   330k|        return begin;
 6880|   330k|    };
 6881|       |
 6882|   330k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 330k, False: 0]
  |  Branch (6882:28): [True: 330k, False: 0]
  ------------------
 6883|   330k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 330k, False: 0]
  |  Branch (6883:36): [True: 254k, False: 76.5k]
  ------------------
 6884|   254k|        return do_presentation();
 6885|   254k|    }
 6886|       |
 6887|  76.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  76.5k|    begin = parse_align(begin, end, handler);
 6893|  76.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  76.5k|    begin = parse_width(begin, end, handler);
 6899|  76.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  76.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 76.5k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  76.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 76.5k, False: 0]
  ------------------
 6918|  76.5k|        handler.on_localized();
 6919|  76.5k|        ++begin;
 6920|  76.5k|    }
 6921|  76.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  76.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 76.5k, False: 0]
  |  Branch (6926:25): [True: 0, False: 76.5k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  76.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  76.5k|    return begin;
 6935|  76.5k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   254k|    auto do_presentation = [&]() -> const CharT* {
 6859|   254k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 254k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   254k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 254k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   254k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   254k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 254k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   254k|        handler.on_type(type);
 6879|   254k|        return begin;
 6880|   254k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  76.5k|{
 6532|  76.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  76.5k|    auto check_align = [](wchar_t ch) {
 6535|  76.5k|        switch (ch) {
 6536|  76.5k|            case L'<':
 6537|  76.5k|                return align_type::left;
 6538|  76.5k|            case L'>':
 6539|  76.5k|                return align_type::right;
 6540|  76.5k|            case L'^':
 6541|  76.5k|                return align_type::center;
 6542|  76.5k|            default:
 6543|  76.5k|                return align_type::none;
 6544|  76.5k|        }
 6545|  76.5k|    };
 6546|       |
 6547|  76.5k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  76.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  |  Branch (859:45): [True: 0, False: 76.5k]
  |  |  |  Branch (859:45): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6549|  76.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  76.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  76.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  76.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  76.5k|    const auto begin_before_fill = begin;
 6559|  76.5k|    begin += potential_fill_len;
 6560|       |
 6561|  76.5k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 76.5k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  76.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  76.5k|    const auto begin_after_fill = begin;
 6567|  76.5k|    ++begin;
 6568|       |
 6569|  76.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 76.5k, False: 0]
  ------------------
 6570|  76.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  76.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 76.5k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  76.5k|    }
 6578|       |
 6579|  76.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 76.5k, False: 0]
  ------------------
 6580|  76.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 76.5k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  76.5k|        return begin_before_fill;
 6585|  76.5k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  76.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   153k|    auto check_align = [](wchar_t ch) {
 6535|   153k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 153k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 153k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 153k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   153k|            default:
  ------------------
  |  Branch (6542:13): [True: 153k, False: 0]
  ------------------
 6543|   153k|                return align_type::none;
 6544|   153k|        }
 6545|   153k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  76.5k|{
 6597|  76.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  76.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 76.5k, False: 0]
  |  Branch (6599:33): [True: 0, False: 76.5k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  76.5k|    return begin;
 6610|  76.5k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  76.5k|    {
 7127|  76.5k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  76.5k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 76.5k, False: 0]
  ------------------
 7129|  76.5k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 76.5k, False: 0]
  ------------------
 7130|  76.5k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 76.5k]
  ------------------
 7131|  76.5k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  76.5k|        Handler::on_localized();
 7139|  76.5k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   330k|{
 8417|   330k|#define SCN_VISIT(Type)                                         \
 8418|   330k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   330k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   330k|    }                                                           \
 8421|   330k|    else {                                                      \
 8422|   330k|        return vis(monostate_val);                              \
 8423|   330k|    }
 8424|       |
 8425|   330k|    monostate monostate_val{};
 8426|       |
 8427|   330k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 330k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 330k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 330k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 330k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 330k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 330k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 330k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 330k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 330k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 330k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 330k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 330k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 330k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 330k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 330k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   107k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 107k, False: 222k]
  ------------------
 8459|   107k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   107k|    }                                                           \
  |  | 8421|   107k|    else {                                                      \
  |  | 8422|   107k|        return vis(monostate_val);                              \
  |  | 8423|   107k|    }
  ------------------
 8460|   110k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 110k, False: 219k]
  ------------------
 8461|   110k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   110k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   110k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   110k|    }                                                           \
  |  | 8421|   110k|    else {                                                      \
  |  | 8422|   110k|        return vis(monostate_val);                              \
  |  | 8423|   110k|    }
  ------------------
 8462|   112k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 112k, False: 218k]
  ------------------
 8463|   112k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   112k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   112k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   112k|    }                                                           \
  |  | 8421|   112k|    else {                                                      \
  |  | 8422|   112k|        return vis(monostate_val);                              \
  |  | 8423|   112k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 330k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 330k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 330k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 330k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 330k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 330k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 330k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 330k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 330k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   330k|            SCN_CLANG_POP
 8495|   330k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   166k|    {
 4076|   166k|        sync(0);
 4077|   166k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   212k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  76.5k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  66.0k|{
   89|  66.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  66.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  66.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.0k|    static_cast<    \
  |  |  929|  66.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.0k|    static_cast<    \
  |  |  929|  66.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  66.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   203k|{
   44|   203k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   203k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  66.0k|{
  127|  66.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  66.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  66.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.0k|    static_cast<    \
  |  |  929|  66.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.0k|    static_cast<    \
  |  |  929|  66.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  66.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   203k|{
   60|   203k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   203k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  12.1k|{
  163|  12.1k|    T value;
  164|  12.1k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  12.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 7.91k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.26k|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  7.91k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.91k|    static_cast<    \
  |  |  929|  7.91k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.91k|    static_cast<    \
  |  |  929|  7.91k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  12.1k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  38.3k|{
   72|  38.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  38.3k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  68.2k|{
   89|  68.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  68.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  68.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  68.2k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  68.2k|{
  127|  68.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  68.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  68.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  68.2k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  12.8k|{
  163|  12.8k|    T value;
  164|  12.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  12.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  12.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 8.62k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.26k|    }                                                  \
  |  |  |  | 3671|  12.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  8.62k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.62k|    static_cast<    \
  |  |  929|  8.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.62k|    static_cast<    \
  |  |  929|  8.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  12.8k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  69.3k|{
   89|  69.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  69.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  69.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.3k|    static_cast<    \
  |  |  929|  69.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.3k|    static_cast<    \
  |  |  929|  69.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  69.3k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  69.3k|{
  127|  69.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  69.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  69.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.3k|    static_cast<    \
  |  |  929|  69.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.3k|    static_cast<    \
  |  |  929|  69.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  69.3k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  13.2k|{
  163|  13.2k|    T value;
  164|  13.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 8.99k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.26k|    }                                                  \
  |  |  |  | 3671|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  8.99k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.99k|    static_cast<    \
  |  |  929|  8.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.99k|    static_cast<    \
  |  |  929|  8.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.2k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  66.0k|{
   89|  66.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  66.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  66.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.0k|    static_cast<    \
  |  |  929|  66.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.0k|    static_cast<    \
  |  |  929|  66.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  66.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   203k|{
   44|   203k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   203k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  66.0k|{
  127|  66.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  66.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  66.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.0k|    static_cast<    \
  |  |  929|  66.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.0k|    static_cast<    \
  |  |  929|  66.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  66.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   203k|{
   60|   203k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   203k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  12.1k|{
  163|  12.1k|    T value;
  164|  12.1k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  12.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 7.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.26k|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  7.90k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.90k|    static_cast<    \
  |  |  929|  7.90k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.90k|    static_cast<    \
  |  |  929|  7.90k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  12.1k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  38.2k|{
   72|  38.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  38.2k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  68.1k|{
   89|  68.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  68.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  68.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  68.1k|    static_cast<    \
  |  |  929|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  68.1k|    static_cast<    \
  |  |  929|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  68.1k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  68.1k|{
  127|  68.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  68.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  68.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  68.1k|    static_cast<    \
  |  |  929|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  68.1k|    static_cast<    \
  |  |  929|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  68.1k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  12.8k|{
  163|  12.8k|    T value;
  164|  12.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  12.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  12.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 8.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.26k|    }                                                  \
  |  |  |  | 3671|  12.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  8.60k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.60k|    static_cast<    \
  |  |  929|  8.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.60k|    static_cast<    \
  |  |  929|  8.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  12.8k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  69.3k|{
   89|  69.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  69.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  69.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.3k|    static_cast<    \
  |  |  929|  69.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.3k|    static_cast<    \
  |  |  929|  69.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  69.3k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  69.3k|{
  127|  69.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  69.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  69.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.3k|    static_cast<    \
  |  |  929|  69.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.3k|    static_cast<    \
  |  |  929|  69.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  69.3k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  13.2k|{
  163|  13.2k|    T value;
  164|  13.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.26k|    }                                                  \
  |  |  |  | 3671|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  8.97k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.97k|    static_cast<    \
  |  |  929|  8.97k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.97k|    static_cast<    \
  |  |  929|  8.97k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.2k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.40M|{
  653|  1.40M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.40M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   589k|{
  659|   589k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   589k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 294k, False: 294k]
  ------------------
  661|   589k|                    : std::locale{};
  662|   589k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   673k|{
 1221|   673k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   673k|                                  m_nan_payload_buffer, value);
 1223|   673k|    value = this->setsign(value);
 1224|   673k|    return n;
 1225|   673k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   208k|{
 1221|   208k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   208k|                                  m_nan_payload_buffer, value);
 1223|   208k|    value = this->setsign(value);
 1224|   208k|    return n;
 1225|   208k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   699k|{
 1221|   699k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   699k|                                  m_nan_payload_buffer, value);
 1223|   699k|    value = this->setsign(value);
 1224|   699k|    return n;
 1225|   699k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   217k|{
 1221|   217k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   217k|                                  m_nan_payload_buffer, value);
 1223|   217k|    value = this->setsign(value);
 1224|   217k|    return n;
 1225|   217k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   706k|{
 1221|   706k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   706k|                                  m_nan_payload_buffer, value);
 1223|   706k|    value = this->setsign(value);
 1224|   706k|    return n;
 1225|   706k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   222k|{
 1221|   222k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   222k|                                  m_nan_payload_buffer, value);
 1223|   222k|    value = this->setsign(value);
 1224|   222k|    return n;
 1225|   222k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   465k|{
 2184|   465k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   465k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   532k|{
 2192|   532k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   532k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   532k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 494k, False: 38.3k]
  |  |  ------------------
  ------------------
 2194|   494k|        source.sync(*n);
 2195|   494k|    }
 2196|  38.3k|    else {
 2197|  38.3k|        source.sync_all();
 2198|  38.3k|    }
 2199|   532k|    return n;
 2200|   532k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   203k|{
 2208|   203k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   203k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   203k|{
 2216|   203k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   203k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   203k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 126k, False: 76.7k]
  |  |  ------------------
  ------------------
 2218|   126k|        source.sync(*n);
 2219|   126k|    }
 2220|  76.7k|    else {
 2221|  76.7k|        source.sync_all();
 2222|  76.7k|    }
 2223|   203k|    return n;
 2224|   203k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   922k|{
  194|   922k|    return find_classic_impl(
  195|   922k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   922k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   922k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  2.20M|{
  202|  2.20M|    return find_classic_impl(
  203|  2.20M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  2.20M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  2.20M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   465k|{
 2141|   465k|    return vscan_internal(source, format, args);
 2142|   465k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   532k|{
 2147|   532k|    auto n = vscan_internal(source, format, args);
 2148|   532k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   532k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 494k, False: 38.3k]
  |  |  ------------------
  ------------------
 2149|   494k|        source.sync(*n);
 2150|   494k|    }
 2151|  38.3k|    else {
 2152|  38.3k|        source.sync_all();
 2153|  38.3k|    }
 2154|   532k|    return n;
 2155|   532k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   203k|{
 2161|   203k|    return vscan_internal(source, format, args);
 2162|   203k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   203k|{
 2167|   203k|    auto n = vscan_internal(source, format, args);
 2168|   203k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   203k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 126k, False: 76.7k]
  |  |  ------------------
  ------------------
 2169|   126k|        source.sync(*n);
 2170|   126k|    }
 2171|  76.7k|    else {
 2172|  76.7k|        source.sync_all();
 2173|  76.7k|    }
 2174|   203k|    return n;
 2175|   203k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   101k|{
 2251|   101k|    return vscan_value_internal(source, arg);
 2252|   101k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   110k|{
 2256|   110k|    auto n = vscan_value_internal(source, arg);
 2257|   110k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   110k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 103k, False: 6.39k]
  |  |  ------------------
  ------------------
 2258|   103k|        source.sync(*n);
 2259|   103k|    }
 2260|  6.39k|    else {
 2261|  6.39k|        source.sync_all();
 2262|  6.39k|    }
 2263|   110k|    return n;
 2264|   110k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  38.3k|{
 2270|  38.3k|    return vscan_value_internal(source, arg);
 2271|  38.3k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  38.2k|{
 2276|  38.2k|    auto n = vscan_value_internal(source, arg);
 2277|  38.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  38.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 25.4k, False: 12.7k]
  |  |  ------------------
  ------------------
 2278|  25.4k|        source.sync(*n);
 2279|  25.4k|    }
 2280|  12.7k|    else {
 2281|  12.7k|        source.sync_all();
 2282|  12.7k|    }
 2283|  38.2k|    return n;
 2284|  38.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   922k|{
  118|   922k|    auto it = source.begin();
  119|       |
  120|  3.06M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.47M, False: 591k]
  ------------------
  121|  2.47M|        auto sv =
  122|  2.47M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.47M|                .substr(0, 8);
  124|       |
  125|  2.47M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.41M, False: 57.8k]
  ------------------
  126|  2.41M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.41M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.41M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 308k, False: 2.10M]
  ------------------
  129|   308k|                break;
  130|   308k|            }
  131|  2.10M|            continue;
  132|  2.41M|        }
  133|       |
  134|   192k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 158k, False: 34.0k]
  ------------------
  135|   158k|            auto tmp =
  136|   158k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   158k|            auto res = get_next_code_point(tmp);
  138|   158k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 23.7k, False: 134k]
  ------------------
  139|  23.7k|                return it;
  140|  23.7k|            }
  141|   134k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   134k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   134k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   134k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   134k|        }
  145|  57.8k|    }
  146|       |
  147|   899k|    return detail::make_string_view_iterator(source, it);
  148|   922k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  3.83M|{
  105|  3.83M|    static_assert(sizeof(*source.data()) == 1);
  106|  3.83M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  3.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  3.83M|    uint64_t word{};
  108|  3.83M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  3.83M|    return has_byte_greater(word, 127) != 0;
  111|  3.83M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  14.8M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   158k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.20M|{
  118|  2.20M|    auto it = source.begin();
  119|       |
  120|  2.40M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.35M, False: 1.04M]
  ------------------
  121|  1.35M|        auto sv =
  122|  1.35M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.35M|                .substr(0, 8);
  124|       |
  125|  1.35M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.27M, False: 78.2k]
  ------------------
  126|  1.27M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.27M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.27M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.08M, False: 195k]
  ------------------
  129|  1.08M|                break;
  130|  1.08M|            }
  131|   195k|            continue;
  132|  1.27M|        }
  133|       |
  134|   150k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 142k, False: 7.90k]
  ------------------
  135|   142k|            auto tmp =
  136|   142k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   142k|            auto res = get_next_code_point(tmp);
  138|   142k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 70.2k, False: 71.8k]
  ------------------
  139|  70.2k|                return it;
  140|  70.2k|            }
  141|  71.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  71.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  71.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  71.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  71.8k|        }
  145|  78.2k|    }
  146|       |
  147|  2.12M|    return detail::make_string_view_iterator(source, it);
  148|  2.20M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.96M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   142k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   673k|{
 1138|   673k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.56k, False: 669k]
  ------------------
 1139|  4.56k|        value = std::numeric_limits<T>::infinity();
 1140|  4.56k|        return 3;
 1141|  4.56k|    }
 1142|   669k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.60k, False: 665k]
  ------------------
 1143|  3.60k|        value = std::numeric_limits<T>::infinity();
 1144|  3.60k|        return 8;
 1145|  3.60k|    }
 1146|   665k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 29.7k, False: 636k]
  ------------------
 1147|  29.7k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  29.7k|        return 3;
 1149|  29.7k|    }
 1150|   636k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 842, False: 635k]
  ------------------
 1151|    842|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    842|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    842|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    842|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    842|    }
 1182|       |
 1183|   635k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   635k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   635k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   635k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 137k, False: 497k]
  ------------------
 1185|   137k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.50k, False: 135k]
  |  |  ------------------
  ------------------
 1186|  2.50k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.50k|                                         "Invalid floating-point digit");
 1188|  2.50k|        }
 1189|   137k|    }
 1190|   632k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.69k, False: 625k]
  |  |  ------------------
  ------------------
 1191|  6.69k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  6.69k|                                     "Invalid floating-point digit");
 1193|  6.69k|    }
 1194|       |
 1195|   625k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   625k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   625k|            double tmp{};
 1200|   625k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   625k|            value = tmp;
 1202|   625k|            return ret;
 1203|   625k|        }
 1204|   625k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   625k|            return fast_float_fallback(data, value);
 1208|   625k|        }
 1209|   625k|    }
 1210|   625k|    else {
 1211|       |        // Default to fast_float
 1212|   625k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   625k|    }
 1214|   625k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|   625k|    {
 1078|   625k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  2.25M|    {
  712|  2.25M|        return {kind, options};
  713|  2.25M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   625k|    {
 1082|   625k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 134k, False: 490k]
  ------------------
 1083|   625k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 20.9k, False: 470k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   155k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   155k|                                              value);
 1087|   155k|        }
 1088|       |
 1089|   470k|        const auto flags = get_flags();
 1090|   470k|        const auto view = get_view();
 1091|   470k|        const auto result = fast_float::from_chars(
 1092|   470k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   470k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 470k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   470k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.91k, False: 465k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.91k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.91k|                                              value);
 1102|  4.91k|        }
 1103|       |
 1104|   465k|        return result.ptr - view.data();
 1105|   470k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   160k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   160k|    {
 1048|   160k|#if !SCN_DISABLE_STRTOD
 1049|   160k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   160k|    }
 1056|   160k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   160k|    {
  894|   160k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   200k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   160k|    {
  898|   160k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   160k|                           generic_strtod);
  900|   160k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   160k|    {
  732|   160k|        CharT* end{};
  733|   160k|        errno = 0;
  734|   160k|        value = strtod_cb(src, &end);
  735|   160k|        const auto saved_errno = errno;
  736|   160k|        auto chars_read = end - src;
  737|       |
  738|   160k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   160k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.79k, False: 155k]
  |  |  ------------------
  ------------------
  740|  5.79k|            return unexpected(e);
  741|  5.79k|        }
  742|       |
  743|   155k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 134k, False: 20.7k]
  ------------------
  744|   155k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 134k, False: 0]
  ------------------
  745|   134k|            chars_read -= 2;
  746|   134k|        }
  747|       |
  748|   155k|        return chars_read;
  749|   160k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   200k|    {
  778|   200k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 71.8k, False: 128k]
  |  Branch (778:37): [True: 0, False: 71.8k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   200k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 21.1k, False: 179k]
  ------------------
  785|   200k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 21.1k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   200k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 8.42k, False: 191k]
  |  Branch (791:34): [True: 1.51k, False: 6.90k]
  ------------------
  792|  1.51k|            SCN_UNLIKELY_ATTR
  793|  1.51k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.51k|        }
  795|       |
  796|   198k|        SCN_GCC_COMPAT_PUSH
  797|   198k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   198k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 198k, False: 0]
  ------------------
  800|   198k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 198k, False: 0]
  ------------------
  801|   198k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 6.87k, False: 192k]
  ------------------
  802|  6.87k|            SCN_UNLIKELY_ATTR
  803|  6.87k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  6.87k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   192k|            return {};
  809|   198k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   208k|{
  687|   208k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 73.3k, False: 135k]
  |  Branch (687:25): [True: 0, False: 135k]
  ------------------
  688|   208k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   160k|    {
  755|   160k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 156k, False: 3.97k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   156k|            auto first_space = read_until_classic_space(input.view());
  758|   156k|            input.assign(
  759|   156k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   156k|        }
  761|       |
  762|   160k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 134k, False: 25.8k]
  ------------------
  763|   134k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   134k|                input.get_allocated_string().insert(0, "0x");
  765|   134k|            }
  766|   134k|            else {
  767|   134k|                input.get_allocated_string().insert(0, L"0x");
  768|   134k|            }
  769|   134k|        }
  770|       |
  771|   160k|        return input.get_allocated_string().c_str();
  772|   160k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   160k|    {
  905|   160k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   160k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   160k|        }
  908|   160k|        else {
  909|   160k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   160k|        }
  911|   160k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   160k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   160k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   160k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   160k|            return std::strtof(str, str_end);
  839|   160k|        }
  840|   160k|        else if constexpr (std::is_same_v<T, double>) {
  841|   160k|            return std::strtod(str, str_end);
  842|   160k|        }
  843|   160k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   160k|            return std::strtold(str, str_end);
  845|   160k|        }
  846|   160k|#endif
  847|   160k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.25M|    {
 1061|  1.25M|        unsigned format_flags{};
 1062|  1.25M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.24M, False: 10.2k]
  ------------------
 1063|  1.24M|            format_flags |= fast_float::fixed;
 1064|  1.24M|        }
 1065|  1.25M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.06M, False: 190k]
  ------------------
 1066|  1.06M|            format_flags |= fast_float::scientific;
 1067|  1.06M|        }
 1068|       |
 1069|  1.25M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.25M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   470k|    {
 1110|   470k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   470k|            return m_input.view();
 1112|   470k|        }
 1113|   470k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   470k|            return std::u16string_view{
 1115|   470k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   470k|                m_input.view().size()};
 1117|   470k|        }
 1118|   470k|        else {
 1119|   470k|            return std::u32string_view{
 1120|   470k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   470k|                m_input.view().size()};
 1122|   470k|        }
 1123|   470k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   208k|{
 1138|   208k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 208k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   208k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 208k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   208k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 208k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   208k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 208k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   208k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   208k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   208k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   208k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 45.0k, False: 163k]
  ------------------
 1185|  45.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  45.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.22k, False: 36.7k]
  |  |  ------------------
  ------------------
 1186|  8.22k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.22k|                                         "Invalid floating-point digit");
 1188|  8.22k|        }
 1189|  45.0k|    }
 1190|   200k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 180k]
  |  |  ------------------
  ------------------
 1191|  20.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.0k|                                     "Invalid floating-point digit");
 1193|  20.0k|    }
 1194|       |
 1195|   180k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   180k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   180k|            double tmp{};
 1200|   180k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   180k|            value = tmp;
 1202|   180k|            return ret;
 1203|   180k|        }
 1204|   180k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   180k|            return fast_float_fallback(data, value);
 1208|   180k|        }
 1209|   180k|    }
 1210|   180k|    else {
 1211|       |        // Default to fast_float
 1212|   180k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   180k|    }
 1214|   180k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|   180k|    {
 1078|   180k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   640k|    {
  712|   640k|        return {kind, options};
  713|   640k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   180k|    {
 1082|   180k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 36.7k, False: 143k]
  ------------------
 1083|   180k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 270, False: 143k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  37.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  37.0k|                                              value);
 1087|  37.0k|        }
 1088|       |
 1089|   143k|        const auto flags = get_flags();
 1090|   143k|        const auto view = get_view();
 1091|   143k|        const auto result = fast_float::from_chars(
 1092|   143k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   143k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 143k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   143k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.54k, False: 140k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.54k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.54k|                                              value);
 1102|  2.54k|        }
 1103|       |
 1104|   140k|        return result.ptr - view.data();
 1105|   143k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  39.5k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  39.5k|    {
 1048|  39.5k|#if !SCN_DISABLE_STRTOD
 1049|  39.5k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  39.5k|    }
 1056|  39.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  39.5k|    {
  894|  39.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  39.5k|    {
  898|  39.5k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  39.5k|                           generic_strtod);
  900|  39.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  39.5k|    {
  732|  39.5k|        CharT* end{};
  733|  39.5k|        errno = 0;
  734|  39.5k|        value = strtod_cb(src, &end);
  735|  39.5k|        const auto saved_errno = errno;
  736|  39.5k|        auto chars_read = end - src;
  737|       |
  738|  39.5k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  39.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.59k, False: 36.9k]
  |  |  ------------------
  ------------------
  740|  2.59k|            return unexpected(e);
  741|  2.59k|        }
  742|       |
  743|  36.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 36.7k, False: 270]
  ------------------
  744|  36.9k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 36.7k, False: 0]
  ------------------
  745|  36.7k|            chars_read -= 2;
  746|  36.7k|        }
  747|       |
  748|  36.9k|        return chars_read;
  749|  39.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  39.5k|    {
  755|  39.5k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 37.9k, False: 1.60k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  37.9k|            auto first_space = read_until_classic_space(input.view());
  758|  37.9k|            input.assign(
  759|  37.9k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  37.9k|        }
  761|       |
  762|  39.5k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 36.7k, False: 2.81k]
  ------------------
  763|  36.7k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  36.7k|                input.get_allocated_string().insert(0, "0x");
  765|  36.7k|            }
  766|  36.7k|            else {
  767|  36.7k|                input.get_allocated_string().insert(0, L"0x");
  768|  36.7k|            }
  769|  36.7k|        }
  770|       |
  771|  39.5k|        return input.get_allocated_string().c_str();
  772|  39.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  39.5k|    {
  905|  39.5k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  39.5k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  39.5k|        }
  908|  39.5k|        else {
  909|  39.5k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  39.5k|        }
  911|  39.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  39.5k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  39.5k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  39.5k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  39.5k|            return std::wcstof(str, str_end);
  877|  39.5k|        }
  878|  39.5k|        else if constexpr (std::is_same_v<T, double>) {
  879|  39.5k|            return std::wcstod(str, str_end);
  880|  39.5k|        }
  881|  39.5k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  39.5k|            return std::wcstold(str, str_end);
  883|  39.5k|        }
  884|  39.5k|#endif
  885|  39.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   143k|    {
 1110|   143k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   143k|            return m_input.view();
 1112|   143k|        }
 1113|   143k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   143k|            return std::u16string_view{
 1115|   143k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   143k|                m_input.view().size()};
 1117|   143k|        }
 1118|   143k|        else {
 1119|   143k|            return std::u32string_view{
 1120|   143k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   143k|                m_input.view().size()};
 1122|   143k|        }
 1123|   143k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   699k|{
 1138|   699k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.91k, False: 694k]
  ------------------
 1139|  4.91k|        value = std::numeric_limits<T>::infinity();
 1140|  4.91k|        return 3;
 1141|  4.91k|    }
 1142|   694k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.87k, False: 691k]
  ------------------
 1143|  3.87k|        value = std::numeric_limits<T>::infinity();
 1144|  3.87k|        return 8;
 1145|  3.87k|    }
 1146|   691k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 30.3k, False: 660k]
  ------------------
 1147|  30.3k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  30.3k|        return 3;
 1149|  30.3k|    }
 1150|   660k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 912, False: 659k]
  ------------------
 1151|    912|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    912|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    912|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    912|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    912|    }
 1182|       |
 1183|   659k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   659k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   659k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   659k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 140k, False: 518k]
  ------------------
 1185|   140k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.57k, False: 138k]
  |  |  ------------------
  ------------------
 1186|  2.57k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.57k|                                         "Invalid floating-point digit");
 1188|  2.57k|        }
 1189|   140k|    }
 1190|   657k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   657k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.19k, False: 649k]
  |  |  ------------------
  ------------------
 1191|  7.19k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.19k|                                     "Invalid floating-point digit");
 1193|  7.19k|    }
 1194|       |
 1195|   649k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   649k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   649k|            double tmp{};
 1200|   649k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   649k|            value = tmp;
 1202|   649k|            return ret;
 1203|   649k|        }
 1204|   649k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   649k|            return fast_float_fallback(data, value);
 1208|   649k|        }
 1209|   649k|    }
 1210|   649k|    else {
 1211|       |        // Default to fast_float
 1212|   649k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   649k|    }
 1214|   649k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|   649k|    {
 1078|   649k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   649k|    {
 1082|   649k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 138k, False: 511k]
  ------------------
 1083|   649k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 22.8k, False: 488k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   161k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   161k|                                              value);
 1087|   161k|        }
 1088|       |
 1089|   488k|        const auto flags = get_flags();
 1090|   488k|        const auto view = get_view();
 1091|   488k|        const auto result = fast_float::from_chars(
 1092|   488k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   488k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 488k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   488k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.25k, False: 486k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.25k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.25k|                                              value);
 1102|  2.25k|        }
 1103|       |
 1104|   486k|        return result.ptr - view.data();
 1105|   488k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   163k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   163k|    {
 1048|   163k|#if !SCN_DISABLE_STRTOD
 1049|   163k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   163k|    }
 1056|   163k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   163k|    {
  894|   163k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   201k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   163k|    {
  898|   163k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   163k|                           generic_strtod);
  900|   163k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   163k|    {
  732|   163k|        CharT* end{};
  733|   163k|        errno = 0;
  734|   163k|        value = strtod_cb(src, &end);
  735|   163k|        const auto saved_errno = errno;
  736|   163k|        auto chars_read = end - src;
  737|       |
  738|   163k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   163k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.70k, False: 160k]
  |  |  ------------------
  ------------------
  740|  2.70k|            return unexpected(e);
  741|  2.70k|        }
  742|       |
  743|   160k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 137k, False: 22.7k]
  ------------------
  744|   160k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 137k, False: 0]
  ------------------
  745|   137k|            chars_read -= 2;
  746|   137k|        }
  747|       |
  748|   160k|        return chars_read;
  749|   163k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   201k|    {
  778|   201k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 71.2k, False: 130k]
  |  Branch (778:37): [True: 0, False: 71.2k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   201k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 23.1k, False: 178k]
  ------------------
  785|   201k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 23.1k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   201k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 4.07k, False: 197k]
  |  Branch (791:34): [True: 354, False: 3.71k]
  ------------------
  792|    354|            SCN_UNLIKELY_ATTR
  793|    354|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    354|        }
  795|       |
  796|   201k|        SCN_GCC_COMPAT_PUSH
  797|   201k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   201k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 201k, False: 0]
  ------------------
  800|   201k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 201k, False: 0]
  ------------------
  801|   201k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 3.71k, False: 197k]
  ------------------
  802|  3.71k|            SCN_UNLIKELY_ATTR
  803|  3.71k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  3.71k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   197k|            return {};
  809|   201k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   205k|{
  691|   205k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 71.5k, False: 134k]
  |  Branch (691:24): [True: 0, False: 134k]
  ------------------
  692|   205k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   163k|    {
  755|   163k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 160k, False: 2.88k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   160k|            auto first_space = read_until_classic_space(input.view());
  758|   160k|            input.assign(
  759|   160k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   160k|        }
  761|       |
  762|   163k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 138k, False: 25.1k]
  ------------------
  763|   138k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   138k|                input.get_allocated_string().insert(0, "0x");
  765|   138k|            }
  766|   138k|            else {
  767|   138k|                input.get_allocated_string().insert(0, L"0x");
  768|   138k|            }
  769|   138k|        }
  770|       |
  771|   163k|        return input.get_allocated_string().c_str();
  772|   163k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   163k|    {
  905|   163k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   163k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   163k|        }
  908|   163k|        else {
  909|   163k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   163k|        }
  911|   163k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   163k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   163k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   163k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   163k|            return std::strtof(str, str_end);
  839|   163k|        }
  840|   163k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   163k|            return std::strtod(str, str_end);
  842|   163k|        }
  843|   163k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   163k|            return std::strtold(str, str_end);
  845|   163k|        }
  846|   163k|#endif
  847|   163k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   488k|    {
 1110|   488k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   488k|            return m_input.view();
 1112|   488k|        }
 1113|   488k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   488k|            return std::u16string_view{
 1115|   488k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   488k|                m_input.view().size()};
 1117|   488k|        }
 1118|   488k|        else {
 1119|   488k|            return std::u32string_view{
 1120|   488k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   488k|                m_input.view().size()};
 1122|   488k|        }
 1123|   488k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   217k|{
 1138|   217k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 217k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   217k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 217k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   217k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 217k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   217k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 217k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   217k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   217k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 45.0k, False: 172k]
  ------------------
 1185|  45.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  45.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.22k, False: 36.7k]
  |  |  ------------------
  ------------------
 1186|  8.22k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.22k|                                         "Invalid floating-point digit");
 1188|  8.22k|        }
 1189|  45.0k|    }
 1190|   209k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.3k, False: 189k]
  |  |  ------------------
  ------------------
 1191|  20.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.3k|                                     "Invalid floating-point digit");
 1193|  20.3k|    }
 1194|       |
 1195|   189k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   189k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   189k|            double tmp{};
 1200|   189k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   189k|            value = tmp;
 1202|   189k|            return ret;
 1203|   189k|        }
 1204|   189k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   189k|            return fast_float_fallback(data, value);
 1208|   189k|        }
 1209|   189k|    }
 1210|   189k|    else {
 1211|       |        // Default to fast_float
 1212|   189k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   189k|    }
 1214|   189k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|   189k|    {
 1078|   189k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   189k|    {
 1082|   189k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 36.7k, False: 152k]
  ------------------
 1083|   189k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 275, False: 152k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  37.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  37.0k|                                              value);
 1087|  37.0k|        }
 1088|       |
 1089|   152k|        const auto flags = get_flags();
 1090|   152k|        const auto view = get_view();
 1091|   152k|        const auto result = fast_float::from_chars(
 1092|   152k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   152k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 152k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   152k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.32k, False: 150k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.32k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.32k|                                              value);
 1102|  1.32k|        }
 1103|       |
 1104|   150k|        return result.ptr - view.data();
 1105|   152k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  38.3k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  38.3k|    {
 1048|  38.3k|#if !SCN_DISABLE_STRTOD
 1049|  38.3k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  38.3k|    }
 1056|  38.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  38.3k|    {
  894|  38.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  38.3k|    {
  898|  38.3k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  38.3k|                           generic_strtod);
  900|  38.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  38.3k|    {
  732|  38.3k|        CharT* end{};
  733|  38.3k|        errno = 0;
  734|  38.3k|        value = strtod_cb(src, &end);
  735|  38.3k|        const auto saved_errno = errno;
  736|  38.3k|        auto chars_read = end - src;
  737|       |
  738|  38.3k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  38.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  38.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.37k, False: 36.9k]
  |  |  ------------------
  ------------------
  740|  1.37k|            return unexpected(e);
  741|  1.37k|        }
  742|       |
  743|  36.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 36.7k, False: 275]
  ------------------
  744|  36.9k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 36.7k, False: 0]
  ------------------
  745|  36.7k|            chars_read -= 2;
  746|  36.7k|        }
  747|       |
  748|  36.9k|        return chars_read;
  749|  38.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  38.3k|    {
  755|  38.3k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 37.3k, False: 990]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  37.3k|            auto first_space = read_until_classic_space(input.view());
  758|  37.3k|            input.assign(
  759|  37.3k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  37.3k|        }
  761|       |
  762|  38.3k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 36.7k, False: 1.60k]
  ------------------
  763|  36.7k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  36.7k|                input.get_allocated_string().insert(0, "0x");
  765|  36.7k|            }
  766|  36.7k|            else {
  767|  36.7k|                input.get_allocated_string().insert(0, L"0x");
  768|  36.7k|            }
  769|  36.7k|        }
  770|       |
  771|  38.3k|        return input.get_allocated_string().c_str();
  772|  38.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  38.3k|    {
  905|  38.3k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  38.3k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  38.3k|        }
  908|  38.3k|        else {
  909|  38.3k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  38.3k|        }
  911|  38.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  38.3k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  38.3k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  38.3k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  38.3k|            return std::wcstof(str, str_end);
  877|  38.3k|        }
  878|  38.3k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  38.3k|            return std::wcstod(str, str_end);
  880|  38.3k|        }
  881|  38.3k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  38.3k|            return std::wcstold(str, str_end);
  883|  38.3k|        }
  884|  38.3k|#endif
  885|  38.3k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   152k|    {
 1110|   152k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   152k|            return m_input.view();
 1112|   152k|        }
 1113|   152k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   152k|            return std::u16string_view{
 1115|   152k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   152k|                m_input.view().size()};
 1117|   152k|        }
 1118|   152k|        else {
 1119|   152k|            return std::u32string_view{
 1120|   152k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   152k|                m_input.view().size()};
 1122|   152k|        }
 1123|   152k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   706k|{
 1138|   706k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.04k, False: 701k]
  ------------------
 1139|  5.04k|        value = std::numeric_limits<T>::infinity();
 1140|  5.04k|        return 3;
 1141|  5.04k|    }
 1142|   701k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.97k, False: 697k]
  ------------------
 1143|  3.97k|        value = std::numeric_limits<T>::infinity();
 1144|  3.97k|        return 8;
 1145|  3.97k|    }
 1146|   697k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 30.6k, False: 666k]
  ------------------
 1147|  30.6k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  30.6k|        return 3;
 1149|  30.6k|    }
 1150|   666k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 944, False: 665k]
  ------------------
 1151|    944|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    944|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    944|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    944|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    944|    }
 1182|       |
 1183|   665k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   665k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   665k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   665k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 141k, False: 524k]
  ------------------
 1185|   141k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.65k, False: 138k]
  |  |  ------------------
  ------------------
 1186|  2.65k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.65k|                                         "Invalid floating-point digit");
 1188|  2.65k|        }
 1189|   141k|    }
 1190|   663k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   663k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.47k, False: 655k]
  |  |  ------------------
  ------------------
 1191|  7.47k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.47k|                                     "Invalid floating-point digit");
 1193|  7.47k|    }
 1194|       |
 1195|   655k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   655k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   655k|            double tmp{};
 1200|   655k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   655k|            value = tmp;
 1202|   655k|            return ret;
 1203|   655k|        }
 1204|   655k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   655k|            return fast_float_fallback(data, value);
 1208|   655k|        }
 1209|   655k|    }
 1210|   655k|    else {
 1211|       |        // Default to fast_float
 1212|   655k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   655k|    }
 1214|   655k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   655k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   655k|    {
 1048|   655k|#if !SCN_DISABLE_STRTOD
 1049|   655k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   655k|    }
 1056|   655k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|   655k|    {
  894|   655k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|   848k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   655k|    {
  898|   655k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   655k|                           generic_strtod);
  900|   655k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   655k|    {
  732|   655k|        CharT* end{};
  733|   655k|        errno = 0;
  734|   655k|        value = strtod_cb(src, &end);
  735|   655k|        const auto saved_errno = errno;
  736|   655k|        auto chars_read = end - src;
  737|       |
  738|   655k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   655k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 570, False: 655k]
  |  |  ------------------
  ------------------
  740|    570|            return unexpected(e);
  741|    570|        }
  742|       |
  743|   655k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 138k, False: 516k]
  ------------------
  744|   655k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 138k, False: 0]
  ------------------
  745|   138k|            chars_read -= 2;
  746|   138k|        }
  747|       |
  748|   655k|        return chars_read;
  749|   655k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|   848k|    {
  778|   848k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 335k, False: 513k]
  |  Branch (778:37): [True: 0, False: 335k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   848k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 23.1k, False: 825k]
  ------------------
  785|   848k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 23.1k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   848k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 688, False: 848k]
  |  Branch (791:34): [True: 60, False: 628]
  ------------------
  792|     60|            SCN_UNLIKELY_ATTR
  793|     60|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|     60|        }
  795|       |
  796|   848k|        SCN_GCC_COMPAT_PUSH
  797|   848k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   848k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 848k, False: 0]
  ------------------
  800|   848k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 848k, False: 0]
  ------------------
  801|   848k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 628, False: 848k]
  ------------------
  802|    628|            SCN_UNLIKELY_ATTR
  803|    628|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    628|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   848k|            return {};
  809|   848k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|   849k|{
  695|   849k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 335k, False: 513k]
  |  Branch (695:26): [True: 0, False: 513k]
  ------------------
  696|   849k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   655k|    {
  755|   655k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 605k, False: 50.1k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   605k|            auto first_space = read_until_classic_space(input.view());
  758|   605k|            input.assign(
  759|   605k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   605k|        }
  761|       |
  762|   655k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 138k, False: 516k]
  ------------------
  763|   138k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   138k|                input.get_allocated_string().insert(0, "0x");
  765|   138k|            }
  766|   138k|            else {
  767|   138k|                input.get_allocated_string().insert(0, L"0x");
  768|   138k|            }
  769|   138k|        }
  770|       |
  771|   655k|        return input.get_allocated_string().c_str();
  772|   655k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   655k|    {
  905|   655k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   655k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   655k|        }
  908|   655k|        else {
  909|   655k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   655k|        }
  911|   655k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   655k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   655k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   655k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   655k|            return std::strtof(str, str_end);
  839|   655k|        }
  840|   655k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   655k|            return std::strtod(str, str_end);
  842|   655k|        }
  843|   655k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|   655k|            return std::strtold(str, str_end);
  845|   655k|        }
  846|   655k|#endif
  847|   655k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   222k|{
 1138|   222k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 222k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   222k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 222k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   222k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 222k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   222k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 222k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   222k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   222k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 45.0k, False: 177k]
  ------------------
 1185|  45.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  45.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.23k, False: 36.8k]
  |  |  ------------------
  ------------------
 1186|  8.23k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.23k|                                         "Invalid floating-point digit");
 1188|  8.23k|        }
 1189|  45.0k|    }
 1190|   213k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 193k]
  |  |  ------------------
  ------------------
 1191|  20.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.7k|                                     "Invalid floating-point digit");
 1193|  20.7k|    }
 1194|       |
 1195|   193k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   193k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   193k|            double tmp{};
 1200|   193k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   193k|            value = tmp;
 1202|   193k|            return ret;
 1203|   193k|        }
 1204|   193k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   193k|            return fast_float_fallback(data, value);
 1208|   193k|        }
 1209|   193k|    }
 1210|   193k|    else {
 1211|       |        // Default to fast_float
 1212|   193k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   193k|    }
 1214|   193k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   193k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   193k|    {
 1048|   193k|#if !SCN_DISABLE_STRTOD
 1049|   193k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   193k|    }
 1056|   193k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|   193k|    {
  894|   193k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   193k|    {
  898|   193k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   193k|                           generic_strtod);
  900|   193k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   193k|    {
  732|   193k|        CharT* end{};
  733|   193k|        errno = 0;
  734|   193k|        value = strtod_cb(src, &end);
  735|   193k|        const auto saved_errno = errno;
  736|   193k|        auto chars_read = end - src;
  737|       |
  738|   193k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   193k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 193k]
  |  |  ------------------
  ------------------
  740|    118|            return unexpected(e);
  741|    118|        }
  742|       |
  743|   193k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 36.7k, False: 156k]
  ------------------
  744|   193k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 36.7k, False: 0]
  ------------------
  745|  36.7k|            chars_read -= 2;
  746|  36.7k|        }
  747|       |
  748|   193k|        return chars_read;
  749|   193k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   193k|    {
  755|   193k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 189k, False: 3.47k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   189k|            auto first_space = read_until_classic_space(input.view());
  758|   189k|            input.assign(
  759|   189k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   189k|        }
  761|       |
  762|   193k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 36.7k, False: 156k]
  ------------------
  763|  36.7k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  36.7k|                input.get_allocated_string().insert(0, "0x");
  765|  36.7k|            }
  766|  36.7k|            else {
  767|  36.7k|                input.get_allocated_string().insert(0, L"0x");
  768|  36.7k|            }
  769|  36.7k|        }
  770|       |
  771|   193k|        return input.get_allocated_string().c_str();
  772|   193k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   193k|    {
  905|   193k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   193k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   193k|        }
  908|   193k|        else {
  909|   193k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   193k|        }
  911|   193k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   193k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   193k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|   193k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|   193k|            return std::wcstof(str, str_end);
  877|   193k|        }
  878|   193k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|   193k|            return std::wcstod(str, str_end);
  880|   193k|        }
  881|   193k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|   193k|            return std::wcstold(str, str_end);
  883|   193k|        }
  884|   193k|#endif
  885|   193k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.06M|{
 2073|  1.06M|    const auto argcount = args.size();
 2074|  1.06M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 220k, False: 844k]
  |  Branch (2074:60): [True: 220k, False: 0]
  ------------------
 2075|   220k|        auto arg = args.get(0);
 2076|   220k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   220k|    static_cast<    \
  |  |  929|   220k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   220k|    }
 2078|       |
 2079|   844k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 844k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   844k|    SCN_UNLIKELY_ATTR
 2087|   844k|    {
 2088|   844k|        auto handler = format_handler<false, CharT>{
 2089|   844k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   844k|    static_cast<    \
  |  |  929|   844k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   844k|    static_cast<    \
  |  |  929|   844k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   844k|        return vscan_parse_format_string(format, handler);
 2091|   844k|    }
 2092|   844k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.99M|{
 1625|  1.99M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.57M, False: 424k]
  ------------------
 1626|  1.57M|        return false;
 1627|  1.57M|    }
 1628|   424k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 424k, False: 0]
  |  Branch (1628:39): [True: 424k, False: 0]
  ------------------
 1629|  1.99M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   331k|{
 1658|   331k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   331k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   331k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   331k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   331k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   331k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   331k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   331k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   331k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.1k, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.1k|    }                                                  \
  |  |  |  | 3671|   331k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   311k|    return it.position();
 1675|   331k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   727k|    {
 1903|   727k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  2.23M|    {
 1722|  2.23M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.23M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  2.23M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   727k|    {
 1853|   727k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   727k|{
 2038|   727k|    const auto beg = handler.get_ctx().begin();
 2039|   727k|    detail::parse_format_string<false>(format, handler);
 2040|   727k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63.9k, False: 663k]
  |  |  ------------------
  ------------------
 2041|  63.9k|        return unexpected(handler.error);
 2042|  63.9k|    }
 2043|   663k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   727k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  4.96M|    {
 2022|  4.96M|        return ctx.get();
 2023|  4.96M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  4.96M|    {
 1857|  4.96M|        return contiguous_ctx;
 1858|  4.96M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  1.39M|    {
 1907|  1.39M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.39M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.39M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   727k|{
 1681|   727k|    auto arg = ctx.arg(id);
 1682|   727k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 727k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   727k|    return arg;
 1686|   727k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  2.23M|    {
 1797|  2.23M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.23M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  2.23M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.23M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  2.23M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.23M, False: 0]
  |  |  ------------------
  ------------------
 1807|  2.23M|            visited_args_lower64 |= (1ull << id);
 1808|  2.23M|            return;
 1809|  2.23M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  2.23M|    {
 1782|  2.23M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.23M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  2.23M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.23M, False: 0]
  |  |  ------------------
  ------------------
 1788|  2.23M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  2.23M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  2.23M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   383k|    {
 1766|   383k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 383k, False: 0]
  |  |  ------------------
  ------------------
 1767|   383k|            error = err;
 1768|   383k|        }
 1769|   383k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   727k|    {
 1944|   727k|        return parse_ctx.next_arg_id();
 1945|   727k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   727k|    {
 1985|   727k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   727k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   727k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 727k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   727k|        auto specs = detail::format_specs{};
 1998|   727k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   727k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   727k|            arg.type()};
 2001|       |
 2002|   727k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   727k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 727k]
  |  Branch (2003:29): [True: 0, False: 727k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   727k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 727k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   727k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   727k|        on_visit_scan_arg(
 2014|   727k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   727k|                                           get_ctx().locale()},
 2016|   727k|            arg);
 2017|   727k|        return parse_ctx.begin();
 2018|   727k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   727k|    {
 1701|   727k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   727k|    {
 1956|   727k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 727k]
  |  Branch (1956:23): [True: 0, False: 727k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   727k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   727k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   727k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63.9k, False: 663k]
  |  |  ------------------
  ------------------
 1963|  63.9k|            on_error(r.error());
 1964|  63.9k|        }
 1965|   663k|        else {
 1966|   663k|            get_ctx().advance_to(*r);
 1967|   663k|        }
 1968|   727k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  2.23M|    {
 1729|  2.23M|        {
 1730|  2.23M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 2.23M]
  ------------------
 1731|  2.23M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 2.23M]
  ------------------
 1732|  2.23M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  2.23M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  2.23M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 2.23M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  2.23M|        }
 1739|       |
 1740|  2.23M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 2.23M, False: 0]
  ------------------
 1741|  2.23M|            return;
 1742|  2.23M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  2.23M|    {
 1777|  2.23M|        return error;
 1778|  2.23M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  6.69M|    {
 1773|  6.69M|        return static_cast<bool>(error);
 1774|  6.69M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|   844k|    {
 1903|   844k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|   844k|    {
 1830|   844k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   844k|{
 2038|   844k|    const auto beg = handler.get_ctx().begin();
 2039|   844k|    detail::parse_format_string<false>(format, handler);
 2040|   844k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   844k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63.9k, False: 780k]
  |  |  ------------------
  ------------------
 2041|  63.9k|        return unexpected(handler.error);
 2042|  63.9k|    }
 2043|   780k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   844k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  5.78M|    {
 2022|  5.78M|        return ctx.get();
 2023|  5.78M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  5.78M|    {
 1834|  5.78M|        return ctx;
 1835|  5.78M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  1.62M|    {
 1907|  1.62M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.62M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.62M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   844k|{
 1681|   844k|    auto arg = ctx.arg(id);
 1682|   844k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   844k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 844k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   844k|    return arg;
 1686|   844k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   844k|    {
 1944|   844k|        return parse_ctx.next_arg_id();
 1945|   844k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   844k|    {
 1985|   844k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   844k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   844k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 844k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   844k|        auto specs = detail::format_specs{};
 1998|   844k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   844k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   844k|            arg.type()};
 2001|       |
 2002|   844k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   844k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 844k]
  |  Branch (2003:29): [True: 0, False: 844k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   844k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   844k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 844k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   844k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   844k|        on_visit_scan_arg(
 2014|   844k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   844k|                                           get_ctx().locale()},
 2016|   844k|            arg);
 2017|   844k|        return parse_ctx.begin();
 2018|   844k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|   844k|    {
 1701|   844k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   844k|    {
 1956|   844k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 844k]
  |  Branch (1956:23): [True: 0, False: 844k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   844k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   844k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   844k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   844k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63.9k, False: 780k]
  |  |  ------------------
  ------------------
 1963|  63.9k|            on_error(r.error());
 1964|  63.9k|        }
 1965|   780k|        else {
 1966|   780k|            get_ctx().advance_to(*r);
 1967|   780k|        }
 1968|   844k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   931k|{
 2053|   931k|    const auto argcount = args.size();
 2054|   931k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 203k, False: 727k]
  |  Branch (2054:60): [True: 203k, False: 0]
  ------------------
 2055|   203k|        auto arg = args.get(0);
 2056|   203k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   203k|    static_cast<    \
  |  |  929|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   203k|    }
 2058|       |
 2059|   727k|    auto handler = format_handler<true, CharT>{
 2060|   727k|        ranges::subrange<const CharT*>{source.data(),
 2061|   727k|                                       source.data() + source.size()},
 2062|   727k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   727k|    static_cast<    \
  |  |  929|   727k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   727k|    static_cast<    \
  |  |  929|   727k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   727k|    return vscan_parse_format_string(format, handler);
 2064|   931k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   305k|{
 1638|   305k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 305k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   305k|    auto reader =
 1644|   305k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   305k|            ranges::subrange<const CharT*>{source.data(),
 1646|   305k|                                           source.data() + source.size()},
 1647|   305k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   305k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   305k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   305k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   305k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.1k, False: 286k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.1k|    }                                                  \
  |  |  |  | 3671|   305k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   286k|    return ranges::distance(source.data(), it);
 1650|   305k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   407k|{
 2053|   407k|    const auto argcount = args.size();
 2054|   407k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 76.6k, False: 330k]
  |  Branch (2054:60): [True: 76.6k, False: 0]
  ------------------
 2055|  76.6k|        auto arg = args.get(0);
 2056|  76.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  76.6k|    static_cast<    \
  |  |  929|  76.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  76.6k|    }
 2058|       |
 2059|   330k|    auto handler = format_handler<true, CharT>{
 2060|   330k|        ranges::subrange<const CharT*>{source.data(),
 2061|   330k|                                       source.data() + source.size()},
 2062|   330k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   330k|    return vscan_parse_format_string(format, handler);
 2064|   407k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   814k|{
 1625|   814k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 661k, False: 153k]
  ------------------
 1626|   661k|        return false;
 1627|   661k|    }
 1628|   153k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 153k, False: 0]
  |  Branch (1628:39): [True: 153k, False: 0]
  ------------------
 1629|   814k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   114k|{
 1638|   114k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   114k|    auto reader =
 1644|   114k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   114k|            ranges::subrange<const CharT*>{source.data(),
 1646|   114k|                                           source.data() + source.size()},
 1647|   114k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   114k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.3k, False: 76.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  38.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  38.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  38.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  38.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  38.3k|    }                                                  \
  |  |  |  | 3671|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  76.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  76.5k|    return ranges::distance(source.data(), it);
 1650|   114k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   330k|    {
 1903|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   330k|    {
 1853|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   330k|{
 2038|   330k|    const auto beg = handler.get_ctx().begin();
 2039|   330k|    detail::parse_format_string<false>(format, handler);
 2040|   330k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 127k, False: 202k]
  |  |  ------------------
  ------------------
 2041|   127k|        return unexpected(handler.error);
 2042|   127k|    }
 2043|   202k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   330k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.05M|    {
 2022|  2.05M|        return ctx.get();
 2023|  2.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.05M|    {
 1857|  2.05M|        return contiguous_ctx;
 1858|  2.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   533k|    {
 1907|   533k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 533k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   533k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   330k|{
 1681|   330k|    auto arg = ctx.arg(id);
 1682|   330k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   330k|    return arg;
 1686|   330k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   330k|    {
 1944|   330k|        return parse_ctx.next_arg_id();
 1945|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   330k|    {
 1985|   330k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   330k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   330k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 330k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   330k|        auto specs = detail::format_specs{};
 1998|   330k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   330k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   330k|            arg.type()};
 2001|       |
 2002|   330k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   330k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 330k]
  |  Branch (2003:29): [True: 0, False: 330k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   330k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   330k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   330k|        on_visit_scan_arg(
 2014|   330k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   330k|                                           get_ctx().locale()},
 2016|   330k|            arg);
 2017|   330k|        return parse_ctx.begin();
 2018|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   330k|    {
 1701|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   330k|    {
 1956|   330k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 330k]
  |  Branch (1956:23): [True: 0, False: 330k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   330k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   330k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 127k, False: 202k]
  |  |  ------------------
  ------------------
 1963|   127k|            on_error(r.error());
 1964|   127k|        }
 1965|   202k|        else {
 1966|   202k|            get_ctx().advance_to(*r);
 1967|   202k|        }
 1968|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   407k|{
 2073|   407k|    const auto argcount = args.size();
 2074|   407k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 76.5k, False: 330k]
  |  Branch (2074:60): [True: 76.5k, False: 0]
  ------------------
 2075|  76.5k|        auto arg = args.get(0);
 2076|  76.5k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  76.5k|    static_cast<    \
  |  |  929|  76.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  76.5k|    }
 2078|       |
 2079|   330k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 330k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   330k|    SCN_UNLIKELY_ATTR
 2087|   330k|    {
 2088|   330k|        auto handler = format_handler<false, CharT>{
 2089|   330k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   330k|        return vscan_parse_format_string(format, handler);
 2091|   330k|    }
 2092|   330k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   114k|{
 1658|   114k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   114k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   114k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   114k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   114k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.3k, False: 76.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  38.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  38.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  38.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  38.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  38.3k|    }                                                  \
  |  |  |  | 3671|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  76.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  76.4k|    return it.position();
 1675|   114k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   330k|    {
 1903|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   330k|    {
 1830|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   330k|{
 2038|   330k|    const auto beg = handler.get_ctx().begin();
 2039|   330k|    detail::parse_format_string<false>(format, handler);
 2040|   330k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 127k, False: 202k]
  |  |  ------------------
  ------------------
 2041|   127k|        return unexpected(handler.error);
 2042|   127k|    }
 2043|   202k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   330k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.05M|    {
 2022|  2.05M|        return ctx.get();
 2023|  2.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.05M|    {
 1834|  2.05M|        return ctx;
 1835|  2.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   533k|    {
 1907|   533k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 533k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   533k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   330k|{
 1681|   330k|    auto arg = ctx.arg(id);
 1682|   330k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   330k|    return arg;
 1686|   330k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   330k|    {
 1944|   330k|        return parse_ctx.next_arg_id();
 1945|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   330k|    {
 1985|   330k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   330k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   330k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 330k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   330k|        auto specs = detail::format_specs{};
 1998|   330k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   330k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   330k|            arg.type()};
 2001|       |
 2002|   330k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   330k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 330k]
  |  Branch (2003:29): [True: 0, False: 330k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   330k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   330k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   330k|        on_visit_scan_arg(
 2014|   330k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   330k|                                           get_ctx().locale()},
 2016|   330k|            arg);
 2017|   330k|        return parse_ctx.begin();
 2018|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   330k|    {
 1701|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   330k|    {
 1956|   330k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 330k]
  |  Branch (1956:23): [True: 0, False: 330k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   330k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   330k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 127k, False: 202k]
  |  |  ------------------
  ------------------
 1963|   127k|            on_error(r.error());
 1964|   127k|        }
 1965|   202k|        else {
 1966|   202k|            get_ctx().advance_to(*r);
 1967|   202k|        }
 1968|   330k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   101k|{
 2099|   101k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   101k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   110k|{
 2099|   110k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   110k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  38.3k|{
 2099|  38.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  38.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  38.2k|{
 2099|  38.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  38.2k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.13k|{
 1363|  2.13k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.13k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  2.13k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  2.13k|            std::u32string tmp;
 1368|  2.13k|            transcode_to_string_impl_to32(src, tmp);
 1369|  2.13k|            return transcode_to_string_impl_32to16<false>(
 1370|  2.13k|                std::u32string_view{tmp}, dest);
 1371|  2.13k|        }
 1372|  2.13k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  2.13k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.13k|        }
 1375|  2.13k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.13k|{
 1256|  2.13k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.13k|    auto it = src.begin();
 1259|   587k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 585k, False: 2.13k]
  ------------------
 1260|   585k|        auto res = get_next_code_point(
 1261|   585k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   585k|                                                                 src.end()));
 1263|   585k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.89k, False: 583k]
  |  |  ------------------
  ------------------
 1264|  1.89k|            dest.push_back(DestCharT{0xfffd});
 1265|  1.89k|        }
 1266|   583k|        else {
 1267|   583k|            dest.push_back(res.value);
 1268|   583k|        }
 1269|   585k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   585k|    }
 1271|  2.13k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   885k|{
 1169|   885k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   885k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   885k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   885k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   885k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   885k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.7k, False: 863k]
  |  |  ------------------
  ------------------
 1173|  22.7k|        return {get_start_for_next_code_point(input),
 1174|  22.7k|                detail::invalid_code_point};
 1175|  22.7k|    }
 1176|   863k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   863k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.50k, False: 859k]
  |  |  ------------------
  ------------------
 1177|  3.50k|        return {input.end(), detail::invalid_code_point};
 1178|  3.50k|    }
 1179|       |
 1180|   859k|    return {input.begin() + len,
 1181|   859k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   863k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  22.7k|{
 1155|  22.7k|    auto it = input.begin();
 1156|   160k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 154k, False: 6.17k]
  ------------------
 1157|   154k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 16.5k, False: 137k]
  ------------------
 1158|  16.5k|            break;
 1159|  16.5k|        }
 1160|   154k|    }
 1161|  22.7k|    return it;
 1162|  22.7k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  24.2M|    {
  809|  24.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  24.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  24.2M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  9.12M|    {
  823|  9.12M|        return a.m_code == b.m_code;
  824|  9.12M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  1.25M|    {
 1728|  1.25M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  1.25M|        std::strcpy(m_locbuf, loc);
 1730|  1.25M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  1.25M|    {
 1733|       |        // Restore locale to what it was before
 1734|  1.25M|        std::setlocale(m_category, m_locbuf);
 1735|  1.25M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  1.25M|    {
 1757|  1.25M|        std::setlocale(cat, "C");
 1758|  1.25M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  2.23M|    {
 2936|  2.23M|        return m_msg == nullptr;
 2937|  2.23M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  2.20M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  16.7M|{
  458|  16.7M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  16.7M|        static_cast<unsigned char>(ch))];
  460|  16.7M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  41.7k|{
  469|  41.7k|    return static_cast<unsigned char>(ch) <= 127;
  470|  41.7k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  3.83M|{
  539|  3.83M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.83M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  10.3M|{
  784|  10.3M|    return e != eof_error::good;
  785|  10.3M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  40.9k|{
  798|  40.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  40.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  40.9k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  40.9k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   193k|{
  845|   193k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   193k|    return parse_error::eof;
  847|   193k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.23M|{
  854|  3.23M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.23M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.23M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 71.5k, False: 3.16M]
  ------------------
  859|  71.5k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  71.5k|    }
  861|       |
  862|  3.16M|    return scan_error{code, msg};
  863|  3.23M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.23M|{
  868|  3.23M|    return [code, msg](parse_error err) {
  869|  3.23M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.23M|    };
  871|  3.23M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  4.18M|{
 1200|       |    // Pattern_White_Space property
 1201|  4.18M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 3.99M, False: 192k]
  |  Branch (1201:27): [True: 907k, False: 3.08M]
  ------------------
 1202|  4.18M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 52.5k, False: 3.22M]
  ------------------
 1203|  4.18M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 50.1k, False: 3.17M]
  ------------------
 1204|  4.18M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 3.82k, False: 3.17M]
  ------------------
 1205|  4.18M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 22.8k, False: 3.14M]
  ------------------
 1206|  4.18M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 642k, False: 2.50M]
  ------------------
 1207|  4.18M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 154, False: 2.50M]
  ------------------
 1208|  4.18M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  2.67M|{
 2220|  2.67M|    unsigned char running_diff{0};
 2221|  10.0M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 7.37M, False: 2.67M]
  ------------------
 2222|  7.37M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  7.37M|    }
 2224|  2.67M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 83.6k, False: 2.59M]
  |  Branch (2224:33): [True: 15.5k, False: 2.57M]
  ------------------
 2225|  2.67M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  18.5M|{
 3123|  18.5M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  18.5M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  2.22M|{
 3127|  2.22M|#if WCHAR_MIN < 0
 3128|  2.22M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 2.21M, False: 12.6k]
  |  Branch (3128:20): [True: 1.35M, False: 859k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  1.35M|        return char_to_int(static_cast<char>(ch));
 3133|  1.35M|    }
 3134|   871k|    return 255;
 3135|  2.22M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  1.84M|{
 6008|  1.84M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 1.84M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  1.84M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 1.84M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  1.84M|    return {};
 6023|  1.84M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.00M|    {
  304|  3.00M|        ranges::advance(x, n);
  305|  3.00M|        return x;
  306|  3.00M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.00M|    {
  268|  3.00M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.00M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.00M|    {
  151|  3.00M|        i += n;
  152|  3.00M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.54M|    {
  108|  3.54M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.54M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.54M|    {
   87|  3.54M|        return s - i;
   88|  3.54M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.38M|    {
  304|  1.38M|        ranges::advance(x, n);
  305|  1.38M|        return x;
  306|  1.38M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.38M|    {
  268|  1.38M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.38M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.38M|    {
  151|  1.38M|        i += n;
  152|  1.38M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   379k|    {
  108|   379k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   379k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   379k|    {
   87|   379k|        return s - i;
   88|   379k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.17M|{
  981|  1.17M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  1.17M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  1.17M|        return true;
  984|  1.17M|    }
  985|  1.17M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  1.17M|                           ranges::const_iterator_t<Range>,
  987|  1.17M|                           typename detail::basic_scan_buffer<
  988|  1.17M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.17M|        auto beg = r.begin();
  990|  1.17M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.17M, False: 0]
  ------------------
  991|  1.17M|            return false;
  992|  1.17M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  1.17M|    else {
 1006|  1.17M|        return false;
 1007|  1.17M|    }
 1008|  1.17M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  29.7M|    {
  763|  29.7M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  29.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  29.7M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  3.08M|{
 1857|  3.08M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.08M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.08M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.08M|        if (sz < count) {
 1862|  3.08M|            return unexpected(eof_error::eof);
 1863|  3.08M|        }
 1864|       |
 1865|  3.08M|        return ranges::next(range.begin(), count);
 1866|  3.08M|    }
 1867|  3.08M|    else {
 1868|  3.08M|        auto it = range.begin();
 1869|  3.08M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 1.89M, False: 1.18M]
  ------------------
 1870|  1.89M|            return ranges::next(it, count);
 1871|  1.89M|        }
 1872|       |
 1873|  4.71M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.56M, False: 1.15M]
  ------------------
 1874|  3.56M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 35.1k, False: 3.53M]
  ------------------
 1875|  35.1k|                return unexpected(eof_error::eof);
 1876|  35.1k|            }
 1877|  3.56M|        }
 1878|       |
 1879|  1.15M|        return it;
 1880|  1.18M|    }
 1881|  3.08M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  3.08M|{
 1095|  3.08M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.08M|        return r.size();
 1097|  3.08M|    }
 1098|  3.08M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.08M|                           ranges::const_iterator_t<Range>,
 1100|  3.08M|                           typename detail::basic_scan_buffer<
 1101|  3.08M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.08M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  3.08M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.08M|        }
 1105|  3.08M|        else {
 1106|  3.08M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 3.08M, False: 0]
  ------------------
 1107|  3.08M|                return static_cast<size_t>(
 1108|  3.08M|                    r.begin().parent()->chars_available() -
 1109|  3.08M|                    r.begin().position());
 1110|  3.08M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  3.08M|        }
 1113|  3.08M|    }
 1114|  3.08M|    else {
 1115|  3.08M|        return 0;
 1116|  3.08M|    }
 1117|  3.08M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.83M|    {
  754|  2.83M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  14.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.8M|              cvref<T> obj = *get<T>(fn);
  745|  14.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.8M|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.8M|              }
  748|  14.8M|              else {
  749|  14.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.8M|              }
  751|  14.8M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.8M|    {
  684|  14.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.8M|            return static_cast<T*>(s.m_cp);
  686|  14.8M|        }
  687|  14.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.8M|            return static_cast<T*>(s.m_p);
  689|  14.8M|        }
  690|  14.8M|        else {
  691|  14.8M|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.8M|        }
  693|  14.8M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  2.83M|        {
  662|  2.83M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  7.27M|    {
  763|  7.27M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  7.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  7.27M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.92M|    {
  754|  1.92M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  3.39M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.39M|              cvref<T> obj = *get<T>(fn);
  745|  3.39M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.39M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.39M|              }
  748|  3.39M|              else {
  749|  3.39M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.39M|              }
  751|  3.39M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.39M|    {
  684|  3.39M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.39M|            return static_cast<T*>(s.m_cp);
  686|  3.39M|        }
  687|  3.39M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.39M|            return static_cast<T*>(s.m_p);
  689|  3.39M|        }
  690|  3.39M|        else {
  691|  3.39M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.39M|        }
  693|  3.39M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  1.92M|        {
  662|  1.92M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   844k|    {
 6037|   844k|        const bool need_skipped_width =
 6038|   844k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 844k]
  |  Branch (6038:33): [True: 0, False: 844k]
  ------------------
 6039|   844k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   844k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 844k]
  ------------------
 6043|   844k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 844k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   844k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 844k, False: 0]
  |  Branch (6047:56): [True: 844k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   844k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 844k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.67M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   844k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   844k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   844k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   844k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.9k, False: 830k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  13.9k|    }                                                  \
  |  |  |  | 3671|   844k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   830k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.67M|                            make_eof_scan_error));
 6058|       |
 6059|  1.67M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 830k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   830k|            return result_type{it, 0};
 6067|  1.67M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   844k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.25M|{
 1976|  2.25M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.25M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.25M|{
 1957|  2.25M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.25M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.25M|    }
 1960|  2.25M|    else {
 1961|  2.25M|        auto first = range.begin();
 1962|  11.9M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 11.8M, False: 25.7k]
  ------------------
 1963|  11.8M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.23M, False: 9.65M]
  ------------------
 1964|  2.23M|                return first;
 1965|  2.23M|            }
 1966|  11.8M|        }
 1967|  25.7k|        return first;
 1968|  2.25M|    }
 1969|  2.25M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  2.00M|    {
  108|  2.00M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.00M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  2.00M|    {
   94|  2.00M|        iter_difference_t<I> counter{0};
   95|  19.2M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 17.2M, False: 2.00M]
  ------------------
   96|  17.2M|            ++i;
   97|  17.2M|            ++counter;
   98|  17.2M|        }
   99|  2.00M|        return counter;
  100|  2.00M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.23M|    return [code, msg](parse_error err) {
  869|  3.23M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.23M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   437k|    {
 1780|   437k|        auto stdloc = loc.get<std::locale>();
 1781|   437k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   437k|        grouping = numpunct.grouping();
 1783|   437k|        thousands_sep =
 1784|   437k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 437k]
  ------------------
 1785|   437k|        decimal_point = numpunct.decimal_point();
 1786|   437k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   437k|{
 1717|   437k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 437k, False: 0]
  ------------------
 1718|   437k|        return std::use_facet<Facet>(stdloc);
 1719|   437k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   437k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  3.31M|{
 1846|  3.31M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.5k, False: 3.29M]
  |  |  ------------------
  ------------------
 1847|  18.5k|        return unexpected(e);
 1848|  18.5k|    }
 1849|       |
 1850|  3.29M|    return ranges::next(range.begin());
 1851|  3.31M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  4.81M|{
  950|  4.81M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.0k, False: 4.77M]
  |  |  ------------------
  ------------------
  951|  37.0k|        return eof_error::eof;
  952|  37.0k|    }
  953|  4.77M|    return eof_error::good;
  954|  4.81M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  6.75M|{
  944|  6.75M|    return is_range_eof(r.begin(), r.end());
  945|  6.75M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  6.75M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.75M|    {
  937|  6.75M|        return begin == end;
  938|  6.75M|    }
  939|  6.75M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.29M|    {
  296|  3.29M|        ++x;
  297|  3.29M|        return x;
  298|  3.29M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  1.27M|{
 3141|  1.27M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.27M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 968k, False: 302k]
  ------------------
 3143|   968k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 968k, False: 309]
  ------------------
 3144|   968k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   968k|        }
 3146|    309|        return unexpected(eof_error::eof);
 3147|   968k|    }
 3148|       |
 3149|   302k|    auto& it = *r;
 3150|   302k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 129k, False: 173k]
  ------------------
 3151|   129k|        return std::pair{it, sign_type::minus_sign};
 3152|   129k|    }
 3153|   173k|    return std::pair{it, sign_type::plus_sign};
 3154|   302k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.21M|{
 2272|  2.21M|    auto it = read_code_unit(range);
 2273|  2.21M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.7k, False: 2.20M]
  |  |  ------------------
  ------------------
 2274|  10.7k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  10.7k|    }
 2276|       |
 2277|  4.16M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.16M, False: 1.78M]
  ------------------
 2278|  4.16M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 416k, False: 3.75M]
  ------------------
 2279|   416k|            return *it;
 2280|   416k|        }
 2281|  4.16M|    }
 2282|       |
 2283|  1.78M|    return unexpected(parse_error::error);
 2284|  2.20M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  3.08M|{
 2231|  3.08M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.08M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.08M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.08M|        if (range.size() < str.size()) {
 2236|  3.08M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.08M|        }
 2238|  3.08M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.08M|            return unexpected(parse_error::error);
 2240|  3.08M|        }
 2241|  3.08M|        return ranges::next(range.begin(), str.size());
 2242|  3.08M|    }
 2243|  3.08M|    else {
 2244|  3.08M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.08M|            if (ch < 'A' || ch > 'Z') {
 2246|  3.08M|                return ch;
 2247|  3.08M|            }
 2248|  3.08M|            return static_cast<char_type>(ch +
 2249|  3.08M|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.08M|        };
 2251|       |
 2252|  3.08M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.08M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.1k, False: 3.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  35.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  35.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  35.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  35.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  35.1k|    }                                                  \
  |  |  |  | 3671|  3.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.05M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.05M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.05M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.95M, False: 101k]
  |  |  ------------------
  ------------------
 2257|  3.05M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.05M|                    return ascii_tolower(a) ==
 2259|  3.05M|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.05M|                }))) {
 2261|  2.95M|            return unexpected(parse_error::error);
 2262|  2.95M|        }
 2263|       |
 2264|   101k|        return it;
 2265|  3.05M|    }
 2266|  3.08M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  3.52M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.52M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 3.17M, False: 343k]
  |  Branch (2245:29): [True: 288k, False: 54.6k]
  ------------------
 2246|  3.46M|                return ch;
 2247|  3.46M|            }
 2248|  54.6k|            return static_cast<char_type>(ch +
 2249|  54.6k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.52M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  1.09M|{
 2146|  1.09M|    auto it = read_code_unit(range);
 2147|  1.09M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.80k, False: 1.09M]
  |  |  ------------------
  ------------------
 2148|  7.80k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  7.80k|    }
 2150|       |
 2151|  1.09M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 889k, False: 200k]
  |  |  ------------------
  ------------------
 2152|  1.09M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   889k|        return unexpected(parse_error::error);
 2154|   889k|    }
 2155|       |
 2156|   200k|    return *it;
 2157|  1.09M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  2.25M|{
 1996|  2.25M|    auto it = read_while_code_unit(range, pred);
 1997|  2.25M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 916k, False: 1.34M]
  ------------------
 1998|   916k|        return unexpected(parse_error::error);
 1999|   916k|    }
 2000|  1.34M|    return it;
 2001|  2.25M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.03M|    {
 1621|  1.03M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.03M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.03M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.03M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.03M|            m_storage.reset();
 1627|  1.03M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.03M|        }
 1629|  1.03M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.03M|                                          std::basic_string<CharT>>) {
 1631|  1.03M|            m_storage.emplace(SCN_FWD(range));
 1632|  1.03M|            m_view = string_view_type{*m_storage};
 1633|  1.03M|        }
 1634|  1.03M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.03M|                                          typename detail::basic_scan_buffer<
 1636|  1.03M|                                              value_t>::forward_iterator> &&
 1637|  1.03M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.03M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.03M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.03M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 148k, False: 891k]
  |  |  ------------------
  ------------------
 1641|  1.03M|                             detail::to_address(end_seg.end()))) {
 1642|   148k|                auto& str = m_storage.emplace();
 1643|   148k|                str.reserve(range.end().position() - range.begin().position());
 1644|   148k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   148k|                m_view = string_view_type{str};
 1646|   148k|                return;
 1647|   148k|            }
 1648|       |
 1649|   891k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   891k|                                                            end_seg.data());
 1651|   891k|            m_storage.reset();
 1652|   891k|        }
 1653|  1.03M|        else {
 1654|  1.03M|            auto& str = m_storage.emplace();
 1655|  1.03M|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.03M|                str.reserve(range.size());
 1657|  1.03M|            }
 1658|  1.03M|            if constexpr (ranges::common_range<Range>) {
 1659|  1.03M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.03M|                          std::back_inserter(str));
 1661|  1.03M|            }
 1662|  1.03M|            else {
 1663|  1.03M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.03M|                     ++it) {
 1665|  1.03M|                    str.push_back(*it);
 1666|  1.03M|                }
 1667|  1.03M|            }
 1668|  1.03M|            m_view = string_view_type{str};
 1669|  1.03M|        }
 1670|  1.03M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  7.14M|    {
 1582|  7.14M|        return m_view;
 1583|  7.14M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.34M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   768k|    {
 6079|   768k|        const bool need_skipped_width =
 6080|   768k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 768k]
  |  Branch (6080:33): [True: 0, False: 768k]
  ------------------
 6081|   768k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   768k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 768k]
  ------------------
 6084|   768k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 768k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   768k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 768k, False: 0]
  ------------------
 6093|   768k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 768k]
  ------------------
 6094|   768k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   768k|        return result_type{rng.begin(), 0};
 6118|   768k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  1.52M|{
 1846|  1.52M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.74k, False: 1.51M]
  |  |  ------------------
  ------------------
 1847|  4.74k|        return unexpected(e);
 1848|  4.74k|    }
 1849|       |
 1850|  1.51M|    return ranges::next(range.begin());
 1851|  1.52M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  2.85M|{
  950|  2.85M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 2.83M]
  |  |  ------------------
  ------------------
  951|  20.7k|        return eof_error::eof;
  952|  20.7k|    }
  953|  2.83M|    return eof_error::good;
  954|  2.85M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  2.85M|{
  944|  2.85M|    return is_range_eof(r.begin(), r.end());
  945|  2.85M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  2.85M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.85M|    {
  937|  2.85M|        return begin == end;
  938|  2.85M|    }
  939|  2.85M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.51M|    {
  296|  1.51M|        ++x;
  297|  1.51M|        return x;
  298|  1.51M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  1.04M|{
 3141|  1.04M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.04M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 790k, False: 255k]
  ------------------
 3143|   790k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 790k, False: 102]
  ------------------
 3144|   790k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   790k|        }
 3146|    102|        return unexpected(eof_error::eof);
 3147|   790k|    }
 3148|       |
 3149|   255k|    auto& it = *r;
 3150|   255k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 120k, False: 135k]
  ------------------
 3151|   120k|        return std::pair{it, sign_type::minus_sign};
 3152|   120k|    }
 3153|   135k|    return std::pair{it, sign_type::plus_sign};
 3154|   255k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  1.21M|{
 2272|  1.21M|    auto it = read_code_unit(range);
 2273|  1.21M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 1.21M]
  |  |  ------------------
  ------------------
 2274|  2.00k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  2.00k|    }
 2276|       |
 2277|  2.26M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.26M, False: 927k]
  ------------------
 2278|  2.26M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 283k, False: 1.98M]
  ------------------
 2279|   283k|            return *it;
 2280|   283k|        }
 2281|  2.26M|    }
 2282|       |
 2283|   927k|    return unexpected(parse_error::error);
 2284|  1.21M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  2.70M|{
 2231|  2.70M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  2.70M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  2.70M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  2.70M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 35.3k, False: 2.67M]
  ------------------
 2236|  35.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  35.3k|        }
 2238|  2.67M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 2.57M, False: 99.2k]
  ------------------
 2239|  2.57M|            return unexpected(parse_error::error);
 2240|  2.57M|        }
 2241|  99.2k|        return ranges::next(range.begin(), str.size());
 2242|  2.67M|    }
 2243|  2.70M|    else {
 2244|  2.70M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.70M|            if (ch < 'A' || ch > 'Z') {
 2246|  2.70M|                return ch;
 2247|  2.70M|            }
 2248|  2.70M|            return static_cast<char_type>(ch +
 2249|  2.70M|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.70M|        };
 2251|       |
 2252|  2.70M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  2.70M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.70M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.70M|        if (SCN_UNLIKELY(!std::equal(
 2257|  2.70M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.70M|                    return ascii_tolower(a) ==
 2259|  2.70M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.70M|                }))) {
 2261|  2.70M|            return unexpected(parse_error::error);
 2262|  2.70M|        }
 2263|       |
 2264|  2.70M|        return it;
 2265|  2.70M|    }
 2266|  2.70M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   309k|{
 2146|   309k|    auto it = read_code_unit(range);
 2147|   309k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 307k]
  |  |  ------------------
  ------------------
 2148|  2.73k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  2.73k|    }
 2150|       |
 2151|   307k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 255k, False: 51.9k]
  |  |  ------------------
  ------------------
 2152|   307k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   255k|        return unexpected(parse_error::error);
 2154|   255k|    }
 2155|       |
 2156|  51.9k|    return *it;
 2157|   307k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  3.90M|    {
 1503|  3.90M|        return sv;
 1504|  3.90M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   572k|{
 1976|   572k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   572k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   572k|{
 1957|   572k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   572k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   572k|    }
 1960|   572k|    else {
 1961|   572k|        auto first = range.begin();
 1962|   572k|        for (; first != range.end(); ++first) {
 1963|   572k|            if (pred(*first)) {
 1964|   572k|                return first;
 1965|   572k|            }
 1966|   572k|        }
 1967|   572k|        return first;
 1968|   572k|    }
 1969|   572k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.02M|{
 2951|  1.02M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.02M, False: 0]
  ------------------
 2952|  1.02M|        auto it = read_while_classic_space(range);
 2953|  1.02M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.02M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 1.01M]
  |  |  ------------------
  ------------------
 2955|  11.9k|            return unexpected(e);
 2956|  11.9k|        }
 2957|       |
 2958|  1.01M|        return it;
 2959|  1.02M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.02M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.02M|{
 2117|  1.02M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.02M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.02M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.02M|        auto buf = make_contiguous_buffer(range);
 2121|  1.02M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.02M|        return ranges::next(range.begin(),
 2123|  1.02M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.02M|    }
 2125|  1.02M|    else {
 2126|  1.02M|        auto it = range.begin();
 2127|       |
 2128|  1.02M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  1.02M|            auto seg = get_contiguous_beginning(range);
 2130|  1.02M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.02M|                seg_it != seg.end()) {
 2132|  1.02M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.02M|            }
 2134|  1.02M|            ranges::advance(it, seg.size());
 2135|  1.02M|        }
 2136|       |
 2137|  1.02M|        return read_while_code_point(
 2138|  1.02M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.02M|    }
 2140|  1.02M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.02M|{
 1683|  1.02M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.02M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.02M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.02M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.02M|    }
 1688|  1.02M|    else {
 1689|  1.02M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.02M|    }
 1691|  1.02M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  1.02M|    {
 1490|  1.02M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.12M|    {
  304|  3.12M|        ranges::advance(x, n);
  305|  3.12M|        return x;
  306|  3.12M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  4.16M|    {
  268|  4.16M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.16M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  4.16M|    {
  181|  19.2M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 15.0M, False: 4.16M]
  ------------------
  182|  15.0M|            ++i;
  183|  15.0M|        }
  184|  4.16M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   273k|    {
 6193|   273k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   273k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   273k|            auto rd = make_reader<T, char_type>();
 6198|   273k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   273k|                return unexpected(e);
 6200|   273k|            }
 6201|       |
 6202|   273k|            return impl(rd, range, value);
 6203|   273k|        }
 6204|   273k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   273k|            auto rd = make_reader<T, char_type>();
 6206|   273k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 273k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   273k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 273k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   273k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   273k|                return impl(rd, range, value);
 6213|   273k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   273k|        else {
 6221|   273k|            SCN_EXPECT(false);
 6222|   273k|            SCN_UNREACHABLE;
 6223|   273k|        }
 6224|   273k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.57M|    {
 3040|  1.57M|        reader_error_handler eh{};
 3041|  1.57M|        get_derived().check_specs_impl(specs, eh);
 3042|  1.57M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.57M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  1.57M|        return {};
 3046|  1.57M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  1.57M|    {
 3051|  1.57M|        return static_cast<Derived&>(*this);
 3052|  1.57M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  1.57M|    {
 4145|  1.57M|        detail::check_float_type_specs(specs, eh);
 4146|  1.57M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   273k|    {
 6124|   273k|        const bool need_skipped_width =
 6125|   273k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 273k]
  |  Branch (6125:33): [True: 0, False: 273k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   273k|        auto it = rng.begin();
 6129|   273k|        std::ptrdiff_t prefix_width = 0;
 6130|   273k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 273k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   273k|        else {
 6138|   273k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   273k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.19k, False: 268k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.19k|    }                                                  \
  |  |  |  | 3671|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   268k|            std::tie(it, prefix_width) = prefix_result;
 6140|   268k|        }
 6141|   268k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   268k|        std::ptrdiff_t value_width = 0;
 6145|   268k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 268k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   268k|        else {
 6161|   268k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.1k, False: 251k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.1k|    }                                                  \
  |  | 3671|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   251k|                                             specs, value, loc));
 6163|       |
 6164|   251k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 251k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   251k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   251k|        std::ptrdiff_t postfix_width = 0;
 6173|   251k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 248k, False: 3.38k]
  ------------------
 6174|   248k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 248k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   248k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   248k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   248k|                                 value_width));
 6178|   248k|            std::tie(it, postfix_width) = postfix_result;
 6179|   248k|        }
 6180|       |
 6181|   251k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   251k|                                                 value_width, postfix_width);
 6183|   251k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 251k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   251k|        return it;
 6188|   251k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  3.63M|    {
 3035|  3.63M|        return true;
 3036|  3.63M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  1.54M|    {
 4217|  1.54M|        unsigned options{};
 4218|  1.54M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 437k, False: 1.10M]
  ------------------
 4219|   437k|            options |= float_reader_base::allow_thsep;
 4220|   437k|        }
 4221|       |
 4222|  1.54M|        SCN_GCC_COMPAT_PUSH
 4223|  1.54M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  1.54M|        switch (specs.type) {
 4226|   223k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 223k, False: 1.32M]
  ------------------
 4227|   223k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  39.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 39.3k, False: 1.50M]
  ------------------
 4230|  39.3k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   474k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 474k, False: 1.07M]
  ------------------
 4233|   474k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   372k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 372k, False: 1.17M]
  ------------------
 4236|   372k|                return options | float_reader_base::allow_scientific |
 4237|   372k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   437k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 437k, False: 1.10M]
  ------------------
 4240|   437k|                return options | float_reader_base::allow_scientific |
 4241|   437k|                       float_reader_base::allow_fixed |
 4242|   437k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 1.54M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  1.54M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  1.54M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  1.54M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  1.54M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  2.17M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  4.34M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   673k|    {
 3691|   673k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   673k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   673k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   673k|        const std::ptrdiff_t sign_len =
 3694|   673k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 164k, False: 509k]
  ------------------
 3695|       |
 3696|   673k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   673k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   673k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   673k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.9k, False: 658k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.9k|    }                                                  \
  |  |  |  | 3671|   673k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   658k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   658k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   673k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  2.08M|    {
 4057|  2.08M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 2.08M, False: 0]
  ------------------
 4058|  2.08M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 2.08M, False: 0]
  ------------------
 4059|  2.08M|            return;
 4060|  2.08M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  2.37M|    {
 1587|  2.37M|        return m_storage.has_value();
 1588|  2.37M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  1.39M|    {
 1592|  1.39M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.39M|        return *m_storage;
 1594|  1.39M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   268k|    {
 4170|   268k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   268k|#if !SCN_DISABLE_LOCALE
 4173|   268k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 76.0k, False: 192k]
  ------------------
 4174|  76.0k|            return read_impl<Range>(
 4175|  76.0k|                range, rd,
 4176|  76.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  76.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  76.0k|                },
 4179|  76.0k|                value, loc);
 4180|  76.0k|        }
 4181|   192k|#endif
 4182|       |
 4183|   192k|        return read_impl<Range>(
 4184|   192k|            range, rd,
 4185|   192k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   192k|                return r.read_source(SCN_FWD(args)...);
 4187|   192k|            },
 4188|   192k|            value);
 4189|   268k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   374k|    {
 4206|   374k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   374k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.0k, False: 355k]
  |  |  ------------------
  ------------------
 4208|  19.0k|            return unexpected(r.error());
 4209|  19.0k|        }
 4210|       |
 4211|   355k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   355k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   355k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   355k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.09k, False: 352k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.09k|    }                                                  \
  |  |  |  | 3671|   355k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   352k|        return ranges::next(range.begin(), n);
 4213|   355k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.15M|    {
  763|  1.15M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.15M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  76.0k|    {
  754|  76.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  76.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.0k|              cvref<T> obj = *get<T>(fn);
  745|  76.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  76.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.0k|              }
  748|  76.0k|              else {
  749|  76.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.0k|              }
  751|  76.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  76.0k|    {
  684|  76.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  76.0k|            return static_cast<T*>(s.m_cp);
  686|  76.0k|        }
  687|  76.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  76.0k|            return static_cast<T*>(s.m_p);
  689|  76.0k|        }
  690|  76.0k|        else {
  691|  76.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  76.0k|        }
  693|  76.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  76.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  76.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  76.0k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   237k|    {
 3679|   237k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   237k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   237k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   237k|        return read_source_impl(range);
 3685|   237k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  1.15M|    {
 3705|  1.15M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.15M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.15M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.15M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.15M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.15M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.15M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.15M|        auto it = sign_result.first;
 3708|  1.15M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.15M|        auto digits_begin = it;
 3711|  1.15M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.15M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.15M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.15M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  1.15M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  1.15M|                SCN_TRY_ASSIGN(
 3717|  1.15M|                    it,
 3718|  1.15M|                    do_read_source_impl(
 3719|  1.15M|                        r,
 3720|  1.15M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  1.15M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  1.15M|            }
 3723|  1.15M|            else {
 3724|  1.15M|                auto cb = [&](const auto& rr)
 3725|  1.15M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.15M|                    auto res = read_all(rr);
 3727|  1.15M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.15M|                        return unexpected_scan_error(
 3729|  1.15M|                            scan_error::invalid_scanned_value,
 3730|  1.15M|                            "Invalid float value");
 3731|  1.15M|                    }
 3732|  1.15M|                    return res;
 3733|  1.15M|                };
 3734|  1.15M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  1.15M|            }
 3736|  1.15M|        }
 3737|  1.15M|        else {
 3738|  1.15M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  1.15M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.15M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 59.6k, False: 1.09M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  59.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  59.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  59.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  59.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  59.6k|    }                                                  \
  |  | 3671|  1.15M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  1.09M|                it,
 3740|  1.09M|                do_read_source_impl(
 3741|  1.09M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.09M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.09M|        }
 3744|       |
 3745|  1.09M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.09M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.08M, False: 7.31k]
  |  Branch (3747:48): [True: 1.08M, False: 5.86k]
  ------------------
 3748|  1.09M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.03M, False: 45.7k]
  ------------------
 3749|  1.09M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.03M, False: 1.35k]
  ------------------
 3750|  1.03M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.03M|        }
 3752|       |
 3753|  1.09M|        handle_separators();
 3754|       |
 3755|  1.09M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.09M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.09M|        return it;
 3768|  1.09M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  1.15M|    {
 4000|  1.15M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.15M|        const bool allowed_nonhex =
 4002|  1.15M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.15M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.15M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.14M, False: 13.1k]
  |  Branch (4005:45): [True: 0, False: 1.14M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.15M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 13.1k, False: 1.14M]
  ------------------
 4011|  13.1k|            return *r;
 4012|  13.1k|        }
 4013|       |
 4014|  1.14M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.09M, False: 47.1k]
  |  Branch (4014:45): [True: 1.11k, False: 1.09M]
  ------------------
 4015|  1.11k|            return unexpected(r.error());
 4016|  1.11k|        }
 4017|  1.14M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 47.1k, False: 1.09M]
  ------------------
 4018|  47.1k|            return *r;
 4019|  47.1k|        }
 4020|       |
 4021|  1.09M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 774k, False: 320k]
  |  Branch (4021:28): [True: 242k, False: 532k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   242k|            auto it = range.begin();
 4025|       |
 4026|   242k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 10.4k, False: 231k]
  ------------------
 4027|  10.4k|                m_kind = float_kind::hex_with_prefix;
 4028|  10.4k|                it = *r;
 4029|  10.4k|            }
 4030|   231k|            else {
 4031|   231k|                m_kind = float_kind::hex_without_prefix;
 4032|   231k|            }
 4033|       |
 4034|   242k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   242k|        }
 4036|   853k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 320k, False: 532k]
  |  Branch (4036:29): [True: 320k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   320k|            m_kind = float_kind::generic;
 4040|   320k|            return read_regular_float(range);
 4041|   320k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   532k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 508k]
  |  |  ------------------
  ------------------
 4047|  23.4k|            m_kind = float_kind::hex_with_prefix;
 4048|  23.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  23.4k|        }
 4050|       |
 4051|   508k|        m_kind = float_kind::generic;
 4052|   508k|        return read_regular(range);
 4053|   532k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  1.15M|    {
 3811|  1.15M|        auto it = range.begin();
 3812|  1.15M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.14M, False: 13.1k]
  ------------------
 3813|  1.14M|            return unexpected(r.error());
 3814|  1.14M|        }
 3815|  13.1k|        else {
 3816|  13.1k|            it = *r;
 3817|  13.1k|        }
 3818|       |
 3819|  13.1k|        if (auto r = read_matching_string_classic_nocase(
 3820|  13.1k|                ranges::subrange{it, range.end()}, "inity");
 3821|  13.1k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 7.31k, False: 5.86k]
  ------------------
 3822|  7.31k|            m_kind = float_kind::inf_short;
 3823|  7.31k|            return it;
 3824|  7.31k|        }
 3825|  5.86k|        else {
 3826|  5.86k|            m_kind = float_kind::inf_long;
 3827|  5.86k|            return *r;
 3828|  5.86k|        }
 3829|  13.1k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  1.14M|    {
 3834|  1.14M|        auto it = range.begin();
 3835|  1.14M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.09M, False: 48.2k]
  ------------------
 3836|  1.09M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.09M|                scan_error::invalid_scanned_value,
 3838|  1.09M|                "Invalid floating-point NaN value"));
 3839|  1.09M|        }
 3840|  48.2k|        else {
 3841|  48.2k|            it = *r;
 3842|  48.2k|        }
 3843|       |
 3844|  48.2k|        if (auto r =
 3845|  48.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  48.2k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 45.7k, False: 2.46k]
  ------------------
 3847|  45.7k|            m_kind = float_kind::nan_simple;
 3848|  45.7k|            return it;
 3849|  45.7k|        }
 3850|  2.46k|        else {
 3851|  2.46k|            it = *r;
 3852|  2.46k|        }
 3853|       |
 3854|  2.46k|        auto payload_beg_it = it;
 3855|  2.46k|        it = read_while_code_unit(
 3856|  2.46k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.46k|                return is_ascii_char(ch) &&
 3858|  2.46k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.46k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.46k|            });
 3861|  2.46k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.46k|        m_kind = float_kind::nan_with_payload;
 3864|  2.46k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.35k, False: 1.11k]
  ------------------
 3865|  2.46k|                                             ')')) {
 3866|  1.35k|            return *r;
 3867|  1.35k|        }
 3868|  1.11k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.11k|                                     "Invalid floating-point NaN payload");
 3870|  2.46k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  2.46k|    {
  754|  2.46k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  20.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.8k|              cvref<T> obj = *get<T>(fn);
  745|  20.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.8k|              }
  748|  20.8k|              else {
  749|  20.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.8k|              }
  751|  20.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  20.8k|    {
  684|  20.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.8k|            return static_cast<T*>(s.m_cp);
  686|  20.8k|        }
  687|  20.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.8k|            return static_cast<T*>(s.m_p);
  689|  20.8k|        }
  690|  20.8k|        else {
  691|  20.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.8k|        }
  693|  20.8k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  20.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  20.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 20.7k, False: 89]
  ------------------
 3858|  20.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.3k, False: 1.41k]
  |  Branch (3858:39): [True: 11.5k, False: 7.78k]
  |  Branch (3858:54): [True: 2.53k, False: 6.65k]
  |  Branch (3858:67): [True: 2.45k, False: 83]
  ------------------
 3859|  20.7k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 1.41k]
  |  Branch (3859:39): [True: 2.52k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.49k]
  ------------------
 3860|  20.8k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  2.46k|        {
  662|  2.46k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   774k|    {
 3804|   774k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   774k|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   265k|    {
 3904|   265k|        auto it = range.begin();
 3905|       |
 3906|   265k|        std::ptrdiff_t digits_count = 0;
 3907|   265k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   265k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.35k, False: 258k]
  |  |  ------------------
  ------------------
 3909|  7.35k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  7.35k|                scan_error::invalid_scanned_value,
 3911|  7.35k|                "Invalid hexadecimal floating-point value"));
 3912|  7.35k|        }
 3913|   258k|        else {
 3914|   258k|            digits_count += ranges::distance(it, *r);
 3915|   258k|            it = *r;
 3916|   258k|        }
 3917|       |
 3918|   258k|        m_integral_part_length = digits_count;
 3919|   258k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 41.3k, False: 217k]
  ------------------
 3920|   258k|                                             m_locale_options.decimal_point)) {
 3921|  41.3k|            it = *r;
 3922|  41.3k|        }
 3923|       |
 3924|   258k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 37.4k, False: 220k]
  ------------------
 3925|   258k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  37.4k|            digits_count += ranges::distance(it, *r);
 3927|  37.4k|            it = *r;
 3928|  37.4k|        }
 3929|       |
 3930|   258k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 258k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   258k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   258k|        return it;
 3938|   258k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   524k|    {
 3789|   524k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  |  Branch (859:45): [True: 0, False: 524k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   524k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   524k|        return read_while1_code_unit(
 3798|   524k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   524k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|   524k|    {
  754|   524k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.67M|              cvref<T> obj = *get<T>(fn);
  745|  2.67M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.67M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.67M|              }
  748|  2.67M|              else {
  749|  2.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.67M|              }
  751|  2.67M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.67M|    {
  684|  2.67M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.67M|            return static_cast<T*>(s.m_cp);
  686|  2.67M|        }
  687|  2.67M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.67M|            return static_cast<T*>(s.m_p);
  689|  2.67M|        }
  690|  2.67M|        else {
  691|  2.67M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.67M|        }
  693|  2.67M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  2.67M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|   524k|        {
  662|   524k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   945k|    {
 3876|   945k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 113k, False: 831k]
  ------------------
 3877|   113k|            auto beg_exp_it = range.begin();
 3878|   113k|            auto it = *r;
 3879|       |
 3880|   113k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 113k, False: 309]
  ------------------
 3881|   113k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   113k|                it = r_sign->first;
 3883|   113k|            }
 3884|       |
 3885|   113k|            if (auto r_exp = read_while1_code_unit(
 3886|   113k|                    ranges::subrange{it, range.end()},
 3887|   113k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   113k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.79k, False: 112k]
  |  |  ------------------
  ------------------
 3889|  1.79k|                it = beg_exp_it;
 3890|  1.79k|            }
 3891|   112k|            else {
 3892|   112k|                it = *r_exp;
 3893|   112k|            }
 3894|       |
 3895|   113k|            return it;
 3896|   113k|        }
 3897|   831k|        return range.begin();
 3898|   945k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   113k|    {
  754|   113k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   362k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   362k|              cvref<T> obj = *get<T>(fn);
  745|   362k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   362k|                  obj(static_cast<decltype(args)>(args)...);
  747|   362k|              }
  748|   362k|              else {
  749|   362k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   362k|              }
  751|   362k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   362k|    {
  684|   362k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   362k|            return static_cast<T*>(s.m_cp);
  686|   362k|        }
  687|   362k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   362k|            return static_cast<T*>(s.m_p);
  689|   362k|        }
  690|   362k|        else {
  691|   362k|            return reinterpret_cast<T*>(s.m_fp);
  692|   362k|        }
  693|   362k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   362k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   113k|        {
  662|   113k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   829k|    {
 3944|   829k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   829k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 716k, False: 113k]
  |  Branch (3945:50): [True: 19.4k, False: 696k]
  ------------------
 3946|       |
 3947|   829k|        auto it = ranges::begin(range);
 3948|   829k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   829k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   829k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.4k, False: 789k]
  |  |  ------------------
  ------------------
 3952|  40.4k|            return r.transform_error(
 3953|  40.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  40.4k|                                              "Invalid floating-point value"));
 3955|  40.4k|        }
 3956|   789k|        else {
 3957|   789k|            digits_count += ranges::distance(it, *r);
 3958|   789k|            it = *r;
 3959|   789k|        }
 3960|       |
 3961|   789k|        m_integral_part_length = digits_count;
 3962|   789k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 155k, False: 633k]
  ------------------
 3963|   789k|                                             m_locale_options.decimal_point)) {
 3964|   155k|            it = *r;
 3965|   155k|        }
 3966|       |
 3967|   789k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 143k, False: 645k]
  ------------------
 3968|   789k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   143k|            digits_count += ranges::distance(it, *r);
 3970|   143k|            it = *r;
 3971|   143k|        }
 3972|       |
 3973|   789k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 789k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   789k|        auto beg_exp_it = it;
 3979|   789k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 686k, False: 102k]
  ------------------
 3980|   686k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   686k|        }
 3982|   789k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 18.8k, False: 770k]
  |  Branch (3982:29): [True: 10.7k, False: 8.07k]
  ------------------
 3983|  10.7k|            return unexpected_scan_error(
 3984|  10.7k|                scan_error::invalid_scanned_value,
 3985|  10.7k|                "No exponent given to scientific float");
 3986|  10.7k|        }
 3987|       |
 3988|   778k|        m_kind =
 3989|   778k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 666k, False: 111k]
  ------------------
 3990|       |
 3991|   778k|        return it;
 3992|   789k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  1.61M|    {
 3774|  1.61M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61M]
  |  |  |  Branch (859:45): [True: 0, False: 1.61M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.61M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.61M|        return read_while1_code_unit(
 3783|  1.61M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.61M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.61M|    {
  754|  1.61M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  8.83M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.83M|              cvref<T> obj = *get<T>(fn);
  745|  8.83M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.83M|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.83M|              }
  748|  8.83M|              else {
  749|  8.83M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.83M|              }
  751|  8.83M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.83M|    {
  684|  8.83M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.83M|            return static_cast<T*>(s.m_cp);
  686|  8.83M|        }
  687|  8.83M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.83M|            return static_cast<T*>(s.m_p);
  689|  8.83M|        }
  690|  8.83M|        else {
  691|  8.83M|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.83M|        }
  693|  8.83M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  8.83M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.61M|        {
  662|  1.61M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  1.03M|    {
 1577|  1.03M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.03M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  76.0k|        {
  662|  76.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   192k|    {
  754|   192k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   192k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   192k|              cvref<T> obj = *get<T>(fn);
  745|   192k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   192k|                  obj(static_cast<decltype(args)>(args)...);
  747|   192k|              }
  748|   192k|              else {
  749|   192k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   192k|              }
  751|   192k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   192k|    {
  684|   192k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   192k|            return static_cast<T*>(s.m_cp);
  686|   192k|        }
  687|   192k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   192k|            return static_cast<T*>(s.m_p);
  689|   192k|        }
  690|   192k|        else {
  691|   192k|            return reinterpret_cast<T*>(s.m_fp);
  692|   192k|        }
  693|   192k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   192k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   192k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   192k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   919k|    {
 3665|   919k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   919k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 919k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   919k|        return read_source_impl(range);
 3671|   919k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   192k|        {
  662|   192k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   232k|    {
 4170|   232k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   232k|#if !SCN_DISABLE_LOCALE
 4173|   232k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 64.5k, False: 168k]
  ------------------
 4174|  64.5k|            return read_impl<Range>(
 4175|  64.5k|                range, rd,
 4176|  64.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  64.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  64.5k|                },
 4179|  64.5k|                value, loc);
 4180|  64.5k|        }
 4181|   168k|#endif
 4182|       |
 4183|   168k|        return read_impl<Range>(
 4184|   168k|            range, rd,
 4185|   168k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   168k|                return r.read_source(SCN_FWD(args)...);
 4187|   168k|            },
 4188|   168k|            value);
 4189|   232k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   329k|    {
 4206|   329k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   329k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.9k, False: 318k]
  |  |  ------------------
  ------------------
 4208|  10.9k|            return unexpected(r.error());
 4209|  10.9k|        }
 4210|       |
 4211|   318k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   318k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.8k, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.8k|    }                                                  \
  |  |  |  | 3671|   318k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   306k|        return ranges::next(range.begin(), n);
 4213|   318k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.01M|    {
  763|  1.01M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.01M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  64.5k|    {
  754|  64.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  64.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  64.5k|              cvref<T> obj = *get<T>(fn);
  745|  64.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  64.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  64.5k|              }
  748|  64.5k|              else {
  749|  64.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  64.5k|              }
  751|  64.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  64.5k|    {
  684|  64.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  64.5k|            return static_cast<T*>(s.m_cp);
  686|  64.5k|        }
  687|  64.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  64.5k|            return static_cast<T*>(s.m_p);
  689|  64.5k|        }
  690|  64.5k|        else {
  691|  64.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  64.5k|        }
  693|  64.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  64.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  64.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  64.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  64.5k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   200k|    {
 3679|   200k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   200k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   200k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   200k|        return read_source_impl(range);
 3685|   200k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.01M|    {
 3705|  1.01M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.01M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.01M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.01M|        auto it = sign_result.first;
 3708|  1.01M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.01M|        auto digits_begin = it;
 3711|  1.01M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.01M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.01M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.01M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.01M]
  |  |  |  Branch (859:45): [True: 0, False: 1.01M]
  |  |  |  Branch (859:45): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 3715|  1.01M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.01M|            else {
 3724|  1.01M|                auto cb = [&](const auto& rr)
 3725|  1.01M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.01M|                    auto res = read_all(rr);
 3727|  1.01M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.01M|                        return unexpected_scan_error(
 3729|  1.01M|                            scan_error::invalid_scanned_value,
 3730|  1.01M|                            "Invalid float value");
 3731|  1.01M|                    }
 3732|  1.01M|                    return res;
 3733|  1.01M|                };
 3734|  1.01M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 33.8k, False: 983k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  33.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  33.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  33.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  33.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  33.8k|    }                                                  \
  |  | 3671|  1.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   983k|            }
 3736|  1.01M|        }
 3737|   983k|        else {
 3738|   983k|            SCN_TRY_ASSIGN(
 3739|   983k|                it,
 3740|   983k|                do_read_source_impl(
 3741|   983k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   983k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   983k|        }
 3744|       |
 3745|   983k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   983k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   983k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   983k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 975k, False: 7.20k]
  |  Branch (3747:48): [True: 970k, False: 5.59k]
  ------------------
 3748|   983k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 925k, False: 44.9k]
  ------------------
 3749|   983k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 924k, False: 1.34k]
  ------------------
 3750|   924k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   924k|        }
 3752|       |
 3753|   983k|        handle_separators();
 3754|       |
 3755|   983k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 983k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   983k|        return it;
 3768|   983k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.01M|    {
 3811|  1.01M|        auto it = range.begin();
 3812|  1.01M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.00M, False: 12.7k]
  ------------------
 3813|  1.00M|            return unexpected(r.error());
 3814|  1.00M|        }
 3815|  12.7k|        else {
 3816|  12.7k|            it = *r;
 3817|  12.7k|        }
 3818|       |
 3819|  12.7k|        if (auto r = read_matching_string_classic_nocase(
 3820|  12.7k|                ranges::subrange{it, range.end()}, "inity");
 3821|  12.7k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 7.20k, False: 5.59k]
  ------------------
 3822|  7.20k|            m_kind = float_kind::inf_short;
 3823|  7.20k|            return it;
 3824|  7.20k|        }
 3825|  5.59k|        else {
 3826|  5.59k|            m_kind = float_kind::inf_long;
 3827|  5.59k|            return *r;
 3828|  5.59k|        }
 3829|  12.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.00M|    {
 3834|  1.00M|        auto it = range.begin();
 3835|  1.00M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 956k, False: 47.4k]
  ------------------
 3836|   956k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   956k|                scan_error::invalid_scanned_value,
 3838|   956k|                "Invalid floating-point NaN value"));
 3839|   956k|        }
 3840|  47.4k|        else {
 3841|  47.4k|            it = *r;
 3842|  47.4k|        }
 3843|       |
 3844|  47.4k|        if (auto r =
 3845|  47.4k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  47.4k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 44.9k, False: 2.45k]
  ------------------
 3847|  44.9k|            m_kind = float_kind::nan_simple;
 3848|  44.9k|            return it;
 3849|  44.9k|        }
 3850|  2.45k|        else {
 3851|  2.45k|            it = *r;
 3852|  2.45k|        }
 3853|       |
 3854|  2.45k|        auto payload_beg_it = it;
 3855|  2.45k|        it = read_while_code_unit(
 3856|  2.45k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.45k|                return is_ascii_char(ch) &&
 3858|  2.45k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.45k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.45k|            });
 3861|  2.45k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.45k|        m_kind = float_kind::nan_with_payload;
 3864|  2.45k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.34k, False: 1.10k]
  ------------------
 3865|  2.45k|                                             ')')) {
 3866|  1.34k|            return *r;
 3867|  1.34k|        }
 3868|  1.10k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.10k|                                     "Invalid floating-point NaN payload");
 3870|  2.45k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  2.45k|    {
  754|  2.45k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  20.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.8k|              cvref<T> obj = *get<T>(fn);
  745|  20.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.8k|              }
  748|  20.8k|              else {
  749|  20.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.8k|              }
  751|  20.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  20.8k|    {
  684|  20.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.8k|            return static_cast<T*>(s.m_cp);
  686|  20.8k|        }
  687|  20.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.8k|            return static_cast<T*>(s.m_p);
  689|  20.8k|        }
  690|  20.8k|        else {
  691|  20.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.8k|        }
  693|  20.8k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  20.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  20.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 20.7k, False: 83]
  ------------------
 3858|  20.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.3k, False: 1.40k]
  |  Branch (3858:39): [True: 11.5k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 6.65k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  20.7k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 1.40k]
  |  Branch (3859:39): [True: 2.52k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.48k]
  ------------------
 3860|  20.8k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  2.45k|        {
  662|  2.45k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   675k|    {
 3804|   675k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   675k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   569k|{
 1996|   569k|    auto it = read_while_code_unit(range, pred);
 1997|   569k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 238k, False: 331k]
  ------------------
 1998|   238k|        return unexpected(parse_error::error);
 1999|   238k|    }
 2000|   331k|    return it;
 2001|   569k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   167k|    {
 3876|   167k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 28.6k, False: 138k]
  ------------------
 3877|  28.6k|            auto beg_exp_it = range.begin();
 3878|  28.6k|            auto it = *r;
 3879|       |
 3880|  28.6k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 28.5k, False: 102]
  ------------------
 3881|  28.6k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  28.5k|                it = r_sign->first;
 3883|  28.5k|            }
 3884|       |
 3885|  28.6k|            if (auto r_exp = read_while1_code_unit(
 3886|  28.6k|                    ranges::subrange{it, range.end()},
 3887|  28.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  28.6k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 648, False: 28.0k]
  |  |  ------------------
  ------------------
 3889|    648|                it = beg_exp_it;
 3890|    648|            }
 3891|  28.0k|            else {
 3892|  28.0k|                it = *r_exp;
 3893|  28.0k|            }
 3894|       |
 3895|  28.6k|            return it;
 3896|  28.6k|        }
 3897|   138k|        return range.begin();
 3898|   167k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  28.6k|    {
  754|  28.6k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|  84.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  84.2k|              cvref<T> obj = *get<T>(fn);
  745|  84.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  84.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  84.2k|              }
  748|  84.2k|              else {
  749|  84.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  84.2k|              }
  751|  84.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  84.2k|    {
  684|  84.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  84.2k|            return static_cast<T*>(s.m_cp);
  686|  84.2k|        }
  687|  84.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  84.2k|            return static_cast<T*>(s.m_p);
  689|  84.2k|        }
  690|  84.2k|        else {
  691|  84.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  84.2k|        }
  693|  84.2k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|  84.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  28.6k|        {
  662|  28.6k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   281k|    {
 3944|   281k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   281k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 177k, False: 103k]
  |  Branch (3945:50): [True: 17.7k, False: 159k]
  ------------------
 3946|       |
 3947|   281k|        auto it = ranges::begin(range);
 3948|   281k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   281k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   281k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 259k]
  |  |  ------------------
  ------------------
 3952|  21.3k|            return r.transform_error(
 3953|  21.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  21.3k|                                              "Invalid floating-point value"));
 3955|  21.3k|        }
 3956|   259k|        else {
 3957|   259k|            digits_count += ranges::distance(it, *r);
 3958|   259k|            it = *r;
 3959|   259k|        }
 3960|       |
 3961|   259k|        m_integral_part_length = digits_count;
 3962|   259k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 48.1k, False: 211k]
  ------------------
 3963|   259k|                                             m_locale_options.decimal_point)) {
 3964|  48.1k|            it = *r;
 3965|  48.1k|        }
 3966|       |
 3967|   259k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 43.7k, False: 216k]
  ------------------
 3968|   259k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  43.7k|            digits_count += ranges::distance(it, *r);
 3970|  43.7k|            it = *r;
 3971|  43.7k|        }
 3972|       |
 3973|   259k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 259k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   259k|        auto beg_exp_it = it;
 3979|   259k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 167k, False: 92.4k]
  ------------------
 3980|   167k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   167k|        }
 3982|   259k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 16.6k, False: 243k]
  |  Branch (3982:29): [True: 10.5k, False: 6.14k]
  ------------------
 3983|  10.5k|            return unexpected_scan_error(
 3984|  10.5k|                scan_error::invalid_scanned_value,
 3985|  10.5k|                "No exponent given to scientific float");
 3986|  10.5k|        }
 3987|       |
 3988|   249k|        m_kind =
 3989|   249k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 221k, False: 28.0k]
  ------------------
 3990|       |
 3991|   249k|        return it;
 3992|   259k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   541k|    {
 3774|   541k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 541k]
  |  |  |  Branch (859:45): [True: 0, False: 541k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   541k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   541k|        return read_while1_code_unit(
 3783|   541k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   541k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|   541k|    {
  754|   541k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  2.86M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.86M|              cvref<T> obj = *get<T>(fn);
  745|  2.86M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.86M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.86M|              }
  748|  2.86M|              else {
  749|  2.86M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.86M|              }
  751|  2.86M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.86M|    {
  684|  2.86M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.86M|            return static_cast<T*>(s.m_cp);
  686|  2.86M|        }
  687|  2.86M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.86M|            return static_cast<T*>(s.m_p);
  689|  2.86M|        }
  690|  2.86M|        else {
  691|  2.86M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.86M|        }
  693|  2.86M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  2.86M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|   541k|        {
  662|   541k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.01M|    {
 4000|  1.01M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.01M|        const bool allowed_nonhex =
 4002|  1.01M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.01M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.01M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.00M, False: 12.7k]
  |  Branch (4005:45): [True: 0, False: 1.00M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.01M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 12.7k, False: 1.00M]
  ------------------
 4011|  12.7k|            return *r;
 4012|  12.7k|        }
 4013|       |
 4014|  1.00M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 957k, False: 46.3k]
  |  Branch (4014:45): [True: 1.10k, False: 956k]
  ------------------
 4015|  1.10k|            return unexpected(r.error());
 4016|  1.10k|        }
 4017|  1.00M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 46.3k, False: 956k]
  ------------------
 4018|  46.3k|            return *r;
 4019|  46.3k|        }
 4020|       |
 4021|   956k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 675k, False: 281k]
  |  Branch (4021:28): [True: 204k, False: 470k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   204k|            auto it = range.begin();
 4025|       |
 4026|   204k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 9.71k, False: 195k]
  ------------------
 4027|  9.71k|                m_kind = float_kind::hex_with_prefix;
 4028|  9.71k|                it = *r;
 4029|  9.71k|            }
 4030|   195k|            else {
 4031|   195k|                m_kind = float_kind::hex_without_prefix;
 4032|   195k|            }
 4033|       |
 4034|   204k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   204k|        }
 4036|   751k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 281k, False: 470k]
  |  Branch (4036:29): [True: 281k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   281k|            m_kind = float_kind::generic;
 4040|   281k|            return read_regular_float(range);
 4041|   281k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   470k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.7k, False: 446k]
  |  |  ------------------
  ------------------
 4047|  23.7k|            m_kind = float_kind::hex_with_prefix;
 4048|  23.7k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  23.7k|        }
 4050|       |
 4051|   446k|        m_kind = float_kind::generic;
 4052|   446k|        return read_regular(range);
 4053|   470k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   675k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   675k|                    auto res = read_all(rr);
 3727|   675k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   675k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 853, False: 674k]
  |  |  ------------------
  ------------------
 3728|    853|                        return unexpected_scan_error(
 3729|    853|                            scan_error::invalid_scanned_value,
 3730|    853|                            "Invalid float value");
 3731|    853|                    }
 3732|   674k|                    return res;
 3733|   675k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   675k|{
 1839|   675k|    return ranges::next(range.begin(), range.end());
 1840|   675k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   675k|    {
  313|   675k|        ranges::advance(x, bound);
  314|   675k|        return x;
  315|   675k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   675k|    {
  275|   675k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   675k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   675k|    {
  190|   675k|        i = std::move(bound);
  191|   675k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|   926k|    {
 1577|   926k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   926k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   926k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|   926k|    {
 1621|   926k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   926k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   926k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   926k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   926k|            m_storage.reset();
 1627|   926k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   926k|        }
 1629|   926k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   926k|                                          std::basic_string<CharT>>) {
 1631|   926k|            m_storage.emplace(SCN_FWD(range));
 1632|   926k|            m_view = string_view_type{*m_storage};
 1633|   926k|        }
 1634|   926k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   926k|                                          typename detail::basic_scan_buffer<
 1636|   926k|                                              value_t>::forward_iterator> &&
 1637|   926k|                           ranges::common_range<Range>) {
 1638|   926k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   926k|            auto end_seg = range.end().contiguous_segment();
 1640|   926k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   926k|                             detail::to_address(end_seg.end()))) {
 1642|   926k|                auto& str = m_storage.emplace();
 1643|   926k|                str.reserve(range.end().position() - range.begin().position());
 1644|   926k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   926k|                m_view = string_view_type{str};
 1646|   926k|                return;
 1647|   926k|            }
 1648|       |
 1649|   926k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   926k|                                                            end_seg.data());
 1651|   926k|            m_storage.reset();
 1652|   926k|        }
 1653|   926k|        else {
 1654|   926k|            auto& str = m_storage.emplace();
 1655|   926k|            if constexpr (ranges::sized_range<Range>) {
 1656|   926k|                str.reserve(range.size());
 1657|   926k|            }
 1658|   926k|            if constexpr (ranges::common_range<Range>) {
 1659|   926k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   926k|                          std::back_inserter(str));
 1661|   926k|            }
 1662|   926k|            else {
 1663|   926k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   926k|                     ++it) {
 1665|   926k|                    str.push_back(*it);
 1666|   926k|                }
 1667|   926k|            }
 1668|   926k|            m_view = string_view_type{str};
 1669|   926k|        }
 1670|   926k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  64.5k|        {
  662|  64.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   168k|    {
  754|   168k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   168k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   168k|              cvref<T> obj = *get<T>(fn);
  745|   168k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   168k|                  obj(static_cast<decltype(args)>(args)...);
  747|   168k|              }
  748|   168k|              else {
  749|   168k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   168k|              }
  751|   168k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   168k|    {
  684|   168k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   168k|            return static_cast<T*>(s.m_cp);
  686|   168k|        }
  687|   168k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   168k|            return static_cast<T*>(s.m_p);
  689|   168k|        }
  690|   168k|        else {
  691|   168k|            return reinterpret_cast<T*>(s.m_fp);
  692|   168k|        }
  693|   168k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   168k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   168k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   168k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   816k|    {
 3665|   816k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   816k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 816k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   816k|        return read_source_impl(range);
 3671|   816k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   168k|        {
  662|   168k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   284k|    {
 6193|   284k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   284k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   284k|            auto rd = make_reader<T, char_type>();
 6198|   284k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   284k|                return unexpected(e);
 6200|   284k|            }
 6201|       |
 6202|   284k|            return impl(rd, range, value);
 6203|   284k|        }
 6204|   284k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   284k|            auto rd = make_reader<T, char_type>();
 6206|   284k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 284k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   284k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 284k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   284k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   284k|                return impl(rd, range, value);
 6213|   284k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   284k|        else {
 6221|   284k|            SCN_EXPECT(false);
 6222|   284k|            SCN_UNREACHABLE;
 6223|   284k|        }
 6224|   284k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   284k|    {
 6124|   284k|        const bool need_skipped_width =
 6125|   284k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 284k]
  |  Branch (6125:33): [True: 0, False: 284k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   284k|        auto it = rng.begin();
 6129|   284k|        std::ptrdiff_t prefix_width = 0;
 6130|   284k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 284k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   284k|        else {
 6138|   284k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   284k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   284k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   284k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.71k, False: 279k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.71k|    }                                                  \
  |  |  |  | 3671|   284k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   279k|            std::tie(it, prefix_width) = prefix_result;
 6140|   279k|        }
 6141|   279k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   279k|        std::ptrdiff_t value_width = 0;
 6145|   279k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 279k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   279k|        else {
 6161|   279k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.5k, False: 262k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.5k|    }                                                  \
  |  | 3671|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   262k|                                             specs, value, loc));
 6163|       |
 6164|   262k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 262k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   262k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   262k|        std::ptrdiff_t postfix_width = 0;
 6173|   262k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 258k, False: 3.80k]
  ------------------
 6174|   258k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   258k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   258k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   258k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   258k|                                 value_width));
 6178|   258k|            std::tie(it, postfix_width) = postfix_result;
 6179|   258k|        }
 6180|       |
 6181|   262k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   262k|                                                 value_width, postfix_width);
 6183|   262k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 262k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   262k|        return it;
 6188|   262k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   699k|    {
 3691|   699k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   699k|        const std::ptrdiff_t sign_len =
 3694|   699k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 172k, False: 527k]
  ------------------
 3695|       |
 3696|   699k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   699k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   699k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   699k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   699k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.4k, False: 687k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.4k|    }                                                  \
  |  |  |  | 3671|   699k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   687k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   687k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   699k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   279k|    {
 4170|   279k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   279k|#if !SCN_DISABLE_LOCALE
 4173|   279k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 80.0k, False: 199k]
  ------------------
 4174|  80.0k|            return read_impl<Range>(
 4175|  80.0k|                range, rd,
 4176|  80.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  80.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  80.0k|                },
 4179|  80.0k|                value, loc);
 4180|  80.0k|        }
 4181|   199k|#endif
 4182|       |
 4183|   199k|        return read_impl<Range>(
 4184|   199k|            range, rd,
 4185|   199k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   199k|                return r.read_source(SCN_FWD(args)...);
 4187|   199k|            },
 4188|   199k|            value);
 4189|   279k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   389k|    {
 4206|   389k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   389k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.9k, False: 369k]
  |  |  ------------------
  ------------------
 4208|  19.9k|            return unexpected(r.error());
 4209|  19.9k|        }
 4210|       |
 4211|   369k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   369k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   369k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   369k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.45k, False: 367k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.45k|    }                                                  \
  |  |  |  | 3671|   369k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   367k|        return ranges::next(range.begin(), n);
 4213|   369k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  80.0k|    {
  754|  80.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  80.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.0k|              cvref<T> obj = *get<T>(fn);
  745|  80.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  80.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  80.0k|              }
  748|  80.0k|              else {
  749|  80.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.0k|              }
  751|  80.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  80.0k|    {
  684|  80.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  80.0k|            return static_cast<T*>(s.m_cp);
  686|  80.0k|        }
  687|  80.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  80.0k|            return static_cast<T*>(s.m_p);
  689|  80.0k|        }
  690|  80.0k|        else {
  691|  80.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  80.0k|        }
  693|  80.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  80.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  80.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  80.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  80.0k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  80.0k|        {
  662|  80.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   199k|    {
  754|   199k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   199k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   199k|              cvref<T> obj = *get<T>(fn);
  745|   199k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   199k|                  obj(static_cast<decltype(args)>(args)...);
  747|   199k|              }
  748|   199k|              else {
  749|   199k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   199k|              }
  751|   199k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   199k|    {
  684|   199k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   199k|            return static_cast<T*>(s.m_cp);
  686|   199k|        }
  687|   199k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   199k|            return static_cast<T*>(s.m_p);
  689|   199k|        }
  690|   199k|        else {
  691|   199k|            return reinterpret_cast<T*>(s.m_fp);
  692|   199k|        }
  693|   199k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   199k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   199k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   199k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   199k|        {
  662|   199k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   240k|    {
 4170|   240k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   240k|#if !SCN_DISABLE_LOCALE
 4173|   240k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 67.5k, False: 172k]
  ------------------
 4174|  67.5k|            return read_impl<Range>(
 4175|  67.5k|                range, rd,
 4176|  67.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  67.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  67.5k|                },
 4179|  67.5k|                value, loc);
 4180|  67.5k|        }
 4181|   172k|#endif
 4182|       |
 4183|   172k|        return read_impl<Range>(
 4184|   172k|            range, rd,
 4185|   172k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   172k|                return r.read_source(SCN_FWD(args)...);
 4187|   172k|            },
 4188|   172k|            value);
 4189|   240k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   341k|    {
 4206|   341k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   341k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 330k]
  |  |  ------------------
  ------------------
 4208|  11.3k|            return unexpected(r.error());
 4209|  11.3k|        }
 4210|       |
 4211|   330k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.0k, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.0k|    }                                                  \
  |  |  |  | 3671|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   319k|        return ranges::next(range.begin(), n);
 4213|   330k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  67.5k|    {
  754|  67.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  67.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.5k|              cvref<T> obj = *get<T>(fn);
  745|  67.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  67.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  67.5k|              }
  748|  67.5k|              else {
  749|  67.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.5k|              }
  751|  67.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  67.5k|    {
  684|  67.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  67.5k|            return static_cast<T*>(s.m_cp);
  686|  67.5k|        }
  687|  67.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  67.5k|            return static_cast<T*>(s.m_p);
  689|  67.5k|        }
  690|  67.5k|        else {
  691|  67.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  67.5k|        }
  693|  67.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  67.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  67.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  67.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  67.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  67.5k|        {
  662|  67.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   172k|    {
  754|   172k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|   172k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   172k|                  obj(static_cast<decltype(args)>(args)...);
  747|   172k|              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   172k|    {
  684|   172k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   172k|            return static_cast<T*>(s.m_cp);
  686|   172k|        }
  687|   172k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   172k|            return static_cast<T*>(s.m_p);
  689|   172k|        }
  690|   172k|        else {
  691|   172k|            return reinterpret_cast<T*>(s.m_fp);
  692|   172k|        }
  693|   172k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   172k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   172k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   172k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   172k|        {
  662|   172k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   286k|    {
 6193|   286k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   286k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   286k|            auto rd = make_reader<T, char_type>();
 6198|   286k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   286k|                return unexpected(e);
 6200|   286k|            }
 6201|       |
 6202|   286k|            return impl(rd, range, value);
 6203|   286k|        }
 6204|   286k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   286k|            auto rd = make_reader<T, char_type>();
 6206|   286k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 286k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   286k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 286k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   286k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   286k|                return impl(rd, range, value);
 6213|   286k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   286k|        else {
 6221|   286k|            SCN_EXPECT(false);
 6222|   286k|            SCN_UNREACHABLE;
 6223|   286k|        }
 6224|   286k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   286k|    {
 6124|   286k|        const bool need_skipped_width =
 6125|   286k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 286k]
  |  Branch (6125:33): [True: 0, False: 286k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   286k|        auto it = rng.begin();
 6129|   286k|        std::ptrdiff_t prefix_width = 0;
 6130|   286k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 286k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   286k|        else {
 6138|   286k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   286k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   286k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   286k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.02k, False: 281k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.02k|    }                                                  \
  |  |  |  | 3671|   286k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   281k|            std::tie(it, prefix_width) = prefix_result;
 6140|   281k|        }
 6141|   281k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   281k|        std::ptrdiff_t value_width = 0;
 6145|   281k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 281k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   281k|        else {
 6161|   281k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.2k, False: 265k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.2k|    }                                                  \
  |  | 3671|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   265k|                                             specs, value, loc));
 6163|       |
 6164|   265k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 265k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   265k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   265k|        std::ptrdiff_t postfix_width = 0;
 6173|   265k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 261k, False: 4.07k]
  ------------------
 6174|   261k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   261k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 261k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   261k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   261k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   261k|                                 value_width));
 6178|   261k|            std::tie(it, postfix_width) = postfix_result;
 6179|   261k|        }
 6180|       |
 6181|   265k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   265k|                                                 value_width, postfix_width);
 6183|   265k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 265k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   265k|        return it;
 6188|   265k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   706k|    {
 3691|   706k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   706k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   706k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   706k|        const std::ptrdiff_t sign_len =
 3694|   706k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 175k, False: 530k]
  ------------------
 3695|       |
 3696|   706k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   706k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   706k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   706k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.7k, False: 695k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.7k|    }                                                  \
  |  |  |  | 3671|   706k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   695k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   706k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   281k|    {
 4170|   281k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   281k|#if !SCN_DISABLE_LOCALE
 4173|   281k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 81.1k, False: 200k]
  ------------------
 4174|  81.1k|            return read_impl<Range>(
 4175|  81.1k|                range, rd,
 4176|  81.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  81.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  81.1k|                },
 4179|  81.1k|                value, loc);
 4180|  81.1k|        }
 4181|   200k|#endif
 4182|       |
 4183|   200k|        return read_impl<Range>(
 4184|   200k|            range, rd,
 4185|   200k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   200k|                return r.read_source(SCN_FWD(args)...);
 4187|   200k|            },
 4188|   200k|            value);
 4189|   281k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   393k|    {
 4206|   393k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   393k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   393k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.6k, False: 372k]
  |  |  ------------------
  ------------------
 4208|  20.6k|            return unexpected(r.error());
 4209|  20.6k|        }
 4210|       |
 4211|   372k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   372k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   372k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   372k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 365, False: 372k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    365|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    365|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    365|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    365|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    365|    }                                                  \
  |  |  |  | 3671|   372k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   372k|        return ranges::next(range.begin(), n);
 4213|   372k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  81.1k|    {
  754|  81.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  81.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  81.1k|              cvref<T> obj = *get<T>(fn);
  745|  81.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  81.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  81.1k|              }
  748|  81.1k|              else {
  749|  81.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  81.1k|              }
  751|  81.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  81.1k|    {
  684|  81.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  81.1k|            return static_cast<T*>(s.m_cp);
  686|  81.1k|        }
  687|  81.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  81.1k|            return static_cast<T*>(s.m_p);
  689|  81.1k|        }
  690|  81.1k|        else {
  691|  81.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  81.1k|        }
  693|  81.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  81.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  81.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  81.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  81.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  81.1k|        {
  662|  81.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   200k|    {
  754|   200k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   200k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   200k|              cvref<T> obj = *get<T>(fn);
  745|   200k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   200k|                  obj(static_cast<decltype(args)>(args)...);
  747|   200k|              }
  748|   200k|              else {
  749|   200k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   200k|              }
  751|   200k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   200k|    {
  684|   200k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   200k|            return static_cast<T*>(s.m_cp);
  686|   200k|        }
  687|   200k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   200k|            return static_cast<T*>(s.m_p);
  689|   200k|        }
  690|   200k|        else {
  691|   200k|            return reinterpret_cast<T*>(s.m_fp);
  692|   200k|        }
  693|   200k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   200k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   200k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   200k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   200k|        {
  662|   200k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   242k|    {
 4170|   242k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   242k|#if !SCN_DISABLE_LOCALE
 4173|   242k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 68.5k, False: 174k]
  ------------------
 4174|  68.5k|            return read_impl<Range>(
 4175|  68.5k|                range, rd,
 4176|  68.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  68.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  68.5k|                },
 4179|  68.5k|                value, loc);
 4180|  68.5k|        }
 4181|   174k|#endif
 4182|       |
 4183|   174k|        return read_impl<Range>(
 4184|   174k|            range, rd,
 4185|   174k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   174k|                return r.read_source(SCN_FWD(args)...);
 4187|   174k|            },
 4188|   174k|            value);
 4189|   242k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   345k|    {
 4206|   345k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   345k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.5k, False: 334k]
  |  |  ------------------
  ------------------
 4208|  11.5k|            return unexpected(r.error());
 4209|  11.5k|        }
 4210|       |
 4211|   334k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.3k, False: 323k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.3k|    }                                                  \
  |  |  |  | 3671|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   323k|        return ranges::next(range.begin(), n);
 4213|   334k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  68.5k|    {
  754|  68.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  68.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  68.5k|              cvref<T> obj = *get<T>(fn);
  745|  68.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  68.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  68.5k|              }
  748|  68.5k|              else {
  749|  68.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  68.5k|              }
  751|  68.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  68.5k|    {
  684|  68.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  68.5k|            return static_cast<T*>(s.m_cp);
  686|  68.5k|        }
  687|  68.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  68.5k|            return static_cast<T*>(s.m_p);
  689|  68.5k|        }
  690|  68.5k|        else {
  691|  68.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  68.5k|        }
  693|  68.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  68.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  68.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  68.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  68.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  68.5k|        {
  662|  68.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   174k|    {
  754|   174k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   174k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   174k|              cvref<T> obj = *get<T>(fn);
  745|   174k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   174k|                  obj(static_cast<decltype(args)>(args)...);
  747|   174k|              }
  748|   174k|              else {
  749|   174k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   174k|              }
  751|   174k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   174k|    {
  684|   174k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   174k|            return static_cast<T*>(s.m_cp);
  686|   174k|        }
  687|   174k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   174k|            return static_cast<T*>(s.m_p);
  689|   174k|        }
  690|   174k|        else {
  691|   174k|            return reinterpret_cast<T*>(s.m_fp);
  692|   174k|        }
  693|   174k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   174k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   174k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   174k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   174k|        {
  662|   174k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.17M|{
 1039|  1.17M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.17M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.17M|        return r;
 1042|  1.17M|    }
 1043|  1.17M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.17M|                           ranges::const_iterator_t<Range>,
 1045|  1.17M|                           typename detail::basic_scan_buffer<
 1046|  1.17M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.17M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  1.17M|            auto seg = r.begin().contiguous_segment();
 1049|  1.17M|            auto dist =
 1050|  1.17M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.17M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.17M|        }
 1053|  1.17M|        else {
 1054|  1.17M|            return r.begin().contiguous_segment();
 1055|  1.17M|        }
 1056|  1.17M|    }
 1057|  1.17M|    else {
 1058|  1.17M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.17M|    }
 1060|  1.17M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.03M|{
 2061|  1.03M|    auto it = range.begin();
 2062|  1.95M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.94M, False: 14.4k]
  ------------------
 2063|  1.94M|        const auto val =
 2064|  1.94M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.94M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.94M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.93M, False: 10.4k]
  |  |  ------------------
  ------------------
 2066|  1.93M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.93M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.93M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.02M, False: 909k]
  ------------------
 2069|  1.02M|                return it;
 2070|  1.02M|            }
 2071|  1.93M|        }
 2072|   920k|        it = val.iterator;
 2073|   920k|    }
 2074|       |
 2075|  14.4k|    return it;
 2076|  1.03M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.94M|{
 1899|  1.94M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.94M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.94M|    auto it = range.begin();
 1903|  1.94M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.94M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.4k, False: 1.93M]
  |  |  ------------------
  ------------------
 1906|  10.4k|        ++it;
 1907|  10.4k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  10.4k|        return {it, {}};
 1909|  10.4k|    }
 1910|       |
 1911|  1.93M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.91M, False: 19.3k]
  ------------------
 1912|  1.91M|        ++it;
 1913|  1.91M|        return {it, string_type(1, *range.begin())};
 1914|  1.91M|    }
 1915|       |
 1916|  19.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  19.3k|    return {it, string_type{range.begin(), it}};
 1918|  1.93M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  10.4k|{
 1155|  10.4k|    auto it = input.begin();
 1156|   106k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 105k, False: 1.19k]
  ------------------
 1157|   105k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.21k, False: 96.2k]
  ------------------
 1158|  9.21k|            break;
 1159|  9.21k|        }
 1160|   105k|    }
 1161|  10.4k|    return it;
 1162|  10.4k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  19.3k|    {
  283|  19.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  19.3k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  19.3k|    {
  252|  19.3k|        constexpr iter_difference_t<I> zero{0};
  253|  19.3k|        iter_difference_t<I> counter{0};
  254|       |
  255|  58.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 39.9k, False: 18.4k]
  |  Branch (255:30): [True: 39.1k, False: 883]
  ------------------
  256|  39.1k|            ++i;
  257|  39.1k|            ++counter;
  258|  39.1k|        }
  259|       |
  260|  19.3k|        return counter;
  261|  19.3k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  1.94M|    {
 1890|  1.94M|        return !codepoint.empty();
 1891|  1.94M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.03M|{
 2082|  1.03M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.03M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.17M|{
 2951|  1.17M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.17M, False: 0]
  ------------------
 2952|  1.17M|        auto it = read_while_classic_space(range);
 2953|  1.17M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.17M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 1.15M]
  |  |  ------------------
  ------------------
 2955|  14.4k|            return unexpected(e);
 2956|  14.4k|        }
 2957|       |
 2958|  1.15M|        return it;
 2959|  1.17M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.17M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.17M|{
 2117|  1.17M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.17M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.17M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.17M|        auto buf = make_contiguous_buffer(range);
 2121|  1.17M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.17M|        return ranges::next(range.begin(),
 2123|  1.17M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.17M|    }
 2125|  1.17M|    else {
 2126|  1.17M|        auto it = range.begin();
 2127|       |
 2128|  1.17M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.17M|            auto seg = get_contiguous_beginning(range);
 2130|  1.17M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.17M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 135k, False: 1.03M]
  ------------------
 2132|   135k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   135k|            }
 2134|  1.03M|            ranges::advance(it, seg.size());
 2135|  1.03M|        }
 2136|       |
 2137|  1.03M|        return read_while_code_point(
 2138|  1.03M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.17M|    }
 2140|  1.17M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.03M|    {
  754|  1.03M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.93M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.93M|              cvref<T> obj = *get<T>(fn);
  745|  1.93M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.93M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.93M|              }
  748|  1.93M|              else {
  749|  1.93M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.93M|              }
  751|  1.93M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.93M|    {
  684|  1.93M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.93M|            return static_cast<T*>(s.m_cp);
  686|  1.93M|        }
  687|  1.93M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.93M|            return static_cast<T*>(s.m_p);
  689|  1.93M|        }
  690|  1.93M|        else {
  691|  1.93M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.93M|        }
  693|  1.93M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.93M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.03M|        {
  662|  1.03M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   445k|{
  981|   445k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   445k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   445k|        return true;
  984|   445k|    }
  985|   445k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   445k|                           ranges::const_iterator_t<Range>,
  987|   445k|                           typename detail::basic_scan_buffer<
  988|   445k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   445k|        auto beg = r.begin();
  990|   445k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 445k, False: 0]
  ------------------
  991|   445k|            return false;
  992|   445k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   445k|    else {
 1006|   445k|        return false;
 1007|   445k|    }
 1008|   445k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  2.93M|    {
  763|  2.93M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.93M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.15M|{
 1857|  1.15M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.15M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.15M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.15M|        if (sz < count) {
 1862|  1.15M|            return unexpected(eof_error::eof);
 1863|  1.15M|        }
 1864|       |
 1865|  1.15M|        return ranges::next(range.begin(), count);
 1866|  1.15M|    }
 1867|  1.15M|    else {
 1868|  1.15M|        auto it = range.begin();
 1869|  1.15M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 684k, False: 469k]
  ------------------
 1870|   684k|            return ranges::next(it, count);
 1871|   684k|        }
 1872|       |
 1873|  1.80M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.37M, False: 420k]
  ------------------
 1874|  1.37M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 48.9k, False: 1.33M]
  ------------------
 1875|  48.9k|                return unexpected(eof_error::eof);
 1876|  48.9k|            }
 1877|  1.37M|        }
 1878|       |
 1879|   420k|        return it;
 1880|   469k|    }
 1881|  1.15M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.15M|{
 1095|  1.15M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.15M|        return r.size();
 1097|  1.15M|    }
 1098|  1.15M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.15M|                           ranges::const_iterator_t<Range>,
 1100|  1.15M|                           typename detail::basic_scan_buffer<
 1101|  1.15M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.15M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  1.15M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.15M|        }
 1105|  1.15M|        else {
 1106|  1.15M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.15M, False: 0]
  ------------------
 1107|  1.15M|                return static_cast<size_t>(
 1108|  1.15M|                    r.begin().parent()->chars_available() -
 1109|  1.15M|                    r.begin().position());
 1110|  1.15M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.15M|        }
 1113|  1.15M|    }
 1114|  1.15M|    else {
 1115|  1.15M|        return 0;
 1116|  1.15M|    }
 1117|  1.15M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.00M|    {
  754|  1.00M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.46M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.46M|              cvref<T> obj = *get<T>(fn);
  745|  1.46M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.46M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.46M|              }
  748|  1.46M|              else {
  749|  1.46M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.46M|              }
  751|  1.46M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.46M|    {
  684|  1.46M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.46M|            return static_cast<T*>(s.m_cp);
  686|  1.46M|        }
  687|  1.46M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.46M|            return static_cast<T*>(s.m_p);
  689|  1.46M|        }
  690|  1.46M|        else {
  691|  1.46M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.46M|        }
  693|  1.46M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.00M|        {
  662|  1.00M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   330k|    {
 6037|   330k|        const bool need_skipped_width =
 6038|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 330k]
  |  Branch (6038:33): [True: 0, False: 330k]
  ------------------
 6039|   330k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   330k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 330k]
  ------------------
 6043|   330k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 330k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   330k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 330k, False: 0]
  |  Branch (6047:56): [True: 330k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   330k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 330k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   658k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.40k, False: 328k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.40k|    }                                                  \
  |  |  |  | 3671|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   328k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   658k|                            make_eof_scan_error));
 6058|       |
 6059|   658k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 328k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   328k|            return result_type{it, 0};
 6067|   658k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   330k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   734k|{
 1976|   734k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   734k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   734k|{
 1957|   734k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   734k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   734k|    }
 1960|   734k|    else {
 1961|   734k|        auto first = range.begin();
 1962|  1.07M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.07M, False: 2.59k]
  ------------------
 1963|  1.07M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 731k, False: 343k]
  ------------------
 1964|   731k|                return first;
 1965|   731k|            }
 1966|  1.07M|        }
 1967|  2.59k|        return first;
 1968|   734k|    }
 1969|   734k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   487k|    {
  108|   487k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   487k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   487k|    {
   94|   487k|        iter_difference_t<I> counter{0};
   95|  1.26M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 774k, False: 487k]
  ------------------
   96|   774k|            ++i;
   97|   774k|            ++counter;
   98|   774k|        }
   99|   487k|        return counter;
  100|   487k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   152k|    {
 1780|   152k|        auto stdloc = loc.get<std::locale>();
 1781|   152k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   152k|        grouping = numpunct.grouping();
 1783|   152k|        thousands_sep =
 1784|   152k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 152k]
  ------------------
 1785|   152k|        decimal_point = numpunct.decimal_point();
 1786|   152k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   152k|{
 1717|   152k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 152k, False: 0]
  ------------------
 1718|   152k|        return std::use_facet<Facet>(stdloc);
 1719|   152k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   152k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   972k|{
 1846|   972k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   972k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.65k, False: 971k]
  |  |  ------------------
  ------------------
 1847|  1.65k|        return unexpected(e);
 1848|  1.65k|    }
 1849|       |
 1850|   971k|    return ranges::next(range.begin());
 1851|   972k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.53M|{
  950|  1.53M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.88k, False: 1.52M]
  |  |  ------------------
  ------------------
  951|  4.88k|        return eof_error::eof;
  952|  4.88k|    }
  953|  1.52M|    return eof_error::good;
  954|  1.53M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  2.26M|{
  944|  2.26M|    return is_range_eof(r.begin(), r.end());
  945|  2.26M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  2.26M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.26M|    {
  937|  2.26M|        return begin == end;
  938|  2.26M|    }
  939|  2.26M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   971k|    {
  296|   971k|        ++x;
  297|   971k|        return x;
  298|   971k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   450k|{
 3141|   450k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   450k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 447k, False: 3.20k]
  ------------------
 3143|   447k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 447k, False: 70]
  ------------------
 3144|   447k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   447k|        }
 3146|     70|        return unexpected(eof_error::eof);
 3147|   447k|    }
 3148|       |
 3149|  3.20k|    auto& it = *r;
 3150|  3.20k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.60k, False: 603]
  ------------------
 3151|  2.60k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.60k|    }
 3153|    603|    return std::pair{it, sign_type::plus_sign};
 3154|  3.20k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   688k|{
 2272|   688k|    auto it = read_code_unit(range);
 2273|   688k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   688k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 888, False: 687k]
  |  |  ------------------
  ------------------
 2274|    888|        return unexpected(make_eof_parse_error(it.error()));
 2275|    888|    }
 2276|       |
 2277|  1.37M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.37M, False: 676k]
  ------------------
 2278|  1.37M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 11.4k, False: 1.36M]
  ------------------
 2279|  11.4k|            return *it;
 2280|  11.4k|        }
 2281|  1.37M|    }
 2282|       |
 2283|   676k|    return unexpected(parse_error::error);
 2284|   687k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.15M|{
 2231|  1.15M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.15M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.15M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.15M|        if (range.size() < str.size()) {
 2236|  1.15M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.15M|        }
 2238|  1.15M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.15M|            return unexpected(parse_error::error);
 2240|  1.15M|        }
 2241|  1.15M|        return ranges::next(range.begin(), str.size());
 2242|  1.15M|    }
 2243|  1.15M|    else {
 2244|  1.15M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.15M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.15M|                return ch;
 2247|  1.15M|            }
 2248|  1.15M|            return static_cast<char_type>(ch +
 2249|  1.15M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.15M|        };
 2251|       |
 2252|  1.15M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.15M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.15M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.15M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.9k, False: 1.10M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  48.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  48.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  48.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  48.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  48.9k|    }                                                  \
  |  |  |  | 3671|  1.15M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.10M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.10M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.10M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10M, False: 552]
  |  |  ------------------
  ------------------
 2257|  1.10M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.10M|                    return ascii_tolower(a) ==
 2259|  1.10M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.10M|                }))) {
 2261|  1.10M|            return unexpected(parse_error::error);
 2262|  1.10M|        }
 2263|       |
 2264|    552|        return it;
 2265|  1.10M|    }
 2266|  1.15M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.27M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.27M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 980k, False: 290k]
  |  Branch (2245:29): [True: 280k, False: 9.23k]
  ------------------
 2246|  1.26M|                return ch;
 2247|  1.26M|            }
 2248|  9.23k|            return static_cast<char_type>(ch +
 2249|  9.23k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.27M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   284k|{
 2146|   284k|    auto it = read_code_unit(range);
 2147|   284k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 764, False: 283k]
  |  |  ------------------
  ------------------
 2148|    764|        return unexpected(make_eof_parse_error(it.error()));
 2149|    764|    }
 2150|       |
 2151|   283k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 282k, False: 935]
  |  |  ------------------
  ------------------
 2152|   283k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   282k|        return unexpected(parse_error::error);
 2154|   282k|    }
 2155|       |
 2156|    935|    return *it;
 2157|   283k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   734k|{
 1996|   734k|    auto it = read_while_code_unit(range, pred);
 1997|   734k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 442k, False: 291k]
  ------------------
 1998|   442k|        return unexpected(parse_error::error);
 1999|   442k|    }
 2000|   291k|    return it;
 2001|   734k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   281k|    {
 1621|   281k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   281k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   281k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   281k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   281k|            m_storage.reset();
 1627|   281k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   281k|        }
 1629|   281k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   281k|                                          std::basic_string<CharT>>) {
 1631|   281k|            m_storage.emplace(SCN_FWD(range));
 1632|   281k|            m_view = string_view_type{*m_storage};
 1633|   281k|        }
 1634|   281k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   281k|                                          typename detail::basic_scan_buffer<
 1636|   281k|                                              value_t>::forward_iterator> &&
 1637|   281k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   281k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   281k|            auto end_seg = range.end().contiguous_segment();
 1640|   281k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.89k, False: 271k]
  |  |  ------------------
  ------------------
 1641|   281k|                             detail::to_address(end_seg.end()))) {
 1642|  9.89k|                auto& str = m_storage.emplace();
 1643|  9.89k|                str.reserve(range.end().position() - range.begin().position());
 1644|  9.89k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  9.89k|                m_view = string_view_type{str};
 1646|  9.89k|                return;
 1647|  9.89k|            }
 1648|       |
 1649|   271k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   271k|                                                            end_seg.data());
 1651|   271k|            m_storage.reset();
 1652|   271k|        }
 1653|   281k|        else {
 1654|   281k|            auto& str = m_storage.emplace();
 1655|   281k|            if constexpr (ranges::sized_range<Range>) {
 1656|   281k|                str.reserve(range.size());
 1657|   281k|            }
 1658|   281k|            if constexpr (ranges::common_range<Range>) {
 1659|   281k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   281k|                          std::back_inserter(str));
 1661|   281k|            }
 1662|   281k|            else {
 1663|   281k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   281k|                     ++it) {
 1665|   281k|                    str.push_back(*it);
 1666|   281k|                }
 1667|   281k|            }
 1668|   281k|            m_view = string_view_type{str};
 1669|   281k|        }
 1670|   281k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.52M|    {
 1582|  2.52M|        return m_view;
 1583|  2.52M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.76M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   201k|    {
 6079|   201k|        const bool need_skipped_width =
 6080|   201k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 201k]
  |  Branch (6080:33): [True: 0, False: 201k]
  ------------------
 6081|   201k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   201k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 201k]
  ------------------
 6084|   201k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 201k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   201k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 201k, False: 0]
  ------------------
 6093|   201k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 201k]
  ------------------
 6094|   201k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   201k|        return result_type{rng.begin(), 0};
 6118|   201k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  1.15M|{
 1857|  1.15M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.15M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.15M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.15M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 49.0k, False: 1.10M]
  ------------------
 1862|  49.0k|            return unexpected(eof_error::eof);
 1863|  49.0k|        }
 1864|       |
 1865|  1.10M|        return ranges::next(range.begin(), count);
 1866|  1.15M|    }
 1867|  1.15M|    else {
 1868|  1.15M|        auto it = range.begin();
 1869|  1.15M|        if (guaranteed_minimum_size(range) >= count) {
 1870|  1.15M|            return ranges::next(it, count);
 1871|  1.15M|        }
 1872|       |
 1873|  1.15M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  1.15M|            if (it == range.end()) {
 1875|  1.15M|                return unexpected(eof_error::eof);
 1876|  1.15M|            }
 1877|  1.15M|        }
 1878|       |
 1879|  1.15M|        return it;
 1880|  1.15M|    }
 1881|  1.15M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.22M|{
 1899|  1.22M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.22M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.22M|    auto it = range.begin();
 1903|  1.22M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.22M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.22M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.22M, False: 0]
  ------------------
 1912|  1.22M|        ++it;
 1913|  1.22M|        return {it, string_type(1, *range.begin())};
 1914|  1.22M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.22M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  2.38M|{
  944|  2.38M|    return is_range_eof(r.begin(), r.end());
  945|  2.38M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  2.38M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.38M|    {
  937|  2.38M|        return begin == end;
  938|  2.38M|    }
  939|  2.38M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   270k|    {
  190|   270k|        i = std::move(bound);
  191|   270k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  1.22M|    {
 1890|  1.22M|        return !codepoint.empty();
 1891|  1.22M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.15M|{
  950|  1.15M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.64k, False: 1.15M]
  |  |  ------------------
  ------------------
  951|  3.64k|        return eof_error::eof;
  952|  3.64k|    }
  953|  1.15M|    return eof_error::good;
  954|  1.15M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   599k|{
 1846|   599k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 410, False: 599k]
  |  |  ------------------
  ------------------
 1847|    410|        return unexpected(e);
 1848|    410|    }
 1849|       |
 1850|   599k|    return ranges::next(range.begin());
 1851|   599k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   599k|    {
  296|   599k|        ++x;
  297|   599k|        return x;
  298|   599k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   445k|{
 3141|   445k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   445k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 443k, False: 1.94k]
  ------------------
 3143|   443k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 443k, False: 24]
  ------------------
 3144|   443k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   443k|        }
 3146|     24|        return unexpected(eof_error::eof);
 3147|   443k|    }
 3148|       |
 3149|  1.94k|    auto& it = *r;
 3150|  1.94k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 1.46k, False: 482]
  ------------------
 3151|  1.46k|        return std::pair{it, sign_type::minus_sign};
 3152|  1.46k|    }
 3153|    482|    return std::pair{it, sign_type::plus_sign};
 3154|  1.94k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   499k|{
 2272|   499k|    auto it = read_code_unit(range);
 2273|   499k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 196, False: 499k]
  |  |  ------------------
  ------------------
 2274|    196|        return unexpected(make_eof_parse_error(it.error()));
 2275|    196|    }
 2276|       |
 2277|   998k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 998k, False: 494k]
  ------------------
 2278|   998k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 4.84k, False: 993k]
  ------------------
 2279|  4.84k|            return *it;
 2280|  4.84k|        }
 2281|   998k|    }
 2282|       |
 2283|   494k|    return unexpected(parse_error::error);
 2284|   499k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.15M|{
 2231|  1.15M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.15M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.15M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.15M|        if (range.size() < str.size()) {
 2236|  1.15M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.15M|        }
 2238|  1.15M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.15M|            return unexpected(parse_error::error);
 2240|  1.15M|        }
 2241|  1.15M|        return ranges::next(range.begin(), str.size());
 2242|  1.15M|    }
 2243|  1.15M|    else {
 2244|  1.15M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.15M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.15M|                return ch;
 2247|  1.15M|            }
 2248|  1.15M|            return static_cast<char_type>(ch +
 2249|  1.15M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.15M|        };
 2251|       |
 2252|  1.15M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.15M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.15M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.15M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.0k, False: 1.10M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  49.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  49.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  49.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  49.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  49.0k|    }                                                  \
  |  |  |  | 3671|  1.15M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.10M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.10M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.10M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10M, False: 552]
  |  |  ------------------
  ------------------
 2257|  1.10M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.10M|                    return ascii_tolower(a) ==
 2259|  1.10M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.10M|                }))) {
 2261|  1.10M|            return unexpected(parse_error::error);
 2262|  1.10M|        }
 2263|       |
 2264|    552|        return it;
 2265|  1.10M|    }
 2266|  1.15M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.27M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.27M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 980k, False: 290k]
  |  Branch (2245:29): [True: 281k, False: 9.31k]
  ------------------
 2246|  1.26M|                return ch;
 2247|  1.26M|            }
 2248|  9.31k|            return static_cast<char_type>(ch +
 2249|  9.31k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.27M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   100k|{
 2146|   100k|    auto it = read_code_unit(range);
 2147|   100k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214, False: 99.8k]
  |  |  ------------------
  ------------------
 2148|    214|        return unexpected(make_eof_parse_error(it.error()));
 2149|    214|    }
 2150|       |
 2151|  99.8k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  99.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 99.4k, False: 370]
  |  |  ------------------
  ------------------
 2152|  99.8k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  99.4k|        return unexpected(parse_error::error);
 2154|  99.4k|    }
 2155|       |
 2156|    370|    return *it;
 2157|  99.8k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   275k|{
 1976|   275k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   275k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   275k|{
 1957|   275k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   275k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   275k|    }
 1960|   275k|    else {
 1961|   275k|        auto first = range.begin();
 1962|   275k|        for (; first != range.end(); ++first) {
 1963|   275k|            if (pred(*first)) {
 1964|   275k|                return first;
 1965|   275k|            }
 1966|   275k|        }
 1967|   275k|        return first;
 1968|   275k|    }
 1969|   275k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   445k|{
 2951|   445k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 445k, False: 0]
  ------------------
 2952|   445k|        auto it = read_while_classic_space(range);
 2953|   445k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   445k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.87k, False: 442k]
  |  |  ------------------
  ------------------
 2955|  2.87k|            return unexpected(e);
 2956|  2.87k|        }
 2957|       |
 2958|   442k|        return it;
 2959|   445k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   445k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   445k|{
 2117|   445k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   445k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   445k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   445k|        auto buf = make_contiguous_buffer(range);
 2121|   445k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   445k|        return ranges::next(range.begin(),
 2123|   445k|                            ranges::distance(buf.view().begin(), it));
 2124|   445k|    }
 2125|   445k|    else {
 2126|   445k|        auto it = range.begin();
 2127|       |
 2128|   445k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   445k|            auto seg = get_contiguous_beginning(range);
 2130|   445k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   445k|                seg_it != seg.end()) {
 2132|   445k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   445k|            }
 2134|   445k|            ranges::advance(it, seg.size());
 2135|   445k|        }
 2136|       |
 2137|   445k|        return read_while_code_point(
 2138|   445k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   445k|    }
 2140|   445k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   445k|{
 2082|   445k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   445k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   710k|{
 2061|   710k|    auto it = range.begin();
 2062|  1.39M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.22M, False: 169k]
  ------------------
 2063|  1.22M|        const auto val =
 2064|  1.22M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.22M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.22M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.22M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.22M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.22M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 540k, False: 681k]
  ------------------
 2069|   540k|                return it;
 2070|   540k|            }
 2071|  1.22M|        }
 2072|   681k|        it = val.iterator;
 2073|   681k|    }
 2074|       |
 2075|   169k|    return it;
 2076|   710k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   445k|    {
  754|   445k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   730k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   730k|              cvref<T> obj = *get<T>(fn);
  745|   730k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   730k|                  obj(static_cast<decltype(args)>(args)...);
  747|   730k|              }
  748|   730k|              else {
  749|   730k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   730k|              }
  751|   730k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   730k|    {
  684|   730k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   730k|            return static_cast<T*>(s.m_cp);
  686|   730k|        }
  687|   730k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   730k|            return static_cast<T*>(s.m_p);
  689|   730k|        }
  690|   730k|        else {
  691|   730k|            return reinterpret_cast<T*>(s.m_fp);
  692|   730k|        }
  693|   730k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   730k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   445k|        {
  662|   445k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   963k|    {
  304|   963k|        ranges::advance(x, n);
  305|   963k|        return x;
  306|   963k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   963k|    {
  268|   963k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   963k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   963k|    {
  181|  3.09M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.12M, False: 963k]
  ------------------
  182|  2.12M|            ++i;
  183|  2.12M|        }
  184|   963k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   107k|    {
 6193|   107k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   107k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   107k|            auto rd = make_reader<T, char_type>();
 6198|   107k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   107k|                return unexpected(e);
 6200|   107k|            }
 6201|       |
 6202|   107k|            return impl(rd, range, value);
 6203|   107k|        }
 6204|   107k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   107k|            auto rd = make_reader<T, char_type>();
 6206|   107k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   107k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 107k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   107k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   107k|                return impl(rd, range, value);
 6213|   107k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   107k|        else {
 6221|   107k|            SCN_EXPECT(false);
 6222|   107k|            SCN_UNREACHABLE;
 6223|   107k|        }
 6224|   107k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   661k|    {
 3040|   661k|        reader_error_handler eh{};
 3041|   661k|        get_derived().check_specs_impl(specs, eh);
 3042|   661k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   661k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 661k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   661k|        return {};
 3046|   661k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   661k|    {
 3051|   661k|        return static_cast<Derived&>(*this);
 3052|   661k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   661k|    {
 4145|   661k|        detail::check_float_type_specs(specs, eh);
 4146|   661k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   107k|    {
 6124|   107k|        const bool need_skipped_width =
 6125|   107k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 107k]
  |  Branch (6125:33): [True: 0, False: 107k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   107k|        auto it = rng.begin();
 6129|   107k|        std::ptrdiff_t prefix_width = 0;
 6130|   107k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 107k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   107k|        else {
 6138|   107k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 764, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    764|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    764|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    764|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    764|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    764|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   107k|            std::tie(it, prefix_width) = prefix_result;
 6140|   107k|        }
 6141|   107k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   107k|        std::ptrdiff_t value_width = 0;
 6145|   107k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 107k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   107k|        else {
 6161|   107k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.8k, False: 65.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.8k|    }                                                  \
  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  65.1k|                                             specs, value, loc));
 6163|       |
 6164|  65.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 65.1k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  65.1k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  65.1k|        std::ptrdiff_t postfix_width = 0;
 6173|  65.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 64.8k, False: 308]
  ------------------
 6174|  64.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  64.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  64.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  64.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 64.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  64.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  64.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  64.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  64.8k|                                 value_width));
 6178|  64.8k|            std::tie(it, postfix_width) = postfix_result;
 6179|  64.8k|        }
 6180|       |
 6181|  65.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  65.1k|                                                 value_width, postfix_width);
 6183|  65.1k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 65.1k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  65.1k|        return it;
 6188|  65.1k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.29M|    {
 3035|  1.29M|        return true;
 3036|  1.29M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   656k|    {
 4217|   656k|        unsigned options{};
 4218|   656k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 152k, False: 504k]
  ------------------
 4219|   152k|            options |= float_reader_base::allow_thsep;
 4220|   152k|        }
 4221|       |
 4222|   656k|        SCN_GCC_COMPAT_PUSH
 4223|   656k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   656k|        switch (specs.type) {
 4226|   142k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 142k, False: 514k]
  ------------------
 4227|   142k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  51.8k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 51.8k, False: 604k]
  ------------------
 4230|  51.8k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   160k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 160k, False: 496k]
  ------------------
 4233|   160k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   150k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 150k, False: 506k]
  ------------------
 4236|   150k|                return options | float_reader_base::allow_scientific |
 4237|   150k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   152k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 152k, False: 504k]
  ------------------
 4240|   152k|                return options | float_reader_base::allow_scientific |
 4241|   152k|                       float_reader_base::allow_fixed |
 4242|   152k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 656k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   656k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   656k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   656k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   656k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   884k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.76M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   208k|    {
 3691|   208k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   208k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   208k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   208k|        const std::ptrdiff_t sign_len =
 3694|   208k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 667, False: 208k]
  ------------------
 3695|       |
 3696|   208k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   208k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   208k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   208k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.8k, False: 177k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  30.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  30.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  30.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  30.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  30.8k|    }                                                  \
  |  |  |  | 3671|   208k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   177k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   208k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   648k|    {
 4057|   648k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 648k, False: 0]
  ------------------
 4058|   648k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 648k, False: 0]
  ------------------
 4059|   648k|            return;
 4060|   648k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   652k|    {
 1587|   652k|        return m_storage.has_value();
 1588|   652k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   381k|    {
 1592|   381k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   381k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   381k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   381k|        return *m_storage;
 1594|   381k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   107k|    {
 4170|   107k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   107k|#if !SCN_DISABLE_LOCALE
 4173|   107k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 24.1k, False: 82.8k]
  ------------------
 4174|  24.1k|            return read_impl<Range>(
 4175|  24.1k|                range, rd,
 4176|  24.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  24.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  24.1k|                },
 4179|  24.1k|                value, loc);
 4180|  24.1k|        }
 4181|  82.8k|#endif
 4182|       |
 4183|  82.8k|        return read_impl<Range>(
 4184|  82.8k|            range, rd,
 4185|  82.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  82.8k|                return r.read_source(SCN_FWD(args)...);
 4187|  82.8k|            },
 4188|  82.8k|            value);
 4189|   107k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   143k|    {
 4206|   143k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   143k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.0k, False: 90.1k]
  |  |  ------------------
  ------------------
 4208|  53.0k|            return unexpected(r.error());
 4209|  53.0k|        }
 4210|       |
 4211|  90.1k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  90.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  90.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  90.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.30k, False: 88.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.30k|    }                                                  \
  |  |  |  | 3671|  90.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  88.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  88.8k|        return ranges::next(range.begin(), n);
 4213|  90.1k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   442k|    {
  763|   442k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   442k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  24.1k|    {
  754|  24.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  24.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.1k|              cvref<T> obj = *get<T>(fn);
  745|  24.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.1k|              }
  748|  24.1k|              else {
  749|  24.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.1k|              }
  751|  24.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  24.1k|    {
  684|  24.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.1k|            return static_cast<T*>(s.m_cp);
  686|  24.1k|        }
  687|  24.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.1k|            return static_cast<T*>(s.m_p);
  689|  24.1k|        }
  690|  24.1k|        else {
  691|  24.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.1k|        }
  693|  24.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  24.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  24.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  24.1k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  75.9k|    {
 3679|  75.9k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  75.9k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  75.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 75.9k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  75.9k|        return read_source_impl(range);
 3685|  75.9k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   442k|    {
 3705|   442k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   442k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   442k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   442k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 442k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   442k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   442k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   442k|        auto it = sign_result.first;
 3708|   442k|        m_sign = sign_result.second;
 3709|       |
 3710|   442k|        auto digits_begin = it;
 3711|   442k|        auto r = ranges::subrange{it, range.end()};
 3712|   442k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   442k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   442k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   442k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   442k|                SCN_TRY_ASSIGN(
 3717|   442k|                    it,
 3718|   442k|                    do_read_source_impl(
 3719|   442k|                        r,
 3720|   442k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   442k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   442k|            }
 3723|   442k|            else {
 3724|   442k|                auto cb = [&](const auto& rr)
 3725|   442k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   442k|                    auto res = read_all(rr);
 3727|   442k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   442k|                        return unexpected_scan_error(
 3729|   442k|                            scan_error::invalid_scanned_value,
 3730|   442k|                            "Invalid float value");
 3731|   442k|                    }
 3732|   442k|                    return res;
 3733|   442k|                };
 3734|   442k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   442k|            }
 3736|   442k|        }
 3737|   442k|        else {
 3738|   442k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   442k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   442k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 160k, False: 281k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   160k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   160k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   160k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   160k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   160k|    }                                                  \
  |  | 3671|   442k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   281k|                it,
 3740|   281k|                do_read_source_impl(
 3741|   281k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   281k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   281k|        }
 3744|       |
 3745|   281k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   281k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   281k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   281k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 281k, False: 0]
  |  Branch (3747:48): [True: 281k, False: 0]
  ------------------
 3748|   281k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 281k, False: 0]
  ------------------
 3749|   281k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 281k, False: 0]
  ------------------
 3750|   281k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   281k|        }
 3752|       |
 3753|   281k|        handle_separators();
 3754|       |
 3755|   281k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 281k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   281k|        return it;
 3768|   281k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   442k|    {
 4000|   442k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   442k|        const bool allowed_nonhex =
 4002|   442k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   442k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   442k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 442k, False: 0]
  |  Branch (4005:45): [True: 0, False: 442k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   442k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 442k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   442k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 442k, False: 0]
  |  Branch (4014:45): [True: 0, False: 442k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   442k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 442k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   442k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 269k, False: 172k]
  |  Branch (4021:28): [True: 79.9k, False: 189k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  79.9k|            auto it = range.begin();
 4025|       |
 4026|  79.9k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 162, False: 79.8k]
  ------------------
 4027|    162|                m_kind = float_kind::hex_with_prefix;
 4028|    162|                it = *r;
 4029|    162|            }
 4030|  79.8k|            else {
 4031|  79.8k|                m_kind = float_kind::hex_without_prefix;
 4032|  79.8k|            }
 4033|       |
 4034|  79.9k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  79.9k|        }
 4036|   362k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 172k, False: 189k]
  |  Branch (4036:29): [True: 172k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   172k|            m_kind = float_kind::generic;
 4040|   172k|            return read_regular_float(range);
 4041|   172k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   189k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 390, False: 189k]
  |  |  ------------------
  ------------------
 4047|    390|            m_kind = float_kind::hex_with_prefix;
 4048|    390|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    390|        }
 4050|       |
 4051|   189k|        m_kind = float_kind::generic;
 4052|   189k|        return read_regular(range);
 4053|   189k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   442k|    {
 3811|   442k|        auto it = range.begin();
 3812|   442k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 442k, False: 0]
  ------------------
 3813|   442k|            return unexpected(r.error());
 3814|   442k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   442k|    {
 3834|   442k|        auto it = range.begin();
 3835|   442k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 442k, False: 0]
  ------------------
 3836|   442k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   442k|                scan_error::invalid_scanned_value,
 3838|   442k|                "Invalid floating-point NaN value"));
 3839|   442k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   269k|    {
 3804|   269k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   269k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  80.3k|    {
 3904|  80.3k|        auto it = range.begin();
 3905|       |
 3906|  80.3k|        std::ptrdiff_t digits_count = 0;
 3907|  80.3k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  80.3k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 55.4k]
  |  |  ------------------
  ------------------
 3909|  24.9k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  24.9k|                scan_error::invalid_scanned_value,
 3911|  24.9k|                "Invalid hexadecimal floating-point value"));
 3912|  24.9k|        }
 3913|  55.4k|        else {
 3914|  55.4k|            digits_count += ranges::distance(it, *r);
 3915|  55.4k|            it = *r;
 3916|  55.4k|        }
 3917|       |
 3918|  55.4k|        m_integral_part_length = digits_count;
 3919|  55.4k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 180, False: 55.2k]
  ------------------
 3920|  55.4k|                                             m_locale_options.decimal_point)) {
 3921|    180|            it = *r;
 3922|    180|        }
 3923|       |
 3924|  55.4k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 114, False: 55.3k]
  ------------------
 3925|  55.4k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|    114|            digits_count += ranges::distance(it, *r);
 3927|    114|            it = *r;
 3928|    114|        }
 3929|       |
 3930|  55.4k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 55.4k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  55.4k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  55.4k|        return it;
 3938|  55.4k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   135k|    {
 3789|   135k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  |  Branch (859:45): [True: 0, False: 135k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   135k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   135k|        return read_while1_code_unit(
 3798|   135k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   135k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   135k|    {
  754|   135k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   204k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   204k|              cvref<T> obj = *get<T>(fn);
  745|   204k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   204k|                  obj(static_cast<decltype(args)>(args)...);
  747|   204k|              }
  748|   204k|              else {
  749|   204k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   204k|              }
  751|   204k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   204k|    {
  684|   204k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   204k|            return static_cast<T*>(s.m_cp);
  686|   204k|        }
  687|   204k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   204k|            return static_cast<T*>(s.m_p);
  689|   204k|        }
  690|   204k|        else {
  691|   204k|            return reinterpret_cast<T*>(s.m_fp);
  692|   204k|        }
  693|   204k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   204k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   135k|        {
  662|   135k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   238k|    {
 3876|   238k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 8.27k, False: 229k]
  ------------------
 3877|  8.27k|            auto beg_exp_it = range.begin();
 3878|  8.27k|            auto it = *r;
 3879|       |
 3880|  8.27k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 8.20k, False: 70]
  ------------------
 3881|  8.27k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  8.20k|                it = r_sign->first;
 3883|  8.20k|            }
 3884|       |
 3885|  8.27k|            if (auto r_exp = read_while1_code_unit(
 3886|  8.27k|                    ranges::subrange{it, range.end()},
 3887|  8.27k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  8.27k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  8.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.06k, False: 7.21k]
  |  |  ------------------
  ------------------
 3889|  1.06k|                it = beg_exp_it;
 3890|  1.06k|            }
 3891|  7.21k|            else {
 3892|  7.21k|                it = *r_exp;
 3893|  7.21k|            }
 3894|       |
 3895|  8.27k|            return it;
 3896|  8.27k|        }
 3897|   229k|        return range.begin();
 3898|   238k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  8.27k|    {
  754|  8.27k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  26.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.8k|              cvref<T> obj = *get<T>(fn);
  745|  26.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.8k|              }
  748|  26.8k|              else {
  749|  26.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.8k|              }
  751|  26.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  26.8k|    {
  684|  26.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.8k|            return static_cast<T*>(s.m_cp);
  686|  26.8k|        }
  687|  26.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.8k|            return static_cast<T*>(s.m_p);
  689|  26.8k|        }
  690|  26.8k|        else {
  691|  26.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.8k|        }
  693|  26.8k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  26.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  8.27k|        {
  662|  8.27k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   361k|    {
 3944|   361k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   361k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 290k, False: 71.1k]
  |  Branch (3945:50): [True: 25.9k, False: 264k]
  ------------------
 3946|       |
 3947|   361k|        auto it = ranges::begin(range);
 3948|   361k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   361k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   361k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 228k]
  |  |  ------------------
  ------------------
 3952|   133k|            return r.transform_error(
 3953|   133k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   133k|                                              "Invalid floating-point value"));
 3955|   133k|        }
 3956|   228k|        else {
 3957|   228k|            digits_count += ranges::distance(it, *r);
 3958|   228k|            it = *r;
 3959|   228k|        }
 3960|       |
 3961|   228k|        m_integral_part_length = digits_count;
 3962|   228k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 755, False: 227k]
  ------------------
 3963|   228k|                                             m_locale_options.decimal_point)) {
 3964|    755|            it = *r;
 3965|    755|        }
 3966|       |
 3967|   228k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 468, False: 228k]
  ------------------
 3968|   228k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    468|            digits_count += ranges::distance(it, *r);
 3970|    468|            it = *r;
 3971|    468|        }
 3972|       |
 3973|   228k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 228k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   228k|        auto beg_exp_it = it;
 3979|   228k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 182k, False: 45.9k]
  ------------------
 3980|   182k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   182k|        }
 3982|   228k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 3.45k, False: 225k]
  |  Branch (3982:29): [True: 2.81k, False: 642]
  ------------------
 3983|  2.81k|            return unexpected_scan_error(
 3984|  2.81k|                scan_error::invalid_scanned_value,
 3985|  2.81k|                "No exponent given to scientific float");
 3986|  2.81k|        }
 3987|       |
 3988|   225k|        m_kind =
 3989|   225k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 218k, False: 7.10k]
  ------------------
 3990|       |
 3991|   225k|        return it;
 3992|   228k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   590k|    {
 3774|   590k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   590k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 590k]
  |  |  |  Branch (859:45): [True: 0, False: 590k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   590k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   590k|        return read_while1_code_unit(
 3783|   590k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   590k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   590k|    {
  754|   590k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   844k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   844k|              cvref<T> obj = *get<T>(fn);
  745|   844k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   844k|                  obj(static_cast<decltype(args)>(args)...);
  747|   844k|              }
  748|   844k|              else {
  749|   844k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   844k|              }
  751|   844k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   844k|    {
  684|   844k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   844k|            return static_cast<T*>(s.m_cp);
  686|   844k|        }
  687|   844k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   844k|            return static_cast<T*>(s.m_p);
  689|   844k|        }
  690|   844k|        else {
  691|   844k|            return reinterpret_cast<T*>(s.m_fp);
  692|   844k|        }
  693|   844k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   844k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   590k|        {
  662|   590k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   281k|    {
 1577|   281k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   281k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  24.1k|        {
  662|  24.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  82.8k|    {
  754|  82.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  82.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.8k|              cvref<T> obj = *get<T>(fn);
  745|  82.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  82.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  82.8k|              }
  748|  82.8k|              else {
  749|  82.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.8k|              }
  751|  82.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  82.8k|    {
  684|  82.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  82.8k|            return static_cast<T*>(s.m_cp);
  686|  82.8k|        }
  687|  82.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  82.8k|            return static_cast<T*>(s.m_p);
  689|  82.8k|        }
  690|  82.8k|        else {
  691|  82.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  82.8k|        }
  693|  82.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  82.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  82.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  82.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  82.8k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   366k|    {
 3665|   366k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   366k|        return read_source_impl(range);
 3671|   366k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  82.8k|        {
  662|  82.8k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   107k|    {
 4170|   107k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   107k|#if !SCN_DISABLE_LOCALE
 4173|   107k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 24.1k, False: 82.8k]
  ------------------
 4174|  24.1k|            return read_impl<Range>(
 4175|  24.1k|                range, rd,
 4176|  24.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  24.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  24.1k|                },
 4179|  24.1k|                value, loc);
 4180|  24.1k|        }
 4181|  82.8k|#endif
 4182|       |
 4183|  82.8k|        return read_impl<Range>(
 4184|  82.8k|            range, rd,
 4185|  82.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  82.8k|                return r.read_source(SCN_FWD(args)...);
 4187|  82.8k|            },
 4188|  82.8k|            value);
 4189|   107k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   143k|    {
 4206|   143k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   143k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 118k]
  |  |  ------------------
  ------------------
 4208|  24.8k|            return unexpected(r.error());
 4209|  24.8k|        }
 4210|       |
 4211|   118k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.5k, False: 88.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.5k|    }                                                  \
  |  |  |  | 3671|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  88.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  88.9k|        return ranges::next(range.begin(), n);
 4213|   118k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   442k|    {
  763|   442k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   442k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  24.1k|    {
  754|  24.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  24.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.1k|              cvref<T> obj = *get<T>(fn);
  745|  24.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.1k|              }
  748|  24.1k|              else {
  749|  24.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.1k|              }
  751|  24.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  24.1k|    {
  684|  24.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.1k|            return static_cast<T*>(s.m_cp);
  686|  24.1k|        }
  687|  24.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.1k|            return static_cast<T*>(s.m_p);
  689|  24.1k|        }
  690|  24.1k|        else {
  691|  24.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.1k|        }
  693|  24.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  24.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  24.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  24.1k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  76.0k|    {
 3679|  76.0k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  76.0k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  76.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  76.0k|        return read_source_impl(range);
 3685|  76.0k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   442k|    {
 3705|   442k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   442k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   442k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   442k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 442k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   442k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   442k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   442k|        auto it = sign_result.first;
 3708|   442k|        m_sign = sign_result.second;
 3709|       |
 3710|   442k|        auto digits_begin = it;
 3711|   442k|        auto r = ranges::subrange{it, range.end()};
 3712|   442k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   442k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   442k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   884k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 442k]
  |  |  |  Branch (859:45): [True: 0, False: 442k]
  |  |  |  Branch (859:45): [True: 0, False: 442k]
  |  |  ------------------
  ------------------
 3715|   442k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   442k|            else {
 3724|   442k|                auto cb = [&](const auto& rr)
 3725|   442k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   442k|                    auto res = read_all(rr);
 3727|   442k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   442k|                        return unexpected_scan_error(
 3729|   442k|                            scan_error::invalid_scanned_value,
 3730|   442k|                            "Invalid float value");
 3731|   442k|                    }
 3732|   442k|                    return res;
 3733|   442k|                };
 3734|   442k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   442k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   442k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 75.1k, False: 367k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  75.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  75.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  75.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  75.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  75.1k|    }                                                  \
  |  | 3671|   442k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   367k|            }
 3736|   442k|        }
 3737|   367k|        else {
 3738|   367k|            SCN_TRY_ASSIGN(
 3739|   367k|                it,
 3740|   367k|                do_read_source_impl(
 3741|   367k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   367k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   367k|        }
 3744|       |
 3745|   367k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   367k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 367k, False: 0]
  |  Branch (3747:48): [True: 367k, False: 0]
  ------------------
 3748|   367k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 367k, False: 0]
  ------------------
 3749|   367k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 367k, False: 0]
  ------------------
 3750|   367k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   367k|        }
 3752|       |
 3753|   367k|        handle_separators();
 3754|       |
 3755|   367k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 367k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   367k|        return it;
 3768|   367k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   442k|    {
 3811|   442k|        auto it = range.begin();
 3812|   442k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 442k, False: 0]
  ------------------
 3813|   442k|            return unexpected(r.error());
 3814|   442k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   442k|    {
 3834|   442k|        auto it = range.begin();
 3835|   442k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 442k, False: 0]
  ------------------
 3836|   442k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   442k|                scan_error::invalid_scanned_value,
 3838|   442k|                "Invalid floating-point NaN value"));
 3839|   442k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   270k|    {
 3804|   270k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   270k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   275k|{
 1996|   275k|    auto it = read_while_code_unit(range, pred);
 1997|   275k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 172k, False: 102k]
  ------------------
 1998|   172k|        return unexpected(parse_error::error);
 1999|   172k|    }
 2000|   102k|    return it;
 2001|   275k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  54.1k|    {
 3876|  54.1k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.90k, False: 51.2k]
  ------------------
 3877|  2.90k|            auto beg_exp_it = range.begin();
 3878|  2.90k|            auto it = *r;
 3879|       |
 3880|  2.90k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.87k, False: 24]
  ------------------
 3881|  2.90k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.87k|                it = r_sign->first;
 3883|  2.87k|            }
 3884|       |
 3885|  2.90k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.90k|                    ranges::subrange{it, range.end()},
 3887|  2.90k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.90k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 420, False: 2.48k]
  |  |  ------------------
  ------------------
 3889|    420|                it = beg_exp_it;
 3890|    420|            }
 3891|  2.48k|            else {
 3892|  2.48k|                it = *r_exp;
 3893|  2.48k|            }
 3894|       |
 3895|  2.90k|            return it;
 3896|  2.90k|        }
 3897|  51.2k|        return range.begin();
 3898|  54.1k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  2.90k|    {
  754|  2.90k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  9.22k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.22k|              cvref<T> obj = *get<T>(fn);
  745|  9.22k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.22k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.22k|              }
  748|  9.22k|              else {
  749|  9.22k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.22k|              }
  751|  9.22k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  9.22k|    {
  684|  9.22k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.22k|            return static_cast<T*>(s.m_cp);
  686|  9.22k|        }
  687|  9.22k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.22k|            return static_cast<T*>(s.m_p);
  689|  9.22k|        }
  690|  9.22k|        else {
  691|  9.22k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.22k|        }
  693|  9.22k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  9.22k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  2.90k|        {
  662|  2.90k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   172k|    {
 3944|   172k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   172k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 101k, False: 71.1k]
  |  Branch (3945:50): [True: 25.9k, False: 75.1k]
  ------------------
 3946|       |
 3947|   172k|        auto it = ranges::begin(range);
 3948|   172k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   172k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   172k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.1k, False: 100k]
  |  |  ------------------
  ------------------
 3952|  72.1k|            return r.transform_error(
 3953|  72.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  72.1k|                                              "Invalid floating-point value"));
 3955|  72.1k|        }
 3956|   100k|        else {
 3957|   100k|            digits_count += ranges::distance(it, *r);
 3958|   100k|            it = *r;
 3959|   100k|        }
 3960|       |
 3961|   100k|        m_integral_part_length = digits_count;
 3962|   100k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 370, False: 99.6k]
  ------------------
 3963|   100k|                                             m_locale_options.decimal_point)) {
 3964|    370|            it = *r;
 3965|    370|        }
 3966|       |
 3967|   100k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 228, False: 99.8k]
  ------------------
 3968|   100k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    228|            digits_count += ranges::distance(it, *r);
 3970|    228|            it = *r;
 3971|    228|        }
 3972|       |
 3973|   100k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   100k|        auto beg_exp_it = it;
 3979|   100k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 54.1k, False: 45.9k]
  ------------------
 3980|  54.1k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  54.1k|        }
 3982|   100k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 3.45k, False: 96.5k]
  |  Branch (3982:29): [True: 2.81k, False: 642]
  ------------------
 3983|  2.81k|            return unexpected_scan_error(
 3984|  2.81k|                scan_error::invalid_scanned_value,
 3985|  2.81k|                "No exponent given to scientific float");
 3986|  2.81k|        }
 3987|       |
 3988|  97.2k|        m_kind =
 3989|  97.2k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 94.7k, False: 2.48k]
  ------------------
 3990|       |
 3991|  97.2k|        return it;
 3992|   100k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   272k|    {
 3774|   272k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 272k]
  |  |  |  Branch (859:45): [True: 0, False: 272k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   272k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   272k|        return read_while1_code_unit(
 3783|   272k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   272k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   272k|    {
  754|   272k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   384k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   384k|              cvref<T> obj = *get<T>(fn);
  745|   384k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   384k|                  obj(static_cast<decltype(args)>(args)...);
  747|   384k|              }
  748|   384k|              else {
  749|   384k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   384k|              }
  751|   384k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   384k|    {
  684|   384k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   384k|            return static_cast<T*>(s.m_cp);
  686|   384k|        }
  687|   384k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   384k|            return static_cast<T*>(s.m_p);
  689|   384k|        }
  690|   384k|        else {
  691|   384k|            return reinterpret_cast<T*>(s.m_fp);
  692|   384k|        }
  693|   384k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   384k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   272k|        {
  662|   272k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   442k|    {
 4000|   442k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   442k|        const bool allowed_nonhex =
 4002|   442k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   442k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   442k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 442k, False: 0]
  |  Branch (4005:45): [True: 0, False: 442k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   442k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 442k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   442k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 442k, False: 0]
  |  Branch (4014:45): [True: 0, False: 442k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   442k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 442k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   442k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 270k, False: 172k]
  |  Branch (4021:28): [True: 80.0k, False: 190k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  80.0k|            auto it = range.begin();
 4025|       |
 4026|  80.0k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 162, False: 79.9k]
  ------------------
 4027|    162|                m_kind = float_kind::hex_with_prefix;
 4028|    162|                it = *r;
 4029|    162|            }
 4030|  79.9k|            else {
 4031|  79.9k|                m_kind = float_kind::hex_without_prefix;
 4032|  79.9k|            }
 4033|       |
 4034|  80.0k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  80.0k|        }
 4036|   362k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 172k, False: 190k]
  |  Branch (4036:29): [True: 172k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   172k|            m_kind = float_kind::generic;
 4040|   172k|            return read_regular_float(range);
 4041|   172k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   190k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 390, False: 189k]
  |  |  ------------------
  ------------------
 4047|    390|            m_kind = float_kind::hex_with_prefix;
 4048|    390|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    390|        }
 4050|       |
 4051|   189k|        m_kind = float_kind::generic;
 4052|   189k|        return read_regular(range);
 4053|   190k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   270k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   270k|                    auto res = read_all(rr);
 3727|   270k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130, False: 270k]
  |  |  ------------------
  ------------------
 3728|    130|                        return unexpected_scan_error(
 3729|    130|                            scan_error::invalid_scanned_value,
 3730|    130|                            "Invalid float value");
 3731|    130|                    }
 3732|   270k|                    return res;
 3733|   270k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   270k|{
 1839|   270k|    return ranges::next(range.begin(), range.end());
 1840|   270k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   270k|    {
  313|   270k|        ranges::advance(x, bound);
  314|   270k|        return x;
  315|   270k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   270k|    {
  275|   270k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   270k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   367k|    {
 1577|   367k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   367k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   367k|    {
 1621|   367k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   367k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   367k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   367k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   367k|            m_storage.reset();
 1627|   367k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   367k|        }
 1629|   367k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   367k|                                          std::basic_string<CharT>>) {
 1631|   367k|            m_storage.emplace(SCN_FWD(range));
 1632|   367k|            m_view = string_view_type{*m_storage};
 1633|   367k|        }
 1634|   367k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   367k|                                          typename detail::basic_scan_buffer<
 1636|   367k|                                              value_t>::forward_iterator> &&
 1637|   367k|                           ranges::common_range<Range>) {
 1638|   367k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   367k|            auto end_seg = range.end().contiguous_segment();
 1640|   367k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   367k|                             detail::to_address(end_seg.end()))) {
 1642|   367k|                auto& str = m_storage.emplace();
 1643|   367k|                str.reserve(range.end().position() - range.begin().position());
 1644|   367k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   367k|                m_view = string_view_type{str};
 1646|   367k|                return;
 1647|   367k|            }
 1648|       |
 1649|   367k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   367k|                                                            end_seg.data());
 1651|   367k|            m_storage.reset();
 1652|   367k|        }
 1653|   367k|        else {
 1654|   367k|            auto& str = m_storage.emplace();
 1655|   367k|            if constexpr (ranges::sized_range<Range>) {
 1656|   367k|                str.reserve(range.size());
 1657|   367k|            }
 1658|   367k|            if constexpr (ranges::common_range<Range>) {
 1659|   367k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   367k|                          std::back_inserter(str));
 1661|   367k|            }
 1662|   367k|            else {
 1663|   367k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   367k|                     ++it) {
 1665|   367k|                    str.push_back(*it);
 1666|   367k|                }
 1667|   367k|            }
 1668|   367k|            m_view = string_view_type{str};
 1669|   367k|        }
 1670|   367k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  24.1k|        {
  662|  24.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  82.8k|    {
  754|  82.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  82.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.8k|              cvref<T> obj = *get<T>(fn);
  745|  82.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  82.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  82.8k|              }
  748|  82.8k|              else {
  749|  82.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.8k|              }
  751|  82.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  82.8k|    {
  684|  82.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  82.8k|            return static_cast<T*>(s.m_cp);
  686|  82.8k|        }
  687|  82.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  82.8k|            return static_cast<T*>(s.m_p);
  689|  82.8k|        }
  690|  82.8k|        else {
  691|  82.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  82.8k|        }
  693|  82.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  82.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  82.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  82.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  82.8k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   366k|    {
 3665|   366k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   366k|        return read_source_impl(range);
 3671|   366k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  82.8k|        {
  662|  82.8k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   110k|    {
 6193|   110k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   110k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   110k|            auto rd = make_reader<T, char_type>();
 6198|   110k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   110k|                return unexpected(e);
 6200|   110k|            }
 6201|       |
 6202|   110k|            return impl(rd, range, value);
 6203|   110k|        }
 6204|   110k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   110k|            auto rd = make_reader<T, char_type>();
 6206|   110k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   110k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 110k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   110k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   110k|                return impl(rd, range, value);
 6213|   110k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   110k|        else {
 6221|   110k|            SCN_EXPECT(false);
 6222|   110k|            SCN_UNREACHABLE;
 6223|   110k|        }
 6224|   110k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   110k|    {
 6124|   110k|        const bool need_skipped_width =
 6125|   110k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 110k]
  |  Branch (6125:33): [True: 0, False: 110k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   110k|        auto it = rng.begin();
 6129|   110k|        std::ptrdiff_t prefix_width = 0;
 6130|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 110k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   110k|        else {
 6138|   110k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 810, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    810|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    810|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    810|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    810|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    810|    }                                                  \
  |  |  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   109k|            std::tie(it, prefix_width) = prefix_result;
 6140|   109k|        }
 6141|   109k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   109k|        std::ptrdiff_t value_width = 0;
 6145|   109k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 109k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   109k|        else {
 6161|   109k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.8k, False: 68.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.8k|    }                                                  \
  |  | 3671|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  68.0k|                                             specs, value, loc));
 6163|       |
 6164|  68.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 68.0k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  68.0k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  68.0k|        std::ptrdiff_t postfix_width = 0;
 6173|  68.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 67.6k, False: 334]
  ------------------
 6174|  67.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  67.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  67.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  67.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 67.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  67.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  67.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  67.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  67.6k|                                 value_width));
 6178|  67.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  67.6k|        }
 6180|       |
 6181|  68.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  68.0k|                                                 value_width, postfix_width);
 6183|  68.0k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 68.0k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  68.0k|        return it;
 6188|  68.0k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   217k|    {
 3691|   217k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   217k|        const std::ptrdiff_t sign_len =
 3694|   217k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 709, False: 217k]
  ------------------
 3695|       |
 3696|   217k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.9k, False: 187k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.9k|    }                                                  \
  |  |  |  | 3671|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   187k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   217k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   109k|    {
 4170|   109k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   109k|#if !SCN_DISABLE_LOCALE
 4173|   109k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 25.5k, False: 84.2k]
  ------------------
 4174|  25.5k|            return read_impl<Range>(
 4175|  25.5k|                range, rd,
 4176|  25.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  25.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  25.5k|                },
 4179|  25.5k|                value, loc);
 4180|  25.5k|        }
 4181|  84.2k|#endif
 4182|       |
 4183|  84.2k|        return read_impl<Range>(
 4184|  84.2k|            range, rd,
 4185|  84.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  84.2k|                return r.read_source(SCN_FWD(args)...);
 4187|  84.2k|            },
 4188|  84.2k|            value);
 4189|   109k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   148k|    {
 4206|   148k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   148k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.6k, False: 94.5k]
  |  |  ------------------
  ------------------
 4208|  53.6k|            return unexpected(r.error());
 4209|  53.6k|        }
 4210|       |
 4211|  94.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  94.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  94.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  94.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 697, False: 93.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    697|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    697|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    697|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    697|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    697|    }                                                  \
  |  |  |  | 3671|  94.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  93.8k|        return ranges::next(range.begin(), n);
 4213|  94.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  25.5k|    {
  754|  25.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  25.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.5k|              cvref<T> obj = *get<T>(fn);
  745|  25.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.5k|              }
  748|  25.5k|              else {
  749|  25.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.5k|              }
  751|  25.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  25.5k|    {
  684|  25.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.5k|            return static_cast<T*>(s.m_cp);
  686|  25.5k|        }
  687|  25.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.5k|            return static_cast<T*>(s.m_p);
  689|  25.5k|        }
  690|  25.5k|        else {
  691|  25.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.5k|        }
  693|  25.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  25.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  25.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  25.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  25.5k|        {
  662|  25.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  84.2k|    {
  754|  84.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  84.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  84.2k|              cvref<T> obj = *get<T>(fn);
  745|  84.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  84.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  84.2k|              }
  748|  84.2k|              else {
  749|  84.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  84.2k|              }
  751|  84.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  84.2k|    {
  684|  84.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  84.2k|            return static_cast<T*>(s.m_cp);
  686|  84.2k|        }
  687|  84.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  84.2k|            return static_cast<T*>(s.m_p);
  689|  84.2k|        }
  690|  84.2k|        else {
  691|  84.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  84.2k|        }
  693|  84.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  84.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  84.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  84.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  84.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  84.2k|        {
  662|  84.2k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   109k|    {
 4170|   109k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   109k|#if !SCN_DISABLE_LOCALE
 4173|   109k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 25.5k, False: 84.3k]
  ------------------
 4174|  25.5k|            return read_impl<Range>(
 4175|  25.5k|                range, rd,
 4176|  25.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  25.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  25.5k|                },
 4179|  25.5k|                value, loc);
 4180|  25.5k|        }
 4181|  84.3k|#endif
 4182|       |
 4183|  84.3k|        return read_impl<Range>(
 4184|  84.3k|            range, rd,
 4185|  84.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  84.3k|                return r.read_source(SCN_FWD(args)...);
 4187|  84.3k|            },
 4188|  84.3k|            value);
 4189|   109k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   148k|    {
 4206|   148k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   148k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 123k]
  |  |  ------------------
  ------------------
 4208|  25.0k|            return unexpected(r.error());
 4209|  25.0k|        }
 4210|       |
 4211|   123k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   123k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.2k, False: 93.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.2k|    }                                                  \
  |  |  |  | 3671|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  93.9k|        return ranges::next(range.begin(), n);
 4213|   123k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  25.5k|    {
  754|  25.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  25.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.5k|              cvref<T> obj = *get<T>(fn);
  745|  25.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.5k|              }
  748|  25.5k|              else {
  749|  25.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.5k|              }
  751|  25.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  25.5k|    {
  684|  25.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.5k|            return static_cast<T*>(s.m_cp);
  686|  25.5k|        }
  687|  25.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.5k|            return static_cast<T*>(s.m_p);
  689|  25.5k|        }
  690|  25.5k|        else {
  691|  25.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.5k|        }
  693|  25.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  25.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  25.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  25.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  25.5k|        {
  662|  25.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  84.3k|    {
  754|  84.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  84.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  84.3k|              cvref<T> obj = *get<T>(fn);
  745|  84.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  84.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  84.3k|              }
  748|  84.3k|              else {
  749|  84.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  84.3k|              }
  751|  84.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  84.3k|    {
  684|  84.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  84.3k|            return static_cast<T*>(s.m_cp);
  686|  84.3k|        }
  687|  84.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  84.3k|            return static_cast<T*>(s.m_p);
  689|  84.3k|        }
  690|  84.3k|        else {
  691|  84.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  84.3k|        }
  693|  84.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  84.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  84.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  84.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  84.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  84.3k|        {
  662|  84.3k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   112k|    {
 6193|   112k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   112k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   112k|            auto rd = make_reader<T, char_type>();
 6198|   112k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   112k|                return unexpected(e);
 6200|   112k|            }
 6201|       |
 6202|   112k|            return impl(rd, range, value);
 6203|   112k|        }
 6204|   112k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   112k|            auto rd = make_reader<T, char_type>();
 6206|   112k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   112k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 112k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   112k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   112k|                return impl(rd, range, value);
 6213|   112k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   112k|        else {
 6221|   112k|            SCN_EXPECT(false);
 6222|   112k|            SCN_UNREACHABLE;
 6223|   112k|        }
 6224|   112k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   112k|    {
 6124|   112k|        const bool need_skipped_width =
 6125|   112k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 112k]
  |  Branch (6125:33): [True: 0, False: 112k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   112k|        auto it = rng.begin();
 6129|   112k|        std::ptrdiff_t prefix_width = 0;
 6130|   112k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 112k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   112k|        else {
 6138|   112k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 834, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    834|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    834|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    834|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    834|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    834|    }                                                  \
  |  |  |  | 3671|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   111k|            std::tie(it, prefix_width) = prefix_result;
 6140|   111k|        }
 6141|   111k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   111k|        std::ptrdiff_t value_width = 0;
 6145|   111k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 111k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   111k|        else {
 6161|   111k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.7k, False: 69.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.7k|    }                                                  \
  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  69.5k|                                             specs, value, loc));
 6163|       |
 6164|  69.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 69.5k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  69.5k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  69.5k|        std::ptrdiff_t postfix_width = 0;
 6173|  69.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 69.2k, False: 348]
  ------------------
 6174|  69.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  69.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 69.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  69.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  69.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  69.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  69.2k|                                 value_width));
 6178|  69.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  69.2k|        }
 6180|       |
 6181|  69.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  69.5k|                                                 value_width, postfix_width);
 6183|  69.5k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 69.5k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  69.5k|        return it;
 6188|  69.5k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   222k|    {
 3691|   222k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   222k|        const std::ptrdiff_t sign_len =
 3694|   222k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 714, False: 221k]
  ------------------
 3695|       |
 3696|   222k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.1k, False: 193k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.1k|    }                                                  \
  |  |  |  | 3671|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   193k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   222k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   111k|    {
 4170|   111k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   111k|#if !SCN_DISABLE_LOCALE
 4173|   111k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 26.2k, False: 85.0k]
  ------------------
 4174|  26.2k|            return read_impl<Range>(
 4175|  26.2k|                range, rd,
 4176|  26.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  26.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  26.2k|                },
 4179|  26.2k|                value, loc);
 4180|  26.2k|        }
 4181|  85.0k|#endif
 4182|       |
 4183|  85.0k|        return read_impl<Range>(
 4184|  85.0k|            range, rd,
 4185|  85.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  85.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  85.0k|            },
 4188|  85.0k|            value);
 4189|   111k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   150k|    {
 4206|   150k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   150k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.2k, False: 96.5k]
  |  |  ------------------
  ------------------
 4208|  54.2k|            return unexpected(r.error());
 4209|  54.2k|        }
 4210|       |
 4211|  96.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  96.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  96.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  96.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 73, False: 96.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     73|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     73|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     73|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     73|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     73|    }                                                  \
  |  |  |  | 3671|  96.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  96.4k|        return ranges::next(range.begin(), n);
 4213|  96.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  26.2k|    {
  754|  26.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  26.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.2k|              cvref<T> obj = *get<T>(fn);
  745|  26.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.2k|              }
  748|  26.2k|              else {
  749|  26.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.2k|              }
  751|  26.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.2k|    {
  684|  26.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.2k|            return static_cast<T*>(s.m_cp);
  686|  26.2k|        }
  687|  26.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.2k|            return static_cast<T*>(s.m_p);
  689|  26.2k|        }
  690|  26.2k|        else {
  691|  26.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.2k|        }
  693|  26.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  26.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  26.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  26.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  26.2k|        {
  662|  26.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  85.0k|    {
  754|  85.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  85.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.0k|              cvref<T> obj = *get<T>(fn);
  745|  85.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  85.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  85.0k|              }
  748|  85.0k|              else {
  749|  85.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.0k|              }
  751|  85.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  85.0k|    {
  684|  85.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  85.0k|            return static_cast<T*>(s.m_cp);
  686|  85.0k|        }
  687|  85.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  85.0k|            return static_cast<T*>(s.m_p);
  689|  85.0k|        }
  690|  85.0k|        else {
  691|  85.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  85.0k|        }
  693|  85.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  85.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  85.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  85.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  85.0k|        {
  662|  85.0k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   111k|    {
 4170|   111k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   111k|#if !SCN_DISABLE_LOCALE
 4173|   111k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 26.3k, False: 85.0k]
  ------------------
 4174|  26.3k|            return read_impl<Range>(
 4175|  26.3k|                range, rd,
 4176|  26.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  26.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  26.3k|                },
 4179|  26.3k|                value, loc);
 4180|  26.3k|        }
 4181|  85.0k|#endif
 4182|       |
 4183|  85.0k|        return read_impl<Range>(
 4184|  85.0k|            range, rd,
 4185|  85.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  85.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  85.0k|            },
 4188|  85.0k|            value);
 4189|   111k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   150k|    {
 4206|   150k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   150k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.2k, False: 125k]
  |  |  ------------------
  ------------------
 4208|  25.2k|            return unexpected(r.error());
 4209|  25.2k|        }
 4210|       |
 4211|   125k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.0k, False: 96.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.0k|    }                                                  \
  |  |  |  | 3671|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  96.5k|        return ranges::next(range.begin(), n);
 4213|   125k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  26.3k|    {
  754|  26.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  26.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.3k|              cvref<T> obj = *get<T>(fn);
  745|  26.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.3k|              }
  748|  26.3k|              else {
  749|  26.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.3k|              }
  751|  26.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.3k|    {
  684|  26.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.3k|            return static_cast<T*>(s.m_cp);
  686|  26.3k|        }
  687|  26.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.3k|            return static_cast<T*>(s.m_p);
  689|  26.3k|        }
  690|  26.3k|        else {
  691|  26.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.3k|        }
  693|  26.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  26.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  26.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  26.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  26.3k|        {
  662|  26.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  85.0k|    {
  754|  85.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  85.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.0k|              cvref<T> obj = *get<T>(fn);
  745|  85.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  85.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  85.0k|              }
  748|  85.0k|              else {
  749|  85.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.0k|              }
  751|  85.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  85.0k|    {
  684|  85.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  85.0k|            return static_cast<T*>(s.m_cp);
  686|  85.0k|        }
  687|  85.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  85.0k|            return static_cast<T*>(s.m_p);
  689|  85.0k|        }
  690|  85.0k|        else {
  691|  85.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  85.0k|        }
  693|  85.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  85.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  85.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  85.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  85.0k|        {
  662|  85.0k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   445k|{
 2061|   445k|    auto it = range.begin();
 2062|   733k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 730k, False: 2.87k]
  ------------------
 2063|   730k|        const auto val =
 2064|   730k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   730k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   730k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 730k, False: 0]
  |  |  ------------------
  ------------------
 2066|   730k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   730k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   730k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 442k, False: 288k]
  ------------------
 2069|   442k|                return it;
 2070|   442k|            }
 2071|   730k|        }
 2072|   288k|        it = val.iterator;
 2073|   288k|    }
 2074|       |
 2075|  2.87k|    return it;
 2076|   445k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   730k|{
 1899|   730k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   730k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   730k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   730k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   730k|    auto it = range.begin();
 1903|   730k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   730k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 730k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   730k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 730k, False: 0]
  ------------------
 1912|   730k|        ++it;
 1913|   730k|        return {it, string_type(1, *range.begin())};
 1914|   730k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   730k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   730k|    {
 1890|   730k|        return !codepoint.empty();
 1891|   730k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   445k|{
 2082|   445k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   445k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   445k|{
 2951|   445k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 445k, False: 0]
  ------------------
 2952|   445k|        auto it = read_while_classic_space(range);
 2953|   445k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   445k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.87k, False: 442k]
  |  |  ------------------
  ------------------
 2955|  2.87k|            return unexpected(e);
 2956|  2.87k|        }
 2957|       |
 2958|   442k|        return it;
 2959|   445k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   445k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   445k|{
 2117|   445k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   445k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   445k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   445k|        auto buf = make_contiguous_buffer(range);
 2121|   445k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   445k|        return ranges::next(range.begin(),
 2123|   445k|                            ranges::distance(buf.view().begin(), it));
 2124|   445k|    }
 2125|   445k|    else {
 2126|   445k|        auto it = range.begin();
 2127|       |
 2128|   445k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   445k|            auto seg = get_contiguous_beginning(range);
 2130|   445k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   445k|                seg_it != seg.end()) {
 2132|   445k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   445k|            }
 2134|   445k|            ranges::advance(it, seg.size());
 2135|   445k|        }
 2136|       |
 2137|   445k|        return read_while_code_point(
 2138|   445k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   445k|    }
 2140|   445k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   445k|    {
  754|   445k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   730k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   730k|              cvref<T> obj = *get<T>(fn);
  745|   730k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   730k|                  obj(static_cast<decltype(args)>(args)...);
  747|   730k|              }
  748|   730k|              else {
  749|   730k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   730k|              }
  751|   730k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   730k|    {
  684|   730k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   730k|            return static_cast<T*>(s.m_cp);
  686|   730k|        }
  687|   730k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   730k|            return static_cast<T*>(s.m_p);
  689|   730k|        }
  690|   730k|        else {
  691|   730k|            return reinterpret_cast<T*>(s.m_fp);
  692|   730k|        }
  693|   730k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   730k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   445k|        {
  662|   445k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   922k|{
 2088|   922k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   922k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   922k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   922k|        auto buf = make_contiguous_buffer(range);
 2092|   922k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   922k|        return ranges::next(range.begin(),
 2094|   922k|                            ranges::distance(buf.view().begin(), it));
 2095|   922k|    }
 2096|   922k|    else {
 2097|   922k|        auto it = range.begin();
 2098|       |
 2099|   922k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   922k|            auto seg = get_contiguous_beginning(range);
 2101|   922k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   922k|                seg_it != seg.end()) {
 2103|   922k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   922k|            }
 2105|   922k|            ranges::advance(it, seg.size());
 2106|   922k|        }
 2107|       |
 2108|   922k|        return read_until_code_point(
 2109|   922k|            ranges::subrange{it, range.end()},
 2110|   922k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   922k|    }
 2112|   922k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|   922k|{
 1683|   922k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   922k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   922k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   922k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   922k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   922k|    }
 1688|   922k|    else {
 1689|   922k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   922k|    }
 1691|   922k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|   922k|    {
 1490|   922k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|   922k|    {
 1577|   922k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   922k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   922k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|   922k|    {
 1621|   922k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   922k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   922k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   922k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   922k|            m_storage.reset();
 1627|   922k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   922k|        }
 1629|   922k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   922k|                                          std::basic_string<CharT>>) {
 1631|   922k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   922k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   922k|            m_view = string_view_type{*m_storage};
 1633|   922k|        }
 1634|   922k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   922k|                                          typename detail::basic_scan_buffer<
 1636|   922k|                                              value_t>::forward_iterator> &&
 1637|   922k|                           ranges::common_range<Range>) {
 1638|   922k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   922k|            auto end_seg = range.end().contiguous_segment();
 1640|   922k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   922k|                             detail::to_address(end_seg.end()))) {
 1642|   922k|                auto& str = m_storage.emplace();
 1643|   922k|                str.reserve(range.end().position() - range.begin().position());
 1644|   922k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   922k|                m_view = string_view_type{str};
 1646|   922k|                return;
 1647|   922k|            }
 1648|       |
 1649|   922k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   922k|                                                            end_seg.data());
 1651|   922k|            m_storage.reset();
 1652|   922k|        }
 1653|   922k|        else {
 1654|   922k|            auto& str = m_storage.emplace();
 1655|   922k|            if constexpr (ranges::sized_range<Range>) {
 1656|   922k|                str.reserve(range.size());
 1657|   922k|            }
 1658|   922k|            if constexpr (ranges::common_range<Range>) {
 1659|   922k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   922k|                          std::back_inserter(str));
 1661|   922k|            }
 1662|   922k|            else {
 1663|   922k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   922k|                     ++it) {
 1665|   922k|                    str.push_back(*it);
 1666|   922k|                }
 1667|   922k|            }
 1668|   922k|            m_view = string_view_type{str};
 1669|   922k|        }
 1670|   922k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|   673k|    {
 4100|   673k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 77.1k, False: 596k]
  ------------------
 4101|  77.1k|            return std::copysign(value, T{-1.0});
 4102|  77.1k|        }
 4103|   596k|        return std::copysign(value, T{1.0});
 4104|   673k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   265k|{
 2088|   265k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   265k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   265k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   265k|        auto buf = make_contiguous_buffer(range);
 2092|   265k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   265k|        return ranges::next(range.begin(),
 2094|   265k|                            ranges::distance(buf.view().begin(), it));
 2095|   265k|    }
 2096|   265k|    else {
 2097|   265k|        auto it = range.begin();
 2098|       |
 2099|   265k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   265k|            auto seg = get_contiguous_beginning(range);
 2101|   265k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   265k|                seg_it != seg.end()) {
 2103|   265k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   265k|            }
 2105|   265k|            ranges::advance(it, seg.size());
 2106|   265k|        }
 2107|       |
 2108|   265k|        return read_until_code_point(
 2109|   265k|            ranges::subrange{it, range.end()},
 2110|   265k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   265k|    }
 2112|   265k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|   265k|    {
  754|   265k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   491k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   491k|              cvref<T> obj = *get<T>(fn);
  745|   491k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   491k|                  obj(static_cast<decltype(args)>(args)...);
  747|   491k|              }
  748|   491k|              else {
  749|   491k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   491k|              }
  751|   491k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   491k|    {
  684|   491k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   491k|            return static_cast<T*>(s.m_cp);
  686|   491k|        }
  687|   491k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   491k|            return static_cast<T*>(s.m_p);
  689|   491k|        }
  690|   491k|        else {
  691|   491k|            return reinterpret_cast<T*>(s.m_fp);
  692|   491k|        }
  693|   491k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   491k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|   265k|        {
  662|   265k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|   265k|    {
 1577|   265k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   265k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   265k|    {
 1621|   265k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   265k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   265k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   265k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   265k|            m_storage.reset();
 1627|   265k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   265k|        }
 1629|   265k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   265k|                                          std::basic_string<CharT>>) {
 1631|   265k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   265k|            m_view = string_view_type{*m_storage};
 1633|   265k|        }
 1634|   265k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   265k|                                          typename detail::basic_scan_buffer<
 1636|   265k|                                              value_t>::forward_iterator> &&
 1637|   265k|                           ranges::common_range<Range>) {
 1638|   265k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   265k|            auto end_seg = range.end().contiguous_segment();
 1640|   265k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   265k|                             detail::to_address(end_seg.end()))) {
 1642|   265k|                auto& str = m_storage.emplace();
 1643|   265k|                str.reserve(range.end().position() - range.begin().position());
 1644|   265k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   265k|                m_view = string_view_type{str};
 1646|   265k|                return;
 1647|   265k|            }
 1648|       |
 1649|   265k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   265k|                                                            end_seg.data());
 1651|   265k|            m_storage.reset();
 1652|   265k|        }
 1653|   265k|        else {
 1654|   265k|            auto& str = m_storage.emplace();
 1655|   265k|            if constexpr (ranges::sized_range<Range>) {
 1656|   265k|                str.reserve(range.size());
 1657|   265k|            }
 1658|   265k|            if constexpr (ranges::common_range<Range>) {
 1659|   265k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   265k|                          std::back_inserter(str));
 1661|   265k|            }
 1662|   265k|            else {
 1663|   265k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   265k|                     ++it) {
 1665|   265k|                    str.push_back(*it);
 1666|   265k|                }
 1667|   265k|            }
 1668|   265k|            m_view = string_view_type{str};
 1669|   265k|        }
 1670|   265k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   208k|    {
 4100|   208k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 504, False: 208k]
  ------------------
 4101|    504|            return std::copysign(value, T{-1.0});
 4102|    504|        }
 4103|   208k|        return std::copysign(value, T{1.0});
 4104|   208k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|   699k|    {
 4100|   699k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 79.7k, False: 620k]
  ------------------
 4101|  79.7k|            return std::copysign(value, T{-1.0});
 4102|  79.7k|        }
 4103|   620k|        return std::copysign(value, T{1.0});
 4104|   699k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   217k|    {
 4100|   217k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 518, False: 217k]
  ------------------
 4101|    518|            return std::copysign(value, T{-1.0});
 4102|    518|        }
 4103|   217k|        return std::copysign(value, T{1.0});
 4104|   217k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|   706k|    {
 4100|   706k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 81.9k, False: 624k]
  ------------------
 4101|  81.9k|            return std::copysign(value, T{-1.0});
 4102|  81.9k|        }
 4103|   624k|        return std::copysign(value, T{1.0});
 4104|   706k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   222k|    {
 4100|   222k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 523, False: 221k]
  ------------------
 4101|    523|            return std::copysign(value, T{-1.0});
 4102|    523|        }
 4103|   221k|        return std::copysign(value, T{1.0});
 4104|   222k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   305k|{
 5795|   305k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.99k, False: 301k]
  |  |  ------------------
  ------------------
 5796|  3.99k|        return unexpected(e);
 5797|  3.99k|    }
 5798|       |
 5799|   301k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 301k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   301k|    return skip_classic_whitespace(range);
 5804|   301k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|  98.0k|    {
 5871|  98.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  98.0k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  98.0k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  98.0k|            auto rd = make_reader<T, char_type>();
 5876|  98.0k|            return impl(rd, range, value);
 5877|  98.0k|        }
 5878|  98.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  98.0k|            auto rd = make_reader<T, char_type>();
 5880|  98.0k|            if (!is_segment_contiguous(range)) {
 5881|  98.0k|                return impl(rd, range, value);
 5882|  98.0k|            }
 5883|  98.0k|            auto crange = get_as_contiguous(range);
 5884|  98.0k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  98.0k|            return ranges::next(range.begin(),
 5886|  98.0k|                                ranges::distance(crange.begin(), it));
 5887|  98.0k|        }
 5888|  98.0k|        else {
 5889|  98.0k|            SCN_EXPECT(false);
 5890|  98.0k|            SCN_UNREACHABLE;
 5891|  98.0k|        }
 5892|  98.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  98.0k|    {
 5863|  98.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  98.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  98.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  98.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.32k, False: 96.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.32k|    }                                                  \
  |  |  |  | 3671|  98.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  96.7k|                        .transform_error(make_eof_scan_error));
 5865|  96.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  98.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  96.7k|    {
 4152|  96.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  96.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  96.7k|        float_reader<CharT> rd{};
 4155|  96.7k|        return read_impl<Range>(
 4156|  96.7k|            range, rd,
 4157|  96.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  96.7k|                return r.read_source(SCN_FWD(args)...);
 4159|  96.7k|            },
 4160|  96.7k|            value);
 4161|  96.7k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|   627k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|   855k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  96.7k|    {
  754|  96.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  96.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.7k|              cvref<T> obj = *get<T>(fn);
  745|  96.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  96.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  96.7k|              }
  748|  96.7k|              else {
  749|  96.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.7k|              }
  751|  96.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  96.7k|    {
  684|  96.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  96.7k|            return static_cast<T*>(s.m_cp);
  686|  96.7k|        }
  687|  96.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  96.7k|            return static_cast<T*>(s.m_p);
  689|  96.7k|        }
  690|  96.7k|        else {
  691|  96.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  96.7k|        }
  693|  96.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  96.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  96.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  96.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  96.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  96.7k|        {
  662|  96.7k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   102k|    {
 5871|   102k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   102k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   102k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   102k|            auto rd = make_reader<T, char_type>();
 5876|   102k|            return impl(rd, range, value);
 5877|   102k|        }
 5878|   102k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   102k|            auto rd = make_reader<T, char_type>();
 5880|   102k|            if (!is_segment_contiguous(range)) {
 5881|   102k|                return impl(rd, range, value);
 5882|   102k|            }
 5883|   102k|            auto crange = get_as_contiguous(range);
 5884|   102k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   102k|            return ranges::next(range.begin(),
 5886|   102k|                                ranges::distance(crange.begin(), it));
 5887|   102k|        }
 5888|   102k|        else {
 5889|   102k|            SCN_EXPECT(false);
 5890|   102k|            SCN_UNREACHABLE;
 5891|   102k|        }
 5892|   102k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   102k|    {
 5863|   102k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.51k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.51k|    }                                                  \
  |  |  |  | 3671|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   101k|                        .transform_error(make_eof_scan_error));
 5865|   101k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   102k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   101k|    {
 4152|   101k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   101k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   101k|        float_reader<CharT> rd{};
 4155|   101k|        return read_impl<Range>(
 4156|   101k|            range, rd,
 4157|   101k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   101k|                return r.read_source(SCN_FWD(args)...);
 4159|   101k|            },
 4160|   101k|            value);
 4161|   101k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   101k|    {
  754|   101k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   101k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   101k|              cvref<T> obj = *get<T>(fn);
  745|   101k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   101k|                  obj(static_cast<decltype(args)>(args)...);
  747|   101k|              }
  748|   101k|              else {
  749|   101k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   101k|              }
  751|   101k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   101k|    {
  684|   101k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   101k|            return static_cast<T*>(s.m_cp);
  686|   101k|        }
  687|   101k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   101k|            return static_cast<T*>(s.m_p);
  689|   101k|        }
  690|   101k|        else {
  691|   101k|            return reinterpret_cast<T*>(s.m_fp);
  692|   101k|        }
  693|   101k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   101k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   101k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   101k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   101k|        {
  662|   101k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   104k|    {
 5871|   104k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   104k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   104k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   104k|            auto rd = make_reader<T, char_type>();
 5876|   104k|            return impl(rd, range, value);
 5877|   104k|        }
 5878|   104k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   104k|            auto rd = make_reader<T, char_type>();
 5880|   104k|            if (!is_segment_contiguous(range)) {
 5881|   104k|                return impl(rd, range, value);
 5882|   104k|            }
 5883|   104k|            auto crange = get_as_contiguous(range);
 5884|   104k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   104k|            return ranges::next(range.begin(),
 5886|   104k|                                ranges::distance(crange.begin(), it));
 5887|   104k|        }
 5888|   104k|        else {
 5889|   104k|            SCN_EXPECT(false);
 5890|   104k|            SCN_UNREACHABLE;
 5891|   104k|        }
 5892|   104k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   104k|    {
 5863|   104k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.64k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.64k|    }                                                  \
  |  |  |  | 3671|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   102k|                        .transform_error(make_eof_scan_error));
 5865|   102k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   104k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   102k|    {
 4152|   102k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   102k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   102k|        float_reader<CharT> rd{};
 4155|   102k|        return read_impl<Range>(
 4156|   102k|            range, rd,
 4157|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   102k|                return r.read_source(SCN_FWD(args)...);
 4159|   102k|            },
 4160|   102k|            value);
 4161|   102k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   102k|    {
  684|   102k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   102k|            return static_cast<T*>(s.m_cp);
  686|   102k|        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   102k|            return static_cast<T*>(s.m_p);
  689|   102k|        }
  690|   102k|        else {
  691|   102k|            return reinterpret_cast<T*>(s.m_fp);
  692|   102k|        }
  693|   102k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   102k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   102k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   331k|{
 5795|   331k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.08k, False: 327k]
  |  |  ------------------
  ------------------
 5796|  4.08k|        return unexpected(e);
 5797|  4.08k|    }
 5798|       |
 5799|   327k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 327k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   327k|    return skip_classic_whitespace(range);
 5804|   327k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   106k|    {
 5871|   106k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   106k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   106k|            auto rd = make_reader<T, char_type>();
 5876|   106k|            return impl(rd, range, value);
 5877|   106k|        }
 5878|   106k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   106k|            auto rd = make_reader<T, char_type>();
 5880|   106k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 106k, False: 0]
  ------------------
 5881|   106k|                return impl(rd, range, value);
 5882|   106k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   106k|        else {
 5889|   106k|            SCN_EXPECT(false);
 5890|   106k|            SCN_UNREACHABLE;
 5891|   106k|        }
 5892|   106k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   106k|    {
 5863|   106k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.36k|    }                                                  \
  |  |  |  | 3671|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   105k|                        .transform_error(make_eof_scan_error));
 5865|   105k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   106k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   105k|    {
 4152|   105k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   105k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   105k|        float_reader<CharT> rd{};
 4155|   105k|        return read_impl<Range>(
 4156|   105k|            range, rd,
 4157|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   105k|                return r.read_source(SCN_FWD(args)...);
 4159|   105k|            },
 4160|   105k|            value);
 4161|   105k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   105k|    {
  754|   105k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|   105k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   105k|                  obj(static_cast<decltype(args)>(args)...);
  747|   105k|              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   105k|    {
  684|   105k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   105k|            return static_cast<T*>(s.m_cp);
  686|   105k|        }
  687|   105k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   105k|            return static_cast<T*>(s.m_p);
  689|   105k|        }
  690|   105k|        else {
  691|   105k|            return reinterpret_cast<T*>(s.m_fp);
  692|   105k|        }
  693|   105k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   105k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   105k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   105k|        {
  662|   105k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   111k|    {
 5871|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   111k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   111k|            auto rd = make_reader<T, char_type>();
 5876|   111k|            return impl(rd, range, value);
 5877|   111k|        }
 5878|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   111k|            auto rd = make_reader<T, char_type>();
 5880|   111k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 111k, False: 0]
  ------------------
 5881|   111k|                return impl(rd, range, value);
 5882|   111k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   111k|        else {
 5889|   111k|            SCN_EXPECT(false);
 5890|   111k|            SCN_UNREACHABLE;
 5891|   111k|        }
 5892|   111k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   111k|    {
 5863|   111k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.55k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.55k|    }                                                  \
  |  |  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   110k|                        .transform_error(make_eof_scan_error));
 5865|   110k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   111k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   110k|    {
 4152|   110k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   110k|        float_reader<CharT> rd{};
 4155|   110k|        return read_impl<Range>(
 4156|   110k|            range, rd,
 4157|   110k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   110k|                return r.read_source(SCN_FWD(args)...);
 4159|   110k|            },
 4160|   110k|            value);
 4161|   110k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   110k|    {
  754|   110k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|   110k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   110k|                  obj(static_cast<decltype(args)>(args)...);
  747|   110k|              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   110k|    {
  684|   110k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   110k|            return static_cast<T*>(s.m_cp);
  686|   110k|        }
  687|   110k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   110k|            return static_cast<T*>(s.m_p);
  689|   110k|        }
  690|   110k|        else {
  691|   110k|            return reinterpret_cast<T*>(s.m_fp);
  692|   110k|        }
  693|   110k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   110k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   110k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   110k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   110k|        {
  662|   110k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   112k|    {
 5871|   112k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   112k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   112k|            auto rd = make_reader<T, char_type>();
 5876|   112k|            return impl(rd, range, value);
 5877|   112k|        }
 5878|   112k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   112k|            auto rd = make_reader<T, char_type>();
 5880|   112k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 112k, False: 0]
  ------------------
 5881|   112k|                return impl(rd, range, value);
 5882|   112k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   112k|        else {
 5889|   112k|            SCN_EXPECT(false);
 5890|   112k|            SCN_UNREACHABLE;
 5891|   112k|        }
 5892|   112k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   112k|    {
 5863|   112k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.67k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.67k|    }                                                  \
  |  |  |  | 3671|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   111k|                        .transform_error(make_eof_scan_error));
 5865|   111k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   112k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   111k|    {
 4152|   111k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   111k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   111k|        float_reader<CharT> rd{};
 4155|   111k|        return read_impl<Range>(
 4156|   111k|            range, rd,
 4157|   111k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   111k|                return r.read_source(SCN_FWD(args)...);
 4159|   111k|            },
 4160|   111k|            value);
 4161|   111k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   111k|    {
  754|   111k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   111k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   111k|              cvref<T> obj = *get<T>(fn);
  745|   111k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   111k|                  obj(static_cast<decltype(args)>(args)...);
  747|   111k|              }
  748|   111k|              else {
  749|   111k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   111k|              }
  751|   111k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   111k|    {
  684|   111k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   111k|            return static_cast<T*>(s.m_cp);
  686|   111k|        }
  687|   111k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   111k|            return static_cast<T*>(s.m_p);
  689|   111k|        }
  690|   111k|        else {
  691|   111k|            return reinterpret_cast<T*>(s.m_fp);
  692|   111k|        }
  693|   111k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   111k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   111k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   111k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   111k|        {
  662|   111k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   727k|    {
 2879|   727k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  2.11M|    {
 2883|  2.11M|        return m_current;
 2884|  2.11M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  1.39M|    {
 2888|  1.39M|        return m_range.end();
 2889|  1.39M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   663k|    {
 2903|   663k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   663k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   663k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   663k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   663k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 663k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   663k|        }
 2909|   663k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   663k|    static_cast<    \
  |  |  929|   663k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   663k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   727k|    {
 2893|   727k|        return ranges::subrange{begin(), end()};
 2894|   727k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   727k|    {
 6037|   727k|        const bool need_skipped_width =
 6038|   727k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 727k]
  |  Branch (6038:33): [True: 0, False: 727k]
  ------------------
 6039|   727k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   727k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 727k]
  ------------------
 6043|   727k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 727k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   727k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 727k, False: 0]
  |  Branch (6047:56): [True: 727k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   727k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 727k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.44M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   727k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   727k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   727k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.4k, False: 716k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.4k|    }                                                  \
  |  |  |  | 3671|   727k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   716k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.44M|                            make_eof_scan_error));
 6058|       |
 6059|  1.44M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 716k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   716k|            return result_type{it, 0};
 6067|  1.44M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   727k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   653k|    {
 6079|   653k|        const bool need_skipped_width =
 6080|   653k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 653k]
  |  Branch (6080:33): [True: 0, False: 653k]
  ------------------
 6081|   653k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   653k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 653k]
  ------------------
 6084|   653k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 653k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   653k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 653k, False: 0]
  ------------------
 6093|   653k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 653k]
  ------------------
 6094|   653k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   653k|        return result_type{rng.begin(), 0};
 6118|   653k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   236k|    {
 6193|   236k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   236k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   236k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   236k|            auto rd = make_reader<T, char_type>();
 6198|   236k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 236k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   236k|            return impl(rd, range, value);
 6203|   236k|        }
 6204|   236k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   236k|            auto rd = make_reader<T, char_type>();
 6206|   236k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   236k|                return unexpected(e);
 6208|   236k|            }
 6209|       |
 6210|   236k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   236k|                specs.width != 0) {
 6212|   236k|                return impl(rd, range, value);
 6213|   236k|            }
 6214|       |
 6215|   236k|            auto crange = get_as_contiguous(range);
 6216|   236k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   236k|            return ranges::next(range.begin(),
 6218|   236k|                                ranges::distance(crange.begin(), it));
 6219|   236k|        }
 6220|   236k|        else {
 6221|   236k|            SCN_EXPECT(false);
 6222|   236k|            SCN_UNREACHABLE;
 6223|   236k|        }
 6224|   236k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   236k|    {
 6124|   236k|        const bool need_skipped_width =
 6125|   236k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 236k]
  |  Branch (6125:33): [True: 0, False: 236k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   236k|        auto it = rng.begin();
 6129|   236k|        std::ptrdiff_t prefix_width = 0;
 6130|   236k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 236k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   236k|        else {
 6138|   236k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.49k, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.49k|    }                                                  \
  |  |  |  | 3671|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   232k|            std::tie(it, prefix_width) = prefix_result;
 6140|   232k|        }
 6141|   232k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   232k|        std::ptrdiff_t value_width = 0;
 6145|   232k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 232k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   232k|        else {
 6161|   232k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.8k, False: 215k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.8k|    }                                                  \
  |  | 3671|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   215k|                                             specs, value, loc));
 6163|       |
 6164|   215k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 215k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   215k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   215k|        std::ptrdiff_t postfix_width = 0;
 6173|   215k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 212k, False: 3.08k]
  ------------------
 6174|   212k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   212k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   212k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   212k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 212k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   212k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   212k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   212k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   212k|                                 value_width));
 6178|   212k|            std::tie(it, postfix_width) = postfix_result;
 6179|   212k|        }
 6180|       |
 6181|   215k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   215k|                                                 value_width, postfix_width);
 6183|   215k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 215k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   215k|        return it;
 6188|   215k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   244k|    {
 6193|   244k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   244k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   244k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   244k|            auto rd = make_reader<T, char_type>();
 6198|   244k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 244k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   244k|            return impl(rd, range, value);
 6203|   244k|        }
 6204|   244k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   244k|            auto rd = make_reader<T, char_type>();
 6206|   244k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   244k|                return unexpected(e);
 6208|   244k|            }
 6209|       |
 6210|   244k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   244k|                specs.width != 0) {
 6212|   244k|                return impl(rd, range, value);
 6213|   244k|            }
 6214|       |
 6215|   244k|            auto crange = get_as_contiguous(range);
 6216|   244k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   244k|            return ranges::next(range.begin(),
 6218|   244k|                                ranges::distance(crange.begin(), it));
 6219|   244k|        }
 6220|   244k|        else {
 6221|   244k|            SCN_EXPECT(false);
 6222|   244k|            SCN_UNREACHABLE;
 6223|   244k|        }
 6224|   244k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   244k|    {
 6124|   244k|        const bool need_skipped_width =
 6125|   244k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 244k]
  |  Branch (6125:33): [True: 0, False: 244k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   244k|        auto it = rng.begin();
 6129|   244k|        std::ptrdiff_t prefix_width = 0;
 6130|   244k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 244k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   244k|        else {
 6138|   244k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   244k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.87k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.87k|    }                                                  \
  |  |  |  | 3671|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   240k|            std::tie(it, prefix_width) = prefix_result;
 6140|   240k|        }
 6141|   240k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   240k|        std::ptrdiff_t value_width = 0;
 6145|   240k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 240k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   240k|        else {
 6161|   240k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.4k, False: 222k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.4k|    }                                                  \
  |  | 3671|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   222k|                                             specs, value, loc));
 6163|       |
 6164|   222k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 222k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   222k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   222k|        std::ptrdiff_t postfix_width = 0;
 6173|   222k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 219k, False: 3.41k]
  ------------------
 6174|   219k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   219k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   219k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   219k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   219k|                                 value_width));
 6178|   219k|            std::tie(it, postfix_width) = postfix_result;
 6179|   219k|        }
 6180|       |
 6181|   222k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   222k|                                                 value_width, postfix_width);
 6183|   222k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 222k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   222k|        return it;
 6188|   222k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   246k|    {
 6193|   246k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   246k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   246k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   246k|            auto rd = make_reader<T, char_type>();
 6198|   246k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   246k|            return impl(rd, range, value);
 6203|   246k|        }
 6204|   246k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   246k|            auto rd = make_reader<T, char_type>();
 6206|   246k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   246k|                return unexpected(e);
 6208|   246k|            }
 6209|       |
 6210|   246k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   246k|                specs.width != 0) {
 6212|   246k|                return impl(rd, range, value);
 6213|   246k|            }
 6214|       |
 6215|   246k|            auto crange = get_as_contiguous(range);
 6216|   246k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   246k|            return ranges::next(range.begin(),
 6218|   246k|                                ranges::distance(crange.begin(), it));
 6219|   246k|        }
 6220|   246k|        else {
 6221|   246k|            SCN_EXPECT(false);
 6222|   246k|            SCN_UNREACHABLE;
 6223|   246k|        }
 6224|   246k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   246k|    {
 6124|   246k|        const bool need_skipped_width =
 6125|   246k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 246k]
  |  Branch (6125:33): [True: 0, False: 246k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   246k|        auto it = rng.begin();
 6129|   246k|        std::ptrdiff_t prefix_width = 0;
 6130|   246k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 246k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   246k|        else {
 6138|   246k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   246k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.13k, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.13k|    }                                                  \
  |  |  |  | 3671|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   242k|            std::tie(it, prefix_width) = prefix_result;
 6140|   242k|        }
 6141|   242k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   242k|        std::ptrdiff_t value_width = 0;
 6145|   242k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 242k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   242k|        else {
 6161|   242k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.1k, False: 225k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.1k|    }                                                  \
  |  | 3671|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   225k|                                             specs, value, loc));
 6163|       |
 6164|   225k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 225k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   225k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   225k|        std::ptrdiff_t postfix_width = 0;
 6173|   225k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 221k, False: 3.64k]
  ------------------
 6174|   221k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   221k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 221k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   221k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   221k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   221k|                                 value_width));
 6178|   221k|            std::tie(it, postfix_width) = postfix_result;
 6179|   221k|        }
 6180|       |
 6181|   225k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   225k|                                                 value_width, postfix_width);
 6183|   225k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 225k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   225k|        return it;
 6188|   225k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   114k|{
 5795|   114k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 363, False: 114k]
  |  |  ------------------
  ------------------
 5796|    363|        return unexpected(e);
 5797|    363|    }
 5798|       |
 5799|   114k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 114k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   114k|    return skip_classic_whitespace(range);
 5804|   114k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  36.5k|    {
 5871|  36.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  36.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  36.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  36.5k|            auto rd = make_reader<T, char_type>();
 5876|  36.5k|            return impl(rd, range, value);
 5877|  36.5k|        }
 5878|  36.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  36.5k|            auto rd = make_reader<T, char_type>();
 5880|  36.5k|            if (!is_segment_contiguous(range)) {
 5881|  36.5k|                return impl(rd, range, value);
 5882|  36.5k|            }
 5883|  36.5k|            auto crange = get_as_contiguous(range);
 5884|  36.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  36.5k|            return ranges::next(range.begin(),
 5886|  36.5k|                                ranges::distance(crange.begin(), it));
 5887|  36.5k|        }
 5888|  36.5k|        else {
 5889|  36.5k|            SCN_EXPECT(false);
 5890|  36.5k|            SCN_UNREACHABLE;
 5891|  36.5k|        }
 5892|  36.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  36.5k|    {
 5863|  36.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  36.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 252, False: 36.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    252|    }                                                  \
  |  |  |  | 3671|  36.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  36.2k|                        .transform_error(make_eof_scan_error));
 5865|  36.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  36.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  36.2k|    {
 4152|  36.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  36.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  36.2k|        float_reader<CharT> rd{};
 4155|  36.2k|        return read_impl<Range>(
 4156|  36.2k|            range, rd,
 4157|  36.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  36.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  36.2k|            },
 4160|  36.2k|            value);
 4161|  36.2k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   228k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  36.2k|    {
  754|  36.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  36.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.2k|              cvref<T> obj = *get<T>(fn);
  745|  36.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  36.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.2k|              }
  748|  36.2k|              else {
  749|  36.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.2k|              }
  751|  36.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  36.2k|    {
  684|  36.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  36.2k|            return static_cast<T*>(s.m_cp);
  686|  36.2k|        }
  687|  36.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  36.2k|            return static_cast<T*>(s.m_p);
  689|  36.2k|        }
  690|  36.2k|        else {
  691|  36.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  36.2k|        }
  693|  36.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  36.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  36.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  36.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  36.2k|        {
  662|  36.2k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  38.6k|    {
 5871|  38.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  38.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  38.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  38.6k|            auto rd = make_reader<T, char_type>();
 5876|  38.6k|            return impl(rd, range, value);
 5877|  38.6k|        }
 5878|  38.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  38.6k|            auto rd = make_reader<T, char_type>();
 5880|  38.6k|            if (!is_segment_contiguous(range)) {
 5881|  38.6k|                return impl(rd, range, value);
 5882|  38.6k|            }
 5883|  38.6k|            auto crange = get_as_contiguous(range);
 5884|  38.6k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  38.6k|            return ranges::next(range.begin(),
 5886|  38.6k|                                ranges::distance(crange.begin(), it));
 5887|  38.6k|        }
 5888|  38.6k|        else {
 5889|  38.6k|            SCN_EXPECT(false);
 5890|  38.6k|            SCN_UNREACHABLE;
 5891|  38.6k|        }
 5892|  38.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  38.6k|    {
 5863|  38.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  38.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  38.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  38.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 279, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    279|    }                                                  \
  |  |  |  | 3671|  38.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  38.3k|                        .transform_error(make_eof_scan_error));
 5865|  38.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  38.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  38.3k|    {
 4152|  38.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  38.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  38.3k|        float_reader<CharT> rd{};
 4155|  38.3k|        return read_impl<Range>(
 4156|  38.3k|            range, rd,
 4157|  38.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  38.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  38.3k|            },
 4160|  38.3k|            value);
 4161|  38.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  38.3k|    {
  754|  38.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|  38.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  38.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.3k|              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.3k|    {
  684|  38.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  38.3k|            return static_cast<T*>(s.m_cp);
  686|  38.3k|        }
  687|  38.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  38.3k|            return static_cast<T*>(s.m_p);
  689|  38.3k|        }
  690|  38.3k|        else {
  691|  38.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  38.3k|        }
  693|  38.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  38.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  38.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  38.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  38.3k|        {
  662|  38.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  39.7k|    {
 5871|  39.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  39.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  39.7k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  39.7k|            auto rd = make_reader<T, char_type>();
 5876|  39.7k|            return impl(rd, range, value);
 5877|  39.7k|        }
 5878|  39.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  39.7k|            auto rd = make_reader<T, char_type>();
 5880|  39.7k|            if (!is_segment_contiguous(range)) {
 5881|  39.7k|                return impl(rd, range, value);
 5882|  39.7k|            }
 5883|  39.7k|            auto crange = get_as_contiguous(range);
 5884|  39.7k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  39.7k|            return ranges::next(range.begin(),
 5886|  39.7k|                                ranges::distance(crange.begin(), it));
 5887|  39.7k|        }
 5888|  39.7k|        else {
 5889|  39.7k|            SCN_EXPECT(false);
 5890|  39.7k|            SCN_UNREACHABLE;
 5891|  39.7k|        }
 5892|  39.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  39.7k|    {
 5863|  39.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  39.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  39.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  39.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 39.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    294|    }                                                  \
  |  |  |  | 3671|  39.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  39.4k|                        .transform_error(make_eof_scan_error));
 5865|  39.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  39.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  39.4k|    {
 4152|  39.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  39.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  39.4k|        float_reader<CharT> rd{};
 4155|  39.4k|        return read_impl<Range>(
 4156|  39.4k|            range, rd,
 4157|  39.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  39.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  39.4k|            },
 4160|  39.4k|            value);
 4161|  39.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  39.4k|    {
  754|  39.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  39.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.4k|              cvref<T> obj = *get<T>(fn);
  745|  39.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  39.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.4k|              }
  748|  39.4k|              else {
  749|  39.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.4k|              }
  751|  39.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.4k|    {
  684|  39.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  39.4k|            return static_cast<T*>(s.m_cp);
  686|  39.4k|        }
  687|  39.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  39.4k|            return static_cast<T*>(s.m_p);
  689|  39.4k|        }
  690|  39.4k|        else {
  691|  39.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  39.4k|        }
  693|  39.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  39.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  39.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  39.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  39.4k|        {
  662|  39.4k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   330k|    {
 2879|   330k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   864k|    {
 2883|   864k|        return m_current;
 2884|   864k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   533k|    {
 2888|   533k|        return m_range.end();
 2889|   533k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   202k|    {
 2903|   202k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   202k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   202k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 202k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   202k|        }
 2909|   202k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   202k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   330k|    {
 2893|   330k|        return ranges::subrange{begin(), end()};
 2894|   330k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   330k|    {
 6037|   330k|        const bool need_skipped_width =
 6038|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 330k]
  |  Branch (6038:33): [True: 0, False: 330k]
  ------------------
 6039|   330k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   330k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 330k]
  ------------------
 6043|   330k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 330k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   330k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 330k, False: 0]
  |  Branch (6047:56): [True: 330k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   330k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 330k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   659k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.40k, False: 328k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.40k|    }                                                  \
  |  |  |  | 3671|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   328k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   659k|                            make_eof_scan_error));
 6058|       |
 6059|   659k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 328k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   328k|            return result_type{it, 0};
 6067|   659k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   330k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   201k|    {
 6079|   201k|        const bool need_skipped_width =
 6080|   201k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 201k]
  |  Branch (6080:33): [True: 0, False: 201k]
  ------------------
 6081|   201k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   201k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 201k]
  ------------------
 6084|   201k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 201k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   201k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 201k, False: 0]
  ------------------
 6093|   201k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 201k]
  ------------------
 6094|   201k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   201k|        return result_type{rng.begin(), 0};
 6118|   201k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|   107k|    {
 6193|   107k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   107k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   107k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   107k|            auto rd = make_reader<T, char_type>();
 6198|   107k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   107k|            return impl(rd, range, value);
 6203|   107k|        }
 6204|   107k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   107k|            auto rd = make_reader<T, char_type>();
 6206|   107k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   107k|                return unexpected(e);
 6208|   107k|            }
 6209|       |
 6210|   107k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   107k|                specs.width != 0) {
 6212|   107k|                return impl(rd, range, value);
 6213|   107k|            }
 6214|       |
 6215|   107k|            auto crange = get_as_contiguous(range);
 6216|   107k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   107k|            return ranges::next(range.begin(),
 6218|   107k|                                ranges::distance(crange.begin(), it));
 6219|   107k|        }
 6220|   107k|        else {
 6221|   107k|            SCN_EXPECT(false);
 6222|   107k|            SCN_UNREACHABLE;
 6223|   107k|        }
 6224|   107k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   107k|    {
 6124|   107k|        const bool need_skipped_width =
 6125|   107k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 107k]
  |  Branch (6125:33): [True: 0, False: 107k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   107k|        auto it = rng.begin();
 6129|   107k|        std::ptrdiff_t prefix_width = 0;
 6130|   107k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 107k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   107k|        else {
 6138|   107k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 764, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    764|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    764|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    764|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    764|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    764|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   107k|            std::tie(it, prefix_width) = prefix_result;
 6140|   107k|        }
 6141|   107k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   107k|        std::ptrdiff_t value_width = 0;
 6145|   107k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 107k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   107k|        else {
 6161|   107k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.8k, False: 65.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.8k|    }                                                  \
  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  65.2k|                                             specs, value, loc));
 6163|       |
 6164|  65.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 65.2k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  65.2k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  65.2k|        std::ptrdiff_t postfix_width = 0;
 6173|  65.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 64.9k, False: 308]
  ------------------
 6174|  64.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  64.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  64.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  64.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 64.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  64.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  64.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  64.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  64.9k|                                 value_width));
 6178|  64.9k|            std::tie(it, postfix_width) = postfix_result;
 6179|  64.9k|        }
 6180|       |
 6181|  65.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  65.2k|                                                 value_width, postfix_width);
 6183|  65.2k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 65.2k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  65.2k|        return it;
 6188|  65.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|   110k|    {
 6193|   110k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   110k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   110k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   110k|            auto rd = make_reader<T, char_type>();
 6198|   110k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   110k|            return impl(rd, range, value);
 6203|   110k|        }
 6204|   110k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   110k|            auto rd = make_reader<T, char_type>();
 6206|   110k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   110k|                return unexpected(e);
 6208|   110k|            }
 6209|       |
 6210|   110k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   110k|                specs.width != 0) {
 6212|   110k|                return impl(rd, range, value);
 6213|   110k|            }
 6214|       |
 6215|   110k|            auto crange = get_as_contiguous(range);
 6216|   110k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   110k|            return ranges::next(range.begin(),
 6218|   110k|                                ranges::distance(crange.begin(), it));
 6219|   110k|        }
 6220|   110k|        else {
 6221|   110k|            SCN_EXPECT(false);
 6222|   110k|            SCN_UNREACHABLE;
 6223|   110k|        }
 6224|   110k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   110k|    {
 6124|   110k|        const bool need_skipped_width =
 6125|   110k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 110k]
  |  Branch (6125:33): [True: 0, False: 110k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   110k|        auto it = rng.begin();
 6129|   110k|        std::ptrdiff_t prefix_width = 0;
 6130|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 110k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   110k|        else {
 6138|   110k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 810, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    810|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    810|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    810|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    810|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    810|    }                                                  \
  |  |  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   109k|            std::tie(it, prefix_width) = prefix_result;
 6140|   109k|        }
 6141|   109k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   109k|        std::ptrdiff_t value_width = 0;
 6145|   109k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 109k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   109k|        else {
 6161|   109k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.8k, False: 68.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.8k|    }                                                  \
  |  | 3671|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  68.0k|                                             specs, value, loc));
 6163|       |
 6164|  68.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 68.0k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  68.0k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  68.0k|        std::ptrdiff_t postfix_width = 0;
 6173|  68.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 67.7k, False: 334]
  ------------------
 6174|  67.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  67.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  67.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  67.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 67.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  67.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  67.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  67.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  67.7k|                                 value_width));
 6178|  67.7k|            std::tie(it, postfix_width) = postfix_result;
 6179|  67.7k|        }
 6180|       |
 6181|  68.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  68.0k|                                                 value_width, postfix_width);
 6183|  68.0k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 68.0k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  68.0k|        return it;
 6188|  68.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   112k|    {
 6193|   112k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   112k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   112k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   112k|            auto rd = make_reader<T, char_type>();
 6198|   112k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   112k|            return impl(rd, range, value);
 6203|   112k|        }
 6204|   112k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   112k|            auto rd = make_reader<T, char_type>();
 6206|   112k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   112k|                return unexpected(e);
 6208|   112k|            }
 6209|       |
 6210|   112k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   112k|                specs.width != 0) {
 6212|   112k|                return impl(rd, range, value);
 6213|   112k|            }
 6214|       |
 6215|   112k|            auto crange = get_as_contiguous(range);
 6216|   112k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   112k|            return ranges::next(range.begin(),
 6218|   112k|                                ranges::distance(crange.begin(), it));
 6219|   112k|        }
 6220|   112k|        else {
 6221|   112k|            SCN_EXPECT(false);
 6222|   112k|            SCN_UNREACHABLE;
 6223|   112k|        }
 6224|   112k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   112k|    {
 6124|   112k|        const bool need_skipped_width =
 6125|   112k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 112k]
  |  Branch (6125:33): [True: 0, False: 112k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   112k|        auto it = rng.begin();
 6129|   112k|        std::ptrdiff_t prefix_width = 0;
 6130|   112k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 112k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   112k|        else {
 6138|   112k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 834, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    834|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    834|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    834|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    834|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    834|    }                                                  \
  |  |  |  | 3671|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   111k|            std::tie(it, prefix_width) = prefix_result;
 6140|   111k|        }
 6141|   111k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   111k|        std::ptrdiff_t value_width = 0;
 6145|   111k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 111k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   111k|        else {
 6161|   111k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.7k, False: 69.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.7k|    }                                                  \
  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  69.6k|                                             specs, value, loc));
 6163|       |
 6164|  69.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 69.6k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  69.6k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  69.6k|        std::ptrdiff_t postfix_width = 0;
 6173|  69.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 69.2k, False: 348]
  ------------------
 6174|  69.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  69.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 69.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  69.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  69.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  69.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  69.2k|                                 value_width));
 6178|  69.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  69.2k|        }
 6180|       |
 6181|  69.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  69.6k|                                                 value_width, postfix_width);
 6183|  69.6k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 69.6k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  69.6k|        return it;
 6188|  69.6k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   114k|{
 5795|   114k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 363, False: 114k]
  |  |  ------------------
  ------------------
 5796|    363|        return unexpected(e);
 5797|    363|    }
 5798|       |
 5799|   114k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 114k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   114k|    return skip_classic_whitespace(range);
 5804|   114k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  36.4k|    {
 5871|  36.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  36.4k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  36.4k|            auto rd = make_reader<T, char_type>();
 5876|  36.4k|            return impl(rd, range, value);
 5877|  36.4k|        }
 5878|  36.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  36.4k|            auto rd = make_reader<T, char_type>();
 5880|  36.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 36.4k, False: 0]
  ------------------
 5881|  36.4k|                return impl(rd, range, value);
 5882|  36.4k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  36.4k|        else {
 5889|  36.4k|            SCN_EXPECT(false);
 5890|  36.4k|            SCN_UNREACHABLE;
 5891|  36.4k|        }
 5892|  36.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  36.4k|    {
 5863|  36.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  36.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 252, False: 36.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    252|    }                                                  \
  |  |  |  | 3671|  36.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  36.2k|                        .transform_error(make_eof_scan_error));
 5865|  36.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  36.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  36.2k|    {
 4152|  36.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  36.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  36.2k|        float_reader<CharT> rd{};
 4155|  36.2k|        return read_impl<Range>(
 4156|  36.2k|            range, rd,
 4157|  36.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  36.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  36.2k|            },
 4160|  36.2k|            value);
 4161|  36.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  36.2k|    {
  754|  36.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  36.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.2k|              cvref<T> obj = *get<T>(fn);
  745|  36.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  36.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.2k|              }
  748|  36.2k|              else {
  749|  36.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.2k|              }
  751|  36.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  36.2k|    {
  684|  36.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  36.2k|            return static_cast<T*>(s.m_cp);
  686|  36.2k|        }
  687|  36.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  36.2k|            return static_cast<T*>(s.m_p);
  689|  36.2k|        }
  690|  36.2k|        else {
  691|  36.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  36.2k|        }
  693|  36.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  36.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  36.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  36.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  36.2k|        {
  662|  36.2k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  38.6k|    {
 5871|  38.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  38.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  38.6k|            auto rd = make_reader<T, char_type>();
 5876|  38.6k|            return impl(rd, range, value);
 5877|  38.6k|        }
 5878|  38.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  38.6k|            auto rd = make_reader<T, char_type>();
 5880|  38.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 38.6k, False: 0]
  ------------------
 5881|  38.6k|                return impl(rd, range, value);
 5882|  38.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  38.6k|        else {
 5889|  38.6k|            SCN_EXPECT(false);
 5890|  38.6k|            SCN_UNREACHABLE;
 5891|  38.6k|        }
 5892|  38.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  38.6k|    {
 5863|  38.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  38.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  38.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  38.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 279, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    279|    }                                                  \
  |  |  |  | 3671|  38.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  38.3k|                        .transform_error(make_eof_scan_error));
 5865|  38.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  38.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  38.3k|    {
 4152|  38.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  38.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  38.3k|        float_reader<CharT> rd{};
 4155|  38.3k|        return read_impl<Range>(
 4156|  38.3k|            range, rd,
 4157|  38.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  38.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  38.3k|            },
 4160|  38.3k|            value);
 4161|  38.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  38.3k|    {
  754|  38.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|  38.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  38.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.3k|              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.3k|    {
  684|  38.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  38.3k|            return static_cast<T*>(s.m_cp);
  686|  38.3k|        }
  687|  38.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  38.3k|            return static_cast<T*>(s.m_p);
  689|  38.3k|        }
  690|  38.3k|        else {
  691|  38.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  38.3k|        }
  693|  38.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  38.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  38.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  38.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  38.3k|        {
  662|  38.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  39.7k|    {
 5871|  39.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  39.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  39.7k|            auto rd = make_reader<T, char_type>();
 5876|  39.7k|            return impl(rd, range, value);
 5877|  39.7k|        }
 5878|  39.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  39.7k|            auto rd = make_reader<T, char_type>();
 5880|  39.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 39.7k, False: 0]
  ------------------
 5881|  39.7k|                return impl(rd, range, value);
 5882|  39.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  39.7k|        else {
 5889|  39.7k|            SCN_EXPECT(false);
 5890|  39.7k|            SCN_UNREACHABLE;
 5891|  39.7k|        }
 5892|  39.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  39.7k|    {
 5863|  39.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  39.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  39.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  39.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 39.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    294|    }                                                  \
  |  |  |  | 3671|  39.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  39.4k|                        .transform_error(make_eof_scan_error));
 5865|  39.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  39.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  39.4k|    {
 4152|  39.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  39.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  39.4k|        float_reader<CharT> rd{};
 4155|  39.4k|        return read_impl<Range>(
 4156|  39.4k|            range, rd,
 4157|  39.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  39.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  39.4k|            },
 4160|  39.4k|            value);
 4161|  39.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  39.4k|    {
  754|  39.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  39.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.4k|              cvref<T> obj = *get<T>(fn);
  745|  39.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  39.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.4k|              }
  748|  39.4k|              else {
  749|  39.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.4k|              }
  751|  39.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.4k|    {
  684|  39.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  39.4k|            return static_cast<T*>(s.m_cp);
  686|  39.4k|        }
  687|  39.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  39.4k|            return static_cast<T*>(s.m_p);
  689|  39.4k|        }
  690|  39.4k|        else {
  691|  39.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  39.4k|        }
  693|  39.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  39.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  39.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  39.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  39.4k|        {
  662|  39.4k|        }

LLVMFuzzerTestOneInput:
   54|  2.13k|{
   55|  2.13k|    scn::fuzz::run(data, size);
   56|  2.13k|    return 0;
   57|  2.13k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.13k|{
   33|  2.13k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.13k]
  |  Branch (33:35): [True: 0, False: 2.13k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.13k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.13k|    const auto& f =
   40|  2.13k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.13k|    do_basic_run(sv, f);
   42|       |
   43|  2.13k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.13k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.13k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.13k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.13k, False: 0]
  ------------------
   47|  2.13k|        do_basic_run(wsv_transcode, wf);
   48|  2.13k|    }
   49|  2.13k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.13k|{
   25|  2.13k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.13k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.13k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.13k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.13k|{
   25|  2.13k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.13k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.13k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.13k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.26k|{
   25|  4.26k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.26k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.26k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.26k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.26k|{
   25|  4.26k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.26k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.26k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.26k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.13k|{
   52|  2.13k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.13k|    string_buffer.resize(size);
   56|  2.13k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.13k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.13k|    const auto wsv_reinterpret_size =
   61|  2.13k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 65, False: 2.06k]
  ------------------
   62|  2.13k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.13k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.13k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.13k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.13k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.13k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.13k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.13k|{
  122|  2.13k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.13k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.13k|    buf.resize(sizeof...(Args));
  125|  2.13k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.13k|    return buf;
  127|  2.13k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.13k|{
  108|  2.13k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.13k|        return format_string_view_buffer;
  110|  2.13k|    }
  111|  2.13k|    else {
  112|  2.13k|        return wformat_string_view_buffer;
  113|  2.13k|    }
  114|  2.13k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.13k|{
  185|  2.13k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.13k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.13k|                                   format_strings);
  188|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.7k, False: 2.13k]
  ------------------
  135|  12.7k|        auto it = scn::ranges::begin(source);
  136|   150k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   150k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   150k|            auto result = scn::scan<T>(
  139|   150k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   150k|                scn::runtime_format(f));
  141|   150k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.7k, False: 138k]
  ------------------
  142|  12.7k|                break;
  143|  12.7k|            }
  144|   138k|            it = result->begin();
  145|   138k|        }
  146|  12.7k|    }
  147|       |
  148|       |    // scan localized
  149|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.7k, False: 2.13k]
  ------------------
  150|  12.7k|        auto it = scn::ranges::begin(source);
  151|   150k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   150k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   150k|            auto result = scn::scan<T>(
  154|   150k|                global_locale,
  155|   150k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   150k|                scn::runtime_format(f));
  157|   150k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.7k, False: 138k]
  ------------------
  158|  12.7k|                break;
  159|  12.7k|            }
  160|   138k|            it = result->begin();
  161|   138k|        }
  162|  12.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  32.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  32.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  32.6k|            auto result = scn::scan_value<T>(
  170|  32.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  32.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 30.5k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  30.5k|            it = result->begin();
  175|  30.5k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.7k, False: 2.13k]
  ------------------
  135|  12.7k|        auto it = scn::ranges::begin(source);
  136|   156k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   156k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   156k|            auto result = scn::scan<T>(
  139|   156k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   156k|                scn::runtime_format(f));
  141|   156k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.7k, False: 143k]
  ------------------
  142|  12.7k|                break;
  143|  12.7k|            }
  144|   143k|            it = result->begin();
  145|   143k|        }
  146|  12.7k|    }
  147|       |
  148|       |    // scan localized
  149|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.7k, False: 2.13k]
  ------------------
  150|  12.7k|        auto it = scn::ranges::begin(source);
  151|   156k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   156k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   156k|            auto result = scn::scan<T>(
  154|   156k|                global_locale,
  155|   156k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   156k|                scn::runtime_format(f));
  157|   156k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.7k, False: 143k]
  ------------------
  158|  12.7k|                break;
  159|  12.7k|            }
  160|   143k|            it = result->begin();
  161|   143k|        }
  162|  12.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  34.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  34.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  34.2k|            auto result = scn::scan_value<T>(
  170|  34.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  34.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 32.1k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  32.1k|            it = result->begin();
  175|  32.1k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.7k, False: 2.13k]
  ------------------
  135|  12.7k|        auto it = scn::ranges::begin(source);
  136|   158k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   158k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   158k|            auto result = scn::scan<T>(
  139|   158k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   158k|                scn::runtime_format(f));
  141|   158k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.7k, False: 145k]
  ------------------
  142|  12.7k|                break;
  143|  12.7k|            }
  144|   145k|            it = result->begin();
  145|   145k|        }
  146|  12.7k|    }
  147|       |
  148|       |    // scan localized
  149|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.7k, False: 2.13k]
  ------------------
  150|  12.7k|        auto it = scn::ranges::begin(source);
  151|   158k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   158k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   158k|            auto result = scn::scan<T>(
  154|   158k|                global_locale,
  155|   158k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   158k|                scn::runtime_format(f));
  157|   158k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.7k, False: 145k]
  ------------------
  158|  12.7k|                break;
  159|  12.7k|            }
  160|   145k|            it = result->begin();
  161|   145k|        }
  162|  12.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  34.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  34.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  34.8k|            auto result = scn::scan_value<T>(
  170|  34.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  34.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 32.7k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  32.7k|            it = result->begin();
  175|  32.7k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.7k, False: 2.13k]
  ------------------
  135|  12.7k|        auto it = scn::ranges::begin(source);
  136|   172k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   172k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   172k|            auto result = scn::scan<T>(
  139|   172k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   172k|                scn::runtime_format(f));
  141|   172k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.7k, False: 159k]
  ------------------
  142|  12.7k|                break;
  143|  12.7k|            }
  144|   159k|            it = result->begin();
  145|   159k|        }
  146|  12.7k|    }
  147|       |
  148|       |    // scan localized
  149|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.7k, False: 2.13k]
  ------------------
  150|  12.7k|        auto it = scn::ranges::begin(source);
  151|   172k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   172k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   172k|            auto result = scn::scan<T>(
  154|   172k|                global_locale,
  155|   172k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   172k|                scn::runtime_format(f));
  157|   172k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.7k, False: 159k]
  ------------------
  158|  12.7k|                break;
  159|  12.7k|            }
  160|   159k|            it = result->begin();
  161|   159k|        }
  162|  12.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  35.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  35.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  35.5k|            auto result = scn::scan_value<T>(
  170|  35.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  35.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 33.4k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  33.4k|            it = result->begin();
  175|  33.4k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.7k, False: 2.13k]
  ------------------
  135|  12.7k|        auto it = scn::ranges::begin(source);
  136|   179k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   179k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   179k|            auto result = scn::scan<T>(
  139|   179k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   179k|                scn::runtime_format(f));
  141|   179k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.7k, False: 166k]
  ------------------
  142|  12.7k|                break;
  143|  12.7k|            }
  144|   166k|            it = result->begin();
  145|   166k|        }
  146|  12.7k|    }
  147|       |
  148|       |    // scan localized
  149|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.7k, False: 2.13k]
  ------------------
  150|  12.7k|        auto it = scn::ranges::begin(source);
  151|   179k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   179k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   179k|            auto result = scn::scan<T>(
  154|   179k|                global_locale,
  155|   179k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   179k|                scn::runtime_format(f));
  157|   179k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.7k, False: 166k]
  ------------------
  158|  12.7k|                break;
  159|  12.7k|            }
  160|   166k|            it = result->begin();
  161|   166k|        }
  162|  12.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  37.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  37.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  37.2k|            auto result = scn::scan_value<T>(
  170|  37.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  37.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 35.0k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  35.0k|            it = result->begin();
  175|  35.0k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.7k, False: 2.13k]
  ------------------
  135|  12.7k|        auto it = scn::ranges::begin(source);
  136|   181k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   181k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   181k|            auto result = scn::scan<T>(
  139|   181k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   181k|                scn::runtime_format(f));
  141|   181k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.7k, False: 168k]
  ------------------
  142|  12.7k|                break;
  143|  12.7k|            }
  144|   168k|            it = result->begin();
  145|   168k|        }
  146|  12.7k|    }
  147|       |
  148|       |    // scan localized
  149|  12.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.7k, False: 2.13k]
  ------------------
  150|  12.7k|        auto it = scn::ranges::begin(source);
  151|   181k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   181k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   181k|            auto result = scn::scan<T>(
  154|   181k|                global_locale,
  155|   181k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   181k|                scn::runtime_format(f));
  157|   181k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.7k, False: 168k]
  ------------------
  158|  12.7k|                break;
  159|  12.7k|            }
  160|   168k|            it = result->begin();
  161|   168k|        }
  162|  12.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  37.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  37.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  37.6k|            auto result = scn::scan_value<T>(
  170|  37.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  37.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 35.4k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  35.4k|            it = result->begin();
  175|  35.4k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.13k|{
   90|  2.13k|    using char_type = ranges::range_value_t<Source>;
   91|  2.13k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.13k|    deque.clear();
   93|  2.13k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.13k|              std::back_inserter(deque));
   95|  2.13k|    return deque;
   96|  2.13k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.13k|{
   79|  2.13k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.13k|        return noncontiguous_buffer;
   81|  2.13k|    }
   82|  2.13k|    else {
   83|  2.13k|        return wnoncontiguous_buffer;
   84|  2.13k|    }
   85|  2.13k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.13k|{
  122|  2.13k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.13k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.13k|    buf.resize(sizeof...(Args));
  125|  2.13k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.13k|    return buf;
  127|  2.13k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.13k|{
  108|  2.13k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.13k|        return format_string_view_buffer;
  110|  2.13k|    }
  111|  2.13k|    else {
  112|  2.13k|        return wformat_string_view_buffer;
  113|  2.13k|    }
  114|  2.13k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.26k|{
  185|  4.26k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.26k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.26k|                                   format_strings);
  188|  4.26k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.26k|{
  133|       |    // Regular scan
  134|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.5k, False: 4.26k]
  ------------------
  135|  25.5k|        auto it = scn::ranges::begin(source);
  136|  66.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  66.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  66.0k|            auto result = scn::scan<T>(
  139|  66.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  66.0k|                scn::runtime_format(f));
  141|  66.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.5k, False: 40.5k]
  ------------------
  142|  25.5k|                break;
  143|  25.5k|            }
  144|  40.5k|            it = result->begin();
  145|  40.5k|        }
  146|  25.5k|    }
  147|       |
  148|       |    // scan localized
  149|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.5k, False: 4.26k]
  ------------------
  150|  25.5k|        auto it = scn::ranges::begin(source);
  151|  66.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  66.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  66.0k|            auto result = scn::scan<T>(
  154|  66.0k|                global_locale,
  155|  66.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  66.0k|                scn::runtime_format(f));
  157|  66.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.5k, False: 40.5k]
  ------------------
  158|  25.5k|                break;
  159|  25.5k|            }
  160|  40.5k|            it = result->begin();
  161|  40.5k|        }
  162|  25.5k|    }
  163|       |
  164|       |    // scan_value
  165|  4.26k|    {
  166|  4.26k|        auto it = scn::ranges::begin(source);
  167|  12.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  12.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  12.1k|            auto result = scn::scan_value<T>(
  170|  12.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  12.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.26k, False: 7.91k]
  ------------------
  172|  4.26k|                break;
  173|  4.26k|            }
  174|  7.91k|            it = result->begin();
  175|  7.91k|        }
  176|  4.26k|    }
  177|  4.26k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.26k|{
  133|       |    // Regular scan
  134|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.5k, False: 4.26k]
  ------------------
  135|  25.5k|        auto it = scn::ranges::begin(source);
  136|  68.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  68.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  68.2k|            auto result = scn::scan<T>(
  139|  68.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  68.2k|                scn::runtime_format(f));
  141|  68.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.5k, False: 42.6k]
  ------------------
  142|  25.5k|                break;
  143|  25.5k|            }
  144|  42.6k|            it = result->begin();
  145|  42.6k|        }
  146|  25.5k|    }
  147|       |
  148|       |    // scan localized
  149|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.5k, False: 4.26k]
  ------------------
  150|  25.5k|        auto it = scn::ranges::begin(source);
  151|  68.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  68.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  68.2k|            auto result = scn::scan<T>(
  154|  68.2k|                global_locale,
  155|  68.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  68.2k|                scn::runtime_format(f));
  157|  68.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.5k, False: 42.6k]
  ------------------
  158|  25.5k|                break;
  159|  25.5k|            }
  160|  42.6k|            it = result->begin();
  161|  42.6k|        }
  162|  25.5k|    }
  163|       |
  164|       |    // scan_value
  165|  4.26k|    {
  166|  4.26k|        auto it = scn::ranges::begin(source);
  167|  12.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  12.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  12.8k|            auto result = scn::scan_value<T>(
  170|  12.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  12.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.26k, False: 8.62k]
  ------------------
  172|  4.26k|                break;
  173|  4.26k|            }
  174|  8.62k|            it = result->begin();
  175|  8.62k|        }
  176|  4.26k|    }
  177|  4.26k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.26k|{
  133|       |    // Regular scan
  134|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.5k, False: 4.26k]
  ------------------
  135|  25.5k|        auto it = scn::ranges::begin(source);
  136|  69.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  69.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  69.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  69.3k|            auto result = scn::scan<T>(
  139|  69.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  69.3k|                scn::runtime_format(f));
  141|  69.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.5k, False: 43.7k]
  ------------------
  142|  25.5k|                break;
  143|  25.5k|            }
  144|  43.7k|            it = result->begin();
  145|  43.7k|        }
  146|  25.5k|    }
  147|       |
  148|       |    // scan localized
  149|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.5k, False: 4.26k]
  ------------------
  150|  25.5k|        auto it = scn::ranges::begin(source);
  151|  69.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  69.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  69.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  69.3k|            auto result = scn::scan<T>(
  154|  69.3k|                global_locale,
  155|  69.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  69.3k|                scn::runtime_format(f));
  157|  69.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.5k, False: 43.7k]
  ------------------
  158|  25.5k|                break;
  159|  25.5k|            }
  160|  43.7k|            it = result->begin();
  161|  43.7k|        }
  162|  25.5k|    }
  163|       |
  164|       |    // scan_value
  165|  4.26k|    {
  166|  4.26k|        auto it = scn::ranges::begin(source);
  167|  13.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.2k|            auto result = scn::scan_value<T>(
  170|  13.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.26k, False: 8.99k]
  ------------------
  172|  4.26k|                break;
  173|  4.26k|            }
  174|  8.99k|            it = result->begin();
  175|  8.99k|        }
  176|  4.26k|    }
  177|  4.26k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.26k|{
  133|       |    // Regular scan
  134|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.5k, False: 4.26k]
  ------------------
  135|  25.5k|        auto it = scn::ranges::begin(source);
  136|  66.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  66.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  66.0k|            auto result = scn::scan<T>(
  139|  66.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  66.0k|                scn::runtime_format(f));
  141|  66.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.5k, False: 40.4k]
  ------------------
  142|  25.5k|                break;
  143|  25.5k|            }
  144|  40.4k|            it = result->begin();
  145|  40.4k|        }
  146|  25.5k|    }
  147|       |
  148|       |    // scan localized
  149|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.5k, False: 4.26k]
  ------------------
  150|  25.5k|        auto it = scn::ranges::begin(source);
  151|  66.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  66.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  66.0k|            auto result = scn::scan<T>(
  154|  66.0k|                global_locale,
  155|  66.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  66.0k|                scn::runtime_format(f));
  157|  66.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.5k, False: 40.4k]
  ------------------
  158|  25.5k|                break;
  159|  25.5k|            }
  160|  40.4k|            it = result->begin();
  161|  40.4k|        }
  162|  25.5k|    }
  163|       |
  164|       |    // scan_value
  165|  4.26k|    {
  166|  4.26k|        auto it = scn::ranges::begin(source);
  167|  12.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  12.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  12.1k|            auto result = scn::scan_value<T>(
  170|  12.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  12.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.26k, False: 7.90k]
  ------------------
  172|  4.26k|                break;
  173|  4.26k|            }
  174|  7.90k|            it = result->begin();
  175|  7.90k|        }
  176|  4.26k|    }
  177|  4.26k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.26k|{
  133|       |    // Regular scan
  134|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.5k, False: 4.26k]
  ------------------
  135|  25.5k|        auto it = scn::ranges::begin(source);
  136|  68.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  68.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  68.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  68.1k|            auto result = scn::scan<T>(
  139|  68.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  68.1k|                scn::runtime_format(f));
  141|  68.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.5k, False: 42.6k]
  ------------------
  142|  25.5k|                break;
  143|  25.5k|            }
  144|  42.6k|            it = result->begin();
  145|  42.6k|        }
  146|  25.5k|    }
  147|       |
  148|       |    // scan localized
  149|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.5k, False: 4.26k]
  ------------------
  150|  25.5k|        auto it = scn::ranges::begin(source);
  151|  68.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  68.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  68.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  68.1k|            auto result = scn::scan<T>(
  154|  68.1k|                global_locale,
  155|  68.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  68.1k|                scn::runtime_format(f));
  157|  68.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.5k, False: 42.6k]
  ------------------
  158|  25.5k|                break;
  159|  25.5k|            }
  160|  42.6k|            it = result->begin();
  161|  42.6k|        }
  162|  25.5k|    }
  163|       |
  164|       |    // scan_value
  165|  4.26k|    {
  166|  4.26k|        auto it = scn::ranges::begin(source);
  167|  12.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  12.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  12.8k|            auto result = scn::scan_value<T>(
  170|  12.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  12.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.26k, False: 8.60k]
  ------------------
  172|  4.26k|                break;
  173|  4.26k|            }
  174|  8.60k|            it = result->begin();
  175|  8.60k|        }
  176|  4.26k|    }
  177|  4.26k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.26k|{
  133|       |    // Regular scan
  134|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.5k, False: 4.26k]
  ------------------
  135|  25.5k|        auto it = scn::ranges::begin(source);
  136|  69.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  69.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  69.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  69.3k|            auto result = scn::scan<T>(
  139|  69.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  69.3k|                scn::runtime_format(f));
  141|  69.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.5k, False: 43.7k]
  ------------------
  142|  25.5k|                break;
  143|  25.5k|            }
  144|  43.7k|            it = result->begin();
  145|  43.7k|        }
  146|  25.5k|    }
  147|       |
  148|       |    // scan localized
  149|  25.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.5k, False: 4.26k]
  ------------------
  150|  25.5k|        auto it = scn::ranges::begin(source);
  151|  69.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  69.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  69.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  69.3k|            auto result = scn::scan<T>(
  154|  69.3k|                global_locale,
  155|  69.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  69.3k|                scn::runtime_format(f));
  157|  69.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.5k, False: 43.7k]
  ------------------
  158|  25.5k|                break;
  159|  25.5k|            }
  160|  43.7k|            it = result->begin();
  161|  43.7k|        }
  162|  25.5k|    }
  163|       |
  164|       |    // scan_value
  165|  4.26k|    {
  166|  4.26k|        auto it = scn::ranges::begin(source);
  167|  13.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.2k|            auto result = scn::scan_value<T>(
  170|  13.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.26k, False: 8.97k]
  ------------------
  172|  4.26k|                break;
  173|  4.26k|            }
  174|  8.97k|            it = result->begin();
  175|  8.97k|        }
  176|  4.26k|    }
  177|  4.26k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.26k|{
   90|  4.26k|    using char_type = ranges::range_value_t<Source>;
   91|  4.26k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.26k|    deque.clear();
   93|  4.26k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.26k|              std::back_inserter(deque));
   95|  4.26k|    return deque;
   96|  4.26k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.26k|{
   79|  4.26k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  4.26k|        return noncontiguous_buffer;
   81|  4.26k|    }
   82|  4.26k|    else {
   83|  4.26k|        return wnoncontiguous_buffer;
   84|  4.26k|    }
   85|  4.26k|}

