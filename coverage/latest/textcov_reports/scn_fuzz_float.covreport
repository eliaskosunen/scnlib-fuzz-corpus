_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.52M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.52M|  chars_format const fmt = options.format;
  277|  1.52M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.52M|  parsed_number_string_t<UC> answer;
  280|  1.52M|  answer.valid = false;
  281|  1.52M|  answer.too_many_digits = false;
  282|  1.52M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.52M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.52M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.52M|  UC const * const start_digits = p;
  303|       |
  304|  1.52M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  8.63M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 7.86M, False: 769k]
  |  Branch (306:25): [True: 7.10M, False: 753k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  7.10M|    i = 10 * i +
  310|  7.10M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  7.10M|    ++p;
  312|  7.10M|  }
  313|  1.52M|  UC const * const end_of_integer_part = p;
  314|  1.52M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.52M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.52M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.52M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.52M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.52M|  int64_t exponent = 0;
  324|  1.52M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 753k, False: 769k]
  |  Branch (324:49): [True: 292k, False: 460k]
  ------------------
  325|  1.52M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 292k, False: 1.23M]
  ------------------
  326|   292k|    ++p;
  327|   292k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   292k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.20M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.01M, False: 185k]
  |  Branch (332:27): [True: 910k, False: 107k]
  ------------------
  333|   910k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   910k|      ++p;
  335|   910k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   910k|    }
  337|   292k|    exponent = before - p;
  338|   292k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   292k|    digit_count -= exponent;
  340|   292k|  }
  341|  1.52M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.52M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.52M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.52M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.52M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.52M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.52M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.30M, False: 217k]
  ------------------
  352|  1.52M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 567k, False: 737k]
  ------------------
  353|  1.52M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 118k, False: 449k]
  |  Branch (353:29): [True: 68.6k, False: 381k]
  ------------------
  354|  1.52M|       ||
  355|  1.52M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.33M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.33M]
  ------------------
  356|  1.33M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.33M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   186k|    UC const * location_of_e = p;
  359|   186k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 118k, False: 68.6k]
  |  Branch (359:28): [True: 68.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   186k|      ++p;
  361|   186k|    }
  362|   186k|    bool neg_exp = false;
  363|   186k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 186k, False: 125]
  |  Branch (363:24): [True: 14.1k, False: 172k]
  ------------------
  364|  14.1k|      neg_exp = true;
  365|  14.1k|      ++p;
  366|   172k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 172k, False: 125]
  |  Branch (366:31): [True: 41.5k, False: 130k]
  ------------------
  367|  41.5k|      ++p;
  368|  41.5k|    }
  369|   186k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 175, False: 186k]
  |  Branch (369:24): [True: 740, False: 185k]
  ------------------
  370|    915|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 915]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    915|      p = location_of_e;
  376|   185k|    } else {
  377|   592k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 455k, False: 137k]
  |  Branch (377:29): [True: 406k, False: 48.4k]
  ------------------
  378|   406k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   406k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 373k, False: 33.1k]
  ------------------
  380|   373k|          exp_number = 10 * exp_number + digit;
  381|   373k|        }
  382|   406k|        ++p;
  383|   406k|      }
  384|   185k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 14.0k, False: 171k]
  ------------------
  385|   185k|      exponent += exp_number;
  386|   185k|    }
  387|  1.33M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.33M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.11M, False: 217k]
  |  Branch (389:44): [True: 0, False: 1.11M]
  ------------------
  390|  1.33M|  }
  391|  1.52M|  answer.lastmatch = p;
  392|  1.52M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.52M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 276k, False: 1.24M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   276k|    UC const * start = start_digits;
  405|  1.12M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.12M, False: 2.42k]
  |  Branch (405:32): [True: 838k, False: 284k]
  |  Branch (405:53): [True: 10.8k, False: 273k]
  ------------------
  406|   848k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 838k, False: 10.8k]
  ------------------
  407|   848k|      start++;
  408|   848k|    }
  409|       |
  410|   276k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 261k, False: 14.8k]
  ------------------
  411|   261k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   261k|      i = 0;
  416|   261k|      p = answer.integer.ptr;
  417|   261k|      UC const* int_end = p + answer.integer.len();
  418|   261k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  2.91M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 2.83M, False: 80.3k]
  |  Branch (419:54): [True: 2.65M, False: 180k]
  ------------------
  420|  2.65M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  2.65M|        ++p;
  422|  2.65M|      }
  423|   261k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 80.3k, False: 180k]
  ------------------
  424|  80.3k|        exponent = end_of_integer_part - p + exp_number;
  425|  80.3k|      }
  426|   180k|      else { // We have a value with a fractional component.
  427|   180k|        p = answer.fraction.ptr;
  428|   180k|        UC const* frac_end = p + answer.fraction.len();
  429|  3.08M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 2.90M, False: 180k]
  |  Branch (429:56): [True: 2.90M, False: 0]
  ------------------
  430|  2.90M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  2.90M|          ++p;
  432|  2.90M|        }
  433|   180k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   180k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   261k|    }
  437|   276k|  }
  438|  1.52M|  answer.exponent = exponent;
  439|  1.52M|  answer.mantissa = i;
  440|  1.52M|  return answer;
  441|  1.52M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  9.52M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  9.52M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 213k, False: 9.30M]
  |  Branch (36:27): [True: 696k, False: 8.61M]
  ------------------
   37|  9.52M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   292k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.03M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 832k, False: 204k]
  |  Branch (249:43): [True: 745k, False: 87.8k]
  ------------------
  250|   745k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   745k|    p += 8;
  252|   745k|  }
  253|   292k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   832k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   832k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   832k|     0x8080808080808080));
  172|   832k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.88M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.88M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.88M|  uint64_t val;
   63|  1.88M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.88M|  return val;
   69|  1.88M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.05M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.05M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.05M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.05M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.05M|  val -= 0x3030303030303030;
  151|  1.05M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.05M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.05M|  return uint32_t(val);
  154|  1.05M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   308k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   308k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   308k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   308k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   308k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   657k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   657k|  chars_format const fmt = options.format;
  277|   657k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   657k|  parsed_number_string_t<UC> answer;
  280|   657k|  answer.valid = false;
  281|   657k|  answer.too_many_digits = false;
  282|   657k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   657k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 657k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   657k|  UC const * const start_digits = p;
  303|       |
  304|   657k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  1.41M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 975k, False: 443k]
  |  Branch (306:25): [True: 760k, False: 214k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   760k|    i = 10 * i +
  310|   760k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   760k|    ++p;
  312|   760k|  }
  313|   657k|  UC const * const end_of_integer_part = p;
  314|   657k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   657k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   657k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   657k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 657k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   657k|  int64_t exponent = 0;
  324|   657k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 214k, False: 443k]
  |  Branch (324:49): [True: 3.28k, False: 211k]
  ------------------
  325|   657k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 3.28k, False: 654k]
  ------------------
  326|  3.28k|    ++p;
  327|  3.28k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  3.28k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  22.7k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 20.7k, False: 2.05k]
  |  Branch (332:27): [True: 19.4k, False: 1.23k]
  ------------------
  333|  19.4k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  19.4k|      ++p;
  335|  19.4k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  19.4k|    }
  337|  3.28k|    exponent = before - p;
  338|  3.28k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  3.28k|    digit_count -= exponent;
  340|  3.28k|  }
  341|   657k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   657k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 657k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   657k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 657k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   657k|  int64_t exp_number = 0;            // explicit exponential part
  351|   657k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 541k, False: 115k]
  ------------------
  352|   657k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 212k, False: 329k]
  ------------------
  353|   657k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 425, False: 211k]
  |  Branch (353:29): [True: 22.6k, False: 189k]
  ------------------
  354|   657k|       ||
  355|   657k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   634k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 634k]
  ------------------
  356|   634k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   634k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  23.0k|    UC const * location_of_e = p;
  359|  23.0k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 425, False: 22.6k]
  |  Branch (359:28): [True: 22.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  23.0k|      ++p;
  361|  23.0k|    }
  362|  23.0k|    bool neg_exp = false;
  363|  23.0k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 23.0k, False: 30]
  |  Branch (363:24): [True: 6.22k, False: 16.7k]
  ------------------
  364|  6.22k|      neg_exp = true;
  365|  6.22k|      ++p;
  366|  16.8k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 16.7k, False: 30]
  |  Branch (366:31): [True: 351, False: 16.4k]
  ------------------
  367|    351|      ++p;
  368|    351|    }
  369|  23.0k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 50, False: 22.9k]
  |  Branch (369:24): [True: 580, False: 22.4k]
  ------------------
  370|    630|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 630]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    630|      p = location_of_e;
  376|  22.4k|    } else {
  377|  83.0k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 67.7k, False: 15.3k]
  |  Branch (377:29): [True: 60.6k, False: 7.08k]
  ------------------
  378|  60.6k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  60.6k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 57.0k, False: 3.58k]
  ------------------
  380|  57.0k|          exp_number = 10 * exp_number + digit;
  381|  57.0k|        }
  382|  60.6k|        ++p;
  383|  60.6k|      }
  384|  22.4k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 6.18k, False: 16.2k]
  ------------------
  385|  22.4k|      exponent += exp_number;
  386|  22.4k|    }
  387|   634k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   634k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 518k, False: 115k]
  |  Branch (389:44): [True: 0, False: 518k]
  ------------------
  390|   634k|  }
  391|   657k|  answer.lastmatch = p;
  392|   657k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   657k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 2.14k, False: 655k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|  2.14k|    UC const * start = start_digits;
  405|  2.72k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 2.72k, False: 0]
  |  Branch (405:32): [True: 576, False: 2.14k]
  |  Branch (405:53): [True: 0, False: 2.14k]
  ------------------
  406|    576|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 576, False: 0]
  ------------------
  407|    576|      start++;
  408|    576|    }
  409|       |
  410|  2.14k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 1.87k, False: 272]
  ------------------
  411|  1.87k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|  1.87k|      i = 0;
  416|  1.87k|      p = answer.integer.ptr;
  417|  1.87k|      UC const* int_end = p + answer.integer.len();
  418|  1.87k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  29.5k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 28.5k, False: 992]
  |  Branch (419:54): [True: 27.6k, False: 884]
  ------------------
  420|  27.6k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  27.6k|        ++p;
  422|  27.6k|      }
  423|  1.87k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 992, False: 884]
  ------------------
  424|    992|        exponent = end_of_integer_part - p + exp_number;
  425|    992|      }
  426|    884|      else { // We have a value with a fractional component.
  427|    884|        p = answer.fraction.ptr;
  428|    884|        UC const* frac_end = p + answer.fraction.len();
  429|  9.06k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 8.18k, False: 884]
  |  Branch (429:56): [True: 8.18k, False: 0]
  ------------------
  430|  8.18k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  8.18k|          ++p;
  432|  8.18k|        }
  433|    884|        exponent = answer.fraction.ptr - p + exp_number;
  434|    884|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|  1.87k|    }
  437|  2.14k|  }
  438|   657k|  answer.exponent = exponent;
  439|   657k|  answer.mantissa = i;
  440|   657k|  return answer;
  441|   657k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  1.08M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  1.08M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 218k, False: 868k]
  |  Branch (36:27): [True: 4.70k, False: 863k]
  ------------------
   37|  1.08M|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  237|  3.28k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  3.28k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  3.28k|    return;
  240|  3.28k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|    108|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|    108|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|    108|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|    108|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|    108|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|    108|uint64_t read8_to_u64(const UC *chars) {
   54|    108|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|    108|    uint64_t val = 0;
   56|    972|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 864, False: 108]
  ------------------
   57|    864|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|    864|      ++chars;
   59|    864|    }
   60|    108|    return val;
   61|    108|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|    108|}

_ZN10fast_float6bigintC2Ev:
  412|  83.9k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   176k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   277k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   277k|    return small_mul(vec, y);
  565|   277k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   407k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   407k|  limb carry = 0;
  284|  1.49M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.08M, False: 407k]
  ------------------
  285|  1.08M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.08M|  }
  287|   407k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 232k, False: 174k]
  ------------------
  288|   232k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   232k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
  289|   232k|  }
  290|   407k|  return true;
  291|   407k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.97M|  constexpr size_t len() const noexcept {
   77|  2.97M|    return length;
   78|  2.97M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.08M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.08M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.08M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.08M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.08M|  carry = limb(z >> limb_bits);
  235|  1.08M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.08M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  3.03M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  3.03M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  3.03M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  3.03M|    return data[index];
   60|  3.03M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   335k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   335k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 335k, False: 0]
  ------------------
   93|   335k|      push_unchecked(value);
   94|   335k|      return true;
   95|   335k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   335k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   380k|  constexpr size_t capacity() const noexcept {
   83|   380k|    return size;
   84|   380k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   412k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   412k|    data[length] = value;
   88|   412k|    length++;
   89|   412k|  }
_ZN10fast_float6bigint3addEm:
  567|   277k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   277k|    return small_add(vec, y);
  569|   277k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   277k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   277k|  return small_add_from(vec, y, 0);
  277|   277k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   277k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   277k|  size_t index = start;
  259|   277k|  limb carry = y;
  260|   277k|  bool overflow;
  261|   425k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 231k, False: 193k]
  |  Branch (261:24): [True: 147k, False: 83.9k]
  ------------------
  262|   147k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   147k|    carry = limb(overflow);
  264|   147k|    index += 1;
  265|   147k|  }
  266|   277k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 83.9k, False: 193k]
  ------------------
  267|  83.9k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  83.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 83.9k]
  |  |  ------------------
  ------------------
  268|  83.9k|  }
  269|   277k|  return true;
  270|   277k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   305k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   305k|  limb z;
  211|       |// gcc and clang
  212|   305k|#if defined(__has_builtin)
  213|   305k|  #if __has_builtin(__builtin_add_overflow)
  214|   305k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   305k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   305k|      return z;
  217|   305k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   305k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  6.83k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  6.83k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  6.83k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.83k]
  |  |  ------------------
  ------------------
  611|  6.83k|    return pow2(exp);
  612|  6.83k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  83.9k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  83.9k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  83.9k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  87.8k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.94k, False: 83.9k]
  ------------------
  582|  3.94k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.94k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.94k]
  |  |  ------------------
  ------------------
  583|  3.94k|      exp -= large_step;
  584|  3.94k|    }
  585|  83.9k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  83.9k|    uint32_t small_step = 27;
  587|  83.9k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   120k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 37.0k, False: 83.9k]
  ------------------
  593|  37.0k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  37.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 37.0k]
  |  |  ------------------
  ------------------
  594|  37.0k|      exp -= small_step;
  595|  37.0k|    }
  596|  83.9k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 72.3k, False: 11.5k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  72.3k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  72.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 72.3k]
  |  |  ------------------
  ------------------
  601|  72.3k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  72.3k|      );
  603|  72.3k|    }
  604|       |
  605|  83.9k|    return true;
  606|  83.9k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.94k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.94k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.94k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.94k|  } else {
  368|  3.94k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.94k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.94k]
  |  |  ------------------
  ------------------
  369|  3.94k|  }
  370|  3.94k|  return true;
  371|  3.94k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.94k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.94k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.94k|  stackvec<size> z(xs);
  338|  3.94k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.94k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.94k, False: 0]
  ------------------
  341|  3.94k|    limb y0 = y[0];
  342|  3.94k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.94k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.94k]
  |  |  ------------------
  ------------------
  343|  19.7k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 15.7k, False: 3.94k]
  ------------------
  344|  15.7k|      limb yi = y[index];
  345|  15.7k|      stackvec<size> zi;
  346|  15.7k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 15.7k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  15.7k|        zi.set_len(0);
  349|  15.7k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  15.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
  350|  15.7k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  15.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
  351|  15.7k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  15.7k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  15.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
  353|  15.7k|      }
  354|  15.7k|    }
  355|  3.94k|  }
  356|       |
  357|  3.94k|  x.normalize();
  358|  3.94k|  return true;
  359|  3.94k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.94k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.94k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.94k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.94k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  60.5k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  60.5k|    length = uint16_t(len);
   75|  60.5k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  19.7k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  19.7k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 19.7k, False: 0]
  ------------------
  108|  19.7k|      extend_unchecked(s);
  109|  19.7k|      return true;
  110|  19.7k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  19.7k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  19.7k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  19.7k|    limb* ptr = data + length;
  102|  19.7k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  19.7k|    set_len(len() + s.len());
  104|  19.7k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  15.7k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  15.7k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 15.7k]
  |  Branch (300:26): [True: 15.5k, False: 258]
  ------------------
  301|  15.5k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  15.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
  302|  15.5k|  }
  303|       |
  304|  15.7k|  bool carry = false;
  305|   130k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 114k, False: 15.7k]
  ------------------
  306|   114k|    limb xi = x[index + start];
  307|   114k|    limb yi = y[index];
  308|   114k|    bool c1 = false;
  309|   114k|    bool c2 = false;
  310|   114k|    xi = scalar_add(xi, yi, c1);
  311|   114k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 42.8k, False: 71.7k]
  ------------------
  312|  42.8k|      xi = scalar_add(xi, 1, c2);
  313|  42.8k|    }
  314|   114k|    x[index + start] = xi;
  315|   114k|    carry = c1 | c2;
  316|   114k|  }
  317|       |
  318|       |  // handle overflow
  319|  15.7k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 15.7k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  15.7k|  return true;
  323|  15.7k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  15.5k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  15.5k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 15.5k]
  ------------------
  132|      0|      return false;
  133|  15.5k|    } else {
  134|  15.5k|      resize_unchecked(new_len, value);
  135|  15.5k|      return true;
  136|  15.5k|    }
  137|  15.5k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  15.5k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  15.5k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 15.5k, False: 0]
  ------------------
  120|  15.5k|      size_t count = new_len - len();
  121|  15.5k|      limb* first = data + len();
  122|  15.5k|      limb* last = first + count;
  123|  15.5k|      ::std::fill(first, last, value);
  124|  15.5k|      set_len(new_len);
  125|  15.5k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  15.5k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  81.0k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  81.0k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 81.0k, False: 0]
  |  Branch (152:25): [True: 0, False: 81.0k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  81.0k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   100k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   100k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   100k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   100k|    size_t rindex = length - index - 1;
   69|   100k|    return data[rindex];
   70|   100k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  83.8k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  83.8k|    return shl(exp);
  574|  83.8k|  }
_ZN10fast_float6bigint3shlEm:
  530|  83.8k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  83.8k|    size_t rem = n % limb_bits;
  532|  83.8k|    size_t div = n / limb_bits;
  533|  83.8k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 77.2k, False: 6.62k]
  ------------------
  534|  77.2k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  77.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 77.2k]
  |  |  ------------------
  ------------------
  535|  77.2k|    }
  536|  83.8k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 9.53k, False: 74.3k]
  ------------------
  537|  9.53k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  9.53k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.53k]
  |  |  ------------------
  ------------------
  538|  9.53k|    }
  539|  83.8k|    return true;
  540|  83.8k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  77.2k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  77.2k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  77.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  77.2k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  77.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  77.2k|    size_t shl = n;
  493|  77.2k|    size_t shr = limb_bits - shl;
  494|  77.2k|    limb prev = 0;
  495|   249k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 172k, False: 77.2k]
  ------------------
  496|   172k|      limb xi = vec[index];
  497|   172k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   172k|      prev = xi;
  499|   172k|    }
  500|       |
  501|  77.2k|    limb carry = prev >> shr;
  502|  77.2k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 19.1k, False: 58.0k]
  ------------------
  503|  19.1k|      return vec.try_push(carry);
  504|  19.1k|    }
  505|  58.0k|    return true;
  506|  77.2k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  9.53k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  9.53k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  9.53k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  9.53k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 9.53k]
  ------------------
  512|      0|      return false;
  513|  9.53k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 9.53k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  9.53k|      limb* dst = vec.data + n;
  516|  9.53k|      const limb* src = vec.data;
  517|  9.53k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  9.53k|      limb* first = vec.data;
  520|  9.53k|      limb* last = first + n;
  521|  9.53k|      ::std::fill(first, last, 0);
  522|  9.53k|      vec.set_len(n + vec.len());
  523|  9.53k|      return true;
  524|  9.53k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  9.53k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  16.3k|  constexpr bool is_empty() const noexcept {
   80|  16.3k|    return length == 0;
   81|  16.3k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  6.83k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  6.83k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  6.83k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 6.83k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  6.83k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.16k, False: 5.66k]
  ------------------
  435|  1.16k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  5.66k|    } else {
  437|  5.66k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  5.66k|      truncated |= vec.nonzero(2);
  439|  5.66k|      return result;
  440|  5.66k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  6.83k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.16k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.16k|  truncated = false;
  167|  1.16k|  int shl = leading_zeroes(r0);
  168|  1.16k|  return r0 << shl;
  169|  1.16k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  5.66k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  5.66k|  int shl = leading_zeroes(r0);
  174|  5.66k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 5.63k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  5.63k|  } else {
  178|  5.63k|    int shr = 64 - shl;
  179|  5.63k|    truncated = (r1 << shl) != 0;
  180|  5.63k|    return (r0 << shl) | (r1 >> shr);
  181|  5.63k|  }
  182|  5.66k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  5.66k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  5.70k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 547, False: 5.16k]
  ------------------
  143|    547|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 507, False: 40]
  ------------------
  144|    507|        return true;
  145|    507|      }
  146|     40|      index++;
  147|     40|    }
  148|  5.16k|    return false;
  149|  5.66k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  6.83k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  6.83k|    int lz = ctlz();
  560|  6.83k|    return int(limb_bits * vec.len()) - lz;
  561|  6.83k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  6.83k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  6.83k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 6.83k]
  ------------------
  545|      0|      return 0;
  546|  6.83k|    } else {
  547|  6.83k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  6.83k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  6.83k|    }
  555|  6.83k|  }
_ZN10fast_float6bigintC2Em:
  418|  77.1k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  77.1k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  77.1k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  77.1k|    vec.normalize();
  426|  77.1k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  77.1k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  77.1k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 77.1k]
  ------------------
  464|      0|      return 1;
  465|  77.1k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 77.1k]
  ------------------
  466|      0|      return -1;
  467|  77.1k|    } else {
  468|   150k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 146k, False: 4.73k]
  ------------------
  469|   146k|        limb xi = vec[index - 1];
  470|   146k|        limb yi = other.vec[index - 1];
  471|   146k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 16.8k, False: 129k]
  ------------------
  472|  16.8k|          return 1;
  473|   129k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 55.5k, False: 73.7k]
  ------------------
  474|  55.5k|          return -1;
  475|  55.5k|        }
  476|   146k|      }
  477|  4.73k|      return 0;
  478|  77.1k|    }
  479|  77.1k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   292k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   292k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   292k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   292k|    return data[index];
   64|   292k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   359k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   359k|  adjusted_mantissa answer;
   96|   359k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 5.31k, False: 354k]
  |  Branch (96:19): [True: 1.96k, False: 352k]
  ------------------
   97|  7.28k|    answer.power2 = 0;
   98|  7.28k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  7.28k|    return answer;
  101|  7.28k|  }
  102|   352k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 10.4k, False: 341k]
  ------------------
  103|       |    // we want to get infinity:
  104|  10.4k|    answer.power2 = binary::infinite_power();
  105|  10.4k|    answer.mantissa = 0;
  106|  10.4k|    return answer;
  107|  10.4k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   341k|  int lz = leading_zeroes(w);
  112|   341k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   341k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   341k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   341k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   341k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   341k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.57k, False: 340k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.57k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 88, False: 1.48k]
  ------------------
  137|     88|      answer.power2 = 0;
  138|     88|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     88|      return answer;
  141|     88|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  1.48k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  1.48k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  1.48k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  1.48k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 1.48k, False: 0]
  ------------------
  156|  1.48k|    return answer;
  157|  1.57k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   340k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 125k, False: 214k]
  |  Branch (162:30): [True: 122k, False: 3.06k]
  |  Branch (162:77): [True: 113k, False: 8.93k]
  ------------------
  163|   340k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 12.5k, False: 101k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  12.5k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 5.05k, False: 7.48k]
  ------------------
  168|  5.05k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  5.05k|    }
  170|  12.5k|  }
  171|       |
  172|   340k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   340k|  answer.mantissa >>= 1;
  174|   340k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 27.3k, False: 312k]
  ------------------
  175|  27.3k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  27.3k|    answer.power2++; // undo previous addition
  177|  27.3k|  }
  178|       |
  179|   340k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   340k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.43k, False: 338k]
  ------------------
  181|  1.43k|    answer.power2 = binary::infinite_power();
  182|  1.43k|    answer.mantissa = 0;
  183|  1.43k|  }
  184|   340k|  return answer;
  185|   341k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   379k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   379k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   379k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   379k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   379k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   379k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   379k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 70.6k, False: 308k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  70.6k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  70.6k|    firstproduct.low += secondproduct.high;
   35|  70.6k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 51.1k, False: 19.5k]
  ------------------
   36|  51.1k|      firstproduct.high++;
   37|  51.1k|    }
   38|  70.6k|  }
   39|   379k|  return firstproduct;
   40|   379k|}
_ZN10fast_float6detail5powerEi:
   58|   742k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   742k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   742k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  37.2k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  37.2k|  int lz = leading_zeroes(w);
   82|  37.2k|  w <<= lz;
   83|  37.2k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  37.2k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  37.2k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  37.2k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  37.2k|  int hilz = int(w >> 63) ^ 1;
   69|  37.2k|  adjusted_mantissa answer;
   70|  37.2k|  answer.mantissa = w << hilz;
   71|  37.2k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  37.2k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  37.2k|  return answer;
   74|  37.2k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   327k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   327k|  adjusted_mantissa answer;
   96|   327k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 5.00k, False: 322k]
  |  Branch (96:19): [True: 564, False: 321k]
  ------------------
   97|  5.56k|    answer.power2 = 0;
   98|  5.56k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  5.56k|    return answer;
  101|  5.56k|  }
  102|   321k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 5.37k, False: 316k]
  ------------------
  103|       |    // we want to get infinity:
  104|  5.37k|    answer.power2 = binary::infinite_power();
  105|  5.37k|    answer.mantissa = 0;
  106|  5.37k|    return answer;
  107|  5.37k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   316k|  int lz = leading_zeroes(w);
  112|   316k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   316k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   316k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   316k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   316k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   316k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 7.42k, False: 309k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  7.42k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 118, False: 7.31k]
  ------------------
  137|    118|      answer.power2 = 0;
  138|    118|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    118|      return answer;
  141|    118|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  7.31k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  7.31k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  7.31k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  7.31k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 7.31k, False: 0]
  ------------------
  156|  7.31k|    return answer;
  157|  7.42k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   309k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 100k, False: 208k]
  |  Branch (162:30): [True: 58.0k, False: 42.1k]
  |  Branch (162:77): [True: 50.5k, False: 7.49k]
  ------------------
  163|   309k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 9.50k, False: 40.9k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  9.50k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 7.52k, False: 1.98k]
  ------------------
  168|  7.52k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  7.52k|    }
  170|  9.50k|  }
  171|       |
  172|   309k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   309k|  answer.mantissa >>= 1;
  174|   309k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 26.6k, False: 282k]
  ------------------
  175|  26.6k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  26.6k|    answer.power2++; // undo previous addition
  177|  26.6k|  }
  178|       |
  179|   309k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   309k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 366, False: 308k]
  ------------------
  181|    366|    answer.power2 = binary::infinite_power();
  182|    366|    answer.mantissa = 0;
  183|    366|  }
  184|   309k|  return answer;
  185|   316k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   363k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   363k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   363k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   363k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   363k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   363k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   363k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 130k, False: 232k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   130k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   130k|    firstproduct.low += secondproduct.high;
   35|   130k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 45.7k, False: 85.1k]
  ------------------
   36|  45.7k|      firstproduct.high++;
   37|  45.7k|    }
   38|   130k|  }
   39|   363k|  return firstproduct;
   40|   363k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  46.6k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  46.6k|  int lz = leading_zeroes(w);
   82|  46.6k|  w <<= lz;
   83|  46.6k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  46.6k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  46.6k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  46.6k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  46.6k|  int hilz = int(w >> 63) ^ 1;
   69|  46.6k|  adjusted_mantissa answer;
   70|  46.6k|  answer.mantissa = w << hilz;
   71|  46.6k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  46.6k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  46.6k|  return answer;
   74|  46.6k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  37.2k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  37.2k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  37.2k|  int32_t sci_exp = scientific_exponent(num);
  411|  37.2k|  size_t max_digits = binary_format<T>::max_digits();
  412|  37.2k|  size_t digits = 0;
  413|  37.2k|  bigint bigmant;
  414|  37.2k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  37.2k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  37.2k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 558, False: 36.7k]
  ------------------
  418|    558|    return positive_digit_comp<T>(bigmant, exponent);
  419|  36.7k|  } else {
  420|  36.7k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  36.7k|  }
  422|  37.2k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  83.8k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  83.8k|  uint64_t mantissa = num.mantissa;
   30|  83.8k|  int32_t exponent = int32_t(num.exponent);
   31|   419k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 335k, False: 83.8k]
  ------------------
   32|   335k|    mantissa /= 10000;
   33|   335k|    exponent += 4;
   34|   335k|  }
   35|   167k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 83.8k, False: 83.8k]
  ------------------
   36|  83.8k|    mantissa /= 100;
   37|  83.8k|    exponent += 2;
   38|  83.8k|  }
   39|  83.8k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 83.8k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  83.8k|  return exponent;
   44|  83.8k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  83.8k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  83.8k|  size_t counter = 0;
  245|  83.8k|  digits = 0;
  246|  83.8k|  limb value = 0;
  247|  83.8k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  83.8k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  83.8k|  UC const * p = num.integer.ptr;
  255|  83.8k|  UC const * pend = p + num.integer.len();
  256|  83.8k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   183k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 100k, False: 83.5k]
  ------------------
  259|   166k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 83.3k, False: 83.0k]
  |  Branch (259:45): [True: 66.3k, False: 16.9k]
  |  Branch (259:70): [True: 66.0k, False: 307]
  ------------------
  260|  66.0k|      parse_eight_digits(p, value, counter, digits);
  261|  66.0k|    }
  262|   315k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 295k, False: 19.9k]
  |  Branch (262:30): [True: 215k, False: 80.0k]
  |  Branch (262:43): [True: 214k, False: 307]
  ------------------
  263|   214k|      parse_one_digit(p, value, counter, digits);
  264|   214k|    }
  265|   100k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 307, False: 99.9k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    307|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    307|      bool truncated = is_truncated(p, pend);
  269|    307|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 271, False: 36]
  ------------------
  270|    271|        truncated |= is_truncated(num.fraction);
  271|    271|      }
  272|    307|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 199, False: 108]
  ------------------
  273|    199|        round_up_bigint(result, digits);
  274|    199|      }
  275|    307|      return;
  276|  99.9k|    } else {
  277|  99.9k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  99.9k|      counter = 0;
  279|  99.9k|      value = 0;
  280|  99.9k|    }
  281|   100k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  83.5k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 77.2k, False: 6.26k]
  ------------------
  285|  77.2k|    p = num.fraction.ptr;
  286|  77.2k|    pend = p + num.fraction.len();
  287|  77.2k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 3.47k, False: 73.8k]
  ------------------
  288|  3.47k|      skip_zeros(p, pend);
  289|  3.47k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   246k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 173k, False: 72.4k]
  ------------------
  292|   416k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 324k, False: 91.1k]
  |  Branch (292:47): [True: 244k, False: 80.1k]
  |  Branch (292:72): [True: 242k, False: 2.33k]
  ------------------
  293|   242k|        parse_eight_digits(p, value, counter, digits);
  294|   242k|      }
  295|   723k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 624k, False: 99.0k]
  |  Branch (295:32): [True: 553k, False: 70.6k]
  |  Branch (295:45): [True: 549k, False: 3.86k]
  ------------------
  296|   549k|        parse_one_digit(p, value, counter, digits);
  297|   549k|      }
  298|   173k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 4.84k, False: 168k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  4.84k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  4.84k|        bool truncated = is_truncated(p, pend);
  302|  4.84k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.63k, False: 1.21k]
  ------------------
  303|  3.63k|          round_up_bigint(result, digits);
  304|  3.63k|        }
  305|  4.84k|        return;
  306|   168k|      } else {
  307|   168k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   168k|        counter = 0;
  309|   168k|        value = 0;
  310|   168k|      }
  311|   173k|    }
  312|  77.2k|  }
  313|       |
  314|  78.7k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 78.7k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  78.7k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  87.3k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  87.3k|  uint64_t val;
  161|   105k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 53.7k, False: 52.1k]
  ------------------
  162|  53.7k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  53.7k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 35.2k, False: 18.5k]
  ------------------
  164|  35.2k|      break;
  165|  35.2k|    }
  166|  18.5k|    first += int_cmp_len<UC>();
  167|  18.5k|  }
  168|   178k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 174k, False: 3.47k]
  ------------------
  169|   174k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 83.8k, False: 90.9k]
  ------------------
  170|  83.8k|      break;
  171|  83.8k|    }
  172|  90.9k|    first++;
  173|  90.9k|  }
  174|  87.3k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   308k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   308k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   308k|  p += 8;
  210|   308k|  counter += 8;
  211|   308k|  count += 8;
  212|   308k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   764k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   764k|  value = value * 10 + limb(*p - UC('0'));
  218|   764k|  p++;
  219|   764k|  counter++;
  220|   764k|  count++;
  221|   764k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   277k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   277k|  big.mul(power);
  226|   277k|  big.add(value);
  227|   277k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  5.42k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  5.42k|  uint64_t val;
  183|  10.1k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 6.49k, False: 3.62k]
  ------------------
  184|  6.49k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  6.49k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.80k, False: 4.69k]
  ------------------
  186|  1.80k|      return true;
  187|  1.80k|    }
  188|  4.69k|    first += int_cmp_len<UC>();
  189|  4.69k|  }
  190|  5.29k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 3.78k, False: 1.50k]
  ------------------
  191|  3.78k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.12k, False: 1.66k]
  ------------------
  192|  2.12k|      return true;
  193|  2.12k|    }
  194|  1.66k|    ++first;
  195|  1.66k|  }
  196|  1.50k|  return false;
  197|  3.62k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    271|bool is_truncated(span<const UC> s) noexcept {
  201|    271|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    271|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  3.82k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  3.82k|  add_native(big, 10, 1);
  234|  3.82k|  count++;
  235|  3.82k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    558|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    558|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    558|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    558|  adjusted_mantissa answer;
  324|    558|  bool truncated;
  325|    558|  answer.mantissa = bigmant.hi64(truncated);
  326|    558|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    558|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    558|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    558|    });
  333|    558|  });
  334|       |
  335|    558|  return answer;
  336|    558|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    558|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    558|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    558|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 558]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    558|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    558|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 558]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    558|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    558|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 558]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    558|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    558|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    558|    });
  333|    558|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    558|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    558|  const uint64_t mask
  125|    558|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 558]
  ------------------
  126|    558|    ? UINT64_MAX
  127|    558|    : (uint64_t(1) << shift) - 1;
  128|    558|  const uint64_t halfway
  129|    558|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 558]
  ------------------
  130|    558|    ? 0
  131|    558|    : uint64_t(1) << (shift - 1);
  132|    558|  uint64_t truncated_bits = am.mantissa & mask;
  133|    558|  bool is_above = truncated_bits > halfway;
  134|    558|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    558|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 558]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    558|  } else {
  140|    558|    am.mantissa >>= shift;
  141|    558|  }
  142|    558|  am.power2 += shift;
  143|       |
  144|    558|  bool is_odd = (am.mantissa & 1) == 1;
  145|    558|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    558|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 484]
  |  Branch (331:27): [True: 352, False: 132]
  |  Branch (331:41): [True: 58, False: 294]
  |  Branch (331:56): [True: 60, False: 366]
  |  Branch (331:66): [True: 32, False: 28]
  ------------------
  332|    558|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  36.7k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  36.7k|  bigint& real_digits = bigmant;
  347|  36.7k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  36.7k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  36.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  36.7k|  T b;
  354|  36.7k|  to_float(false, am_b, b);
  355|  36.7k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  36.7k|  bigint theor_digits(theor.mantissa);
  357|  36.7k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  36.7k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  36.7k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  36.7k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 36.7k, False: 0]
  ------------------
  363|  36.7k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  36.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  36.7k|  }
  365|  36.7k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 36.7k, False: 0]
  ------------------
  366|  36.7k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  36.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  36.7k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  36.7k|  int ord = real_digits.compare(theor_digits);
  373|  36.7k|  adjusted_mantissa answer = am;
  374|  36.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  36.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.7k|      (void)_;  // not needed, since we've done our comparison
  377|  36.7k|      (void)__; // not needed, since we've done our comparison
  378|  36.7k|      if (ord > 0) {
  379|  36.7k|        return true;
  380|  36.7k|      } else if (ord < 0) {
  381|  36.7k|        return false;
  382|  36.7k|      } else {
  383|  36.7k|        return is_odd;
  384|  36.7k|      }
  385|  36.7k|    });
  386|  36.7k|  });
  387|       |
  388|  36.7k|  return answer;
  389|  36.7k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  36.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  36.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  36.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 36.7k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  36.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  36.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 36.7k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  36.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  36.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 36.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  36.7k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  36.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  77.1k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  77.1k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 77.1k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  77.1k|  } else {
  153|  77.1k|    am.mantissa >>= shift;
  154|  77.1k|  }
  155|  77.1k|  am.power2 += shift;
  156|  77.1k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  36.7k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  36.7k|  adjusted_mantissa am = to_extended(value);
   84|  36.7k|  am.mantissa <<= 1;
   85|  36.7k|  am.mantissa += 1;
   86|  36.7k|  am.power2 -= 1;
   87|  36.7k|  return am;
   88|  36.7k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  36.7k|adjusted_mantissa to_extended(T value) noexcept {
   50|  36.7k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  36.7k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  36.7k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  36.7k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  36.7k|  adjusted_mantissa am;
   56|  36.7k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  36.7k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  36.7k|  ::memcpy(&bits, &value, sizeof(T));
   62|  36.7k|#endif
   63|  36.7k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 36.7k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  36.7k|  } else {
   68|       |    // normal
   69|  36.7k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  36.7k|    am.power2 -= bias;
   71|  36.7k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  36.7k|  }
   73|       |
   74|  36.7k|  return am;
   75|  36.7k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  36.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  36.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  36.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 36.7k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  36.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  36.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 36.7k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  36.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  36.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 36.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  36.7k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  36.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  36.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.7k|      (void)_;  // not needed, since we've done our comparison
  377|  36.7k|      (void)__; // not needed, since we've done our comparison
  378|  36.7k|      if (ord > 0) {
  379|  36.7k|        return true;
  380|  36.7k|      } else if (ord < 0) {
  381|  36.7k|        return false;
  382|  36.7k|      } else {
  383|  36.7k|        return is_odd;
  384|  36.7k|      }
  385|  36.7k|    });
  386|  36.7k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  36.7k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  36.7k|  const uint64_t mask
  125|  36.7k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 36.7k]
  ------------------
  126|  36.7k|    ? UINT64_MAX
  127|  36.7k|    : (uint64_t(1) << shift) - 1;
  128|  36.7k|  const uint64_t halfway
  129|  36.7k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 36.7k]
  ------------------
  130|  36.7k|    ? 0
  131|  36.7k|    : uint64_t(1) << (shift - 1);
  132|  36.7k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  36.7k|  bool is_above = truncated_bits > halfway;
  134|  36.7k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  36.7k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 36.7k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  36.7k|  } else {
  140|  36.7k|    am.mantissa >>= shift;
  141|  36.7k|  }
  142|  36.7k|  am.power2 += shift;
  143|       |
  144|  36.7k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  36.7k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  36.7k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  36.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.7k|      (void)_;  // not needed, since we've done our comparison
  377|  36.7k|      (void)__; // not needed, since we've done our comparison
  378|  36.7k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 36.5k]
  ------------------
  379|    210|        return true;
  380|  36.5k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 32.2k, False: 4.21k]
  ------------------
  381|  32.2k|        return false;
  382|  32.2k|      } else {
  383|  4.21k|        return is_odd;
  384|  4.21k|      }
  385|  36.7k|    });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|     72|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|     72|  uint64_t mantissa = num.mantissa;
   30|     72|  int32_t exponent = int32_t(num.exponent);
   31|    360|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 288, False: 72]
  ------------------
   32|    288|    mantissa /= 10000;
   33|    288|    exponent += 4;
   34|    288|  }
   35|    144|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 72, False: 72]
  ------------------
   36|     72|    mantissa /= 100;
   37|     72|    exponent += 2;
   38|     72|  }
   39|     72|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 72]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|     72|  return exponent;
   44|     72|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|     72|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|     72|  size_t counter = 0;
  245|     72|  digits = 0;
  246|     72|  limb value = 0;
  247|     72|#ifdef FASTFLOAT_64BIT_LIMB
  248|     72|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|     72|  UC const * p = num.integer.ptr;
  255|     72|  UC const * pend = p + num.integer.len();
  256|     72|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|    144|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 72, False: 72]
  ------------------
  259|     72|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 0, False: 72]
  |  Branch (259:45): [True: 0, False: 0]
  |  Branch (259:70): [True: 0, False: 0]
  ------------------
  260|      0|      parse_eight_digits(p, value, counter, digits);
  261|      0|    }
  262|    576|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 576, False: 0]
  |  Branch (262:30): [True: 504, False: 72]
  |  Branch (262:43): [True: 504, False: 0]
  ------------------
  263|    504|      parse_one_digit(p, value, counter, digits);
  264|    504|    }
  265|     72|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 72]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|     72|    } else {
  277|     72|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|     72|      counter = 0;
  279|     72|      value = 0;
  280|     72|    }
  281|     72|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|     72|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 72, False: 0]
  ------------------
  285|     72|    p = num.fraction.ptr;
  286|     72|    pend = p + num.fraction.len();
  287|     72|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 0, False: 72]
  ------------------
  288|      0|      skip_zeros(p, pend);
  289|      0|    }
  290|       |    // process all digits, in increments of step per loop
  291|    162|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 90, False: 72]
  ------------------
  292|    198|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 108, False: 90]
  |  Branch (292:47): [True: 108, False: 0]
  |  Branch (292:72): [True: 108, False: 0]
  ------------------
  293|    108|        parse_eight_digits(p, value, counter, digits);
  294|    108|      }
  295|    432|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 414, False: 18]
  |  Branch (295:32): [True: 342, False: 72]
  |  Branch (295:45): [True: 342, False: 0]
  ------------------
  296|    342|        parse_one_digit(p, value, counter, digits);
  297|    342|      }
  298|     90|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 0, False: 90]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|      0|        bool truncated = is_truncated(p, pend);
  302|      0|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 0, False: 0]
  ------------------
  303|      0|          round_up_bigint(result, digits);
  304|      0|        }
  305|      0|        return;
  306|     90|      } else {
  307|     90|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|     90|        counter = 0;
  309|     90|        value = 0;
  310|     90|      }
  311|     90|    }
  312|     72|  }
  313|       |
  314|     72|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 72]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|     72|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|     72|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|     72|  uint64_t val;
  161|     72|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 72, False: 0]
  ------------------
  162|     72|    ::memcpy(&val, first, sizeof(uint64_t));
  163|     72|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 72, False: 0]
  ------------------
  164|     72|      break;
  165|     72|    }
  166|      0|    first += int_cmp_len<UC>();
  167|      0|  }
  168|     72|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 72, False: 0]
  ------------------
  169|     72|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 72, False: 0]
  ------------------
  170|     72|      break;
  171|     72|    }
  172|      0|    first++;
  173|      0|  }
  174|     72|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|    108|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|    108|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|    108|  p += 8;
  210|    108|  counter += 8;
  211|    108|  count += 8;
  212|    108|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|    846|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|    846|  value = value * 10 + limb(*p - UC('0'));
  218|    846|  p++;
  219|    846|  counter++;
  220|    846|  count++;
  221|    846|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  46.5k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  46.5k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  46.5k|  int32_t sci_exp = scientific_exponent(num);
  411|  46.5k|  size_t max_digits = binary_format<T>::max_digits();
  412|  46.5k|  size_t digits = 0;
  413|  46.5k|  bigint bigmant;
  414|  46.5k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  46.5k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  46.5k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 6.27k, False: 40.3k]
  ------------------
  418|  6.27k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  40.3k|  } else {
  420|  40.3k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  40.3k|  }
  422|  46.5k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  6.27k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  6.27k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  6.27k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  6.27k|  adjusted_mantissa answer;
  324|  6.27k|  bool truncated;
  325|  6.27k|  answer.mantissa = bigmant.hi64(truncated);
  326|  6.27k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  6.27k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  6.27k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  6.27k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.27k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  6.27k|    });
  333|  6.27k|  });
  334|       |
  335|  6.27k|  return answer;
  336|  6.27k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  6.27k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  6.27k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  6.27k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 6.27k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  6.27k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  6.27k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 602, False: 5.67k]
  ------------------
  109|    602|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    602|    am.power2++;
  111|    602|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  6.27k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  6.27k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 6.27k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  6.27k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  6.27k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  6.27k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.27k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  6.27k|    });
  333|  6.27k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  6.27k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  6.27k|  const uint64_t mask
  125|  6.27k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 6.27k]
  ------------------
  126|  6.27k|    ? UINT64_MAX
  127|  6.27k|    : (uint64_t(1) << shift) - 1;
  128|  6.27k|  const uint64_t halfway
  129|  6.27k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 6.27k]
  ------------------
  130|  6.27k|    ? 0
  131|  6.27k|    : uint64_t(1) << (shift - 1);
  132|  6.27k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  6.27k|  bool is_above = truncated_bits > halfway;
  134|  6.27k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  6.27k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 6.27k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  6.27k|  } else {
  140|  6.27k|    am.mantissa >>= shift;
  141|  6.27k|  }
  142|  6.27k|  am.power2 += shift;
  143|       |
  144|  6.27k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  6.27k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  6.27k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  6.27k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.27k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 710, False: 5.56k]
  |  Branch (331:27): [True: 4.71k, False: 857]
  |  Branch (331:41): [True: 1.02k, False: 3.68k]
  |  Branch (331:56): [True: 487, False: 4.05k]
  |  Branch (331:66): [True: 60, False: 427]
  ------------------
  332|  6.27k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  40.3k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  40.3k|  bigint& real_digits = bigmant;
  347|  40.3k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  40.3k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  40.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  40.3k|  T b;
  354|  40.3k|  to_float(false, am_b, b);
  355|  40.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  40.3k|  bigint theor_digits(theor.mantissa);
  357|  40.3k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  40.3k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  40.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  40.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 40.3k, False: 0]
  ------------------
  363|  40.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  40.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  40.3k|  }
  365|  40.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 3.21k, False: 37.1k]
  ------------------
  366|  3.21k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  3.21k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  37.1k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 37.0k, False: 102]
  ------------------
  368|  37.0k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  37.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  37.0k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  40.3k|  int ord = real_digits.compare(theor_digits);
  373|  40.3k|  adjusted_mantissa answer = am;
  374|  40.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  40.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  40.3k|      (void)_;  // not needed, since we've done our comparison
  377|  40.3k|      (void)__; // not needed, since we've done our comparison
  378|  40.3k|      if (ord > 0) {
  379|  40.3k|        return true;
  380|  40.3k|      } else if (ord < 0) {
  381|  40.3k|        return false;
  382|  40.3k|      } else {
  383|  40.3k|        return is_odd;
  384|  40.3k|      }
  385|  40.3k|    });
  386|  40.3k|  });
  387|       |
  388|  40.3k|  return answer;
  389|  40.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  40.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  40.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  40.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 118, False: 40.2k]
  ------------------
   96|       |    // have a denormal float
   97|    118|    int32_t shift = -am.power2 + 1;
   98|    118|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    118|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 118, False: 0]
  ------------------
  101|    118|    return;
  102|    118|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  40.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  40.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 40.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  40.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  40.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 40.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  40.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  40.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  40.3k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  40.3k|  adjusted_mantissa am = to_extended(value);
   84|  40.3k|  am.mantissa <<= 1;
   85|  40.3k|  am.mantissa += 1;
   86|  40.3k|  am.power2 -= 1;
   87|  40.3k|  return am;
   88|  40.3k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  40.3k|adjusted_mantissa to_extended(T value) noexcept {
   50|  40.3k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  40.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  40.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  40.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  40.3k|  adjusted_mantissa am;
   56|  40.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  40.3k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  40.3k|  ::memcpy(&bits, &value, sizeof(T));
   62|  40.3k|#endif
   63|  40.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 118, False: 40.2k]
  ------------------
   64|       |    // denormal
   65|    118|    am.power2 = 1 - bias;
   66|    118|    am.mantissa = bits & mantissa_mask;
   67|  40.2k|  } else {
   68|       |    // normal
   69|  40.2k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  40.2k|    am.power2 -= bias;
   71|  40.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  40.2k|  }
   73|       |
   74|  40.3k|  return am;
   75|  40.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  40.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  40.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  40.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 118, False: 40.2k]
  ------------------
   96|       |    // have a denormal float
   97|    118|    int32_t shift = -am.power2 + 1;
   98|    118|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    118|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 118, False: 0]
  ------------------
  101|    118|    return;
  102|    118|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  40.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  40.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 90, False: 40.1k]
  ------------------
  109|     90|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     90|    am.power2++;
  111|     90|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  40.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  40.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 40.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  40.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  40.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  40.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  40.3k|      (void)_;  // not needed, since we've done our comparison
  377|  40.3k|      (void)__; // not needed, since we've done our comparison
  378|  40.3k|      if (ord > 0) {
  379|  40.3k|        return true;
  380|  40.3k|      } else if (ord < 0) {
  381|  40.3k|        return false;
  382|  40.3k|      } else {
  383|  40.3k|        return is_odd;
  384|  40.3k|      }
  385|  40.3k|    });
  386|  40.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  40.3k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  40.3k|  const uint64_t mask
  125|  40.3k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 40.3k]
  ------------------
  126|  40.3k|    ? UINT64_MAX
  127|  40.3k|    : (uint64_t(1) << shift) - 1;
  128|  40.3k|  const uint64_t halfway
  129|  40.3k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 40.3k]
  ------------------
  130|  40.3k|    ? 0
  131|  40.3k|    : uint64_t(1) << (shift - 1);
  132|  40.3k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  40.3k|  bool is_above = truncated_bits > halfway;
  134|  40.3k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  40.3k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 40.3k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  40.3k|  } else {
  140|  40.3k|    am.mantissa >>= shift;
  141|  40.3k|  }
  142|  40.3k|  am.power2 += shift;
  143|       |
  144|  40.3k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  40.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  40.3k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  40.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  40.3k|      (void)_;  // not needed, since we've done our comparison
  377|  40.3k|      (void)__; // not needed, since we've done our comparison
  378|  40.3k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 16.6k, False: 23.7k]
  ------------------
  379|  16.6k|        return true;
  380|  23.7k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 23.2k, False: 518]
  ------------------
  381|  23.2k|        return false;
  382|  23.2k|      } else {
  383|    518|        return is_odd;
  384|    518|      }
  385|  40.3k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|     72|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|     72|  am.power2 -= invalid_am_bias;
  409|       |
  410|     72|  int32_t sci_exp = scientific_exponent(num);
  411|     72|  size_t max_digits = binary_format<T>::max_digits();
  412|     72|  size_t digits = 0;
  413|     72|  bigint bigmant;
  414|     72|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|     72|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|     72|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 72]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|     72|  } else {
  420|     72|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|     72|  }
  422|     72|}

_ZN10fast_float4spanIKcEC2Ev:
  235|  3.04M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.81M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   603k|  constexpr size_t len() const noexcept {
  238|   603k|    return length;
  239|   603k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.03M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.03M|  return -10;
  469|  1.03M|#endif
  470|  1.03M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   975k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   975k|  return 10;
  517|   975k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   855k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   855k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   855k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.51M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.51M|  return 23;
  477|  2.51M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   806k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   806k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   806k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   854k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   354k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   354k|  return -65;
  568|   354k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   352k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   352k|  return 38;
  559|   352k|}
_ZN10fast_float14leading_zeroesEm:
  268|   756k|int leading_zeroes(uint64_t input_num) {
  269|   756k|  assert(input_num > 0);
  270|   756k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   756k|  return __builtin_clzll(input_num);
  285|   756k|#endif
  286|   756k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   943k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   943k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   943k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   943k|  answer.low = uint64_t(r);
  337|   943k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   943k|  return answer;
  342|   943k|}
_ZN10fast_float8value128C2Ev:
  251|   943k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   416k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   416k|  return -127;
  500|   416k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   125k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   125k|  return -17;
  493|   125k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   122k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   122k|  return 10;
  485|   122k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   263k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   263k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 83.9k, False: 179k]
  |  Branch (352:38): [True: 0, False: 179k]
  ------------------
  353|   263k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  37.2k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  37.2k|  return 114;
  575|  37.2k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   139k|{
  650|   139k|    return sizeof(uint64_t) / sizeof(UC);
  651|   139k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  60.2k|{
  644|  60.2k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  60.2k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  60.2k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   107k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   248k|  constexpr size_t len() const noexcept {
  238|   248k|    return length;
  239|   248k|  }
_ZNK10fast_float4spanImEixEm:
  241|   134k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   134k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   134k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   134k|    return ptr[index];
  244|   134k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   267k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   267k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   267k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   267k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   267k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   267k|  ::memcpy(&value, &word, sizeof(T));
  615|   267k|#endif
  616|   267k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   267k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   653k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   653k|  return 0xFF;
  507|   653k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.52M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|  1.31M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   661k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|  2.90k|  constexpr size_t len() const noexcept {
  238|  2.90k|    return length;
  239|  2.90k|  }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  649|     72|{
  650|     72|    return sizeof(uint64_t) / sizeof(UC);
  651|     72|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  643|     72|{
  644|     72|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|     72|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|     72|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   657k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.14M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.14M|  return -22;
  461|  1.14M|#endif
  462|  1.14M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.12M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.12M|  return 22;
  514|  1.12M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   961k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   961k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   961k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.56M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.56M|  return 52;
  474|  2.56M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   950k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   950k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   950k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   322k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   322k|  return -342;
  564|   322k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   321k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   321k|  return 308;
  555|   321k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   409k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   409k|  return -1023;
  497|   409k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   100k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   100k|  return -4;
  489|   100k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  58.0k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  58.0k|  return 23;
  481|  58.0k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  46.6k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  46.6k|  return 769;
  572|  46.6k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   234k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   234k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   234k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   234k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   234k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   234k|  ::memcpy(&value, &word, sizeof(T));
  615|   234k|#endif
  616|   234k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   234k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   594k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   594k|  return 0x7FF;
  504|   594k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   744k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   744k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   744k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   744k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   744k|    return from_chars_advanced(first, last, value, options);
  143|   744k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   744k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   744k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   744k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   744k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   744k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 744k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   744k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   744k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 744k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   744k|  answer.ec = std::errc(); // be optimistic
  221|   744k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   744k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 686k, False: 58.5k]
  |  Branch (227:69): [True: 648k, False: 37.2k]
  |  Branch (227:131): [True: 571k, False: 77.2k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   571k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 571k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   571k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 522k, False: 48.7k]
  ------------------
  239|   522k|        value = T(pns.mantissa);
  240|   522k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 13.0k, False: 509k]
  ------------------
  241|   509k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   522k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 522k]
  ------------------
  243|   522k|        return answer;
  244|   522k|      }
  245|   571k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   571k|  }
  262|   221k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   221k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 128k, False: 93.5k]
  |  Branch (263:29): [True: 128k, False: 0]
  ------------------
  264|   128k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 37.2k, False: 90.9k]
  ------------------
  265|  37.2k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  37.2k|    }
  267|   128k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   221k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 37.2k, False: 184k]
  ------------------
  271|   221k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   221k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 217k, False: 4.61k]
  |  Branch (273:29): [True: 25.2k, False: 191k]
  |  Branch (273:49): [True: 1.27k, False: 24.0k]
  |  Branch (273:68): [True: 5.35k, False: 215k]
  ------------------
  274|  6.63k|    answer.ec = std::errc::result_out_of_range;
  275|  6.63k|  }
  276|   221k|  return answer;
  277|   744k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.81M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.81M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.81M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.81M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.81M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.81M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   292k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   292k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   292k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   292k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   292k|    return from_chars_advanced(first, last, value, options);
  143|   292k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   292k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   292k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   292k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   292k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   292k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 292k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   292k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   292k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 292k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   292k|  answer.ec = std::errc(); // be optimistic
  221|   292k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   292k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 289k, False: 2.46k]
  |  Branch (227:69): [True: 284k, False: 5.14k]
  |  Branch (227:131): [True: 284k, False: 458]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   284k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 284k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   284k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 283k, False: 646]
  ------------------
  239|   283k|        value = T(pns.mantissa);
  240|   283k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 638, False: 282k]
  ------------------
  241|   282k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   283k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 283k]
  ------------------
  243|   283k|        return answer;
  244|   283k|      }
  245|   284k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   284k|  }
  262|  8.70k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  8.70k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 924, False: 7.78k]
  |  Branch (263:29): [True: 924, False: 0]
  ------------------
  264|    924|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 924]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    924|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  8.70k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 8.70k]
  ------------------
  271|  8.70k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  8.70k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 7.99k, False: 708]
  |  Branch (273:29): [True: 5.81k, False: 2.18k]
  |  Branch (273:49): [True: 1.60k, False: 4.20k]
  |  Branch (273:68): [True: 4.20k, False: 2.89k]
  ------------------
  274|  5.81k|    answer.ec = std::errc::result_out_of_range;
  275|  5.81k|  }
  276|  8.70k|  return answer;
  277|   292k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   778k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   778k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   778k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   778k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   778k|    return from_chars_advanced(first, last, value, options);
  143|   778k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   778k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   778k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   778k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   778k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   778k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 778k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   778k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   778k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 778k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   778k|  answer.ec = std::errc(); // be optimistic
  221|   778k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   778k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 766k, False: 11.8k]
  |  Branch (227:69): [True: 731k, False: 35.4k]
  |  Branch (227:131): [True: 606k, False: 124k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   606k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 606k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   606k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 595k, False: 10.8k]
  ------------------
  239|   595k|        value = T(pns.mantissa);
  240|   595k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 37.3k, False: 558k]
  ------------------
  241|   558k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   595k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 595k]
  ------------------
  243|   595k|        return answer;
  244|   595k|      }
  245|   606k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   606k|  }
  262|   182k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   182k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 132k, False: 49.5k]
  |  Branch (263:29): [True: 132k, False: 0]
  ------------------
  264|   132k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 46.5k, False: 86.3k]
  ------------------
  265|  46.5k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  46.5k|    }
  267|   132k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   182k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 46.5k, False: 135k]
  ------------------
  271|   182k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   182k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 178k, False: 4.18k]
  |  Branch (273:29): [True: 16.8k, False: 161k]
  |  Branch (273:49): [True: 262, False: 16.5k]
  |  Branch (273:68): [True: 2.79k, False: 179k]
  ------------------
  274|  3.05k|    answer.ec = std::errc::result_out_of_range;
  275|  3.05k|  }
  276|   182k|  return answer;
  277|   778k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   365k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   365k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   365k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   365k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   365k|    return from_chars_advanced(first, last, value, options);
  143|   365k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   365k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   365k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   365k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   365k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   365k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 365k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   365k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   365k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 365k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   365k|  answer.ec = std::errc(); // be optimistic
  221|   365k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   365k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 362k, False: 3.56k]
  |  Branch (227:69): [True: 355k, False: 6.50k]
  |  Branch (227:131): [True: 354k, False: 798]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   354k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 354k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   354k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 354k, False: 262]
  ------------------
  239|   354k|        value = T(pns.mantissa);
  240|   354k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 966, False: 353k]
  ------------------
  241|   353k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   354k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 354k]
  ------------------
  243|   354k|        return answer;
  244|   354k|      }
  245|   354k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   354k|  }
  262|  11.1k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  11.1k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 952, False: 10.1k]
  |  Branch (263:29): [True: 952, False: 0]
  ------------------
  264|    952|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 72, False: 880]
  ------------------
  265|     72|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|     72|    }
  267|    952|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  11.1k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 72, False: 11.0k]
  ------------------
  271|  11.1k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  11.1k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 10.3k, False: 820]
  |  Branch (273:29): [True: 2.66k, False: 7.63k]
  |  Branch (273:49): [True: 366, False: 2.30k]
  |  Branch (273:68): [True: 2.30k, False: 8.45k]
  ------------------
  274|  2.66k|    answer.ec = std::errc::result_out_of_range;
  275|  2.66k|  }
  276|  11.1k|  return answer;
  277|   365k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  5.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  2.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  5.29M|{
 3803|  5.29M|    if constexpr (sizeof(U) == 1) {
 3804|  5.29M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  5.29M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  5.29M|{
 3767|  5.29M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  5.29M|    SCN_GCC_COMPAT_PUSH
 3770|  5.29M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  5.29M|    constexpr char lengths[] =
 3772|  5.29M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  5.29M|        "\1\1\1\1\1\1\1\1"
 3774|  5.29M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  5.29M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  5.29M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  5.29M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  5.29M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  5.29M|    SCN_GCC_COMPAT_POP
 3781|  5.29M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  4.67M|{
 4009|  4.67M|    if constexpr (sizeof(CharT) == 1) {
 4010|  4.67M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  4.67M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  4.67M|{
 3822|  4.67M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  4.67M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  4.67M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  4.67M|    };
 3827|       |
 3828|  4.67M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 4.58M, False: 89.4k]
  ------------------
 3829|  4.58M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 810, False: 4.58M]
  ------------------
 3830|    810|            SCN_UNLIKELY_ATTR
 3831|    810|            return invalid_code_point;
 3832|    810|        }
 3833|  4.58M|        return static_cast<char32_t>(input[0]);
 3834|  4.58M|    }
 3835|       |
 3836|  89.4k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 82.4k, False: 7.04k]
  ------------------
 3837|  82.4k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 184, False: 82.2k]
  ------------------
 3838|    184|            SCN_UNLIKELY_ATTR
 3839|    184|            return invalid_code_point;
 3840|    184|        }
 3841|  82.2k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 9.85k, False: 72.3k]
  ------------------
 3842|  9.85k|            SCN_UNLIKELY_ATTR
 3843|  9.85k|            return invalid_code_point;
 3844|  9.85k|        }
 3845|       |
 3846|  72.3k|        char32_t cp{};
 3847|  72.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  72.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  72.3k|        return cp;
 3850|  82.2k|    }
 3851|       |
 3852|  7.04k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 4.03k, False: 3.01k]
  ------------------
 3853|  4.03k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 113, False: 3.91k]
  ------------------
 3854|    113|            SCN_UNLIKELY_ATTR
 3855|    113|            return invalid_code_point;
 3856|    113|        }
 3857|  3.91k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 1.85k, False: 2.05k]
  ------------------
 3858|  3.91k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 618, False: 1.44k]
  ------------------
 3859|  2.47k|            SCN_UNLIKELY_ATTR
 3860|  2.47k|            return invalid_code_point;
 3861|  2.47k|        }
 3862|       |
 3863|  1.44k|        char32_t cp{};
 3864|  1.44k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  1.44k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  1.44k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  1.44k|        return cp;
 3868|  3.91k|    }
 3869|       |
 3870|  3.01k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 3.01k, False: 0]
  ------------------
 3871|  3.01k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 3.01k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  3.01k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 580, False: 2.43k]
  ------------------
 3876|    580|            SCN_UNLIKELY_ATTR
 3877|    580|            return invalid_code_point;
 3878|    580|        }
 3879|  2.43k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 793, False: 1.63k]
  ------------------
 3880|  2.43k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 774, False: 863]
  ------------------
 3881|  2.43k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 544, False: 319]
  ------------------
 3882|  2.11k|            SCN_UNLIKELY_ATTR
 3883|  2.11k|            return invalid_code_point;
 3884|  2.11k|        }
 3885|       |
 3886|    319|        char32_t cp{};
 3887|    319|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|    319|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|    319|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|    319|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|    319|        return cp;
 3892|  2.43k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  93.1k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  93.1k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  93.1k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  7.50M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  7.50M|    else {
 3701|  7.50M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  7.50M|                                       to_address(first), to_address(last)))};
 3703|  7.50M|    }
 3704|  7.50M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  22.8M|{
  326|  22.8M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  22.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  22.8M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  35.0M|{
  304|  35.0M|    return p;
  305|  35.0M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  11.9M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  11.9M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  11.9M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  11.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  11.9M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  11.9M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   133k|    {
 2724|   133k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   133k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   133k|    {
 2705|   133k|        return decay_copy(t.begin());
 2706|   133k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  17.0M|{
 1949|  17.0M|    return SCN_FWD(t);
  ------------------
  |  |  930|  17.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  17.0M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.21M|    {
 2781|  3.21M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.21M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.21M|    {
 2763|  3.21M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.21M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8876|   235k|{
 8877|   235k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   235k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   235k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   235k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5405|  1.01M|{
 5406|  1.01M|    detail::check_scan_arg_types<Args...>();
 5407|  1.01M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  1.01M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5144|  1.67M|{
 5145|  1.67M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.67M|                  "Scan argument types must be default constructible");
 5147|  1.67M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.67M|                  "Scan argument types must be Destructible");
 5149|  1.67M|    static_assert(
 5150|  1.67M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.67M|        "Scan argument types must not be references");
 5152|  1.67M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5357|  1.01M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  1.01M|    {
 5359|  1.01M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  1.01M|    {
 5370|  1.01M|        return {detail::make_arg<
 5371|  1.01M|            kind, Context,
 5372|  1.01M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  1.01M|                                 typename Context::char_type>::value>(args)...};
 5374|  1.01M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5179|  1.01M|{
 5180|  1.01M|    return make_value<Context>(value).ref_value;
 5181|  1.01M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5129|  1.12M|{
 5130|  1.12M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  1.12M|                                  needs_context_tag>) {
 5134|  1.12M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  1.12M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4968|  1.12M|    {                                                                        \
 4969|  1.12M|        return val;                                                          \
 4970|  1.12M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5098|  1.67M|{
 5099|  1.67M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.67M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.67M|    constexpr bool scannable_char =
 5103|  1.67M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.67M|    static_assert(scannable_char,
 5105|  1.67M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.67M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.67M|    constexpr bool scannable_const =
 5109|  1.67M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.67M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.67M|    constexpr bool scannable_disabled =
 5113|  1.67M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.67M|    static_assert(scannable_disabled,
 5115|  1.67M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.67M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.67M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.67M|    static_assert(
 5120|  1.67M|        scannable,
 5121|  1.67M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.67M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.67M|    return arg_value{arg};
 5125|  1.67M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4909|  1.67M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.67M|    {
 4911|  1.67M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8663|   725k|{
 8664|   725k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   725k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8665|   725k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8600|   725k|{
 8601|   725k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   725k|    auto result = vscan_impl(buffer, format, args);
 8604|   725k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   725k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60.2k, False: 664k]
  |  |  ------------------
  ------------------
 8605|  60.2k|        return unexpected(result.error());
 8606|  60.2k|    }
 8607|   664k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   664k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   725k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|  1.60M|{
 4729|  1.60M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.60M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.60M|                  "\n"
 4733|  1.60M|                  "Unsupported range type given as input to a scanning "
 4734|  1.60M|                  "function.\n"
 4735|  1.60M|                  "A range needs to have a character type (value type) "
 4736|  1.60M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.60M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.60M|                  "to be included.\n"
 4739|  1.60M|                  "See the scnlib documentation for more details.");
 4740|  1.60M|    static_assert(
 4741|  1.60M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.60M|        "\n"
 4743|  1.60M|        "Unsupported range type given as input to a scanning "
 4744|  1.60M|        "function.\n"
 4745|  1.60M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.60M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.60M|        "not supported.");
 4748|  1.60M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.60M|                  "\n"
 4750|  1.60M|                  "Unsupported range type given as input to a scanning "
 4751|  1.60M|                  "function.\n"
 4752|  1.60M|                  "file_marker_found cannot be used as an "
 4753|  1.60M|                  "source range type to scn::scan.\n"
 4754|  1.60M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.60M|                  "and do not provide an explicit source range, "
 4756|  1.60M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.60M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.60M|                  "\n"
 4759|  1.60M|                  "Unsupported range type given as input to a scanning "
 4760|  1.60M|                  "function.\n"
 4761|  1.60M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.60M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.60M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.60M|                  "\n"
 4765|  1.60M|                  "Unsupported range type given as input to a scanning "
 4766|  1.60M|                  "function.\n"
 4767|  1.60M|                  "A range needs to model forward_range and have a valid "
 4768|  1.60M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.60M|                  "Examples of scannable ranges are std::string, "
 4770|  1.60M|                  "std::string_view, "
 4771|  1.60M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.60M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.60M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.60M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|  1.60M|{
 4668|  1.60M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|  1.60M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|  1.60M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.60M|    {
 2855|  1.60M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.60M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.60M|    {
 2836|  1.60M|        return t.data();
 2837|  1.60M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|  1.60M|    {
 3229|  1.60M|        return detail::to_address(ranges::begin(derived()));
 3230|  1.60M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  12.2M|{
  326|  12.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  12.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  12.2M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.08M|    {
 2724|  3.08M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.08M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.08M|    {
 2705|  3.08M|        return decay_copy(t.begin());
 2706|  3.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  38.9M|    {
 3326|  38.9M|        return m_iterator;
 3327|  38.9M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  1.60M|    {
 3185|  1.60M|        return static_cast<const D&>(*this);
 3186|  1.60M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.60M|    {
 2930|  1.60M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.60M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.60M|    {
 2896|  1.60M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.60M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  7.05M|{
 1949|  7.05M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  7.05M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  8.89M|    {
 3342|  8.89M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  8.89M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  17.5M|    {
 1598|  17.5M|        return has_value();
 1599|  17.5M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  34.7M|    {
  485|  34.7M|        return m_has_value;
  486|  34.7M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.19M|    {
 1604|  1.19M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.19M|        return this->get_unexpected().error();
 1606|  1.19M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.19M|    {
  468|  1.19M|        return m_unexpected;
  469|  1.19M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  9.20M|    {
  361|  9.20M|        return m_unexpected;
  362|  9.20M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  4.49M|        : m_unexpected(std::forward<Err>(e))
  346|  4.49M|    {
  347|  4.49M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.49M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  4.49M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   130k|        : base(unexpect, std::move(e.error())),
 1474|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   130k|    {
 1476|   130k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   130k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   130k|          m_has_value(false)
  446|   130k|    {
  447|   130k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  10.3M|        : m_unexpected(std::forward<Args>(args)...)
  355|  10.3M|    {
  356|  10.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  10.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  10.3M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.60M|    {
 1177|  1.60M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  1.47M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.47M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.47M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.47M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  9.18M|    {
 2724|  9.18M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  9.18M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  9.18M|    {
 2705|  9.18M|        return decay_copy(t.begin());
 2706|  9.18M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|  1.47M|{
 5920|  1.47M|    return ranges::end(source);
 5921|  1.47M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.47M|    {
 2781|  1.47M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.47M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.47M|    {
 2763|  1.47M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.47M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  18.9M|    {
 3330|  18.9M|        return m_sentinel;
 3331|  18.9M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  6.93M|    {
 1653|  6.93M|        return value();
 1654|  6.93M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  15.9M|    {
 1627|  15.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  15.9M|        return this->get_value();
 1629|  15.9M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  15.9M|    {
  451|  15.9M|        return m_value;
  452|  15.9M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.47M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.47M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.47M|    {
 1430|  1.47M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.47M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.47M|    {
  437|  1.47M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7984|   470k|    {
 7985|   470k|        return m_str;
 7986|   470k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  1.01M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  1.01M|    {
 5436|  1.01M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5388|  1.01M|    {
 5389|  1.01M|        return m_argptrs;
 5390|  1.01M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|  3.15M|        : m_desc(desc), m_builtin_values(data)
 5487|  3.15M|    {
 5488|  3.15M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   470k|{
 8830|   470k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.1k, False: 430k]
  |  |  ------------------
  ------------------
 8831|  40.1k|        return unexpected(result.error());
 8832|  40.1k|    }
 8833|   430k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   470k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.60M|    {
 1598|  1.60M|        return has_value();
 1599|  1.60M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.21M|    {
  485|  3.21M|        return m_has_value;
  486|  3.21M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   130k|    {
 1604|   130k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   130k|        return this->get_unexpected().error();
 1606|   130k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   130k|    {
  468|   130k|        return m_unexpected;
  469|   130k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  43.5k|        : base(unexpect, std::move(e.error())),
 1474|  43.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.5k|    {
 1476|  43.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  43.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.5k|          m_has_value(false)
  446|  43.5k|    {
  447|  43.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   521k|    {
 1177|   521k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.32M|    {
 1653|  1.32M|        return value();
 1654|  1.32M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.47M|    {
 1627|  1.47M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.47M|        return this->get_value();
 1629|  1.47M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.47M|    {
  451|  1.47M|        return m_value;
  452|  1.47M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5838|   477k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   477k|    static_cast<    \
  |  |  929|   477k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   477k|    static_cast<    \
  |  |  929|   477k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   477k|    {
 5840|   477k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|  1.47M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.47M|    static_cast<    \
  |  |  929|  1.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.47M|    {
 5691|  1.47M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5624|  1.41M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.41M|    static_cast<    \
  |  |  929|  1.41M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.41M|    {
 5626|  1.41M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   477k|        : base(std::in_place, std::forward<U>(val)),
 1428|   477k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   477k|    {
 1430|   477k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   477k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   477k|    {
  437|   477k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5383|  1.01M|    {
 5384|  1.01M|        return m_args;
 5385|  1.01M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  15.1M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  15.1M|    static_cast<    \
  |  |  929|  15.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  15.1M|    static_cast<    \
  |  |  929|  15.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  15.1M|    {
 3312|  15.1M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7700|  3.15M|{
 7701|  3.15M|    return s;
 7702|  3.15M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7677|  3.15M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   470k|        : m_str(r.str)
 7980|   470k|    {
 7981|   470k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   521k|    {
 1598|   521k|        return has_value();
 1599|   521k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   998k|    {
  485|   998k|        return m_has_value;
  486|   998k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   477k|    {
 1673|   477k|        return &value();
 1674|   477k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   477k|    {
 1627|   477k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   477k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   477k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   477k|        return this->get_value();
 1629|   477k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   477k|    {
  451|   477k|        return m_value;
  452|   477k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|  1.47M|    {
 5708|  1.47M|        return ranges::begin(m_range);
 5709|  1.47M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8943|   235k|{
 8944|   235k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   235k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   235k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   235k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8681|   725k|{
 8682|   725k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   725k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8683|   725k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8616|   725k|{
 8617|   725k|#if !SCN_DISABLE_LOCALE
 8618|   725k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   725k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   725k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   725k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   725k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   725k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60.2k, False: 664k]
  |  |  ------------------
  ------------------
 8625|  60.2k|        return unexpected(result.error());
 8626|  60.2k|    }
 8627|   664k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   664k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   725k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8982|  50.6k|{
 8983|  50.6k|    T value;
 8984|  50.6k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  50.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.34k, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.34k|    }                                                  \
  |  |  |  | 3667|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  47.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  47.2k|    static_cast<    \
  |  |  929|  47.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  47.2k|    static_cast<    \
  |  |  929|  47.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  50.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5164|   106k|{
 5165|   106k|    check_scan_arg_types<T>();
 5166|       |
 5167|   106k|    basic_scan_arg<Context> arg;
 5168|   106k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   106k|    arg.m_value = make_value<Context>(value);
 5170|   106k|    return arg;
 5171|   106k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|  3.48M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  5.31M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8694|   157k|{
 8695|   157k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8696|   157k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|   157k|{
 8641|   157k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|   157k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|   157k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.0k, False: 147k]
  |  |  ------------------
  ------------------
 8645|  10.0k|        return unexpected(result.error());
 8646|  10.0k|    }
 8647|   147k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|   157k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   147k|    {
 1663|   147k|        return std::move(value());
 1664|   147k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8876|   243k|{
 8877|   243k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   243k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   243k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   243k|    static_cast<    \
  |  |  929|   243k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   243k|    static_cast<    \
  |  |  929|   243k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   243k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5405|  1.06M|{
 5406|  1.06M|    detail::check_scan_arg_types<Args...>();
 5407|  1.06M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  1.06M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5144|  1.80M|{
 5145|  1.80M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.80M|                  "Scan argument types must be default constructible");
 5147|  1.80M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.80M|                  "Scan argument types must be Destructible");
 5149|  1.80M|    static_assert(
 5150|  1.80M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.80M|        "Scan argument types must not be references");
 5152|  1.80M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5357|  1.06M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  1.06M|    {
 5359|  1.06M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  1.06M|    {
 5370|  1.06M|        return {detail::make_arg<
 5371|  1.06M|            kind, Context,
 5372|  1.06M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  1.06M|                                 typename Context::char_type>::value>(args)...};
 5374|  1.06M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|  1.06M|{
 5180|  1.06M|    return make_value<Context>(value).ref_value;
 5181|  1.06M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5129|  1.17M|{
 5130|  1.17M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  1.17M|                                  needs_context_tag>) {
 5134|  1.17M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  1.17M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4968|  1.17M|    {                                                                        \
 4969|  1.17M|        return val;                                                          \
 4970|  1.17M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5098|  1.80M|{
 5099|  1.80M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.80M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.80M|    constexpr bool scannable_char =
 5103|  1.80M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.80M|    static_assert(scannable_char,
 5105|  1.80M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.80M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.80M|    constexpr bool scannable_const =
 5109|  1.80M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.80M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.80M|    constexpr bool scannable_disabled =
 5113|  1.80M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.80M|    static_assert(scannable_disabled,
 5115|  1.80M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.80M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.80M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.80M|    static_assert(
 5120|  1.80M|        scannable,
 5121|  1.80M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.80M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.80M|    return arg_value{arg};
 5125|  1.80M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4909|  1.80M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.80M|    {
 4911|  1.80M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7984|   486k|    {
 7985|   486k|        return m_str;
 7986|   486k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  1.06M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  1.06M|    {
 5436|  1.06M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5388|  1.06M|    {
 5389|  1.06M|        return m_argptrs;
 5390|  1.06M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   486k|{
 8830|   486k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.1k, False: 446k]
  |  |  ------------------
  ------------------
 8831|  40.1k|        return unexpected(result.error());
 8832|  40.1k|    }
 8833|   446k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   446k|    static_cast<    \
  |  |  929|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   446k|    static_cast<    \
  |  |  929|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   486k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  43.5k|        : base(unexpect, std::move(e.error())),
 1474|  43.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.5k|    {
 1476|  43.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  43.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.5k|          m_has_value(false)
  446|  43.5k|    {
  447|  43.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   539k|    {
 1177|   539k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5838|   496k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   496k|    {
 5840|   496k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5624|  1.54M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.54M|    static_cast<    \
  |  |  929|  1.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.54M|    {
 5626|  1.54M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   496k|        : base(std::in_place, std::forward<U>(val)),
 1428|   496k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   496k|    {
 1430|   496k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   496k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   496k|    {
  437|   496k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5383|  1.06M|    {
 5384|  1.06M|        return m_args;
 5385|  1.06M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   486k|        : m_str(r.str)
 7980|   486k|    {
 7981|   486k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   539k|    {
 1598|   539k|        return has_value();
 1599|   539k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.03M|    {
  485|  1.03M|        return m_has_value;
  486|  1.03M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   496k|    {
 1673|   496k|        return &value();
 1674|   496k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   496k|    {
 1627|   496k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   496k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   496k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   496k|        return this->get_value();
 1629|   496k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   496k|    {
  451|   496k|        return m_value;
  452|   496k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8943|   243k|{
 8944|   243k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   243k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   243k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   243k|    static_cast<    \
  |  |  929|   243k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   243k|    static_cast<    \
  |  |  929|   243k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   243k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8982|  52.8k|{
 8983|  52.8k|    T value;
 8984|  52.8k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  52.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  52.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.34k, False: 49.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.34k|    }                                                  \
  |  |  |  | 3667|  52.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  49.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  49.4k|    static_cast<    \
  |  |  929|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  49.4k|    static_cast<    \
  |  |  929|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  52.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5164|   111k|{
 5165|   111k|    check_scan_arg_types<T>();
 5166|       |
 5167|   111k|    basic_scan_arg<Context> arg;
 5168|   111k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   111k|    arg.m_value = make_value<Context>(value);
 5170|   111k|    return arg;
 5171|   111k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8876|   246k|{
 8877|   246k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   246k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   246k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   246k|    static_cast<    \
  |  |  929|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   246k|    static_cast<    \
  |  |  929|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   246k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5405|  1.07M|{
 5406|  1.07M|    detail::check_scan_arg_types<Args...>();
 5407|  1.07M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  1.07M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5144|  1.83M|{
 5145|  1.83M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.83M|                  "Scan argument types must be default constructible");
 5147|  1.83M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.83M|                  "Scan argument types must be Destructible");
 5149|  1.83M|    static_assert(
 5150|  1.83M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.83M|        "Scan argument types must not be references");
 5152|  1.83M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5357|  1.07M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  1.07M|    {
 5359|  1.07M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  1.07M|    {
 5370|  1.07M|        return {detail::make_arg<
 5371|  1.07M|            kind, Context,
 5372|  1.07M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  1.07M|                                 typename Context::char_type>::value>(args)...};
 5374|  1.07M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5179|  1.07M|{
 5180|  1.07M|    return make_value<Context>(value).ref_value;
 5181|  1.07M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5129|  1.18M|{
 5130|  1.18M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  1.18M|                                  needs_context_tag>) {
 5134|  1.18M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  1.18M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4968|  1.18M|    {                                                                        \
 4969|  1.18M|        return val;                                                          \
 4970|  1.18M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5098|  1.83M|{
 5099|  1.83M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.83M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.83M|    constexpr bool scannable_char =
 5103|  1.83M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.83M|    static_assert(scannable_char,
 5105|  1.83M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.83M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.83M|    constexpr bool scannable_const =
 5109|  1.83M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.83M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.83M|    constexpr bool scannable_disabled =
 5113|  1.83M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.83M|    static_assert(scannable_disabled,
 5115|  1.83M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.83M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.83M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.83M|    static_assert(
 5120|  1.83M|        scannable,
 5121|  1.83M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.83M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.83M|    return arg_value{arg};
 5125|  1.83M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4909|  1.83M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.83M|    {
 4911|  1.83M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7984|   492k|    {
 7985|   492k|        return m_str;
 7986|   492k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  1.07M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  1.07M|    {
 5436|  1.07M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5388|  1.07M|    {
 5389|  1.07M|        return m_argptrs;
 5390|  1.07M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   492k|{
 8830|   492k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.1k, False: 452k]
  |  |  ------------------
  ------------------
 8831|  40.1k|        return unexpected(result.error());
 8832|  40.1k|    }
 8833|   452k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   452k|    static_cast<    \
  |  |  929|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   452k|    static_cast<    \
  |  |  929|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   492k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  43.5k|        : base(unexpect, std::move(e.error())),
 1474|  43.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.5k|    {
 1476|  43.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  43.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.5k|          m_has_value(false)
  446|  43.5k|    {
  447|  43.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   546k|    {
 1177|   546k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5838|   503k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   503k|    static_cast<    \
  |  |  929|   503k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   503k|    static_cast<    \
  |  |  929|   503k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   503k|    {
 5840|   503k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5624|  1.57M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.57M|    {
 5626|  1.57M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   503k|        : base(std::in_place, std::forward<U>(val)),
 1428|   503k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   503k|    {
 1430|   503k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   503k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   503k|    {
  437|   503k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5383|  1.07M|    {
 5384|  1.07M|        return m_args;
 5385|  1.07M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   492k|        : m_str(r.str)
 7980|   492k|    {
 7981|   492k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   546k|    {
 1598|   546k|        return has_value();
 1599|   546k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.04M|    {
  485|  1.04M|        return m_has_value;
  486|  1.04M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   503k|    {
 1673|   503k|        return &value();
 1674|   503k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   503k|    {
 1627|   503k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   503k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   503k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   503k|        return this->get_value();
 1629|   503k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   503k|    {
  451|   503k|        return m_value;
  452|   503k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8943|   246k|{
 8944|   246k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   246k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   246k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   246k|    static_cast<    \
  |  |  929|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   246k|    static_cast<    \
  |  |  929|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   246k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8982|  53.7k|{
 8983|  53.7k|    T value;
 8984|  53.7k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  53.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  53.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  53.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  53.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.34k, False: 50.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.34k|    }                                                  \
  |  |  |  | 3667|  53.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  50.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  50.4k|    static_cast<    \
  |  |  929|  50.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  50.4k|    static_cast<    \
  |  |  929|  50.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  53.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5164|   112k|{
 5165|   112k|    check_scan_arg_types<T>();
 5166|       |
 5167|   112k|    basic_scan_arg<Context> arg;
 5168|   112k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   112k|    arg.m_value = make_value<Context>(value);
 5170|   112k|    return arg;
 5171|   112k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   130k|    {
 2724|   130k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   130k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   130k|    {
 2705|   130k|        return decay_copy(t.begin());
 2706|   130k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  82.7M|{
 1949|  82.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  82.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  82.7M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.75M|    {
 2781|  3.75M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.75M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.75M|    {
 2763|  3.75M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.75M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8876|   273k|{
 8877|   273k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   273k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   273k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   273k|    static_cast<    \
  |  |  929|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   273k|    static_cast<    \
  |  |  929|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   273k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8663|   851k|{
 8664|   851k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   851k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8665|   851k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8600|   851k|{
 8601|   851k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   851k|    auto result = vscan_impl(buffer, format, args);
 8604|   851k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   851k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60.2k, False: 791k]
  |  |  ------------------
  ------------------
 8605|  60.2k|        return unexpected(result.error());
 8606|  60.2k|    }
 8607|   791k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   791k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   851k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|  1.87M|{
 4729|  1.87M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.87M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.87M|                  "\n"
 4733|  1.87M|                  "Unsupported range type given as input to a scanning "
 4734|  1.87M|                  "function.\n"
 4735|  1.87M|                  "A range needs to have a character type (value type) "
 4736|  1.87M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.87M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.87M|                  "to be included.\n"
 4739|  1.87M|                  "See the scnlib documentation for more details.");
 4740|  1.87M|    static_assert(
 4741|  1.87M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.87M|        "\n"
 4743|  1.87M|        "Unsupported range type given as input to a scanning "
 4744|  1.87M|        "function.\n"
 4745|  1.87M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.87M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.87M|        "not supported.");
 4748|  1.87M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.87M|                  "\n"
 4750|  1.87M|                  "Unsupported range type given as input to a scanning "
 4751|  1.87M|                  "function.\n"
 4752|  1.87M|                  "file_marker_found cannot be used as an "
 4753|  1.87M|                  "source range type to scn::scan.\n"
 4754|  1.87M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.87M|                  "and do not provide an explicit source range, "
 4756|  1.87M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.87M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.87M|                  "\n"
 4759|  1.87M|                  "Unsupported range type given as input to a scanning "
 4760|  1.87M|                  "function.\n"
 4761|  1.87M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.87M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.87M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.87M|                  "\n"
 4765|  1.87M|                  "Unsupported range type given as input to a scanning "
 4766|  1.87M|                  "function.\n"
 4767|  1.87M|                  "A range needs to model forward_range and have a valid "
 4768|  1.87M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.87M|                  "Examples of scannable ranges are std::string, "
 4770|  1.87M|                  "std::string_view, "
 4771|  1.87M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.87M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.87M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.87M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|  1.87M|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|  1.87M|    else {
 4714|  1.87M|        return make_forward_scan_buffer(r);
 4715|  1.87M|    }
 4716|  1.87M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|  1.87M|{
 4533|  1.87M|    return basic_scan_forward_buffer_impl(range);
 4534|  1.87M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|  1.87M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|  1.87M|          m_cursor(ranges::begin(*m_range))
 4419|  1.87M|    {
 4420|  1.87M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|  1.87M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|  1.87M|    {
 4391|  1.87M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|  1.87M|        : m_current_view(sv), m_is_contiguous(false)
 4158|  1.87M|    {
 4159|  1.87M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|  1.87M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.62M|    {
 2724|  3.62M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.62M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.62M|    {
 2705|  3.62M|        return decay_copy(t.begin());
 2706|  3.62M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  5.36M|    {
 3326|  5.36M|        return m_iterator;
 3327|  5.36M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  24.1M|    {
 4424|  24.1M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 338k, False: 23.8M]
  ------------------
 4425|   338k|            return false;
 4426|   338k|        }
 4427|  23.8M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  23.8M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  23.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  23.8M|        }
 4430|  23.8M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 21.9M, False: 1.85M]
  ------------------
 4431|  21.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  21.9M|                                          this->m_current_view.begin(),
 4433|  21.9M|                                          this->m_current_view.end());
 4434|  21.9M|        }
 4435|  23.8M|        m_latest = *m_cursor;
 4436|  23.8M|        ++m_cursor;
 4437|  23.8M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  23.8M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  23.8M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  23.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  23.8M|        }
 4441|  23.8M|        return true;
 4442|  24.1M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  71.7M|    {
 2781|  71.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  71.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  71.7M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  71.7M|    {
 2763|  71.7M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  71.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  71.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  73.5M|    {
 3330|  73.5M|        return m_sentinel;
 3331|  73.5M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|  1.87M|    {
 4079|  1.87M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.87M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|  1.87M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   130k|        : base(unexpect, std::move(e.error())),
 1474|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   130k|    {
 1476|   130k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   130k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   130k|          m_has_value(false)
  446|   130k|    {
  447|   130k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.87M|    {
 1177|  1.87M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  1.74M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.74M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.74M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.74M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.74M|    {
 2724|  1.74M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.74M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.74M|    {
 2705|  1.74M|        return decay_copy(t.begin());
 2706|  1.74M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|  1.74M|{
 5920|  1.74M|    return ranges::end(source);
 5921|  1.74M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.74M|    {
 2781|  1.74M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.74M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.74M|    {
 2763|  1.74M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.74M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  1.74M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.74M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.74M|    {
 1430|  1.74M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  1.74M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.74M|    {
  437|  1.74M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7984|   547k|    {
 7985|   547k|        return m_str;
 7986|   547k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   547k|{
 8830|   547k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.1k, False: 507k]
  |  |  ------------------
  ------------------
 8831|  40.1k|        return unexpected(result.error());
 8832|  40.1k|    }
 8833|   507k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   507k|    static_cast<    \
  |  |  929|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   507k|    static_cast<    \
  |  |  929|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   547k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.87M|    {
 1598|  1.87M|        return has_value();
 1599|  1.87M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.75M|    {
  485|  3.75M|        return m_has_value;
  486|  3.75M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   130k|    {
 1604|   130k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   130k|        return this->get_unexpected().error();
 1606|   130k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   130k|    {
  468|   130k|        return m_unexpected;
  469|   130k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  43.5k|        : base(unexpect, std::move(e.error())),
 1474|  43.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.5k|    {
 1476|  43.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  43.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.5k|          m_has_value(false)
  446|  43.5k|    {
  447|  43.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   603k|    {
 1177|   603k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  1.58M|    {
 1653|  1.58M|        return value();
 1654|  1.58M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  1.74M|    {
 1627|  1.74M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.74M|        return this->get_value();
 1629|  1.74M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.74M|    {
  451|  1.74M|        return m_value;
  452|  1.74M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5838|   559k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   559k|    static_cast<    \
  |  |  929|   559k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   559k|    static_cast<    \
  |  |  929|   559k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   559k|    {
 5840|   559k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|  1.74M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.74M|    static_cast<    \
  |  |  929|  1.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.74M|    {
 5691|  1.74M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   559k|        : base(std::in_place, std::forward<U>(val)),
 1428|   559k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   559k|    {
 1430|   559k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   559k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   559k|    {
  437|   559k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  3.62M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.62M|    static_cast<    \
  |  |  929|  3.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.62M|    static_cast<    \
  |  |  929|  3.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.62M|    {
 3312|  3.62M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   547k|        : m_str(r.str)
 7980|   547k|    {
 7981|   547k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   603k|    {
 1598|   603k|        return has_value();
 1599|   603k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.16M|    {
  485|  1.16M|        return m_has_value;
  486|  1.16M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   559k|    {
 1673|   559k|        return &value();
 1674|   559k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   559k|    {
 1627|   559k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   559k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   559k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   559k|        return this->get_value();
 1629|   559k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   559k|    {
  451|   559k|        return m_value;
  452|   559k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|  1.74M|    {
 5708|  1.74M|        return ranges::begin(m_range);
 5709|  1.74M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8943|   273k|{
 8944|   273k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   273k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   273k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   273k|    static_cast<    \
  |  |  929|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   273k|    static_cast<    \
  |  |  929|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   273k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8681|   851k|{
 8682|   851k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   851k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8683|   851k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8616|   851k|{
 8617|   851k|#if !SCN_DISABLE_LOCALE
 8618|   851k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   851k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   851k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   851k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   851k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   851k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60.2k, False: 791k]
  |  |  ------------------
  ------------------
 8625|  60.2k|        return unexpected(result.error());
 8626|  60.2k|    }
 8627|   791k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   791k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   851k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8982|  55.4k|{
 8983|  55.4k|    T value;
 8984|  55.4k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  55.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  55.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.34k, False: 52.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.34k|    }                                                  \
  |  |  |  | 3667|  55.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  52.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  52.1k|    static_cast<    \
  |  |  929|  52.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  52.1k|    static_cast<    \
  |  |  929|  52.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  55.4k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8694|   173k|{
 8695|   173k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8696|   173k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|   173k|{
 8641|   173k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|   173k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|   173k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.0k, False: 163k]
  |  |  ------------------
  ------------------
 8645|  10.0k|        return unexpected(result.error());
 8646|  10.0k|    }
 8647|   163k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|   173k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   163k|    {
 1663|   163k|        return std::move(value());
 1664|   163k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8876|   287k|{
 8877|   287k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   287k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   287k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   287k|    static_cast<    \
  |  |  929|   287k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   287k|    static_cast<    \
  |  |  929|   287k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   287k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7984|   574k|    {
 7985|   574k|        return m_str;
 7986|   574k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   574k|{
 8830|   574k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   574k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.1k, False: 534k]
  |  |  ------------------
  ------------------
 8831|  40.1k|        return unexpected(result.error());
 8832|  40.1k|    }
 8833|   534k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   534k|    static_cast<    \
  |  |  929|   534k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   534k|    static_cast<    \
  |  |  929|   534k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   574k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  43.5k|        : base(unexpect, std::move(e.error())),
 1474|  43.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.5k|    {
 1476|  43.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  43.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.5k|          m_has_value(false)
  446|  43.5k|    {
  447|  43.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   633k|    {
 1177|   633k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5838|   589k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   589k|    static_cast<    \
  |  |  929|   589k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   589k|    static_cast<    \
  |  |  929|   589k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   589k|    {
 5840|   589k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   589k|        : base(std::in_place, std::forward<U>(val)),
 1428|   589k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   589k|    {
 1430|   589k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   589k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   589k|    {
  437|   589k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   574k|        : m_str(r.str)
 7980|   574k|    {
 7981|   574k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   633k|    {
 1598|   633k|        return has_value();
 1599|   633k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.22M|    {
  485|  1.22M|        return m_has_value;
  486|  1.22M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   589k|    {
 1673|   589k|        return &value();
 1674|   589k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   589k|    {
 1627|   589k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   589k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   589k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   589k|        return this->get_value();
 1629|   589k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   589k|    {
  451|   589k|        return m_value;
  452|   589k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8943|   287k|{
 8944|   287k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   287k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   287k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   287k|    static_cast<    \
  |  |  929|   287k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   287k|    static_cast<    \
  |  |  929|   287k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   287k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8982|  58.5k|{
 8983|  58.5k|    T value;
 8984|  58.5k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  58.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  58.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.34k, False: 55.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.34k|    }                                                  \
  |  |  |  | 3667|  58.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  55.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  55.1k|    static_cast<    \
  |  |  929|  55.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  55.1k|    static_cast<    \
  |  |  929|  55.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  58.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8876|   290k|{
 8877|   290k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   290k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   290k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   290k|    static_cast<    \
  |  |  929|   290k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   290k|    static_cast<    \
  |  |  929|   290k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   290k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7984|   580k|    {
 7985|   580k|        return m_str;
 7986|   580k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   580k|{
 8830|   580k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   580k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.1k, False: 540k]
  |  |  ------------------
  ------------------
 8831|  40.1k|        return unexpected(result.error());
 8832|  40.1k|    }
 8833|   540k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   540k|    static_cast<    \
  |  |  929|   540k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   540k|    static_cast<    \
  |  |  929|   540k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   580k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  43.5k|        : base(unexpect, std::move(e.error())),
 1474|  43.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.5k|    {
 1476|  43.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  43.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.5k|          m_has_value(false)
  446|  43.5k|    {
  447|  43.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   639k|    {
 1177|   639k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5838|   596k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   596k|    static_cast<    \
  |  |  929|   596k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   596k|    static_cast<    \
  |  |  929|   596k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   596k|    {
 5840|   596k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   596k|        : base(std::in_place, std::forward<U>(val)),
 1428|   596k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   596k|    {
 1430|   596k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   596k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   596k|    {
  437|   596k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   580k|        : m_str(r.str)
 7980|   580k|    {
 7981|   580k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   639k|    {
 1598|   639k|        return has_value();
 1599|   639k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.23M|    {
  485|  1.23M|        return m_has_value;
  486|  1.23M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   596k|    {
 1673|   596k|        return &value();
 1674|   596k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   596k|    {
 1627|   596k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   596k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   596k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   596k|        return this->get_value();
 1629|   596k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   596k|    {
  451|   596k|        return m_value;
  452|   596k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8943|   290k|{
 8944|   290k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   290k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   290k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   290k|    static_cast<    \
  |  |  929|   290k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   290k|    static_cast<    \
  |  |  929|   290k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   290k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8982|  59.1k|{
 8983|  59.1k|    T value;
 8984|  59.1k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  59.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  59.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  59.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  59.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.34k, False: 55.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.34k|    }                                                  \
  |  |  |  | 3667|  59.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  55.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  55.7k|    static_cast<    \
  |  |  929|  55.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  55.7k|    static_cast<    \
  |  |  929|  55.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  59.1k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   267k|    {
 2724|   267k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   267k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   267k|    {
 2705|   267k|        return decay_copy(t.begin());
 2706|   267k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  6.10M|{
 1949|  6.10M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.10M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.84M|    {
 2781|  1.84M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.84M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.84M|    {
 2763|  1.84M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.84M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5405|   508k|{
 5406|   508k|    detail::check_scan_arg_types<Args...>();
 5407|   508k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   508k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5357|   508k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   508k|    {
 5359|   508k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   508k|    {
 5370|   508k|        return {detail::make_arg<
 5371|   508k|            kind, Context,
 5372|   508k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   508k|                                 typename Context::char_type>::value>(args)...};
 5374|   508k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5179|   508k|{
 5180|   508k|    return make_value<Context>(value).ref_value;
 5181|   508k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5129|   555k|{
 5130|   555k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   555k|                                  needs_context_tag>) {
 5134|   555k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   555k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4968|   555k|    {                                                                        \
 4969|   555k|        return val;                                                          \
 4970|   555k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8600|   417k|{
 8601|   417k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   417k|    auto result = vscan_impl(buffer, format, args);
 8604|   417k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120k, False: 296k]
  |  |  ------------------
  ------------------
 8605|   120k|        return unexpected(result.error());
 8606|   120k|    }
 8607|   296k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   417k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|   916k|{
 4729|   916k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   916k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   916k|                  "\n"
 4733|   916k|                  "Unsupported range type given as input to a scanning "
 4734|   916k|                  "function.\n"
 4735|   916k|                  "A range needs to have a character type (value type) "
 4736|   916k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   916k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   916k|                  "to be included.\n"
 4739|   916k|                  "See the scnlib documentation for more details.");
 4740|   916k|    static_assert(
 4741|   916k|        !std::is_same_v<T, custom_char_traits>,
 4742|   916k|        "\n"
 4743|   916k|        "Unsupported range type given as input to a scanning "
 4744|   916k|        "function.\n"
 4745|   916k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   916k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   916k|        "not supported.");
 4748|   916k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   916k|                  "\n"
 4750|   916k|                  "Unsupported range type given as input to a scanning "
 4751|   916k|                  "function.\n"
 4752|   916k|                  "file_marker_found cannot be used as an "
 4753|   916k|                  "source range type to scn::scan.\n"
 4754|   916k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   916k|                  "and do not provide an explicit source range, "
 4756|   916k|                  "or use scn::scan with a FILE* directly.");
 4757|   916k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   916k|                  "\n"
 4759|   916k|                  "Unsupported range type given as input to a scanning "
 4760|   916k|                  "function.\n"
 4761|   916k|                  "In order to be scannable, a range needs to satisfy "
 4762|   916k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   916k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   916k|                  "\n"
 4765|   916k|                  "Unsupported range type given as input to a scanning "
 4766|   916k|                  "function.\n"
 4767|   916k|                  "A range needs to model forward_range and have a valid "
 4768|   916k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   916k|                  "Examples of scannable ranges are std::string, "
 4770|   916k|                  "std::string_view, "
 4771|   916k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   916k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   916k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   916k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   916k|{
 4668|   916k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   916k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   916k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   916k|    {
 2855|   916k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   916k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   916k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   916k|    {
 2836|   916k|        return t.data();
 2837|   916k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|   916k|    {
 3229|   916k|        return detail::to_address(ranges::begin(derived()));
 3230|   916k|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  3.03M|{
  326|  3.03M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  3.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  3.03M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  3.03M|{
  304|  3.03M|    return p;
  305|  3.03M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.57M|    {
 2724|  1.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.57M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.57M|    {
 2705|  1.57M|        return decay_copy(t.begin());
 2706|  1.57M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  32.7M|    {
 3326|  32.7M|        return m_iterator;
 3327|  32.7M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   916k|    {
 3185|   916k|        return static_cast<const D&>(*this);
 3186|   916k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   916k|    {
 2930|   916k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   916k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   916k|    {
 2896|   916k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   916k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   916k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  4.12M|    {
 3342|  4.12M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  4.12M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   261k|        : base(unexpect, std::move(e.error())),
 1474|   261k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   261k|    {
 1476|   261k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   261k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   261k|          m_has_value(false)
  446|   261k|    {
  447|   261k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   916k|    {
 1177|   916k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   655k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   655k|                      ranges::iterator_t<SourceRange>>) {
 5935|   655k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   655k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.77M|    {
 2724|  1.77M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.77M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.77M|    {
 2705|  1.77M|        return decay_copy(t.begin());
 2706|  1.77M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|   655k|{
 5920|   655k|    return ranges::end(source);
 5921|   655k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   655k|    {
 2781|   655k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   655k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   655k|    {
 2763|   655k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   655k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  19.0M|    {
 3330|  19.0M|        return m_sentinel;
 3331|  19.0M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   655k|        : base(std::in_place, std::forward<U>(val)),
 1428|   655k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   655k|    {
 1430|   655k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   655k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   655k|    {
  437|   655k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7984|   254k|    {
 7985|   254k|        return m_str;
 7986|   254k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   508k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   508k|    {
 5436|   508k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5388|   508k|    {
 5389|   508k|        return m_argptrs;
 5390|   508k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  1.66M|        : m_desc(desc), m_builtin_values(data)
 5487|  1.66M|    {
 5488|  1.66M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   254k|{
 8830|   254k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.3k, False: 173k]
  |  |  ------------------
  ------------------
 8831|  80.3k|        return unexpected(result.error());
 8832|  80.3k|    }
 8833|   173k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   254k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   916k|    {
 1598|   916k|        return has_value();
 1599|   916k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.83M|    {
  485|  1.83M|        return m_has_value;
  486|  1.83M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   261k|    {
 1604|   261k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   261k|        return this->get_unexpected().error();
 1606|   261k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   261k|    {
  468|   261k|        return m_unexpected;
  469|   261k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  87.0k|        : base(unexpect, std::move(e.error())),
 1474|  87.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.0k|    {
 1476|  87.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  87.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.0k|          m_has_value(false)
  446|  87.0k|    {
  447|  87.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   277k|    {
 1177|   277k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   593k|    {
 1653|   593k|        return value();
 1654|   593k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   655k|    {
 1627|   655k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   655k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   655k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   655k|        return this->get_value();
 1629|   655k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   655k|    {
  451|   655k|        return m_value;
  452|   655k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5838|   190k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   190k|    static_cast<    \
  |  |  929|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   190k|    static_cast<    \
  |  |  929|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   190k|    {
 5840|   190k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|   655k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   655k|    static_cast<    \
  |  |  929|   655k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   655k|    {
 5691|   655k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   190k|        : base(std::in_place, std::forward<U>(val)),
 1428|   190k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   190k|    {
 1430|   190k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   190k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   190k|    {
  437|   190k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5383|   508k|    {
 5384|   508k|        return m_args;
 5385|   508k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  11.7M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  11.7M|    static_cast<    \
  |  |  929|  11.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  11.7M|    static_cast<    \
  |  |  929|  11.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  11.7M|    {
 3312|  11.7M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7705|  1.66M|{
 7706|  1.66M|    return s;
 7707|  1.66M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7677|  1.66M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   254k|        : m_str(r.str)
 7980|   254k|    {
 7981|   254k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   277k|    {
 1598|   277k|        return has_value();
 1599|   277k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   468k|    {
  485|   468k|        return m_has_value;
  486|   468k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   190k|    {
 1673|   190k|        return &value();
 1674|   190k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   190k|    {
 1627|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   190k|        return this->get_value();
 1629|   190k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   190k|    {
  451|   190k|        return m_value;
  452|   190k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|   655k|    {
 5708|   655k|        return ranges::begin(m_range);
 5709|   655k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8616|   417k|{
 8617|   417k|#if !SCN_DISABLE_LOCALE
 8618|   417k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   417k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   417k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   417k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   417k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120k, False: 296k]
  |  |  ------------------
  ------------------
 8625|   120k|        return unexpected(result.error());
 8626|   120k|    }
 8627|   296k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   417k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5164|  46.9k|{
 5165|  46.9k|    check_scan_arg_types<T>();
 5166|       |
 5167|  46.9k|    basic_scan_arg<Context> arg;
 5168|  46.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  46.9k|    arg.m_value = make_value<Context>(value);
 5170|  46.9k|    return arg;
 5171|  46.9k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  1.83M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|  82.3k|{
 8641|  82.3k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|  82.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|  82.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  82.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 62.2k]
  |  |  ------------------
  ------------------
 8645|  20.0k|        return unexpected(result.error());
 8646|  20.0k|    }
 8647|  62.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|  82.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  62.2k|    {
 1663|  62.2k|        return std::move(value());
 1664|  62.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5405|   574k|{
 5406|   574k|    detail::check_scan_arg_types<Args...>();
 5407|   574k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   574k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5357|   574k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   574k|    {
 5359|   574k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   574k|    {
 5370|   574k|        return {detail::make_arg<
 5371|   574k|            kind, Context,
 5372|   574k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   574k|                                 typename Context::char_type>::value>(args)...};
 5374|   574k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|   574k|{
 5180|   574k|    return make_value<Context>(value).ref_value;
 5181|   574k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5129|   632k|{
 5130|   632k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   632k|                                  needs_context_tag>) {
 5134|   632k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   632k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   632k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4968|   632k|    {                                                                        \
 4969|   632k|        return val;                                                          \
 4970|   632k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7984|   287k|    {
 7985|   287k|        return m_str;
 7986|   287k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   574k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   574k|    {
 5436|   574k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5388|   574k|    {
 5389|   574k|        return m_argptrs;
 5390|   574k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   287k|{
 8830|   287k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.3k, False: 206k]
  |  |  ------------------
  ------------------
 8831|  80.3k|        return unexpected(result.error());
 8832|  80.3k|    }
 8833|   206k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   287k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  87.0k|        : base(unexpect, std::move(e.error())),
 1474|  87.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.0k|    {
 1476|  87.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  87.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.0k|          m_has_value(false)
  446|  87.0k|    {
  447|  87.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   316k|    {
 1177|   316k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5838|   229k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   229k|    static_cast<    \
  |  |  929|   229k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   229k|    static_cast<    \
  |  |  929|   229k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   229k|    {
 5840|   229k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   229k|        : base(std::in_place, std::forward<U>(val)),
 1428|   229k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   229k|    {
 1430|   229k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   229k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   229k|    {
  437|   229k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5383|   574k|    {
 5384|   574k|        return m_args;
 5385|   574k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   287k|        : m_str(r.str)
 7980|   287k|    {
 7981|   287k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   316k|    {
 1598|   316k|        return has_value();
 1599|   316k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   545k|    {
  485|   545k|        return m_has_value;
  486|   545k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   229k|    {
 1673|   229k|        return &value();
 1674|   229k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   229k|    {
 1627|   229k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   229k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   229k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   229k|        return this->get_value();
 1629|   229k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   229k|    {
  451|   229k|        return m_value;
  452|   229k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5164|  57.9k|{
 5165|  57.9k|    check_scan_arg_types<T>();
 5166|       |
 5167|  57.9k|    basic_scan_arg<Context> arg;
 5168|  57.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  57.9k|    arg.m_value = make_value<Context>(value);
 5170|  57.9k|    return arg;
 5171|  57.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5405|   585k|{
 5406|   585k|    detail::check_scan_arg_types<Args...>();
 5407|   585k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   585k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5357|   585k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   585k|    {
 5359|   585k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   585k|    {
 5370|   585k|        return {detail::make_arg<
 5371|   585k|            kind, Context,
 5372|   585k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   585k|                                 typename Context::char_type>::value>(args)...};
 5374|   585k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5179|   585k|{
 5180|   585k|    return make_value<Context>(value).ref_value;
 5181|   585k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5129|   644k|{
 5130|   644k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   644k|                                  needs_context_tag>) {
 5134|   644k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   644k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   644k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4968|   644k|    {                                                                        \
 4969|   644k|        return val;                                                          \
 4970|   644k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7984|   292k|    {
 7985|   292k|        return m_str;
 7986|   292k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   585k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   585k|    {
 5436|   585k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5388|   585k|    {
 5389|   585k|        return m_argptrs;
 5390|   585k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   292k|{
 8830|   292k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.3k, False: 212k]
  |  |  ------------------
  ------------------
 8831|  80.3k|        return unexpected(result.error());
 8832|  80.3k|    }
 8833|   212k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   292k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  87.0k|        : base(unexpect, std::move(e.error())),
 1474|  87.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.0k|    {
 1476|  87.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  87.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.0k|          m_has_value(false)
  446|  87.0k|    {
  447|  87.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   322k|    {
 1177|   322k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5838|   235k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   235k|    {
 5840|   235k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   235k|        : base(std::in_place, std::forward<U>(val)),
 1428|   235k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   235k|    {
 1430|   235k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   235k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   235k|    {
  437|   235k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5383|   585k|    {
 5384|   585k|        return m_args;
 5385|   585k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   292k|        : m_str(r.str)
 7980|   292k|    {
 7981|   292k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   322k|    {
 1598|   322k|        return has_value();
 1599|   322k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   558k|    {
  485|   558k|        return m_has_value;
  486|   558k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   235k|    {
 1673|   235k|        return &value();
 1674|   235k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   235k|    {
 1627|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   235k|        return this->get_value();
 1629|   235k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   235k|    {
  451|   235k|        return m_value;
  452|   235k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5164|  59.6k|{
 5165|  59.6k|    check_scan_arg_types<T>();
 5166|       |
 5167|  59.6k|    basic_scan_arg<Context> arg;
 5168|  59.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  59.6k|    arg.m_value = make_value<Context>(value);
 5170|  59.6k|    return arg;
 5171|  59.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   261k|    {
 2724|   261k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   261k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   261k|    {
 2705|   261k|        return decay_copy(t.begin());
 2706|   261k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  18.3M|{
 1949|  18.3M|    return SCN_FWD(t);
  ------------------
  |  |  930|  18.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  18.3M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.83M|    {
 2781|  1.83M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.83M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.83M|    {
 2763|  1.83M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.83M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8600|   416k|{
 8601|   416k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   416k|    auto result = vscan_impl(buffer, format, args);
 8604|   416k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120k, False: 296k]
  |  |  ------------------
  ------------------
 8605|   120k|        return unexpected(result.error());
 8606|   120k|    }
 8607|   296k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   416k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   915k|{
 4729|   915k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   915k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   915k|                  "\n"
 4733|   915k|                  "Unsupported range type given as input to a scanning "
 4734|   915k|                  "function.\n"
 4735|   915k|                  "A range needs to have a character type (value type) "
 4736|   915k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   915k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   915k|                  "to be included.\n"
 4739|   915k|                  "See the scnlib documentation for more details.");
 4740|   915k|    static_assert(
 4741|   915k|        !std::is_same_v<T, custom_char_traits>,
 4742|   915k|        "\n"
 4743|   915k|        "Unsupported range type given as input to a scanning "
 4744|   915k|        "function.\n"
 4745|   915k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   915k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   915k|        "not supported.");
 4748|   915k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   915k|                  "\n"
 4750|   915k|                  "Unsupported range type given as input to a scanning "
 4751|   915k|                  "function.\n"
 4752|   915k|                  "file_marker_found cannot be used as an "
 4753|   915k|                  "source range type to scn::scan.\n"
 4754|   915k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   915k|                  "and do not provide an explicit source range, "
 4756|   915k|                  "or use scn::scan with a FILE* directly.");
 4757|   915k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   915k|                  "\n"
 4759|   915k|                  "Unsupported range type given as input to a scanning "
 4760|   915k|                  "function.\n"
 4761|   915k|                  "In order to be scannable, a range needs to satisfy "
 4762|   915k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   915k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   915k|                  "\n"
 4765|   915k|                  "Unsupported range type given as input to a scanning "
 4766|   915k|                  "function.\n"
 4767|   915k|                  "A range needs to model forward_range and have a valid "
 4768|   915k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   915k|                  "Examples of scannable ranges are std::string, "
 4770|   915k|                  "std::string_view, "
 4771|   915k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   915k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   915k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   915k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   915k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   915k|    else {
 4714|   915k|        return make_forward_scan_buffer(r);
 4715|   915k|    }
 4716|   915k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   915k|{
 4533|   915k|    return basic_scan_forward_buffer_impl(range);
 4534|   915k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   915k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   915k|          m_cursor(ranges::begin(*m_range))
 4419|   915k|    {
 4420|   915k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   915k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   915k|    {
 4391|   915k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   915k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   915k|    {
 4159|   915k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   915k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.57M|    {
 2724|  1.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.57M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.57M|    {
 2705|  1.57M|        return decay_copy(t.begin());
 2706|  1.57M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  2.22M|    {
 3326|  2.22M|        return m_iterator;
 3327|  2.22M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  4.58M|    {
 4424|  4.58M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 201k, False: 4.37M]
  ------------------
 4425|   201k|            return false;
 4426|   201k|        }
 4427|  4.37M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  4.37M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  4.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  4.37M|        }
 4430|  4.37M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 3.46M, False: 914k]
  ------------------
 4431|  3.46M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  3.46M|                                          this->m_current_view.begin(),
 4433|  3.46M|                                          this->m_current_view.end());
 4434|  3.46M|        }
 4435|  4.37M|        m_latest = *m_cursor;
 4436|  4.37M|        ++m_cursor;
 4437|  4.37M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  4.37M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  4.37M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  4.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  4.37M|        }
 4441|  4.37M|        return true;
 4442|  4.58M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  13.3M|    {
 2781|  13.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  13.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  13.3M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  13.3M|    {
 2763|  13.3M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  13.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  13.3M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  13.9M|    {
 3330|  13.9M|        return m_sentinel;
 3331|  13.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   915k|    {
 4079|   915k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   915k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   915k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   261k|        : base(unexpect, std::move(e.error())),
 1474|   261k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   261k|    {
 1476|   261k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   261k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   261k|          m_has_value(false)
  446|   261k|    {
  447|   261k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   915k|    {
 1177|   915k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   654k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   654k|                      ranges::iterator_t<SourceRange>>) {
 5935|   654k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   654k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   654k|    {
 2724|   654k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   654k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   654k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   654k|    {
 2705|   654k|        return decay_copy(t.begin());
 2706|   654k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|   654k|{
 5920|   654k|    return ranges::end(source);
 5921|   654k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   654k|    {
 2781|   654k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   654k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   654k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   654k|    {
 2763|   654k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   654k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   654k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   654k|        : base(std::in_place, std::forward<U>(val)),
 1428|   654k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   654k|    {
 1430|   654k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   654k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   654k|    {
  437|   654k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7984|   254k|    {
 7985|   254k|        return m_str;
 7986|   254k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   254k|{
 8830|   254k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.3k, False: 173k]
  |  |  ------------------
  ------------------
 8831|  80.3k|        return unexpected(result.error());
 8832|  80.3k|    }
 8833|   173k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   254k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   915k|    {
 1598|   915k|        return has_value();
 1599|   915k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.83M|    {
  485|  1.83M|        return m_has_value;
  486|  1.83M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   261k|    {
 1604|   261k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   261k|        return this->get_unexpected().error();
 1606|   261k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   261k|    {
  468|   261k|        return m_unexpected;
  469|   261k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  87.0k|        : base(unexpect, std::move(e.error())),
 1474|  87.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.0k|    {
 1476|  87.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  87.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.0k|          m_has_value(false)
  446|  87.0k|    {
  447|  87.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   277k|    {
 1177|   277k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   592k|    {
 1653|   592k|        return value();
 1654|   592k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   654k|    {
 1627|   654k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   654k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   654k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   654k|        return this->get_value();
 1629|   654k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   654k|    {
  451|   654k|        return m_value;
  452|   654k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5838|   190k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   190k|    static_cast<    \
  |  |  929|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   190k|    static_cast<    \
  |  |  929|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   190k|    {
 5840|   190k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|   654k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   654k|    static_cast<    \
  |  |  929|   654k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   654k|    {
 5691|   654k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   190k|        : base(std::in_place, std::forward<U>(val)),
 1428|   190k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   190k|    {
 1430|   190k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   190k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   190k|    {
  437|   190k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  1.57M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.57M|    {
 3312|  1.57M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   254k|        : m_str(r.str)
 7980|   254k|    {
 7981|   254k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   277k|    {
 1598|   277k|        return has_value();
 1599|   277k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   468k|    {
  485|   468k|        return m_has_value;
  486|   468k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   190k|    {
 1673|   190k|        return &value();
 1674|   190k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   190k|    {
 1627|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   190k|        return this->get_value();
 1629|   190k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   190k|    {
  451|   190k|        return m_value;
  452|   190k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|   654k|    {
 5708|   654k|        return ranges::begin(m_range);
 5709|   654k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8616|   416k|{
 8617|   416k|#if !SCN_DISABLE_LOCALE
 8618|   416k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   416k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   416k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   416k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   416k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120k, False: 296k]
  |  |  ------------------
  ------------------
 8625|   120k|        return unexpected(result.error());
 8626|   120k|    }
 8627|   296k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   416k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|  82.2k|{
 8641|  82.2k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|  82.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|  82.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 62.1k]
  |  |  ------------------
  ------------------
 8645|  20.0k|        return unexpected(result.error());
 8646|  20.0k|    }
 8647|  62.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  62.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|  82.2k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  62.1k|    {
 1663|  62.1k|        return std::move(value());
 1664|  62.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7984|   287k|    {
 7985|   287k|        return m_str;
 7986|   287k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   287k|{
 8830|   287k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.3k, False: 206k]
  |  |  ------------------
  ------------------
 8831|  80.3k|        return unexpected(result.error());
 8832|  80.3k|    }
 8833|   206k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   287k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  87.0k|        : base(unexpect, std::move(e.error())),
 1474|  87.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.0k|    {
 1476|  87.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  87.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.0k|          m_has_value(false)
  446|  87.0k|    {
  447|  87.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   315k|    {
 1177|   315k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5838|   228k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   228k|    static_cast<    \
  |  |  929|   228k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   228k|    static_cast<    \
  |  |  929|   228k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   228k|    {
 5840|   228k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   228k|        : base(std::in_place, std::forward<U>(val)),
 1428|   228k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   228k|    {
 1430|   228k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   228k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   228k|    {
  437|   228k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   287k|        : m_str(r.str)
 7980|   287k|    {
 7981|   287k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   315k|    {
 1598|   315k|        return has_value();
 1599|   315k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   544k|    {
  485|   544k|        return m_has_value;
  486|   544k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   228k|    {
 1673|   228k|        return &value();
 1674|   228k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   228k|    {
 1627|   228k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   228k|        return this->get_value();
 1629|   228k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   228k|    {
  451|   228k|        return m_value;
  452|   228k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7984|   292k|    {
 7985|   292k|        return m_str;
 7986|   292k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   292k|{
 8830|   292k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.3k, False: 212k]
  |  |  ------------------
  ------------------
 8831|  80.3k|        return unexpected(result.error());
 8832|  80.3k|    }
 8833|   212k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   292k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  87.0k|        : base(unexpect, std::move(e.error())),
 1474|  87.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.0k|    {
 1476|  87.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  87.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.0k|          m_has_value(false)
  446|  87.0k|    {
  447|  87.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   322k|    {
 1177|   322k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5838|   235k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   235k|    {
 5840|   235k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   235k|        : base(std::in_place, std::forward<U>(val)),
 1428|   235k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   235k|    {
 1430|   235k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   235k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   235k|    {
  437|   235k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   292k|        : m_str(r.str)
 7980|   292k|    {
 7981|   292k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   322k|    {
 1598|   322k|        return has_value();
 1599|   322k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   557k|    {
  485|   557k|        return m_has_value;
  486|   557k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   235k|    {
 1673|   235k|        return &value();
 1674|   235k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   235k|    {
 1627|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   235k|        return this->get_value();
 1629|   235k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   235k|    {
  451|   235k|        return m_value;
  452|   235k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|  5.87M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|  5.87M|    {
 3564|  5.87M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  5.87M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  5.87M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  24.6M|    {
 3570|  24.6M|        return m_code == good;
 3571|  24.6M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   602k|    {
 3581|   602k|        return m_code;
 3582|   602k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  85.2M|    {
 3326|  85.2M|        return m_iterator;
 3327|  85.2M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  38.7M|    {
 3326|  38.7M|        return m_iterator;
 3327|  38.7M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  3.83M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6281|  1.02M|    {
 6282|  1.02M|        if constexpr (!SCN_DISABLE_LOCALE) {
 6283|  1.02M|            m_specs.localized = true;
 6284|       |        }
 6285|       |        else {
 6286|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6287|       |        }
 6288|  1.02M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6312|  2.80M|    {
 6313|  2.80M|        m_specs.type = type;
 6314|  2.80M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6385|  3.83M|    {
 6386|  3.83M|        return static_cast<bool>(m_error);
 6387|  3.83M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   602k|{
 3605|   602k|    return a.code() == b;
 3606|   602k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   602k|{
 3609|   602k|    return !(a == b);
 3610|   602k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  8.05M|{
 4043|       |    // Pattern_White_Space property
 4044|  8.05M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 7.73M, False: 314k]
  |  Branch (4044:27): [True: 1.49M, False: 6.24M]
  ------------------
 4045|  8.05M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 103k, False: 6.45M]
  ------------------
 4046|  8.05M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 70.7k, False: 6.38M]
  ------------------
 4047|  8.05M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 4.43k, False: 6.37M]
  ------------------
 4048|  8.05M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 25.0k, False: 6.35M]
  ------------------
 4049|  8.05M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 1.57M, False: 4.78M]
  ------------------
 4050|  8.05M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 154, False: 4.78M]
  ------------------
 4051|  8.05M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7072|  1.02M|{
 7073|  1.02M|    switch (type) {
 7074|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.02M]
  ------------------
 7075|      0|            return arg_type_category::none;
 7076|       |
 7077|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.02M]
  ------------------
 7078|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.02M]
  ------------------
 7079|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 1.02M]
  ------------------
 7080|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 1.02M]
  ------------------
 7081|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.02M]
  ------------------
 7082|      0|            return arg_type_category::integer;
 7083|       |
 7084|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7084:9): [True: 0, False: 1.02M]
  ------------------
 7085|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 1.02M]
  ------------------
 7086|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 1.02M]
  ------------------
 7087|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.02M]
  ------------------
 7088|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 1.02M]
  ------------------
 7089|      0|            return arg_type_category::unsigned_integer;
 7090|       |
 7091|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 1.02M]
  ------------------
 7092|      0|            return arg_type_category::pointer;
 7093|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7093:9): [True: 0, False: 1.02M]
  ------------------
 7094|      0|            return arg_type_category::boolean;
 7095|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 1.02M]
  ------------------
 7096|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 1.02M]
  ------------------
 7097|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.02M]
  ------------------
 7098|      0|            return arg_type_category::character;
 7099|       |
 7100|   316k|        case arg_type::float_type:
  ------------------
  |  Branch (7100:9): [True: 316k, False: 710k]
  ------------------
 7101|   667k|        case arg_type::double_type:
  ------------------
  |  Branch (7101:9): [True: 351k, False: 675k]
  ------------------
 7102|  1.02M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7102:9): [True: 358k, False: 667k]
  ------------------
 7103|  1.02M|            return arg_type_category::floating;
 7104|       |
 7105|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7105:9): [True: 0, False: 1.02M]
  ------------------
 7106|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.02M]
  ------------------
 7107|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7107:9): [True: 0, False: 1.02M]
  ------------------
 7108|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7108:9): [True: 0, False: 1.02M]
  ------------------
 7109|      0|            return arg_type_category::string;
 7110|       |
 7111|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7111:9): [True: 0, False: 1.02M]
  ------------------
 7112|      0|            return arg_type_category::custom;
 7113|       |
 7114|      0|            SCN_CLANG_PUSH
 7115|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7116|      0|        default:
  ------------------
  |  Branch (7116:9): [True: 0, False: 1.02M]
  ------------------
 7117|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7118|  1.02M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7119|  1.02M|            SCN_CLANG_POP
 7120|  1.02M|    }
 7121|       |
 7122|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7123|  1.02M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  4.53M|    {
 2896|  4.53M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  4.53M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  4.53M|    {
 2930|  4.53M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  4.53M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  4.53M|    {
 2953|  4.53M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  4.53M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  4.53M|    {
 2962|  4.53M|        return fn::impl(std::forward<T>(t));
 2963|  4.53M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3649|  1.09k|{
 3650|  1.09k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.09k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  3.44k|{
 3650|  3.44k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  3.44k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3649|  45.4k|{
 3650|  45.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  45.4k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7202|  3.83M|{
 7203|  3.83M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7203:9): [True: 2.80M, False: 1.02M]
  ------------------
 7204|  3.83M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7204:10): [True: 0, False: 2.80M]
  ------------------
 7205|  2.80M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7205:10): [True: 0, False: 2.80M]
  ------------------
 7206|      0|        SCN_UNLIKELY_ATTR
 7207|      0|        return handler.on_error("Invalid type specifier for float type");
 7208|      0|    }
 7209|  3.83M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|   545M|    {
 4203|   545M|        assert(m_begin);
 4204|   545M|        return m_end == nullptr;
 4205|   545M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  1.44M|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|  1.44M|    else {
 3716|  1.44M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  1.44M|    }
 3718|  1.44M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  7.09M|    {
 4220|  7.09M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 7.09M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  7.09M|        return parent()->get_segment_starting_at(position());
 4226|  7.09M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|   303M|    {
 4214|   303M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   303M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   303M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   303M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   303M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  7.09M|    {
 4109|  7.09M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  7.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.11M, False: 3.98M]
  |  |  ------------------
  ------------------
 4110|  7.09M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  3.11M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  3.11M|        }
 4113|  3.98M|        const auto start = pos - m_putback_buffer.size();
 4114|  3.98M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  3.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  3.98M|        return m_current_view.substr(start);
 4116|  3.98M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4208|  4.94M|    {
 4209|  4.94M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  4.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  4.94M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|  4.94M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  12.9M|    {
 4198|  12.9M|        return m_position;
 4199|  12.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  5.62M|    {
 4131|  5.62M|        return m_is_contiguous;
 4132|  5.62M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|   125M|    {
 4203|   125M|        assert(m_begin);
 4204|   125M|        return m_end == nullptr;
 4205|   125M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   637k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   637k|    else {
 3716|   637k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   637k|    }
 3718|   637k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  2.23M|    {
 4220|  2.23M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 2.23M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  2.23M|        return parent()->get_segment_starting_at(position());
 4226|  2.23M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|  66.8M|    {
 4214|  66.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  66.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  66.8M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  66.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  2.23M|    {
 4109|  2.23M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.29M, False: 938k]
  |  |  ------------------
  ------------------
 4110|  2.23M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  1.29M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  1.29M|        }
 4113|   938k|        const auto start = pos - m_putback_buffer.size();
 4114|   938k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   938k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   938k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   938k|        return m_current_view.substr(start);
 4116|   938k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4208|  2.41M|    {
 4209|  2.41M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  2.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  2.41M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|  2.41M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  4.87M|    {
 4198|  4.87M|        return m_position;
 4199|  4.87M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  2.74M|    {
 4131|  2.74M|        return m_is_contiguous;
 4132|  2.74M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  7.25M|    {
 3180|  7.25M|        return static_cast<D&>(*this);
 3181|  7.25M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  7.25M|    {
 3221|  7.25M|        return detail::to_address(ranges::begin(derived()));
 3222|  7.25M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   794k|    {
 3180|   794k|        return static_cast<D&>(*this);
 3181|   794k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   794k|    {
 3221|   794k|        return detail::to_address(ranges::begin(derived()));
 3222|   794k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8178|  1.35M|    {
 8179|  1.35M|        return ranges::subrange{begin(), end()};
 8180|  1.35M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8162|  3.96M|    {
 8163|  3.96M|        return m_current;
 8164|  3.96M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8170|  1.35M|    {
 8171|  1.35M|        return ranges::default_sentinel;
 8172|  1.35M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  20.7M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  20.7M|    static_cast<    \
  |  |  929|  20.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  20.7M|    static_cast<    \
  |  |  929|  20.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  20.7M|    {
 3312|  20.7M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8000|  8.14M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.87M|    {
 1837|  1.87M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.87M|                                            std::forward<F>(f));
 1839|  1.87M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.87M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.87M|    else {
 1333|  1.87M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.87M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.87M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.85M, False: 23.0k]
  |  |  ------------------
  ------------------
 1335|  1.87M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.87M|                   : result(unexpect,
 1337|  23.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  23.0k|                                           std::forward<Exp>(exp).error()));
 1339|  1.87M|    }
 1340|  1.87M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  19.9M|    {
  485|  19.9M|        return m_has_value;
  486|  19.9M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  6.76M|    {
 1663|  6.76M|        return std::move(value());
 1664|  6.76M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  7.72M|    {
 1627|  7.72M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.72M|        return this->get_value();
 1629|  7.72M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  7.72M|    {
  451|  7.72M|        return m_value;
  452|  7.72M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  8.33M|        : base(std::in_place, std::forward<U>(val)),
 1428|  8.33M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  8.33M|    {
 1430|  8.33M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  8.33M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  8.33M|    {
  437|  8.33M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.6M|    {
 1177|  10.6M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  49.0k|{
 1211|  49.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  49.0k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  63.5k|    {
 1614|  63.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  63.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  63.5k|        return std::move(this->get_unexpected().error());
 1616|  63.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  87.3k|    {
  468|  87.3k|        return m_unexpected;
  469|  87.3k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   487k|    {
  361|   487k|        return m_unexpected;
  362|   487k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.87M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.87M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.87M|    {
 1486|  1.87M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  2.20M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.20M|          m_has_value(false)
  446|  2.20M|    {
  447|  2.20M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8178|   669k|    {
 8179|   669k|        return ranges::subrange{begin(), end()};
 8180|   669k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8162|  1.80M|    {
 8163|  1.80M|        return m_current;
 8164|  1.80M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8170|   669k|    {
 8171|   669k|        return ranges::default_sentinel;
 8172|   669k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  9.42M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  9.42M|    static_cast<    \
  |  |  929|  9.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  9.42M|    static_cast<    \
  |  |  929|  9.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  9.42M|    {
 3312|  9.42M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   915k|    {
 1837|   915k|        return detail::transform_error_impl(std::move(*this),
 1838|   915k|                                            std::forward<F>(f));
 1839|   915k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   915k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   915k|    else {
 1333|   915k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   915k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   915k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 912k, False: 3.86k]
  |  |  ------------------
  ------------------
 1335|   915k|                   ? result(*std::forward<Exp>(exp))
 1336|   915k|                   : result(unexpect,
 1337|  3.86k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.86k|                                           std::forward<Exp>(exp).error()));
 1339|   915k|    }
 1340|   915k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  8.86M|    {
  485|  8.86M|        return m_has_value;
  486|  8.86M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  3.26M|    {
 1663|  3.26M|        return std::move(value());
 1664|  3.26M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  3.29M|    {
 1627|  3.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.29M|        return this->get_value();
 1629|  3.29M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  3.29M|    {
  451|  3.29M|        return m_value;
  452|  3.29M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  3.35M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.35M|    {
 1430|  3.35M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.35M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.35M|    {
  437|  3.35M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.23M|    {
 1177|  5.23M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  64.7k|    {
 1614|  64.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  64.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  64.7k|        return std::move(this->get_unexpected().error());
 1616|  64.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  66.9k|    {
  468|  66.9k|        return m_unexpected;
  469|  66.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.16M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.16M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.16M|    {
 1486|  1.16M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.88M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.88M|          m_has_value(false)
  446|  1.88M|    {
  447|  1.88M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   236k|        : m_unexpected(std::forward<Err>(e))
  346|   236k|    {
  347|   236k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   236k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   236k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   294k|        : base(unexpect, std::move(e.error())),
 1474|   294k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   294k|    {
 1476|   294k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.85M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.85M|          m_has_value(false)
  446|  1.85M|    {
  447|  1.85M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.08M|    {
 1177|  9.08M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  7.14M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.14M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.14M|    {
 1430|  7.14M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  7.14M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.14M|    {
  437|  7.14M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  10.6M|    {
 1598|  10.6M|        return has_value();
 1599|  10.6M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  16.7M|    {
  485|  16.7M|        return m_has_value;
  486|  16.7M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   347k|    {
 1604|   347k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   347k|        return this->get_unexpected().error();
 1606|   347k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   347k|    {
  468|   347k|        return m_unexpected;
  469|   347k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  4.60M|    {
 1663|  4.60M|        return std::move(value());
 1664|  4.60M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  5.69M|    {
 1627|  5.69M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.69M|        return this->get_value();
 1629|  5.69M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  5.69M|    {
  451|  5.69M|        return m_value;
  452|  5.69M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   582k|        : base(unexpect, std::move(e.error())),
 1474|   582k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   582k|    {
 1476|   582k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.61M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.61M|          m_has_value(false)
  446|  1.61M|    {
  447|  1.61M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.23M|    {
 1177|  5.23M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  3.62M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.62M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.62M|    {
 1430|  3.62M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.62M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.62M|    {
  437|  3.62M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  6.15M|    {
 1598|  6.15M|        return has_value();
 1599|  6.15M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  9.68M|    {
  485|  9.68M|        return m_has_value;
  486|  9.68M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   699k|    {
 1604|   699k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   699k|        return this->get_unexpected().error();
 1606|   699k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   699k|    {
  468|   699k|        return m_unexpected;
  469|   699k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.36M|    {
 1663|  2.36M|        return std::move(value());
 1664|  2.36M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  2.83M|    {
 1627|  2.83M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.83M|        return this->get_value();
 1629|  2.83M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  2.83M|    {
  451|  2.83M|        return m_value;
  452|  2.83M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.60M|    {
 1837|  1.60M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.60M|                                            std::forward<F>(f));
 1839|  1.60M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.60M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.60M|    else {
 1333|  1.60M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.60M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.58M, False: 18.3k]
  |  |  ------------------
  ------------------
 1335|  1.60M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.60M|                   : result(unexpect,
 1337|  18.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  18.3k|                                           std::forward<Exp>(exp).error()));
 1339|  1.60M|    }
 1340|  1.60M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  6.08M|    {
  485|  6.08M|        return m_has_value;
  486|  6.08M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.58M|    {
 1663|  1.58M|        return std::move(value());
 1664|  1.58M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.07M|    {
 1627|  2.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.07M|        return this->get_value();
 1629|  2.07M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.07M|    {
  451|  2.07M|        return m_value;
  452|  2.07M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  18.3k|    {
 1614|  18.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  18.3k|        return std::move(this->get_unexpected().error());
 1616|  18.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  23.8k|    {
  468|  23.8k|        return m_unexpected;
  469|  23.8k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.55M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.55M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.55M|    {
 1486|  1.55M|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  16.9M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   335k|        : base(unexpect, std::move(e.error())),
 1474|   335k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   335k|    {
 1476|   335k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  16.5M|    {
 4289|  16.5M|        return x.is_at_end();
 4290|  16.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  41.3M|    {
 4333|  41.3M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 41.3M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  41.3M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 41.3M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  41.3M|        return !read_at_position();
 4340|  41.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|   178M|    {
 4313|   178M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   178M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   178M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 178M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   178M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   178M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 154M, False: 24.1M]
  |  |  ------------------
  ------------------
 4320|   154M|            return true;
 4321|   154M|        }
 4322|       |
 4323|  47.9M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 24.1M, False: 23.8M]
  ------------------
 4324|  24.1M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 338k, False: 23.8M]
  ------------------
 4325|   338k|                return false;
 4326|   338k|            }
 4327|  24.1M|        }
 4328|  23.8M|        return true;
 4329|  24.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|   231M|    {
 4089|   231M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   231M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  45.9M|    {
 4248|  45.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  45.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  45.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 45.9M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  45.9M|        auto res = read_at_position();
 4257|  45.9M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  45.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  45.9M|        return parent()->get_character_at(m_position);
 4259|  45.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  45.9M|    {
 4120|  45.9M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  45.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5M, False: 17.4M]
  |  |  ------------------
  ------------------
 4121|  45.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  28.5M|            return m_putback_buffer[pos];
 4123|  28.5M|        }
 4124|  17.4M|        const auto start = pos - m_putback_buffer.size();
 4125|  17.4M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  17.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  17.4M|        return m_current_view[start];
 4127|  17.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  12.0M|        : base(std::in_place, std::forward<U>(val)),
 1428|  12.0M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  12.0M|    {
 1430|  12.0M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  12.0M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  12.0M|    {
  437|  12.0M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.1M|    {
 1177|  12.1M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|   162k|        : m_unexpected(std::forward<Err>(e))
  346|   162k|    {
  347|   162k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   162k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   162k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  87.3k|        : base(unexpect, std::move(e.error())),
 1474|  87.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.3k|    {
 1476|  87.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  87.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.3k|          m_has_value(false)
  446|  87.3k|    {
  447|  87.3k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   244k|        : m_unexpected(std::forward<Args>(args)...)
  355|   244k|    {
  356|   244k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   244k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   244k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  5.29M|    {
 1598|  5.29M|        return has_value();
 1599|  5.29M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   960k|    {
 1653|   960k|        return value();
 1654|   960k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  43.6M|    {
 4283|  43.6M|        return !(lhs == rhs);
 4284|  43.6M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  48.5M|    {
 4278|  48.5M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 48.5M, False: 0]
  |  Branch (4278:46): [True: 6.23M, False: 42.3M]
  ------------------
 4279|  48.5M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  91.1M|    {
 4234|  91.1M|        ++m_position;
 4235|  91.1M|        (void)read_at_position();
 4236|  91.1M|        return *this;
 4237|  91.1M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  81.0k|        : m_unexpected(std::forward<Err>(e))
  346|  81.0k|    {
  347|  81.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  81.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  81.0k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  17.5k|        : base(unexpect, std::move(e.error())),
 1474|  17.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  17.5k|    {
 1476|  17.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  17.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  17.5k|          m_has_value(false)
  446|  17.5k|    {
  447|  17.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.59M|    {
 1177|  2.59M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.58M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.58M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.58M|    {
 1430|  2.58M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  2.58M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.58M|    {
  437|  2.58M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  2.59M|    {
 1598|  2.59M|        return has_value();
 1599|  2.59M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.19M|    {
  485|  5.19M|        return m_has_value;
  486|  5.19M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  17.5k|    {
 1604|  17.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  17.5k|        return this->get_unexpected().error();
 1606|  17.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  17.5k|    {
  468|  17.5k|        return m_unexpected;
  469|  17.5k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.58M|    {
 1663|  2.58M|        return std::move(value());
 1664|  2.58M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.58M|    {
 1627|  2.58M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.58M|        return this->get_value();
 1629|  2.58M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.58M|    {
  451|  2.58M|        return m_value;
  452|  2.58M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  58.9M|    {
 3330|  58.9M|        return m_sentinel;
 3331|  58.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  71.0k|        : m_unexpected(std::forward<Err>(e))
  346|  71.0k|    {
  347|  71.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  71.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  71.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  21.0M|    {
  361|  21.0M|        return m_unexpected;
  362|  21.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  5.62M|        : m_unexpected(std::forward<Args>(args)...)
  355|  5.62M|    {
  356|  5.62M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.62M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  5.62M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  26.1M|        : m_unexpected(std::forward<Err>(e))
  346|  26.1M|    {
  347|  26.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  26.1M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  26.1M|    {
  361|  26.1M|        return m_unexpected;
  362|  26.1M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  26.1M|        : m_unexpected(std::forward<Args>(args)...)
  355|  26.1M|    {
  356|  26.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  26.1M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   162k|{
 1211|   162k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   162k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  5.39M|        : m_unexpected(std::forward<Err>(e))
  346|  5.39M|    {
  347|  5.39M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.39M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  5.39M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  23.7k|    {
 1604|  23.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  23.7k|        return this->get_unexpected().error();
 1606|  23.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  1.89M|        : base(unexpect, std::move(e.error())),
 1474|  1.89M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.89M|    {
 1476|  1.89M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  1.93M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.93M|          m_has_value(false)
  446|  1.93M|    {
  447|  1.93M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.6M|    {
 1177|  20.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   970k|        : base(std::in_place, std::forward<U>(val)),
 1428|   970k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   970k|    {
 1430|   970k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   970k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   970k|    {
  437|   970k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  10.5M|        : base(unexpect, std::move(e.error())),
 1474|  10.5M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  10.5M|    {
 1476|  10.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  10.5M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  10.5M|          m_has_value(false)
  446|  10.5M|    {
  447|  10.5M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  22.5M|    {
 1598|  22.5M|        return has_value();
 1599|  22.5M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  39.8M|    {
  485|  39.8M|        return m_has_value;
  486|  39.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  5.29M|    {
 1604|  5.29M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.29M|        return this->get_unexpected().error();
 1606|  5.29M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.29M|    {
  468|  5.29M|        return m_unexpected;
  469|  5.29M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|  2.02M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.02M|    {
 1430|  2.02M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  2.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.02M|    {
  437|  2.02M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.02M|    {
 1177|  2.02M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    309|        : base(unexpect, std::move(e.error())),
 1474|    309|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    309|    {
 1476|    309|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|    309|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    309|          m_has_value(false)
  446|    309|    {
  447|    309|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  5.26M|    {
 1653|  5.26M|        return value();
 1654|  5.26M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  10.1M|    {
 1627|  10.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.1M|        return this->get_value();
 1629|  10.1M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  10.1M|    {
  451|  10.1M|        return m_value;
  452|  10.1M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   173k|    {
 1598|   173k|        return has_value();
 1599|   173k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  4.05M|    {
  485|  4.05M|        return m_has_value;
  486|  4.05M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.85M|    {
 1663|  1.85M|        return std::move(value());
 1664|  1.85M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  2.02M|    {
 1627|  2.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.02M|        return this->get_value();
 1629|  2.02M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  2.02M|    {
  451|  2.02M|        return m_value;
  452|  2.02M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  4.94M|    {
 1837|  4.94M|        return detail::transform_error_impl(std::move(*this),
 1838|  4.94M|                                            std::forward<F>(f));
 1839|  4.94M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  4.94M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  4.94M|    else {
 1333|  4.94M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  4.94M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.94M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.90M, False: 40.4k]
  |  |  ------------------
  ------------------
 1335|  4.94M|                   ? result(*std::forward<Exp>(exp))
 1336|  4.94M|                   : result(unexpect,
 1337|  40.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  40.4k|                                           std::forward<Exp>(exp).error()));
 1339|  4.94M|    }
 1340|  4.94M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  7.22M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.22M|    {
 1430|  7.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  7.22M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.22M|    {
  437|  7.22M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  40.4k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  40.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  40.4k|    {
 1486|  40.4k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  4.90M|    {
 1663|  4.90M|        return std::move(value());
 1664|  4.90M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  2.12M|    {
 3326|  2.12M|        return m_iterator;
 3327|  2.12M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  2.12M|    {
 3330|  2.12M|        return m_sentinel;
 3331|  2.12M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  12.4M|    {
 1598|  12.4M|        return has_value();
 1599|  12.4M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  19.5M|    {
  485|  19.5M|        return m_has_value;
  486|  19.5M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   439k|    {
 1604|   439k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   439k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   439k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   439k|        return this->get_unexpected().error();
 1606|   439k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   439k|    {
  468|   439k|        return m_unexpected;
  469|   439k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  5.35M|    {
 1663|  5.35M|        return std::move(value());
 1664|  5.35M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  6.67M|    {
 1627|  6.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.67M|        return this->get_value();
 1629|  6.67M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  6.67M|    {
  451|  6.67M|        return m_value;
  452|  6.67M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  1.67M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.67M|    static_cast<    \
  |  |  929|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.67M|    static_cast<    \
  |  |  929|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.67M|    {
 3312|  1.67M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  24.8M|    {
 4300|  24.8M|        return !x.is_at_end();
 4301|  24.8M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  23.8k|        : base(unexpect, std::move(e.error())),
 1474|  23.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.8k|    {
 1476|  23.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  23.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.8k|          m_has_value(false)
  446|  23.8k|    {
  447|  23.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.98M|    {
 1177|  3.98M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  3.96M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.96M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.96M|    {
 1430|  3.96M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.96M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.96M|    {
  437|  3.96M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  2.37M|    {
 1598|  2.37M|        return has_value();
 1599|  2.37M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   489k|    {
 1653|   489k|        return value();
 1654|   489k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  13.1k|        : base(unexpect, std::move(e.error())),
 1474|  13.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.1k|    {
 1476|  13.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  13.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  13.1k|          m_has_value(false)
  446|  13.1k|    {
  447|  13.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.15M|    {
 1177|  2.15M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.14M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.14M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.14M|    {
 1430|  2.14M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  2.14M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.14M|    {
  437|  2.14M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  2.15M|    {
 1598|  2.15M|        return has_value();
 1599|  2.15M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.31M|    {
  485|  4.31M|        return m_has_value;
  486|  4.31M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  13.1k|    {
 1604|  13.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.1k|        return this->get_unexpected().error();
 1606|  13.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.1k|    {
  468|  13.1k|        return m_unexpected;
  469|  13.1k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  2.14M|    {
 1663|  2.14M|        return std::move(value());
 1664|  2.14M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.14M|    {
 1627|  2.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.14M|        return this->get_value();
 1629|  2.14M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.14M|    {
  451|  2.14M|        return m_value;
  452|  2.14M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  5.54k|    {
 1604|  5.54k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.54k|        return this->get_unexpected().error();
 1606|  5.54k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.61M|        : base(unexpect, std::move(e.error())),
 1474|  1.61M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.61M|    {
 1476|  1.61M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.61M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.61M|          m_has_value(false)
  446|  1.61M|    {
  447|  1.61M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.10M|    {
 1177|  9.10M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   498k|        : base(std::in_place, std::forward<U>(val)),
 1428|   498k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   498k|    {
 1430|   498k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   498k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   498k|    {
  437|   498k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  6.31M|        : base(unexpect, std::move(e.error())),
 1474|  6.31M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.31M|    {
 1476|  6.31M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  6.31M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  6.31M|          m_has_value(false)
  446|  6.31M|    {
  447|  6.31M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  10.6M|    {
 1598|  10.6M|        return has_value();
 1599|  10.6M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  18.2M|    {
  485|  18.2M|        return m_has_value;
  486|  18.2M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  4.37M|    {
 1604|  4.37M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.37M|        return this->get_unexpected().error();
 1606|  4.37M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  4.37M|    {
  468|  4.37M|        return m_unexpected;
  469|  4.37M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  1.62M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.62M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.62M|    {
 1430|  1.62M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.62M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.62M|    {
  437|  1.62M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.62M|    {
 1177|  1.62M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    102|        : base(unexpect, std::move(e.error())),
 1474|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    102|    {
 1476|    102|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|    102|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    102|          m_has_value(false)
  446|    102|    {
  447|    102|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  1.66M|    {
 1653|  1.66M|        return value();
 1654|  1.66M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.66M|    {
 1627|  1.66M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.66M|        return this->get_value();
 1629|  1.66M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.66M|    {
  451|  1.66M|        return m_value;
  452|  1.66M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  39.0k|    {
 1598|  39.0k|        return has_value();
 1599|  39.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  3.25M|    {
  485|  3.25M|        return m_has_value;
  486|  3.25M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.58M|    {
 1663|  1.58M|        return std::move(value());
 1664|  1.58M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.62M|    {
 1627|  1.62M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.62M|        return this->get_value();
 1629|  1.62M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.62M|    {
  451|  1.62M|        return m_value;
  452|  1.62M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|   679k|        : base(std::in_place, std::forward<U>(val)),
 1428|   679k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   679k|    {
 1430|   679k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   679k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   679k|    {
  437|   679k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  3.06M|    {
 2855|  3.06M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  3.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  3.06M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  3.06M|    {
 2836|  3.06M|        return t.data();
 2837|  3.06M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|  1.19M|        : base(unexpect, std::move(e.error())),
 1474|  1.19M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.19M|    {
 1476|  1.19M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|  1.19M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.19M|          m_has_value(false)
  446|  1.19M|    {
  447|  1.19M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.7M|    {
 1177|  14.7M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  13.4M|        : base(std::in_place, std::forward<U>(val)),
 1428|  13.4M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  13.4M|    {
 1430|  13.4M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  13.4M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  13.4M|    {
  437|  13.4M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1662|  9.06M|    {
 1663|  9.06M|        return std::move(value());
 1664|  9.06M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  5.57M|{
 1211|  5.57M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  5.57M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.85M|    {
 1837|  1.85M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.85M|                                            std::forward<F>(f));
 1839|  1.85M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|  1.85M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.85M|    else {
 1333|  1.85M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.85M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.85M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.85M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.85M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.85M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.85M|    }
 1340|  1.85M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.85M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.85M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.85M|    {
 1430|  1.85M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.85M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.85M|    {
  437|  1.85M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.85M|    {
 1177|  1.85M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.85M|    {
 1598|  1.85M|        return has_value();
 1599|  1.85M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.70M|    {
  485|  3.70M|        return m_has_value;
  486|  3.70M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.85M|    {
 1663|  1.85M|        return std::move(value());
 1664|  1.85M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.85M|    {
 1627|  1.85M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.85M|        return this->get_value();
 1629|  1.85M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.85M|    {
  451|  1.85M|        return m_value;
  452|  1.85M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.84M|    {
 1823|  1.84M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.84M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.84M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.84M|    else {
 1333|  1.84M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.84M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.84M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 1335|  1.84M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.84M|                   : result(unexpect,
 1337|  1.84M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.84M|                                           std::forward<Exp>(exp).error()));
 1339|  1.84M|    }
 1340|  1.84M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1427|  89.2k|        : base(std::in_place, std::forward<U>(val)),
 1428|  89.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  89.2k|    {
 1430|  89.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  89.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  89.2k|    {
  437|  89.2k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  1.32M|    {
 1653|  1.32M|        return value();
 1654|  1.32M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   431k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   172k|    {
 1673|   172k|        return &value();
 1674|   172k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  1.33M|    {
 2724|  1.33M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.33M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  1.33M|    {
 2705|  1.33M|        return decay_copy(t.begin());
 2706|  1.33M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  1.33M|{
 1949|  1.33M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.33M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   811k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.58M|    {
 1837|  1.58M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.58M|                                            std::forward<F>(f));
 1839|  1.58M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|  1.58M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.58M|    else {
 1333|  1.58M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.58M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.58M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.58M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.58M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.58M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.58M|    }
 1340|  1.58M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.58M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.58M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.58M|    {
 1430|  1.58M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.58M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.58M|    {
  437|  1.58M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.58M|    {
 1177|  1.58M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.58M|    {
 1598|  1.58M|        return has_value();
 1599|  1.58M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.17M|    {
  485|  3.17M|        return m_has_value;
  486|  3.17M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.58M|    {
 1663|  1.58M|        return std::move(value());
 1664|  1.58M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.58M|    {
 1627|  1.58M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.58M|        return this->get_value();
 1629|  1.58M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.58M|    {
  451|  1.58M|        return m_value;
  452|  1.58M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.54M|    {
 1823|  1.54M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.54M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.54M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.54M|    else {
 1333|  1.54M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.54M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.54M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.54M]
  |  |  ------------------
  ------------------
 1335|  1.54M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.54M|                   : result(unexpect,
 1337|  1.54M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.54M|                                           std::forward<Exp>(exp).error()));
 1339|  1.54M|    }
 1340|  1.54M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1427|  85.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  85.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  85.5k|    {
 1430|  85.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  85.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  85.5k|    {
  437|  85.5k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|  1.54M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.54M|    static_cast<    \
  |  |  929|  1.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.54M|    {
 3644|  1.54M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  1.09M|    {
 1653|  1.09M|        return value();
 1654|  1.09M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  38.9k|    {
 1673|  38.9k|        return &value();
 1674|  38.9k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|  1.84M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.84M|    static_cast<    \
  |  |  929|  1.84M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.84M|    {
 3644|  1.84M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   717k|        : base(unexpect, std::move(e.error())),
 1474|   717k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   717k|    {
 1476|   717k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  7.72M|    {
 4289|  7.72M|        return x.is_at_end();
 4290|  7.72M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  12.2M|    {
 4333|  12.2M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 12.2M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  12.2M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 12.2M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  12.2M|        return !read_at_position();
 4340|  12.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|  38.8M|    {
 4313|  38.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  38.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  38.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 38.8M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  38.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  38.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 34.3M, False: 4.58M]
  |  |  ------------------
  ------------------
 4320|  34.3M|            return true;
 4321|  34.3M|        }
 4322|       |
 4323|  8.95M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 4.58M, False: 4.37M]
  ------------------
 4324|  4.58M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 201k, False: 4.37M]
  ------------------
 4325|   201k|                return false;
 4326|   201k|            }
 4327|  4.58M|        }
 4328|  4.37M|        return true;
 4329|  4.58M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|  50.2M|    {
 4089|  50.2M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  50.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  12.2M|    {
 4248|  12.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  12.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  12.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 12.2M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  12.2M|        auto res = read_at_position();
 4257|  12.2M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  12.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  12.2M|        return parent()->get_character_at(m_position);
 4259|  12.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  12.2M|    {
 4120|  12.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  12.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3M, False: 1.80M]
  |  |  ------------------
  ------------------
 4121|  12.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  10.3M|            return m_putback_buffer[pos];
 4123|  10.3M|        }
 4124|  1.80M|        const auto start = pos - m_putback_buffer.size();
 4125|  1.80M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  1.80M|        return m_current_view[start];
 4127|  1.80M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|  4.43M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|  4.43M|    else {
 3810|       |        // utf-32
 3811|  4.43M|        static_assert(sizeof(U) == 4);
 3812|  4.43M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  4.43M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|  4.43M|        return 1;
 3814|  4.43M|    }
 3815|  4.43M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  5.43M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.43M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.43M|    {
 1430|  5.43M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  5.43M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.43M|    {
  437|  5.43M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.50M|    {
 1177|  5.50M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  66.9k|        : base(unexpect, std::move(e.error())),
 1474|  66.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  66.9k|    {
 1476|  66.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  66.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  66.9k|          m_has_value(false)
  446|  66.9k|    {
  447|  66.9k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  2.17M|    {
 1598|  2.17M|        return has_value();
 1599|  2.17M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  32.6k|    {
 1653|  32.6k|        return value();
 1654|  32.6k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  5.92M|    {
 4283|  5.92M|        return !(lhs == rhs);
 4284|  5.92M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  8.04M|    {
 4278|  8.04M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 8.04M, False: 0]
  |  Branch (4278:46): [True: 2.57M, False: 5.47M]
  ------------------
 4279|  8.04M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  14.4M|    {
 4234|  14.4M|        ++m_position;
 4235|  14.4M|        (void)read_at_position();
 4236|  14.4M|        return *this;
 4237|  14.4M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  4.43M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|  4.43M|    else {
 4016|  4.43M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  4.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|  4.43M|        auto cp = static_cast<char32_t>(input.front());
 4018|  4.43M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  4.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 295k, False: 4.13M]
  |  |  ------------------
  ------------------
 4019|   295k|            return invalid_code_point;
 4020|   295k|        }
 4021|  4.13M|        return cp;
 4022|  4.43M|    }
 4023|  4.43M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.87k|        : base(unexpect, std::move(e.error())),
 1474|  2.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.87k|    {
 1476|  2.87k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.87k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.87k|          m_has_value(false)
  446|  2.87k|    {
  447|  2.87k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.13M|    {
 1177|  1.13M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.13M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.13M|    {
 1430|  1.13M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  1.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.13M|    {
  437|  1.13M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.13M|    {
 1598|  1.13M|        return has_value();
 1599|  1.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.27M|    {
  485|  2.27M|        return m_has_value;
  486|  2.27M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.87k|    {
 1604|  2.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.87k|        return this->get_unexpected().error();
 1606|  2.87k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.87k|    {
  468|  2.87k|        return m_unexpected;
  469|  2.87k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.13M|    {
 1663|  1.13M|        return std::move(value());
 1664|  1.13M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.13M|    {
 1627|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.13M|        return this->get_value();
 1629|  1.13M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.13M|    {
  451|  1.13M|        return m_value;
  452|  1.13M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  20.0M|    {
 3330|  20.0M|        return m_sentinel;
 3331|  20.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  2.16k|    {
 1604|  2.16k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.16k|        return this->get_unexpected().error();
 1606|  2.16k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|   975k|        : base(unexpect, std::move(e.error())),
 1474|   975k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   975k|    {
 1476|   975k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  1.03M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.03M|          m_has_value(false)
  446|  1.03M|    {
  447|  1.03M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.51M|    {
 1177|  9.51M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  32.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  32.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  32.6k|    {
 1430|  32.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  32.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  32.6k|    {
  437|  32.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  5.40M|        : base(unexpect, std::move(e.error())),
 1474|  5.40M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.40M|    {
 1476|  5.40M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  5.40M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.40M|          m_has_value(false)
  446|  5.40M|    {
  447|  5.40M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  10.4M|    {
 1598|  10.4M|        return has_value();
 1599|  10.4M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  18.3M|    {
  485|  18.3M|        return m_has_value;
  486|  18.3M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  3.05M|    {
 1604|  3.05M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.05M|        return this->get_unexpected().error();
 1606|  3.05M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.05M|    {
  468|  3.05M|        return m_unexpected;
  469|  3.05M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   931k|        : base(std::in_place, std::forward<U>(val)),
 1428|   931k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   931k|    {
 1430|   931k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   931k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   931k|    {
  437|   931k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   931k|    {
 1177|   931k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|     91|        : base(unexpect, std::move(e.error())),
 1474|     91|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     91|    {
 1476|     91|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|     91|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     91|          m_has_value(false)
  446|     91|    {
  447|     91|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  1.38M|    {
 1653|  1.38M|        return value();
 1654|  1.38M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  3.74M|    {
 1627|  3.74M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.74M|        return this->get_value();
 1629|  3.74M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  3.74M|    {
  451|  3.74M|        return m_value;
  452|  3.74M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  19.6k|    {
 1598|  19.6k|        return has_value();
 1599|  19.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.86M|    {
  485|  1.86M|        return m_has_value;
  486|  1.86M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   912k|    {
 1663|   912k|        return std::move(value());
 1664|   912k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   931k|    {
 1627|   931k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   931k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   931k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   931k|        return this->get_value();
 1629|   931k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   931k|    {
  451|   931k|        return m_value;
  452|   931k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.41M|    {
 1837|  2.41M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.41M|                                            std::forward<F>(f));
 1839|  2.41M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  2.41M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.41M|    else {
 1333|  2.41M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.41M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.41M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.35M, False: 60.9k]
  |  |  ------------------
  ------------------
 1335|  2.41M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.41M|                   : result(unexpect,
 1337|  60.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  60.9k|                                           std::forward<Exp>(exp).error()));
 1339|  2.41M|    }
 1340|  2.41M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  3.04M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.04M|    {
 1430|  3.04M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.04M|    {
  437|  3.04M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  60.9k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  60.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  60.9k|    {
 1486|  60.9k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.35M|    {
 1663|  2.35M|        return std::move(value());
 1664|  2.35M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|   703k|    {
 3326|   703k|        return m_iterator;
 3327|   703k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|   703k|    {
 3330|   703k|        return m_sentinel;
 3331|   703k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  6.14M|    {
 1598|  6.14M|        return has_value();
 1599|  6.14M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.80M|    {
  485|  9.80M|        return m_has_value;
  486|  9.80M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   968k|    {
 1604|   968k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   968k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   968k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   968k|        return this->get_unexpected().error();
 1606|   968k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   968k|    {
  468|   968k|        return m_unexpected;
  469|   968k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  2.22M|    {
 1663|  2.22M|        return std::move(value());
 1664|  2.22M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.69M|    {
 1627|  2.69M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.69M|        return this->get_value();
 1629|  2.69M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.69M|    {
  451|  2.69M|        return m_value;
  452|  2.69M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   659k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   659k|    static_cast<    \
  |  |  929|   659k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   659k|    static_cast<    \
  |  |  929|   659k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   659k|    {
 3312|   659k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  4.51M|    {
 4300|  4.51M|        return !x.is_at_end();
 4301|  4.51M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  65.4k|        : base(unexpect, std::move(e.error())),
 1474|  65.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  65.4k|    {
 1476|  65.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  65.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  65.4k|          m_has_value(false)
  446|  65.4k|    {
  447|  65.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.58M|    {
 1177|  4.58M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  4.51M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.51M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.51M|    {
 1430|  4.51M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.51M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.51M|    {
  437|  4.51M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  1.25M|    {
 1598|  1.25M|        return has_value();
 1599|  1.25M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  7.93M|    {
  485|  7.93M|        return m_has_value;
  486|  7.93M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  13.8k|    {
 1653|  13.8k|        return value();
 1654|  13.8k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  3.28M|    {
 1627|  3.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.28M|        return this->get_value();
 1629|  3.28M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  3.28M|    {
  451|  3.28M|        return m_value;
  452|  3.28M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.87k|        : base(unexpect, std::move(e.error())),
 1474|  2.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.87k|    {
 1476|  2.87k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.87k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.87k|          m_has_value(false)
  446|  2.87k|    {
  447|  2.87k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.13M|    {
 1177|  1.13M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.13M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.13M|    {
 1430|  1.13M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.13M|    {
  437|  1.13M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   916k|    {
 1837|   916k|        return detail::transform_error_impl(std::move(*this),
 1838|   916k|                                            std::forward<F>(f));
 1839|   916k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   916k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   916k|    else {
 1333|   916k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   916k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   916k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 912k, False: 3.86k]
  |  |  ------------------
  ------------------
 1335|   916k|                   ? result(*std::forward<Exp>(exp))
 1336|   916k|                   : result(unexpect,
 1337|  3.86k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.86k|                                           std::forward<Exp>(exp).error()));
 1339|   916k|    }
 1340|   916k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  3.26M|    {
 1663|  3.26M|        return std::move(value());
 1664|  3.26M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  64.9k|    {
 1614|  64.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  64.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  64.9k|        return std::move(this->get_unexpected().error());
 1616|  64.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  65.4k|    {
  468|  65.4k|        return m_unexpected;
  469|  65.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.02M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.02M|    {
 1486|  1.02M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.13M|    {
 1598|  1.13M|        return has_value();
 1599|  1.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.27M|    {
  485|  2.27M|        return m_has_value;
  486|  2.27M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.87k|    {
 1604|  2.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.87k|        return this->get_unexpected().error();
 1606|  2.87k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.87k|    {
  468|  2.87k|        return m_unexpected;
  469|  2.87k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.13M|    {
 1663|  1.13M|        return std::move(value());
 1664|  1.13M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.13M|    {
 1627|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.13M|        return this->get_value();
 1629|  1.13M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.13M|    {
  451|  1.13M|        return m_value;
  452|  1.13M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    524|    {
 1604|    524|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    524|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    524|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    524|        return this->get_unexpected().error();
 1606|    524|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|   974k|        : base(unexpect, std::move(e.error())),
 1474|   974k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   974k|    {
 1476|   974k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.03M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.03M|          m_has_value(false)
  446|  1.03M|    {
  447|  1.03M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.53M|    {
 1177|  7.53M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  13.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  13.8k|    {
 1430|  13.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  13.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  13.8k|    {
  437|  13.8k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  3.91M|        : base(unexpect, std::move(e.error())),
 1474|  3.91M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.91M|    {
 1476|  3.91M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.91M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.91M|          m_has_value(false)
  446|  3.91M|    {
  447|  3.91M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  8.44M|    {
 1598|  8.44M|        return has_value();
 1599|  8.44M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  15.1M|    {
  485|  15.1M|        return m_has_value;
  486|  15.1M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  2.91M|    {
 1604|  2.91M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.91M|        return this->get_unexpected().error();
 1606|  2.91M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.91M|    {
  468|  2.91M|        return m_unexpected;
  469|  2.91M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   919k|        : base(std::in_place, std::forward<U>(val)),
 1428|   919k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   919k|    {
 1430|   919k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   919k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   919k|    {
  437|   919k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   919k|    {
 1177|   919k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     30|        : base(unexpect, std::move(e.error())),
 1474|     30|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     30|    {
 1476|     30|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     30|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     30|          m_has_value(false)
  446|     30|    {
  447|     30|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   442k|    {
 1653|   442k|        return value();
 1654|   442k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.79M|    {
 1627|  2.79M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.79M|        return this->get_value();
 1629|  2.79M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.79M|    {
  451|  2.79M|        return m_value;
  452|  2.79M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  6.69k|    {
 1598|  6.69k|        return has_value();
 1599|  6.69k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.83M|    {
  485|  1.83M|        return m_has_value;
  486|  1.83M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   912k|    {
 1663|   912k|        return std::move(value());
 1664|   912k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   919k|    {
 1627|   919k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   919k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   919k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   919k|        return this->get_value();
 1629|   919k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   919k|    {
  451|   919k|        return m_value;
  452|   919k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.41M|    {
 1837|  2.41M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.41M|                                            std::forward<F>(f));
 1839|  2.41M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  2.41M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.41M|    else {
 1333|  2.41M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.41M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.41M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.35M, False: 61.0k]
  |  |  ------------------
  ------------------
 1335|  2.41M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.41M|                   : result(unexpect,
 1337|  61.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  61.0k|                                           std::forward<Exp>(exp).error()));
 1339|  2.41M|    }
 1340|  2.41M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  2.57M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.57M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.57M|    {
 1430|  2.57M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.57M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.57M|    {
  437|  2.57M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  61.0k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  61.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  61.0k|    {
 1486|  61.0k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  2.35M|    {
 1663|  2.35M|        return std::move(value());
 1664|  2.35M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   794k|    {
 2855|   794k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   794k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   794k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   794k|    {
 2836|   794k|        return t.data();
 2837|   794k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   912k|    {
 1837|   912k|        return detail::transform_error_impl(std::move(*this),
 1838|   912k|                                            std::forward<F>(f));
 1839|   912k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|   912k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   912k|    else {
 1333|   912k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   912k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   912k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 912k, False: 0]
  |  |  ------------------
  ------------------
 1335|   912k|                   ? result(*std::forward<Exp>(exp))
 1336|   912k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   912k|    }
 1340|   912k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   912k|        : base(std::in_place, std::forward<U>(val)),
 1428|   912k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   912k|    {
 1430|   912k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   912k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   912k|    {
  437|   912k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   912k|    {
 1177|   912k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   912k|    {
 1598|   912k|        return has_value();
 1599|   912k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.82M|    {
  485|  1.82M|        return m_has_value;
  486|  1.82M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   912k|    {
 1663|   912k|        return std::move(value());
 1664|   912k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   912k|    {
 1627|   912k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   912k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   912k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   912k|        return this->get_value();
 1629|   912k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   912k|    {
  451|   912k|        return m_value;
  452|   912k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.15M|    {
 1823|  1.15M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.15M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.15M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.15M|    else {
 1333|  1.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
 1335|  1.15M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.15M|                   : result(unexpect,
 1337|  1.15M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.15M|                                           std::forward<Exp>(exp).error()));
 1339|  1.15M|    }
 1340|  1.15M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   468k|    {
 1653|   468k|        return value();
 1654|   468k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   181k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  19.5k|    {
 1673|  19.5k|        return &value();
 1674|  19.5k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   730k|    {
 2724|   730k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   730k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   730k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   730k|    {
 2705|   730k|        return decay_copy(t.begin());
 2706|   730k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   730k|{
 1949|   730k|    return SCN_FWD(t);
  ------------------
  |  |  930|   730k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   730k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   408k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   912k|    {
 1837|   912k|        return detail::transform_error_impl(std::move(*this),
 1838|   912k|                                            std::forward<F>(f));
 1839|   912k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   912k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   912k|    else {
 1333|   912k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   912k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   912k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 912k, False: 0]
  |  |  ------------------
  ------------------
 1335|   912k|                   ? result(*std::forward<Exp>(exp))
 1336|   912k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   912k|    }
 1340|   912k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   912k|        : base(std::in_place, std::forward<U>(val)),
 1428|   912k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   912k|    {
 1430|   912k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   912k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   912k|    {
  437|   912k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   912k|    {
 1177|   912k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   912k|    {
 1598|   912k|        return has_value();
 1599|   912k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.82M|    {
  485|  1.82M|        return m_has_value;
  486|  1.82M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   912k|    {
 1663|   912k|        return std::move(value());
 1664|   912k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   912k|    {
 1627|   912k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   912k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   912k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   912k|        return this->get_value();
 1629|   912k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   912k|    {
  451|   912k|        return m_value;
  452|   912k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|  1.02M|    {
 1823|  1.02M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.02M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|  1.02M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.02M|    else {
 1333|  1.02M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.02M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1335|  1.02M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.02M|                   : result(unexpect,
 1337|  1.02M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.02M|                                           std::forward<Exp>(exp).error()));
 1339|  1.02M|    }
 1340|  1.02M|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|  1.02M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.02M|    {
 3644|  1.02M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   468k|    {
 1653|   468k|        return value();
 1654|   468k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  6.66k|    {
 1673|  6.66k|        return &value();
 1674|  6.66k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|  1.15M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.15M|    static_cast<    \
  |  |  929|  1.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.15M|    {
 3644|  1.15M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1427|   160k|        : base(std::in_place, std::forward<U>(val)),
 1428|   160k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   160k|    {
 1430|   160k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  435|   160k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   160k|    {
  437|   160k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|   186k|{
 3650|   186k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   186k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.46M|    {
 2855|  1.46M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.46M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.46M|    {
 2836|  1.46M|        return t.data();
 2837|  1.46M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|  3.15M|    {
 5476|  3.15M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  3.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.15M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  3.15M|        return static_cast<std::size_t>(m_desc &
 5481|  3.15M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  3.15M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  6.30M|    {
 5501|  6.30M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  6.30M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|  3.15M|    {
 5444|  3.15M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  3.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.15M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  3.15M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  3.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.15M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  3.15M|        const auto t = type(id);
 5456|  3.15M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  3.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.15M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  3.15M|        basic_scan_arg<Context> arg;
 5461|  3.15M|        arg.m_type = t;
 5462|  3.15M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 3.15M, False: 0]
  ------------------
 5463|  3.15M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  3.15M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  3.15M|        return arg;
 5469|  3.15M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|  3.15M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  3.15M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  3.15M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  3.15M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  3.15M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|  3.15M|    {
 5505|  3.15M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  3.15M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  5.97M|    {
 5257|  5.97M|        return m_type != detail::arg_type::none_type;
 5258|  5.97M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   471k|{
 8427|   471k|#define SCN_VISIT(Type)                                         \
 8428|   471k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   471k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   471k|    }                                                           \
 8431|   471k|    else {                                                      \
 8432|   471k|        return vis(monostate_val);                              \
 8433|   471k|    }
 8434|       |
 8435|   471k|    monostate monostate_val{};
 8436|       |
 8437|   471k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 471k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 471k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 471k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 471k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 471k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 471k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 471k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 471k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 471k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 471k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 471k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 471k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 471k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 471k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 471k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   151k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 151k, False: 319k]
  ------------------
 8469|   151k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   151k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   151k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   151k|    }                                                           \
  |  | 8431|   151k|    else {                                                      \
  |  | 8432|   151k|        return vis(monostate_val);                              \
  |  | 8433|   151k|    }
  ------------------
 8470|   310k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 158k, False: 313k]
  ------------------
 8471|   310k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   310k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   310k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   310k|    }                                                           \
  |  | 8431|   310k|    else {                                                      \
  |  | 8432|   310k|        return vis(monostate_val);                              \
  |  | 8433|   310k|    }
  ------------------
 8472|   471k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 161k, False: 310k]
  ------------------
 8473|   471k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   471k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   471k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   471k|    }                                                           \
  |  | 8431|   471k|    else {                                                      \
  |  | 8432|   471k|        return vis(monostate_val);                              \
  |  | 8433|   471k|    }
  ------------------
 8474|   471k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 471k]
  ------------------
 8475|   471k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   471k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   471k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   471k|    }                                                           \
  |  | 8431|   471k|    else {                                                      \
  |  | 8432|   471k|        return vis(monostate_val);                              \
  |  | 8433|   471k|    }
  ------------------
 8476|   471k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 471k]
  ------------------
 8477|   471k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   471k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   471k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   471k|    }                                                           \
  |  | 8431|   471k|    else {                                                      \
  |  | 8432|   471k|        return vis(monostate_val);                              \
  |  | 8433|   471k|    }
  ------------------
 8478|   471k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 471k]
  ------------------
 8479|   471k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   471k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   471k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   471k|    }                                                           \
  |  | 8431|   471k|    else {                                                      \
  |  | 8432|   471k|        return vis(monostate_val);                              \
  |  | 8433|   471k|    }
  ------------------
 8480|   471k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 471k]
  ------------------
 8481|   471k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   471k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   471k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   471k|    }                                                           \
  |  | 8431|   471k|    else {                                                      \
  |  | 8432|   471k|        return vis(monostate_val);                              \
  |  | 8433|   471k|    }
  ------------------
 8482|   471k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 471k]
  ------------------
 8483|   471k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   471k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   471k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   471k|    }                                                           \
  |  | 8431|   471k|    else {                                                      \
  |  | 8432|   471k|        return vis(monostate_val);                              \
  |  | 8433|   471k|    }
  ------------------
 8484|   471k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 471k]
  ------------------
 8485|   471k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   471k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   471k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   471k|    }                                                           \
  |  | 8431|   471k|    else {                                                      \
  |  | 8432|   471k|        return vis(monostate_val);                              \
  |  | 8433|   471k|    }
  ------------------
 8486|       |
 8487|   471k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 471k]
  ------------------
 8488|   471k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   471k|            return vis(
 8490|   471k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 471k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 471k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   471k|            SCN_CLANG_POP
 8505|   471k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|  2.49M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  2.49M|    {
 5555|  2.49M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8146|  1.35M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  1.35M|    static_cast<    \
  |  |  929|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8147|  1.35M|    {
 8148|  1.35M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8064|  2.49M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.49M|    static_cast<    \
  |  |  929|  2.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.49M|    static_cast<    \
  |  |  929|  2.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|  2.49M|    {
 8066|  2.49M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|  1.87M|{
 4353|  1.87M|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 1.87M]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|  1.87M|    return ranges::subrange{forward_iterator{this, 0},
 4358|  1.87M|                            ranges::default_sentinel};
 4359|  1.87M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|  1.87M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|  1.87M|    {
 4185|  1.87M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|  1.87M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|  1.87M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   519k|{
 8427|   519k|#define SCN_VISIT(Type)                                         \
 8428|   519k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   519k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   519k|    }                                                           \
 8431|   519k|    else {                                                      \
 8432|   519k|        return vis(monostate_val);                              \
 8433|   519k|    }
 8434|       |
 8435|   519k|    monostate monostate_val{};
 8436|       |
 8437|   519k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 519k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 519k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 519k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 519k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 519k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 519k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 519k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 519k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 519k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 519k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 519k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 519k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 519k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 519k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 519k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   166k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 166k, False: 352k]
  ------------------
 8469|   166k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   166k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   166k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   166k|    }                                                           \
  |  | 8431|   166k|    else {                                                      \
  |  | 8432|   166k|        return vis(monostate_val);                              \
  |  | 8433|   166k|    }
  ------------------
 8470|   341k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 175k, False: 343k]
  ------------------
 8471|   341k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   341k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   341k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   341k|    }                                                           \
  |  | 8431|   341k|    else {                                                      \
  |  | 8432|   341k|        return vis(monostate_val);                              \
  |  | 8433|   341k|    }
  ------------------
 8472|   519k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 177k, False: 341k]
  ------------------
 8473|   519k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   519k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   519k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   519k|    }                                                           \
  |  | 8431|   519k|    else {                                                      \
  |  | 8432|   519k|        return vis(monostate_val);                              \
  |  | 8433|   519k|    }
  ------------------
 8474|   519k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 519k]
  ------------------
 8475|   519k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   519k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   519k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   519k|    }                                                           \
  |  | 8431|   519k|    else {                                                      \
  |  | 8432|   519k|        return vis(monostate_val);                              \
  |  | 8433|   519k|    }
  ------------------
 8476|   519k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 519k]
  ------------------
 8477|   519k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   519k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   519k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   519k|    }                                                           \
  |  | 8431|   519k|    else {                                                      \
  |  | 8432|   519k|        return vis(monostate_val);                              \
  |  | 8433|   519k|    }
  ------------------
 8478|   519k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 519k]
  ------------------
 8479|   519k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   519k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   519k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   519k|    }                                                           \
  |  | 8431|   519k|    else {                                                      \
  |  | 8432|   519k|        return vis(monostate_val);                              \
  |  | 8433|   519k|    }
  ------------------
 8480|   519k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 519k]
  ------------------
 8481|   519k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   519k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   519k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   519k|    }                                                           \
  |  | 8431|   519k|    else {                                                      \
  |  | 8432|   519k|        return vis(monostate_val);                              \
  |  | 8433|   519k|    }
  ------------------
 8482|   519k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 519k]
  ------------------
 8483|   519k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   519k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   519k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   519k|    }                                                           \
  |  | 8431|   519k|    else {                                                      \
  |  | 8432|   519k|        return vis(monostate_val);                              \
  |  | 8433|   519k|    }
  ------------------
 8484|   519k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 519k]
  ------------------
 8485|   519k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   519k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   519k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   519k|    }                                                           \
  |  | 8431|   519k|    else {                                                      \
  |  | 8432|   519k|        return vis(monostate_val);                              \
  |  | 8433|   519k|    }
  ------------------
 8486|       |
 8487|   519k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 519k]
  ------------------
 8488|   519k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   519k|            return vis(
 8490|   519k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 519k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 519k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   519k|            SCN_CLANG_POP
 8505|   519k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|  1.13M|{
 7054|  1.13M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|  1.13M|    handler.check_args_exhausted();
 7056|  1.13M|    return handler.get_error();
 7057|  1.13M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|  1.13M|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|  1.13M|    auto begin = format.data();
 7023|  1.13M|    auto it = begin;
 7024|  1.13M|    const auto end = format.data() + format.size();
 7025|       |
 7026|  2.17M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 1.13M, False: 1.03M]
  ------------------
 7027|  1.13M|        const auto ch = *it++;
 7028|  1.13M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 1.13M, False: 0]
  ------------------
 7029|  1.13M|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|  1.13M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|  1.13M|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 100k, False: 1.03M]
  ------------------
 7033|   100k|                return;
 7034|   100k|            }
 7035|  1.13M|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|  1.13M|    }
 7046|       |
 7047|  1.03M|    handler.on_literal_text(begin, end);
 7048|  1.03M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6951|  1.13M|{
 6952|  1.13M|    struct id_adapter {
 6953|  1.13M|        constexpr void operator()()
 6954|  1.13M|        {
 6955|  1.13M|            arg_id = handler.on_arg_id();
 6956|  1.13M|        }
 6957|  1.13M|        constexpr void operator()(std::size_t id)
 6958|  1.13M|        {
 6959|  1.13M|            arg_id = handler.on_arg_id(id);
 6960|  1.13M|        }
 6961|       |
 6962|  1.13M|        constexpr void on_error(const char* msg)
 6963|  1.13M|        {
 6964|  1.13M|            SCN_UNLIKELY_ATTR
 6965|  1.13M|            handler.on_error(msg);
 6966|  1.13M|        }
 6967|       |
 6968|  1.13M|        Handler& handler;
 6969|  1.13M|        std::size_t arg_id;
 6970|  1.13M|    };
 6971|       |
 6972|  1.13M|    ++begin;
 6973|  1.13M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|  1.13M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 1.13M]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|  1.13M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 1.13M]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|  1.13M|    else {
 6985|  1.13M|        auto adapter = id_adapter{handler, 0};
 6986|  1.13M|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|  1.13M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|  1.13M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 1.13M]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|  1.13M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 1.13M, False: 0]
  ------------------
 6997|  1.13M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|  1.13M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|  1.13M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.13M]
  |  |  |  Branch (859:45): [True: 0, False: 1.13M]
  |  |  |  Branch (859:45): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 7003|      0|                handler.on_error("Unknown format specifier");
 7004|      0|                return begin;
 7005|      0|            }
 7006|  1.13M|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|  1.13M|    }
 7013|  1.13M|    return begin + 1;
 7014|  1.13M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8048|  2.49M|    {
 8049|  2.49M|        return m_args.get(id);
 8050|  2.49M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8058|  2.49M|    {
 8059|  2.49M|        return m_locale;
 8060|  2.49M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|  2.49M|    {
 5576|  2.49M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  2.49M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  2.49M|        do_check_arg_id(id);
 5584|  2.49M|        return id;
 5585|  2.49M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|  2.49M|{
 6064|  2.49M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  2.49M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  2.49M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|  1.13M|{
 6453|  1.13M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|  1.13M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 1.13M, False: 0]
  |  Branch (6454:26): [True: 0, False: 1.13M]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|  1.13M|    handler();
 6459|  1.13M|    return begin;
 6460|  1.13M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|  1.13M|        {
 6955|  1.13M|            arg_id = handler.on_arg_id();
 6956|  1.13M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|  4.98M|    {
 5262|  4.98M|        return m_type;
 5263|  4.98M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|  2.49M|    {
 5571|  2.49M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  2.49M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|  4.98M|    {
 5560|  4.98M|        return m_format.data();
 5561|  4.98M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|  1.13M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|  1.13M|    {
 7132|  1.13M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|  1.13M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6867|  1.13M|{
 6868|  1.13M|    auto do_presentation = [&]() -> const CharT* {
 6869|  1.13M|        if (*begin == CharT{'['}) {
 6870|  1.13M|            auto set = parse_presentation_set(begin, end, handler);
 6871|  1.13M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|  1.13M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|  1.13M|                return begin;
 6876|  1.13M|            }
 6877|  1.13M|            handler.on_character_set_string(set);
 6878|  1.13M|            return begin;
 6879|  1.13M|        }
 6880|  1.13M|        if (*begin == CharT{'/'}) {
 6881|  1.13M|            return parse_presentation_regex(begin, end, handler);
 6882|  1.13M|        }
 6883|  1.13M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  1.13M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|  1.13M|            handler.on_error("Invalid type specifier in format string");
 6886|  1.13M|            return begin;
 6887|  1.13M|        }
 6888|  1.13M|        handler.on_type(type);
 6889|  1.13M|        return begin;
 6890|  1.13M|    };
 6891|       |
 6892|  1.13M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 1.13M, False: 0]
  |  Branch (6892:28): [True: 1.13M, False: 0]
  ------------------
 6893|  1.13M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 1.13M, False: 0]
  |  Branch (6893:36): [True: 821k, False: 314k]
  ------------------
 6894|   821k|        return do_presentation();
 6895|   821k|    }
 6896|       |
 6897|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|   314k|    begin = parse_align(begin, end, handler);
 6903|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|   314k|    begin = parse_width(begin, end, handler);
 6909|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|   314k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 314k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|   314k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 314k, False: 0]
  ------------------
 6928|   314k|        handler.on_localized();
 6929|   314k|        ++begin;
 6930|   314k|    }
 6931|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|   314k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 314k, False: 0]
  |  Branch (6936:25): [True: 0, False: 314k]
  ------------------
 6937|      0|        do_presentation();
 6938|      0|    }
 6939|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|   314k|    return begin;
 6945|   314k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6516|  2.49M|{
 6517|  2.49M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 1.79M, False: 697k]
  |  Branch (6517:33): [True: 1.79M, False: 0]
  ------------------
 6518|  2.49M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 697k, False: 0]
  |  Branch (6518:33): [True: 697k, False: 0]
  ------------------
 6519|  2.49M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|   821k|    auto do_presentation = [&]() -> const CharT* {
 6869|   821k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 0, False: 821k]
  ------------------
 6870|      0|            auto set = parse_presentation_set(begin, end, handler);
 6871|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|      0|            handler.on_character_set_string(set);
 6878|      0|            return begin;
 6879|      0|        }
 6880|   821k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 821k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   821k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   821k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   821k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 821k]
  |  |  ------------------
  ------------------
 6885|      0|            handler.on_error("Invalid type specifier in format string");
 6886|      0|            return begin;
 6887|      0|        }
 6888|   821k|        handler.on_type(type);
 6889|   821k|        return begin;
 6890|   821k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6464|  1.79M|{
 6465|  1.79M|    switch (type) {
 6466|      0|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 0, False: 1.79M]
  ------------------
 6467|      0|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.79M]
  ------------------
 6468|      0|            return presentation_type::int_binary;
 6469|      0|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 0, False: 1.79M]
  ------------------
 6470|      0|            return presentation_type::int_decimal;
 6471|      0|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.79M]
  ------------------
 6472|      0|            return presentation_type::int_generic;
 6473|      0|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 0, False: 1.79M]
  ------------------
 6474|      0|            return presentation_type::int_unsigned_decimal;
 6475|      0|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 0, False: 1.79M]
  ------------------
 6476|      0|            return presentation_type::int_octal;
 6477|      0|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.79M]
  ------------------
 6478|      0|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 0, False: 1.79M]
  ------------------
 6479|      0|            return presentation_type::int_hex;
 6480|      0|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.79M]
  ------------------
 6481|      0|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 0, False: 1.79M]
  ------------------
 6482|      0|            return presentation_type::int_arbitrary_base;
 6483|   760k|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 760k, False: 1.03M]
  ------------------
 6484|   760k|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 0, False: 1.79M]
  ------------------
 6485|   760k|            return presentation_type::float_hex;
 6486|  60.6k|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 60.6k, False: 1.73M]
  ------------------
 6487|  60.6k|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.79M]
  ------------------
 6488|  60.6k|            return presentation_type::float_scientific;
 6489|   376k|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 376k, False: 1.41M]
  ------------------
 6490|   376k|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 0, False: 1.79M]
  ------------------
 6491|   376k|            return presentation_type::float_fixed;
 6492|   597k|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 597k, False: 1.19M]
  ------------------
 6493|   597k|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.79M]
  ------------------
 6494|   597k|            return presentation_type::float_general;
 6495|      0|        case 's':
  ------------------
  |  Branch (6495:9): [True: 0, False: 1.79M]
  ------------------
 6496|      0|            return presentation_type::string;
 6497|      0|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 0, False: 1.79M]
  ------------------
 6498|      0|            return presentation_type::character;
 6499|      0|        case '?':
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.79M]
  ------------------
 6500|      0|            return presentation_type::escaped_character;
 6501|      0|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 0, False: 1.79M]
  ------------------
 6502|      0|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 1.79M]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 1.79M]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|      0|        default:
  ------------------
  |  Branch (6509:9): [True: 0, False: 1.79M]
  ------------------
 6510|      0|            return presentation_type::none;
 6511|  1.79M|    }
 6512|  1.79M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6541|   314k|{
 6542|   314k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|   314k|    auto check_align = [](wchar_t ch) {
 6545|   314k|        switch (ch) {
 6546|   314k|            case L'<':
 6547|   314k|                return align_type::left;
 6548|   314k|            case L'>':
 6549|   314k|                return align_type::right;
 6550|   314k|            case L'^':
 6551|   314k|                return align_type::center;
 6552|   314k|            default:
 6553|   314k|                return align_type::none;
 6554|   314k|        }
 6555|   314k|    };
 6556|       |
 6557|   314k|    auto potential_fill_len = code_point_length(begin, end);
 6558|   314k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  |  Branch (859:45): [True: 0, False: 314k]
  |  |  |  Branch (859:45): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6559|   314k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|   314k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|   314k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|   314k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|   314k|    const auto begin_before_fill = begin;
 6569|   314k|    begin += potential_fill_len;
 6570|       |
 6571|   314k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 314k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|   314k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|   314k|    const auto begin_after_fill = begin;
 6577|   314k|    ++begin;
 6578|       |
 6579|   314k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 314k, False: 0]
  ------------------
 6580|   314k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|   314k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 0, False: 314k]
  ------------------
 6585|      0|            return begin_before_fill;
 6586|      0|        }
 6587|   314k|    }
 6588|       |
 6589|   314k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 314k, False: 0]
  ------------------
 6590|   314k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 314k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|   314k|        return begin_before_fill;
 6595|   314k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|   314k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6523|   697k|{
 6524|   697k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   697k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   697k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|       |    if constexpr (sizeof(CharT) != 1) {
 6526|       |        return 1;
 6527|       |    }
 6528|   697k|    else {
 6529|   697k|        const auto lengths =
 6530|   697k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|   697k|            "\3\4";
 6532|   697k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|   697k|        return len;
 6534|   697k|    }
 6535|   697k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|   629k|    auto check_align = [](wchar_t ch) {
 6545|   629k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 629k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 629k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 629k]
  ------------------
 6551|      0|                return align_type::center;
 6552|   629k|            default:
  ------------------
  |  Branch (6552:13): [True: 629k, False: 0]
  ------------------
 6553|   629k|                return align_type::none;
 6554|   629k|        }
 6555|   629k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6606|   314k|{
 6607|   314k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|   314k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 314k, False: 0]
  |  Branch (6609:33): [True: 0, False: 314k]
  ------------------
 6610|      0|        int width = parse_simple_int(begin, end);
 6611|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6612|      0|            handler.on_width(width);
 6613|      0|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|      0|    }
 6619|   314k|    return begin;
 6620|   314k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7136|   314k|    {
 7137|   314k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|   314k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 314k, False: 0]
  ------------------
 7139|   314k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 314k, False: 0]
  ------------------
 7140|   314k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 314k]
  ------------------
 7141|   314k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|      0|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|      0|        }
 7147|       |
 7148|   314k|        Handler::on_localized();
 7149|   314k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  1.13M|{
 8427|  1.13M|#define SCN_VISIT(Type)                                         \
 8428|  1.13M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  1.13M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  1.13M|    }                                                           \
 8431|  1.13M|    else {                                                      \
 8432|  1.13M|        return vis(monostate_val);                              \
 8433|  1.13M|    }
 8434|       |
 8435|  1.13M|    monostate monostate_val{};
 8436|       |
 8437|  1.13M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.13M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.13M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.13M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.13M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.13M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.13M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.13M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.13M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.13M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.13M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.13M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.13M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.13M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.13M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.13M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   369k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 369k, False: 766k]
  ------------------
 8469|   369k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   369k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   369k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   369k|    }                                                           \
  |  | 8431|   369k|    else {                                                      \
  |  | 8432|   369k|        return vis(monostate_val);                              \
  |  | 8433|   369k|    }
  ------------------
 8470|   750k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 381k, False: 754k]
  ------------------
 8471|   750k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   750k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   750k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   750k|    }                                                           \
  |  | 8431|   750k|    else {                                                      \
  |  | 8432|   750k|        return vis(monostate_val);                              \
  |  | 8433|   750k|    }
  ------------------
 8472|  1.13M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 385k, False: 750k]
  ------------------
 8473|  1.13M|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  1.13M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.13M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.13M|    }                                                           \
  |  | 8431|  1.13M|    else {                                                      \
  |  | 8432|  1.13M|        return vis(monostate_val);                              \
  |  | 8433|  1.13M|    }
  ------------------
 8474|  1.13M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.13M]
  ------------------
 8475|  1.13M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  1.13M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.13M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.13M|    }                                                           \
  |  | 8431|  1.13M|    else {                                                      \
  |  | 8432|  1.13M|        return vis(monostate_val);                              \
  |  | 8433|  1.13M|    }
  ------------------
 8476|  1.13M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 1.13M]
  ------------------
 8477|  1.13M|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|  1.13M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.13M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.13M|    }                                                           \
  |  | 8431|  1.13M|    else {                                                      \
  |  | 8432|  1.13M|        return vis(monostate_val);                              \
  |  | 8433|  1.13M|    }
  ------------------
 8478|  1.13M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 1.13M]
  ------------------
 8479|  1.13M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  1.13M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.13M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.13M|    }                                                           \
  |  | 8431|  1.13M|    else {                                                      \
  |  | 8432|  1.13M|        return vis(monostate_val);                              \
  |  | 8433|  1.13M|    }
  ------------------
 8480|  1.13M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 1.13M]
  ------------------
 8481|  1.13M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  1.13M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.13M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.13M|    }                                                           \
  |  | 8431|  1.13M|    else {                                                      \
  |  | 8432|  1.13M|        return vis(monostate_val);                              \
  |  | 8433|  1.13M|    }
  ------------------
 8482|  1.13M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 1.13M]
  ------------------
 8483|  1.13M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  1.13M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.13M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.13M|    }                                                           \
  |  | 8431|  1.13M|    else {                                                      \
  |  | 8432|  1.13M|        return vis(monostate_val);                              \
  |  | 8433|  1.13M|    }
  ------------------
 8484|  1.13M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 1.13M]
  ------------------
 8485|  1.13M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  1.13M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.13M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.13M|    }                                                           \
  |  | 8431|  1.13M|    else {                                                      \
  |  | 8432|  1.13M|        return vis(monostate_val);                              \
  |  | 8433|  1.13M|    }
  ------------------
 8486|       |
 8487|  1.13M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 1.13M]
  ------------------
 8488|  1.13M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  1.13M|            return vis(
 8490|  1.13M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 1.13M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.13M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  1.13M|            SCN_CLANG_POP
 8505|  1.13M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|  1.35M|{
 7054|  1.35M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|  1.35M|    handler.check_args_exhausted();
 7056|  1.35M|    return handler.get_error();
 7057|  1.35M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|  1.35M|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|  1.35M|    auto begin = format.data();
 7023|  1.35M|    auto it = begin;
 7024|  1.35M|    const auto end = format.data() + format.size();
 7025|       |
 7026|  2.61M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 1.35M, False: 1.25M]
  ------------------
 7027|  1.35M|        const auto ch = *it++;
 7028|  1.35M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 1.35M, False: 0]
  ------------------
 7029|  1.35M|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|  1.35M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|  1.35M|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 100k, False: 1.25M]
  ------------------
 7033|   100k|                return;
 7034|   100k|            }
 7035|  1.35M|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|  1.35M|    }
 7046|       |
 7047|  1.25M|    handler.on_literal_text(begin, end);
 7048|  1.25M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8184|  1.25M|    {
 8185|  1.25M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.25M|    static_cast<    \
  |  |  929|  1.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8186|  1.25M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6951|  1.35M|{
 6952|  1.35M|    struct id_adapter {
 6953|  1.35M|        constexpr void operator()()
 6954|  1.35M|        {
 6955|  1.35M|            arg_id = handler.on_arg_id();
 6956|  1.35M|        }
 6957|  1.35M|        constexpr void operator()(std::size_t id)
 6958|  1.35M|        {
 6959|  1.35M|            arg_id = handler.on_arg_id(id);
 6960|  1.35M|        }
 6961|       |
 6962|  1.35M|        constexpr void on_error(const char* msg)
 6963|  1.35M|        {
 6964|  1.35M|            SCN_UNLIKELY_ATTR
 6965|  1.35M|            handler.on_error(msg);
 6966|  1.35M|        }
 6967|       |
 6968|  1.35M|        Handler& handler;
 6969|  1.35M|        std::size_t arg_id;
 6970|  1.35M|    };
 6971|       |
 6972|  1.35M|    ++begin;
 6973|  1.35M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35M]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|  1.35M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 1.35M]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|  1.35M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 1.35M]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|  1.35M|    else {
 6985|  1.35M|        auto adapter = id_adapter{handler, 0};
 6986|  1.35M|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|  1.35M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35M]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|  1.35M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 1.35M]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|  1.35M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 1.35M, False: 0]
  ------------------
 6997|  1.35M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35M]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|  1.35M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|  1.35M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35M]
  |  |  |  Branch (859:45): [True: 0, False: 1.35M]
  |  |  |  Branch (859:45): [True: 0, False: 1.35M]
  |  |  ------------------
  ------------------
 7003|      0|                handler.on_error("Unknown format specifier");
 7004|      0|                return begin;
 7005|      0|            }
 7006|  1.35M|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|  1.35M|    }
 7013|  1.35M|    return begin + 1;
 7014|  1.35M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|  1.35M|{
 6453|  1.35M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|  1.35M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 1.35M, False: 0]
  |  Branch (6454:26): [True: 0, False: 1.35M]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|  1.35M|    handler();
 6459|  1.35M|    return begin;
 6460|  1.35M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|  1.35M|        {
 6955|  1.35M|            arg_id = handler.on_arg_id();
 6956|  1.35M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7130|  1.35M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|  1.35M|    {
 7132|  1.35M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|  1.35M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6867|  1.35M|{
 6868|  1.35M|    auto do_presentation = [&]() -> const CharT* {
 6869|  1.35M|        if (*begin == CharT{'['}) {
 6870|  1.35M|            auto set = parse_presentation_set(begin, end, handler);
 6871|  1.35M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|  1.35M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|  1.35M|                return begin;
 6876|  1.35M|            }
 6877|  1.35M|            handler.on_character_set_string(set);
 6878|  1.35M|            return begin;
 6879|  1.35M|        }
 6880|  1.35M|        if (*begin == CharT{'/'}) {
 6881|  1.35M|            return parse_presentation_regex(begin, end, handler);
 6882|  1.35M|        }
 6883|  1.35M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  1.35M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|  1.35M|            handler.on_error("Invalid type specifier in format string");
 6886|  1.35M|            return begin;
 6887|  1.35M|        }
 6888|  1.35M|        handler.on_type(type);
 6889|  1.35M|        return begin;
 6890|  1.35M|    };
 6891|       |
 6892|  1.35M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 1.35M, False: 0]
  |  Branch (6892:28): [True: 1.35M, False: 0]
  ------------------
 6893|  1.35M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 1.35M, False: 0]
  |  Branch (6893:36): [True: 973k, False: 383k]
  ------------------
 6894|   973k|        return do_presentation();
 6895|   973k|    }
 6896|       |
 6897|   383k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 383k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|   383k|    begin = parse_align(begin, end, handler);
 6903|   383k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 383k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|   383k|    begin = parse_width(begin, end, handler);
 6909|   383k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 383k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|   383k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 383k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|   383k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 383k, False: 0]
  ------------------
 6928|   383k|        handler.on_localized();
 6929|   383k|        ++begin;
 6930|   383k|    }
 6931|   383k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 383k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|   383k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 383k, False: 0]
  |  Branch (6936:25): [True: 0, False: 383k]
  ------------------
 6937|      0|        do_presentation();
 6938|      0|    }
 6939|   383k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 383k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|   383k|    return begin;
 6945|   383k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6868|   973k|    auto do_presentation = [&]() -> const CharT* {
 6869|   973k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 0, False: 973k]
  ------------------
 6870|      0|            auto set = parse_presentation_set(begin, end, handler);
 6871|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|      0|            handler.on_character_set_string(set);
 6878|      0|            return begin;
 6879|      0|        }
 6880|   973k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 973k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   973k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   973k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   973k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 973k]
  |  |  ------------------
  ------------------
 6885|      0|            handler.on_error("Invalid type specifier in format string");
 6886|      0|            return begin;
 6887|      0|        }
 6888|   973k|        handler.on_type(type);
 6889|   973k|        return begin;
 6890|   973k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6541|   383k|{
 6542|   383k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|   383k|    auto check_align = [](wchar_t ch) {
 6545|   383k|        switch (ch) {
 6546|   383k|            case L'<':
 6547|   383k|                return align_type::left;
 6548|   383k|            case L'>':
 6549|   383k|                return align_type::right;
 6550|   383k|            case L'^':
 6551|   383k|                return align_type::center;
 6552|   383k|            default:
 6553|   383k|                return align_type::none;
 6554|   383k|        }
 6555|   383k|    };
 6556|       |
 6557|   383k|    auto potential_fill_len = code_point_length(begin, end);
 6558|   383k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   766k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 383k]
  |  |  |  Branch (859:45): [True: 0, False: 383k]
  |  |  |  Branch (859:45): [True: 0, False: 383k]
  |  |  ------------------
  ------------------
 6559|   383k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|   383k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|   383k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|   383k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|   383k|    const auto begin_before_fill = begin;
 6569|   383k|    begin += potential_fill_len;
 6570|       |
 6571|   383k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 383k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|   383k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|   383k|    const auto begin_after_fill = begin;
 6577|   383k|    ++begin;
 6578|       |
 6579|   383k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 383k, False: 0]
  ------------------
 6580|   383k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 383k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|   383k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 0, False: 383k]
  ------------------
 6585|      0|            return begin_before_fill;
 6586|      0|        }
 6587|   383k|    }
 6588|       |
 6589|   383k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 383k, False: 0]
  ------------------
 6590|   383k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 383k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|   383k|        return begin_before_fill;
 6595|   383k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|   383k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6544|   766k|    auto check_align = [](wchar_t ch) {
 6545|   766k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 766k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 766k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 766k]
  ------------------
 6551|      0|                return align_type::center;
 6552|   766k|            default:
  ------------------
  |  Branch (6552:13): [True: 766k, False: 0]
  ------------------
 6553|   766k|                return align_type::none;
 6554|   766k|        }
 6555|   766k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6606|   383k|{
 6607|   383k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|   383k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 383k, False: 0]
  |  Branch (6609:33): [True: 0, False: 383k]
  ------------------
 6610|      0|        int width = parse_simple_int(begin, end);
 6611|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6612|      0|            handler.on_width(width);
 6613|      0|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|      0|    }
 6619|   383k|    return begin;
 6620|   383k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7136|   383k|    {
 7137|   383k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|   383k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 383k, False: 0]
  ------------------
 7139|   383k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 383k, False: 0]
  ------------------
 7140|   383k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 383k]
  ------------------
 7141|   383k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|      0|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|      0|        }
 7147|       |
 7148|   383k|        Handler::on_localized();
 7149|   383k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  1.35M|{
 8427|  1.35M|#define SCN_VISIT(Type)                                         \
 8428|  1.35M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  1.35M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  1.35M|    }                                                           \
 8431|  1.35M|    else {                                                      \
 8432|  1.35M|        return vis(monostate_val);                              \
 8433|  1.35M|    }
 8434|       |
 8435|  1.35M|    monostate monostate_val{};
 8436|       |
 8437|  1.35M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.35M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.35M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.35M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.35M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.35M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.35M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.35M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.35M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.35M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.35M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.35M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.35M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.35M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.35M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.35M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   436k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 436k, False: 919k]
  ------------------
 8469|   436k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   436k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   436k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   436k|    }                                                           \
  |  | 8431|   436k|    else {                                                      \
  |  | 8432|   436k|        return vis(monostate_val);                              \
  |  | 8433|   436k|    }
  ------------------
 8470|   894k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 457k, False: 899k]
  ------------------
 8471|   894k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   894k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   894k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   894k|    }                                                           \
  |  | 8431|   894k|    else {                                                      \
  |  | 8432|   894k|        return vis(monostate_val);                              \
  |  | 8433|   894k|    }
  ------------------
 8472|  1.35M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 462k, False: 894k]
  ------------------
 8473|  1.35M|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  1.35M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.35M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.35M|    }                                                           \
  |  | 8431|  1.35M|    else {                                                      \
  |  | 8432|  1.35M|        return vis(monostate_val);                              \
  |  | 8433|  1.35M|    }
  ------------------
 8474|  1.35M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.35M]
  ------------------
 8475|  1.35M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  1.35M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.35M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.35M|    }                                                           \
  |  | 8431|  1.35M|    else {                                                      \
  |  | 8432|  1.35M|        return vis(monostate_val);                              \
  |  | 8433|  1.35M|    }
  ------------------
 8476|  1.35M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 1.35M]
  ------------------
 8477|  1.35M|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|  1.35M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.35M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.35M|    }                                                           \
  |  | 8431|  1.35M|    else {                                                      \
  |  | 8432|  1.35M|        return vis(monostate_val);                              \
  |  | 8433|  1.35M|    }
  ------------------
 8478|  1.35M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 1.35M]
  ------------------
 8479|  1.35M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  1.35M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.35M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.35M|    }                                                           \
  |  | 8431|  1.35M|    else {                                                      \
  |  | 8432|  1.35M|        return vis(monostate_val);                              \
  |  | 8433|  1.35M|    }
  ------------------
 8480|  1.35M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 1.35M]
  ------------------
 8481|  1.35M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  1.35M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.35M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.35M|    }                                                           \
  |  | 8431|  1.35M|    else {                                                      \
  |  | 8432|  1.35M|        return vis(monostate_val);                              \
  |  | 8433|  1.35M|    }
  ------------------
 8482|  1.35M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 1.35M]
  ------------------
 8483|  1.35M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  1.35M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.35M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.35M|    }                                                           \
  |  | 8431|  1.35M|    else {                                                      \
  |  | 8432|  1.35M|        return vis(monostate_val);                              \
  |  | 8433|  1.35M|    }
  ------------------
 8484|  1.35M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 1.35M]
  ------------------
 8485|  1.35M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  1.35M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.35M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.35M|    }                                                           \
  |  | 8431|  1.35M|    else {                                                      \
  |  | 8432|  1.35M|        return vis(monostate_val);                              \
  |  | 8433|  1.35M|    }
  ------------------
 8486|       |
 8487|  1.35M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 1.35M]
  ------------------
 8488|  1.35M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  1.35M|            return vis(
 8490|  1.35M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 1.35M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.35M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  1.35M|            SCN_CLANG_POP
 8505|  1.35M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|   130k|    {
 4084|   130k|        sync(0);
 4085|   130k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  1.66M|    {
 5476|  1.66M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  1.66M|        return static_cast<std::size_t>(m_desc &
 5481|  1.66M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  1.66M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  3.33M|    {
 5501|  3.33M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  3.33M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  1.66M|    {
 5444|  1.66M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  1.66M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  1.66M|        const auto t = type(id);
 5456|  1.66M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  1.66M|        basic_scan_arg<Context> arg;
 5461|  1.66M|        arg.m_type = t;
 5462|  1.66M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 1.66M, False: 0]
  ------------------
 5463|  1.66M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  1.66M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  1.66M|        return arg;
 5469|  1.66M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  1.66M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  1.66M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  1.66M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  1.66M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  1.66M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  1.66M|    {
 5505|  1.66M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  1.66M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  3.17M|    {
 5257|  3.17M|        return m_type != detail::arg_type::none_type;
 5258|  3.17M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   247k|{
 8427|   247k|#define SCN_VISIT(Type)                                         \
 8428|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   247k|    }                                                           \
 8431|   247k|    else {                                                      \
 8432|   247k|        return vis(monostate_val);                              \
 8433|   247k|    }
 8434|       |
 8435|   247k|    monostate monostate_val{};
 8436|       |
 8437|   247k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 247k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 247k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 247k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 247k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 247k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 247k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 247k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 247k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 247k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 247k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 247k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 247k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 247k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 247k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 247k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|  70.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 70.4k, False: 176k]
  ------------------
 8469|  70.4k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  70.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  70.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  70.4k|    }                                                           \
  |  | 8431|  70.4k|    else {                                                      \
  |  | 8432|  70.4k|        return vis(monostate_val);                              \
  |  | 8433|  70.4k|    }
  ------------------
 8470|   157k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 86.9k, False: 160k]
  ------------------
 8471|   157k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   157k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   157k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   157k|    }                                                           \
  |  | 8431|   157k|    else {                                                      \
  |  | 8432|   157k|        return vis(monostate_val);                              \
  |  | 8433|   157k|    }
  ------------------
 8472|   247k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 89.6k, False: 157k]
  ------------------
 8473|   247k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   247k|    }                                                           \
  |  | 8431|   247k|    else {                                                      \
  |  | 8432|   247k|        return vis(monostate_val);                              \
  |  | 8433|   247k|    }
  ------------------
 8474|   247k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 247k]
  ------------------
 8475|   247k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   247k|    }                                                           \
  |  | 8431|   247k|    else {                                                      \
  |  | 8432|   247k|        return vis(monostate_val);                              \
  |  | 8433|   247k|    }
  ------------------
 8476|   247k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 247k]
  ------------------
 8477|   247k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   247k|    }                                                           \
  |  | 8431|   247k|    else {                                                      \
  |  | 8432|   247k|        return vis(monostate_val);                              \
  |  | 8433|   247k|    }
  ------------------
 8478|   247k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 247k]
  ------------------
 8479|   247k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   247k|    }                                                           \
  |  | 8431|   247k|    else {                                                      \
  |  | 8432|   247k|        return vis(monostate_val);                              \
  |  | 8433|   247k|    }
  ------------------
 8480|   247k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 247k]
  ------------------
 8481|   247k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   247k|    }                                                           \
  |  | 8431|   247k|    else {                                                      \
  |  | 8432|   247k|        return vis(monostate_val);                              \
  |  | 8433|   247k|    }
  ------------------
 8482|   247k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 247k]
  ------------------
 8483|   247k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   247k|    }                                                           \
  |  | 8431|   247k|    else {                                                      \
  |  | 8432|   247k|        return vis(monostate_val);                              \
  |  | 8433|   247k|    }
  ------------------
 8484|   247k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 247k]
  ------------------
 8485|   247k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   247k|    }                                                           \
  |  | 8431|   247k|    else {                                                      \
  |  | 8432|   247k|        return vis(monostate_val);                              \
  |  | 8433|   247k|    }
  ------------------
 8486|       |
 8487|   247k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 247k]
  ------------------
 8488|   247k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   247k|            return vis(
 8490|   247k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 247k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 247k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   247k|            SCN_CLANG_POP
 8505|   247k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|  1.33M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  1.33M|    {
 5555|  1.33M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8146|   669k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8147|   669k|    {
 8148|   669k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8064|  1.33M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.33M|    static_cast<    \
  |  |  929|  1.33M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.33M|    static_cast<    \
  |  |  929|  1.33M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|  1.33M|    {
 8066|  1.33M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   669k|{
 7054|   669k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   669k|    handler.check_args_exhausted();
 7056|   669k|    return handler.get_error();
 7057|   669k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   669k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   669k|    auto begin = format.data();
 7023|   669k|    auto it = begin;
 7024|   669k|    const auto end = format.data() + format.size();
 7025|       |
 7026|  1.13M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 669k, False: 468k]
  ------------------
 7027|   669k|        const auto ch = *it++;
 7028|   669k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 669k, False: 0]
  ------------------
 7029|   669k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   669k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   669k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 200k, False: 468k]
  ------------------
 7033|   200k|                return;
 7034|   200k|            }
 7035|   669k|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|   669k|    }
 7046|       |
 7047|   468k|    handler.on_literal_text(begin, end);
 7048|   468k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6951|   669k|{
 6952|   669k|    struct id_adapter {
 6953|   669k|        constexpr void operator()()
 6954|   669k|        {
 6955|   669k|            arg_id = handler.on_arg_id();
 6956|   669k|        }
 6957|   669k|        constexpr void operator()(std::size_t id)
 6958|   669k|        {
 6959|   669k|            arg_id = handler.on_arg_id(id);
 6960|   669k|        }
 6961|       |
 6962|   669k|        constexpr void on_error(const char* msg)
 6963|   669k|        {
 6964|   669k|            SCN_UNLIKELY_ATTR
 6965|   669k|            handler.on_error(msg);
 6966|   669k|        }
 6967|       |
 6968|   669k|        Handler& handler;
 6969|   669k|        std::size_t arg_id;
 6970|   669k|    };
 6971|       |
 6972|   669k|    ++begin;
 6973|   669k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|   669k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 669k]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|   669k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 669k]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|   669k|    else {
 6985|   669k|        auto adapter = id_adapter{handler, 0};
 6986|   669k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   669k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|   669k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 669k]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|   669k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 669k, False: 0]
  ------------------
 6997|   669k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|   669k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|   669k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  |  Branch (859:45): [True: 0, False: 669k]
  |  |  |  Branch (859:45): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 7003|      0|                handler.on_error("Unknown format specifier");
 7004|      0|                return begin;
 7005|      0|            }
 7006|   669k|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|   669k|    }
 7013|   669k|    return begin + 1;
 7014|   669k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8048|  1.33M|    {
 8049|  1.33M|        return m_args.get(id);
 8050|  1.33M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8058|  1.33M|    {
 8059|  1.33M|        return m_locale;
 8060|  1.33M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  1.33M|    {
 5576|  1.33M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.33M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  1.33M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  1.33M|        do_check_arg_id(id);
 5584|  1.33M|        return id;
 5585|  1.33M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  1.33M|{
 6064|  1.33M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  1.33M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  1.33M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   669k|{
 6453|   669k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   669k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 669k, False: 0]
  |  Branch (6454:26): [True: 0, False: 669k]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|   669k|    handler();
 6459|   669k|    return begin;
 6460|   669k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|   669k|        {
 6955|   669k|            arg_id = handler.on_arg_id();
 6956|   669k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  2.67M|    {
 5262|  2.67M|        return m_type;
 5263|  2.67M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  1.33M|    {
 5571|  1.33M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  1.33M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   915k|{
 4353|   915k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 915k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   915k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   915k|                            ranges::default_sentinel};
 4359|   915k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   915k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   915k|    {
 4185|   915k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   915k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   915k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  2.67M|    {
 5560|  2.67M|        return m_format.data();
 5561|  2.67M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|   669k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|   669k|    {
 7132|   669k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|   669k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6867|   669k|{
 6868|   669k|    auto do_presentation = [&]() -> const CharT* {
 6869|   669k|        if (*begin == CharT{'['}) {
 6870|   669k|            auto set = parse_presentation_set(begin, end, handler);
 6871|   669k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|   669k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|   669k|                return begin;
 6876|   669k|            }
 6877|   669k|            handler.on_character_set_string(set);
 6878|   669k|            return begin;
 6879|   669k|        }
 6880|   669k|        if (*begin == CharT{'/'}) {
 6881|   669k|            return parse_presentation_regex(begin, end, handler);
 6882|   669k|        }
 6883|   669k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   669k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|   669k|            handler.on_error("Invalid type specifier in format string");
 6886|   669k|            return begin;
 6887|   669k|        }
 6888|   669k|        handler.on_type(type);
 6889|   669k|        return begin;
 6890|   669k|    };
 6891|       |
 6892|   669k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 669k, False: 0]
  |  Branch (6892:28): [True: 669k, False: 0]
  ------------------
 6893|   669k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 669k, False: 0]
  |  Branch (6893:36): [True: 505k, False: 164k]
  ------------------
 6894|   505k|        return do_presentation();
 6895|   505k|    }
 6896|       |
 6897|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|   164k|    begin = parse_align(begin, end, handler);
 6903|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|   164k|    begin = parse_width(begin, end, handler);
 6909|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|   164k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 164k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|   164k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 164k, False: 0]
  ------------------
 6928|   164k|        handler.on_localized();
 6929|   164k|        ++begin;
 6930|   164k|    }
 6931|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|   164k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 164k, False: 0]
  |  Branch (6936:25): [True: 0, False: 164k]
  ------------------
 6937|      0|        do_presentation();
 6938|      0|    }
 6939|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|   164k|    return begin;
 6945|   164k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6516|  1.33M|{
 6517|  1.33M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 1.00M, False: 329k]
  |  Branch (6517:33): [True: 1.00M, False: 0]
  ------------------
 6518|  1.33M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 329k, False: 0]
  |  Branch (6518:33): [True: 329k, False: 0]
  ------------------
 6519|  1.33M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|   505k|    auto do_presentation = [&]() -> const CharT* {
 6869|   505k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 0, False: 505k]
  ------------------
 6870|      0|            auto set = parse_presentation_set(begin, end, handler);
 6871|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|      0|            handler.on_character_set_string(set);
 6878|      0|            return begin;
 6879|      0|        }
 6880|   505k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 505k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   505k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   505k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   505k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 505k]
  |  |  ------------------
  ------------------
 6885|      0|            handler.on_error("Invalid type specifier in format string");
 6886|      0|            return begin;
 6887|      0|        }
 6888|   505k|        handler.on_type(type);
 6889|   505k|        return begin;
 6890|   505k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6464|  1.00M|{
 6465|  1.00M|    switch (type) {
 6466|      0|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 0, False: 1.00M]
  ------------------
 6467|      0|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.00M]
  ------------------
 6468|      0|            return presentation_type::int_binary;
 6469|      0|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 0, False: 1.00M]
  ------------------
 6470|      0|            return presentation_type::int_decimal;
 6471|      0|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.00M]
  ------------------
 6472|      0|            return presentation_type::int_generic;
 6473|      0|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 0, False: 1.00M]
  ------------------
 6474|      0|            return presentation_type::int_unsigned_decimal;
 6475|      0|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 0, False: 1.00M]
  ------------------
 6476|      0|            return presentation_type::int_octal;
 6477|      0|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.00M]
  ------------------
 6478|      0|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 0, False: 1.00M]
  ------------------
 6479|      0|            return presentation_type::int_hex;
 6480|      0|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.00M]
  ------------------
 6481|      0|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 0, False: 1.00M]
  ------------------
 6482|      0|            return presentation_type::int_arbitrary_base;
 6483|   364k|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 364k, False: 645k]
  ------------------
 6484|   364k|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 0, False: 1.00M]
  ------------------
 6485|   364k|            return presentation_type::float_hex;
 6486|  82.5k|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 82.5k, False: 927k]
  ------------------
 6487|  82.5k|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.00M]
  ------------------
 6488|  82.5k|            return presentation_type::float_scientific;
 6489|   254k|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 254k, False: 755k]
  ------------------
 6490|   254k|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 0, False: 1.00M]
  ------------------
 6491|   254k|            return presentation_type::float_fixed;
 6492|   308k|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 308k, False: 700k]
  ------------------
 6493|   308k|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.00M]
  ------------------
 6494|   308k|            return presentation_type::float_general;
 6495|      0|        case 's':
  ------------------
  |  Branch (6495:9): [True: 0, False: 1.00M]
  ------------------
 6496|      0|            return presentation_type::string;
 6497|      0|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 0, False: 1.00M]
  ------------------
 6498|      0|            return presentation_type::character;
 6499|      0|        case '?':
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.00M]
  ------------------
 6500|      0|            return presentation_type::escaped_character;
 6501|      0|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 0, False: 1.00M]
  ------------------
 6502|      0|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 1.00M]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 1.00M]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|      0|        default:
  ------------------
  |  Branch (6509:9): [True: 0, False: 1.00M]
  ------------------
 6510|      0|            return presentation_type::none;
 6511|  1.00M|    }
 6512|  1.00M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6541|   164k|{
 6542|   164k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|   164k|    auto check_align = [](wchar_t ch) {
 6545|   164k|        switch (ch) {
 6546|   164k|            case L'<':
 6547|   164k|                return align_type::left;
 6548|   164k|            case L'>':
 6549|   164k|                return align_type::right;
 6550|   164k|            case L'^':
 6551|   164k|                return align_type::center;
 6552|   164k|            default:
 6553|   164k|                return align_type::none;
 6554|   164k|        }
 6555|   164k|    };
 6556|       |
 6557|   164k|    auto potential_fill_len = code_point_length(begin, end);
 6558|   164k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  |  Branch (859:45): [True: 0, False: 164k]
  |  |  |  Branch (859:45): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6559|   164k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|   164k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|   164k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|   164k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|   164k|    const auto begin_before_fill = begin;
 6569|   164k|    begin += potential_fill_len;
 6570|       |
 6571|   164k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 164k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|   164k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|   164k|    const auto begin_after_fill = begin;
 6577|   164k|    ++begin;
 6578|       |
 6579|   164k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 164k, False: 0]
  ------------------
 6580|   164k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|   164k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 0, False: 164k]
  ------------------
 6585|      0|            return begin_before_fill;
 6586|      0|        }
 6587|   164k|    }
 6588|       |
 6589|   164k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 164k, False: 0]
  ------------------
 6590|   164k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 164k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|   164k|        return begin_before_fill;
 6595|   164k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|   164k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6523|   329k|{
 6524|   329k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|   329k|    if constexpr (sizeof(CharT) != 1) {
 6526|   329k|        return 1;
 6527|       |    }
 6528|       |    else {
 6529|       |        const auto lengths =
 6530|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|       |            "\3\4";
 6532|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|       |        return len;
 6534|       |    }
 6535|   329k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|   329k|    auto check_align = [](wchar_t ch) {
 6545|   329k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 329k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 329k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 329k]
  ------------------
 6551|      0|                return align_type::center;
 6552|   329k|            default:
  ------------------
  |  Branch (6552:13): [True: 329k, False: 0]
  ------------------
 6553|   329k|                return align_type::none;
 6554|   329k|        }
 6555|   329k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6606|   164k|{
 6607|   164k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|   164k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 164k, False: 0]
  |  Branch (6609:33): [True: 0, False: 164k]
  ------------------
 6610|      0|        int width = parse_simple_int(begin, end);
 6611|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6612|      0|            handler.on_width(width);
 6613|      0|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|      0|    }
 6619|   164k|    return begin;
 6620|   164k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7136|   164k|    {
 7137|   164k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|   164k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 164k, False: 0]
  ------------------
 7139|   164k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 164k, False: 0]
  ------------------
 7140|   164k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 164k]
  ------------------
 7141|   164k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|      0|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|      0|        }
 7147|       |
 7148|   164k|        Handler::on_localized();
 7149|   164k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   669k|{
 8427|   669k|#define SCN_VISIT(Type)                                         \
 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   669k|    }                                                           \
 8431|   669k|    else {                                                      \
 8432|   669k|        return vis(monostate_val);                              \
 8433|   669k|    }
 8434|       |
 8435|   669k|    monostate monostate_val{};
 8436|       |
 8437|   669k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 669k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 669k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 669k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 669k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 669k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 669k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 669k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 669k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 669k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 669k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 669k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 669k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 669k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 669k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 669k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   207k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 207k, False: 462k]
  ------------------
 8469|   207k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   207k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   207k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   207k|    }                                                           \
  |  | 8431|   207k|    else {                                                      \
  |  | 8432|   207k|        return vis(monostate_val);                              \
  |  | 8433|   207k|    }
  ------------------
 8470|   436k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 229k, False: 440k]
  ------------------
 8471|   436k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   436k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   436k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   436k|    }                                                           \
  |  | 8431|   436k|    else {                                                      \
  |  | 8432|   436k|        return vis(monostate_val);                              \
  |  | 8433|   436k|    }
  ------------------
 8472|   669k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 233k, False: 436k]
  ------------------
 8473|   669k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8474|   669k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 669k]
  ------------------
 8475|   669k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8476|   669k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 669k]
  ------------------
 8477|   669k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8478|   669k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 669k]
  ------------------
 8479|   669k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8480|   669k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 669k]
  ------------------
 8481|   669k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8482|   669k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 669k]
  ------------------
 8483|   669k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8484|   669k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 669k]
  ------------------
 8485|   669k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8486|       |
 8487|   669k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 669k]
  ------------------
 8488|   669k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   669k|            return vis(
 8490|   669k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 669k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 669k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   669k|            SCN_CLANG_POP
 8505|   669k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   246k|{
 8427|   246k|#define SCN_VISIT(Type)                                         \
 8428|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   246k|    }                                                           \
 8431|   246k|    else {                                                      \
 8432|   246k|        return vis(monostate_val);                              \
 8433|   246k|    }
 8434|       |
 8435|   246k|    monostate monostate_val{};
 8436|       |
 8437|   246k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 246k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 246k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 246k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 246k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 246k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 246k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 246k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 246k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 246k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 246k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 246k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 246k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 246k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 246k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 246k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|  70.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 70.3k, False: 176k]
  ------------------
 8469|  70.3k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  70.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  70.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  70.3k|    }                                                           \
  |  | 8431|  70.3k|    else {                                                      \
  |  | 8432|  70.3k|        return vis(monostate_val);                              \
  |  | 8433|  70.3k|    }
  ------------------
 8470|   157k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 86.8k, False: 159k]
  ------------------
 8471|   157k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   157k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   157k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   157k|    }                                                           \
  |  | 8431|   157k|    else {                                                      \
  |  | 8432|   157k|        return vis(monostate_val);                              \
  |  | 8433|   157k|    }
  ------------------
 8472|   246k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 89.4k, False: 157k]
  ------------------
 8473|   246k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   246k|    }                                                           \
  |  | 8431|   246k|    else {                                                      \
  |  | 8432|   246k|        return vis(monostate_val);                              \
  |  | 8433|   246k|    }
  ------------------
 8474|   246k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 246k]
  ------------------
 8475|   246k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   246k|    }                                                           \
  |  | 8431|   246k|    else {                                                      \
  |  | 8432|   246k|        return vis(monostate_val);                              \
  |  | 8433|   246k|    }
  ------------------
 8476|   246k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 246k]
  ------------------
 8477|   246k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   246k|    }                                                           \
  |  | 8431|   246k|    else {                                                      \
  |  | 8432|   246k|        return vis(monostate_val);                              \
  |  | 8433|   246k|    }
  ------------------
 8478|   246k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 246k]
  ------------------
 8479|   246k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   246k|    }                                                           \
  |  | 8431|   246k|    else {                                                      \
  |  | 8432|   246k|        return vis(monostate_val);                              \
  |  | 8433|   246k|    }
  ------------------
 8480|   246k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 246k]
  ------------------
 8481|   246k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   246k|    }                                                           \
  |  | 8431|   246k|    else {                                                      \
  |  | 8432|   246k|        return vis(monostate_val);                              \
  |  | 8433|   246k|    }
  ------------------
 8482|   246k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 246k]
  ------------------
 8483|   246k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   246k|    }                                                           \
  |  | 8431|   246k|    else {                                                      \
  |  | 8432|   246k|        return vis(monostate_val);                              \
  |  | 8433|   246k|    }
  ------------------
 8484|   246k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 246k]
  ------------------
 8485|   246k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   246k|    }                                                           \
  |  | 8431|   246k|    else {                                                      \
  |  | 8432|   246k|        return vis(monostate_val);                              \
  |  | 8433|   246k|    }
  ------------------
 8486|       |
 8487|   246k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 246k]
  ------------------
 8488|   246k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   246k|            return vis(
 8490|   246k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 246k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 246k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   246k|            SCN_CLANG_POP
 8505|   246k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   669k|{
 7054|   669k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   669k|    handler.check_args_exhausted();
 7056|   669k|    return handler.get_error();
 7057|   669k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   669k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   669k|    auto begin = format.data();
 7023|   669k|    auto it = begin;
 7024|   669k|    const auto end = format.data() + format.size();
 7025|       |
 7026|  1.13M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 669k, False: 468k]
  ------------------
 7027|   669k|        const auto ch = *it++;
 7028|   669k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 669k, False: 0]
  ------------------
 7029|   669k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   669k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   669k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 200k, False: 468k]
  ------------------
 7033|   200k|                return;
 7034|   200k|            }
 7035|   669k|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|   669k|    }
 7046|       |
 7047|   468k|    handler.on_literal_text(begin, end);
 7048|   468k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8184|   468k|    {
 8185|   468k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   468k|    static_cast<    \
  |  |  929|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8186|   468k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6951|   669k|{
 6952|   669k|    struct id_adapter {
 6953|   669k|        constexpr void operator()()
 6954|   669k|        {
 6955|   669k|            arg_id = handler.on_arg_id();
 6956|   669k|        }
 6957|   669k|        constexpr void operator()(std::size_t id)
 6958|   669k|        {
 6959|   669k|            arg_id = handler.on_arg_id(id);
 6960|   669k|        }
 6961|       |
 6962|   669k|        constexpr void on_error(const char* msg)
 6963|   669k|        {
 6964|   669k|            SCN_UNLIKELY_ATTR
 6965|   669k|            handler.on_error(msg);
 6966|   669k|        }
 6967|       |
 6968|   669k|        Handler& handler;
 6969|   669k|        std::size_t arg_id;
 6970|   669k|    };
 6971|       |
 6972|   669k|    ++begin;
 6973|   669k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|   669k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 669k]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|   669k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 669k]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|   669k|    else {
 6985|   669k|        auto adapter = id_adapter{handler, 0};
 6986|   669k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   669k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|   669k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 669k]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|   669k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 669k, False: 0]
  ------------------
 6997|   669k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|   669k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|   669k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  |  Branch (859:45): [True: 0, False: 669k]
  |  |  |  Branch (859:45): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 7003|      0|                handler.on_error("Unknown format specifier");
 7004|      0|                return begin;
 7005|      0|            }
 7006|   669k|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|   669k|    }
 7013|   669k|    return begin + 1;
 7014|   669k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   669k|{
 6453|   669k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   669k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 669k, False: 0]
  |  Branch (6454:26): [True: 0, False: 669k]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|   669k|    handler();
 6459|   669k|    return begin;
 6460|   669k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|   669k|        {
 6955|   669k|            arg_id = handler.on_arg_id();
 6956|   669k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7130|   669k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|   669k|    {
 7132|   669k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|   669k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6867|   669k|{
 6868|   669k|    auto do_presentation = [&]() -> const CharT* {
 6869|   669k|        if (*begin == CharT{'['}) {
 6870|   669k|            auto set = parse_presentation_set(begin, end, handler);
 6871|   669k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|   669k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|   669k|                return begin;
 6876|   669k|            }
 6877|   669k|            handler.on_character_set_string(set);
 6878|   669k|            return begin;
 6879|   669k|        }
 6880|   669k|        if (*begin == CharT{'/'}) {
 6881|   669k|            return parse_presentation_regex(begin, end, handler);
 6882|   669k|        }
 6883|   669k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   669k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|   669k|            handler.on_error("Invalid type specifier in format string");
 6886|   669k|            return begin;
 6887|   669k|        }
 6888|   669k|        handler.on_type(type);
 6889|   669k|        return begin;
 6890|   669k|    };
 6891|       |
 6892|   669k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 669k, False: 0]
  |  Branch (6892:28): [True: 669k, False: 0]
  ------------------
 6893|   669k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 669k, False: 0]
  |  Branch (6893:36): [True: 504k, False: 164k]
  ------------------
 6894|   504k|        return do_presentation();
 6895|   504k|    }
 6896|       |
 6897|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|   164k|    begin = parse_align(begin, end, handler);
 6903|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|   164k|    begin = parse_width(begin, end, handler);
 6909|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|   164k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 164k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|   164k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 164k, False: 0]
  ------------------
 6928|   164k|        handler.on_localized();
 6929|   164k|        ++begin;
 6930|   164k|    }
 6931|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|   164k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 164k, False: 0]
  |  Branch (6936:25): [True: 0, False: 164k]
  ------------------
 6937|      0|        do_presentation();
 6938|      0|    }
 6939|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|   164k|    return begin;
 6945|   164k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6868|   504k|    auto do_presentation = [&]() -> const CharT* {
 6869|   504k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 0, False: 504k]
  ------------------
 6870|      0|            auto set = parse_presentation_set(begin, end, handler);
 6871|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|      0|            handler.on_character_set_string(set);
 6878|      0|            return begin;
 6879|      0|        }
 6880|   504k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 504k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   504k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   504k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 6885|      0|            handler.on_error("Invalid type specifier in format string");
 6886|      0|            return begin;
 6887|      0|        }
 6888|   504k|        handler.on_type(type);
 6889|   504k|        return begin;
 6890|   504k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6541|   164k|{
 6542|   164k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|   164k|    auto check_align = [](wchar_t ch) {
 6545|   164k|        switch (ch) {
 6546|   164k|            case L'<':
 6547|   164k|                return align_type::left;
 6548|   164k|            case L'>':
 6549|   164k|                return align_type::right;
 6550|   164k|            case L'^':
 6551|   164k|                return align_type::center;
 6552|   164k|            default:
 6553|   164k|                return align_type::none;
 6554|   164k|        }
 6555|   164k|    };
 6556|       |
 6557|   164k|    auto potential_fill_len = code_point_length(begin, end);
 6558|   164k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  |  Branch (859:45): [True: 0, False: 164k]
  |  |  |  Branch (859:45): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6559|   164k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|   164k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|   164k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|   164k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|   164k|    const auto begin_before_fill = begin;
 6569|   164k|    begin += potential_fill_len;
 6570|       |
 6571|   164k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 164k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|   164k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|   164k|    const auto begin_after_fill = begin;
 6577|   164k|    ++begin;
 6578|       |
 6579|   164k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 164k, False: 0]
  ------------------
 6580|   164k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|   164k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 0, False: 164k]
  ------------------
 6585|      0|            return begin_before_fill;
 6586|      0|        }
 6587|   164k|    }
 6588|       |
 6589|   164k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 164k, False: 0]
  ------------------
 6590|   164k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 164k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|   164k|        return begin_before_fill;
 6595|   164k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|   164k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6544|   328k|    auto check_align = [](wchar_t ch) {
 6545|   328k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 328k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 328k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 328k]
  ------------------
 6551|      0|                return align_type::center;
 6552|   328k|            default:
  ------------------
  |  Branch (6552:13): [True: 328k, False: 0]
  ------------------
 6553|   328k|                return align_type::none;
 6554|   328k|        }
 6555|   328k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6606|   164k|{
 6607|   164k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|   164k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 164k, False: 0]
  |  Branch (6609:33): [True: 0, False: 164k]
  ------------------
 6610|      0|        int width = parse_simple_int(begin, end);
 6611|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6612|      0|            handler.on_width(width);
 6613|      0|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|      0|    }
 6619|   164k|    return begin;
 6620|   164k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7136|   164k|    {
 7137|   164k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|   164k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 164k, False: 0]
  ------------------
 7139|   164k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 164k, False: 0]
  ------------------
 7140|   164k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 164k]
  ------------------
 7141|   164k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|      0|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|      0|        }
 7147|       |
 7148|   164k|        Handler::on_localized();
 7149|   164k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   669k|{
 8427|   669k|#define SCN_VISIT(Type)                                         \
 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   669k|    }                                                           \
 8431|   669k|    else {                                                      \
 8432|   669k|        return vis(monostate_val);                              \
 8433|   669k|    }
 8434|       |
 8435|   669k|    monostate monostate_val{};
 8436|       |
 8437|   669k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 669k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 669k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 669k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 669k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 669k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 669k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 669k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 669k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 669k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 669k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 669k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 669k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 669k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 669k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 669k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   207k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 207k, False: 462k]
  ------------------
 8469|   207k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   207k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   207k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   207k|    }                                                           \
  |  | 8431|   207k|    else {                                                      \
  |  | 8432|   207k|        return vis(monostate_val);                              \
  |  | 8433|   207k|    }
  ------------------
 8470|   436k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 229k, False: 440k]
  ------------------
 8471|   436k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   436k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   436k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   436k|    }                                                           \
  |  | 8431|   436k|    else {                                                      \
  |  | 8432|   436k|        return vis(monostate_val);                              \
  |  | 8433|   436k|    }
  ------------------
 8472|   669k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 232k, False: 436k]
  ------------------
 8473|   669k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8474|   669k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 669k]
  ------------------
 8475|   669k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8476|   669k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 669k]
  ------------------
 8477|   669k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8478|   669k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 669k]
  ------------------
 8479|   669k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8480|   669k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 669k]
  ------------------
 8481|   669k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8482|   669k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 669k]
  ------------------
 8483|   669k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8484|   669k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 669k]
  ------------------
 8485|   669k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   669k|    }                                                           \
  |  | 8431|   669k|    else {                                                      \
  |  | 8432|   669k|        return vis(monostate_val);                              \
  |  | 8433|   669k|    }
  ------------------
 8486|       |
 8487|   669k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 669k]
  ------------------
 8488|   669k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   669k|            return vis(
 8490|   669k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 669k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 669k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   669k|            SCN_CLANG_POP
 8505|   669k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|   261k|    {
 4084|   261k|        sync(0);
 4085|   261k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|   330k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|   164k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   127k|{
   89|   127k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   127k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   127k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   127k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   417k|{
   44|   417k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   417k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   417k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   127k|{
  127|   127k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   127k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   127k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   127k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   417k|{
   60|   417k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   417k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   417k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  23.4k|{
  163|  23.4k|    T value;
  164|  23.4k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  23.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  23.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.69k, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.69k|    }                                                  \
  |  |  |  | 3667|  23.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  16.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.7k|    static_cast<    \
  |  |  929|  16.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.7k|    static_cast<    \
  |  |  929|  16.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  23.4k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  82.3k|{
   72|  82.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  82.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  82.3k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   143k|{
   89|   143k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   143k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   143k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   143k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   143k|{
  127|   143k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   143k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   143k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   143k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  28.9k|{
  163|  28.9k|    T value;
  164|  28.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  28.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  28.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  28.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  28.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.69k, False: 22.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.69k|    }                                                  \
  |  |  |  | 3667|  28.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  22.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.2k|    static_cast<    \
  |  |  929|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.2k|    static_cast<    \
  |  |  929|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  28.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   146k|{
   89|   146k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   146k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   146k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   146k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   146k|{
  127|   146k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   146k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   146k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   146k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  29.8k|{
  163|  29.8k|    T value;
  164|  29.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  29.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.69k, False: 23.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.69k|    }                                                  \
  |  |  |  | 3667|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  23.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  23.1k|    static_cast<    \
  |  |  929|  23.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  23.1k|    static_cast<    \
  |  |  929|  23.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  29.8k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   127k|{
   89|   127k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   127k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   127k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   127k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   416k|{
   44|   416k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   416k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   127k|{
  127|   127k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   127k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   127k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   127k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   416k|{
   60|   416k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   416k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  23.4k|{
  163|  23.4k|    T value;
  164|  23.4k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  23.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  23.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.69k, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.69k|    }                                                  \
  |  |  |  | 3667|  23.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  16.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.7k|    static_cast<    \
  |  |  929|  16.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.7k|    static_cast<    \
  |  |  929|  16.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  23.4k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  82.2k|{
   72|  82.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  82.2k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   143k|{
   89|   143k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   143k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   143k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   143k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   143k|{
  127|   143k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   143k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   143k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   143k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  28.9k|{
  163|  28.9k|    T value;
  164|  28.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  28.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  28.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  28.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  28.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.69k, False: 22.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.69k|    }                                                  \
  |  |  |  | 3667|  28.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  22.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.2k|    static_cast<    \
  |  |  929|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.2k|    static_cast<    \
  |  |  929|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  28.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   146k|{
   89|   146k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   146k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   146k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   146k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   146k|{
  127|   146k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   146k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   146k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   146k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  29.8k|{
  163|  29.8k|    T value;
  164|  29.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  29.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.69k, False: 23.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.69k|    }                                                  \
  |  |  |  | 3667|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  23.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  23.1k|    static_cast<    \
  |  |  929|  23.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  23.1k|    static_cast<    \
  |  |  929|  23.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  29.8k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  2.41M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  2.41M|{
  653|  2.41M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.41M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.01M|{
  659|  1.01M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.01M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 508k, False: 508k]
  ------------------
  661|  1.01M|                    : std::locale{};
  662|  1.01M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.06M|{
 1221|  1.06M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.06M|                                  m_nan_payload_buffer, value);
 1223|  1.06M|    value = this->setsign(value);
 1224|  1.06M|    return n;
 1225|  1.06M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   431k|{
 1221|   431k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   431k|                                  m_nan_payload_buffer, value);
 1223|   431k|    value = this->setsign(value);
 1224|   431k|    return n;
 1225|   431k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.10M|{
 1221|  1.10M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.10M|                                  m_nan_payload_buffer, value);
 1223|  1.10M|    value = this->setsign(value);
 1224|  1.10M|    return n;
 1225|  1.10M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   505k|{
 1221|   505k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   505k|                                  m_nan_payload_buffer, value);
 1223|   505k|    value = this->setsign(value);
 1224|   505k|    return n;
 1225|   505k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.11M|{
 1221|  1.11M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.11M|                                  m_nan_payload_buffer, value);
 1223|  1.11M|    value = this->setsign(value);
 1224|  1.11M|    return n;
 1225|  1.11M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   517k|{
 1221|   517k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   517k|                                  m_nan_payload_buffer, value);
 1223|   517k|    value = this->setsign(value);
 1224|   517k|    return n;
 1225|   517k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   725k|{
 2184|   725k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   725k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   851k|{
 2192|   851k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   851k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   851k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 791k, False: 60.2k]
  |  |  ------------------
  ------------------
 2194|   791k|        source.sync(*n);
 2195|   791k|    }
 2196|  60.2k|    else {
 2197|  60.2k|        source.sync_all();
 2198|  60.2k|    }
 2199|   851k|    return n;
 2200|   851k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   417k|{
 2208|   417k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   417k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   416k|{
 2216|   416k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   416k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   416k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 296k, False: 120k]
  |  |  ------------------
  ------------------
 2218|   296k|        source.sync(*n);
 2219|   296k|    }
 2220|   120k|    else {
 2221|   120k|        source.sync_all();
 2222|   120k|    }
 2223|   416k|    return n;
 2224|   416k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  1.46M|{
  194|  1.46M|    return find_classic_impl(
  195|  1.46M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  1.46M|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|  1.46M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  3.47M|{
  202|  3.47M|    return find_classic_impl(
  203|  3.47M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  3.47M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|  3.47M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   725k|{
 2141|   725k|    return vscan_internal(source, format, args);
 2142|   725k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   851k|{
 2147|   851k|    auto n = vscan_internal(source, format, args);
 2148|   851k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   851k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 791k, False: 60.2k]
  |  |  ------------------
  ------------------
 2149|   791k|        source.sync(*n);
 2150|   791k|    }
 2151|  60.2k|    else {
 2152|  60.2k|        source.sync_all();
 2153|  60.2k|    }
 2154|   851k|    return n;
 2155|   851k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   417k|{
 2161|   417k|    return vscan_internal(source, format, args);
 2162|   417k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   416k|{
 2167|   416k|    auto n = vscan_internal(source, format, args);
 2168|   416k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   416k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 296k, False: 120k]
  |  |  ------------------
  ------------------
 2169|   296k|        source.sync(*n);
 2170|   296k|    }
 2171|   120k|    else {
 2172|   120k|        source.sync_all();
 2173|   120k|    }
 2174|   416k|    return n;
 2175|   416k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   157k|{
 2251|   157k|    return vscan_value_internal(source, arg);
 2252|   157k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   173k|{
 2256|   173k|    auto n = vscan_value_internal(source, arg);
 2257|   173k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   173k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 163k, False: 10.0k]
  |  |  ------------------
  ------------------
 2258|   163k|        source.sync(*n);
 2259|   163k|    }
 2260|  10.0k|    else {
 2261|  10.0k|        source.sync_all();
 2262|  10.0k|    }
 2263|   173k|    return n;
 2264|   173k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  82.3k|{
 2270|  82.3k|    return vscan_value_internal(source, arg);
 2271|  82.3k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  82.2k|{
 2276|  82.2k|    auto n = vscan_value_internal(source, arg);
 2277|  82.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  82.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 62.1k, False: 20.0k]
  |  |  ------------------
  ------------------
 2278|  62.1k|        source.sync(*n);
 2279|  62.1k|    }
 2280|  20.0k|    else {
 2281|  20.0k|        source.sync_all();
 2282|  20.0k|    }
 2283|  82.2k|    return n;
 2284|  82.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  1.46M|{
  118|  1.46M|    auto it = source.begin();
  119|       |
  120|  4.78M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.83M, False: 946k]
  ------------------
  121|  3.83M|        auto sv =
  122|  3.83M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.83M|                .substr(0, 8);
  124|       |
  125|  3.83M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.75M, False: 85.8k]
  ------------------
  126|  3.75M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.75M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.75M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 487k, False: 3.26M]
  ------------------
  129|   487k|                break;
  130|   487k|            }
  131|  3.26M|            continue;
  132|  3.75M|        }
  133|       |
  134|   291k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 239k, False: 51.4k]
  ------------------
  135|   239k|            auto tmp =
  136|   239k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   239k|            auto res = get_next_code_point(tmp);
  138|   239k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 34.3k, False: 205k]
  ------------------
  139|  34.3k|                return it;
  140|  34.3k|            }
  141|   205k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   205k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   205k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   205k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   205k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   205k|        }
  145|  85.8k|    }
  146|       |
  147|  1.43M|    return detail::make_string_view_iterator(source, it);
  148|  1.46M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  5.95M|{
  105|  5.95M|    static_assert(sizeof(*source.data()) == 1);
  106|  5.95M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  5.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  5.95M|    uint64_t word{};
  108|  5.95M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  5.95M|    return has_byte_greater(word, 127) != 0;
  111|  5.95M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  22.9M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   239k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.47M|{
  118|  3.47M|    auto it = source.begin();
  119|       |
  120|  3.80M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.11M, False: 1.68M]
  ------------------
  121|  2.11M|        auto sv =
  122|  2.11M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.11M|                .substr(0, 8);
  124|       |
  125|  2.11M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.00M, False: 117k]
  ------------------
  126|  2.00M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.00M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.00M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.68M, False: 317k]
  ------------------
  129|  1.68M|                break;
  130|  1.68M|            }
  131|   317k|            continue;
  132|  2.00M|        }
  133|       |
  134|   219k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 209k, False: 10.3k]
  ------------------
  135|   209k|            auto tmp =
  136|   209k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   209k|            auto res = get_next_code_point(tmp);
  138|   209k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 107k, False: 102k]
  ------------------
  139|   107k|                return it;
  140|   107k|            }
  141|   102k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   102k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   102k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   102k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   102k|        }
  145|   117k|    }
  146|       |
  147|  3.36M|    return detail::make_string_view_iterator(source, it);
  148|  3.47M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  3.14M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   209k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.06M|{
 1138|  1.06M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.84k, False: 1.05M]
  ------------------
 1139|  5.84k|        value = std::numeric_limits<T>::infinity();
 1140|  5.84k|        return 3;
 1141|  5.84k|    }
 1142|  1.05M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 5.92k, False: 1.04M]
  ------------------
 1143|  5.92k|        value = std::numeric_limits<T>::infinity();
 1144|  5.92k|        return 8;
 1145|  5.92k|    }
 1146|  1.04M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 39.9k, False: 1.01M]
  ------------------
 1147|  39.9k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  39.9k|        return 3;
 1149|  39.9k|    }
 1150|  1.01M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.26k, False: 1.00M]
  ------------------
 1151|  2.26k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.26k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.26k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.26k|    }
 1182|       |
 1183|  1.00M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.00M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 218k, False: 788k]
  ------------------
 1185|   218k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.55k, False: 214k]
  |  |  ------------------
  ------------------
 1186|  4.55k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.55k|                                         "Invalid floating-point digit");
 1188|  4.55k|        }
 1189|   218k|    }
 1190|  1.00M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 991k]
  |  |  ------------------
  ------------------
 1191|  11.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.9k|                                     "Invalid floating-point digit");
 1193|  11.9k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   991k|    else {
 1211|       |        // Default to fast_float
 1212|   991k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   991k|    }
 1214|   991k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1076|   991k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   991k|    {
 1078|   991k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  3.57M|    {
  712|  3.57M|        return {kind, options};
  713|  3.57M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   991k|    {
 1082|   991k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 214k, False: 777k]
  ------------------
 1083|   991k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 32.3k, False: 744k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   246k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   246k|                                              value);
 1087|   246k|        }
 1088|       |
 1089|   744k|        const auto flags = get_flags();
 1090|   744k|        const auto view = get_view();
 1091|   744k|        const auto result = fast_float::from_chars(
 1092|   744k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   744k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   744k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 744k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   744k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   744k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.63k, False: 738k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  6.63k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  6.63k|                                              value);
 1102|  6.63k|        }
 1103|       |
 1104|   738k|        return result.ptr - view.data();
 1105|   744k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   253k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   253k|    {
 1048|   253k|#if !SCN_DISABLE_STRTOD
 1049|   253k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   253k|    }
 1056|   253k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  892|   253k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   253k|    {
  894|   253k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   354k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   253k|    {
  898|   253k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   253k|                           generic_strtod);
  900|   253k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   253k|    {
  732|   253k|        CharT* end{};
  733|   253k|        errno = 0;
  734|   253k|        value = strtod_cb(src, &end);
  735|   253k|        const auto saved_errno = errno;
  736|   253k|        auto chars_read = end - src;
  737|       |
  738|   253k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   253k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.86k, False: 245k]
  |  |  ------------------
  ------------------
  740|  7.86k|            return unexpected(e);
  741|  7.86k|        }
  742|       |
  743|   245k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 213k, False: 32.2k]
  ------------------
  744|   245k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 213k, False: 0]
  ------------------
  745|   213k|            chars_read -= 2;
  746|   213k|        }
  747|       |
  748|   245k|        return chars_read;
  749|   253k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   354k|    {
  778|   354k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 140k, False: 213k]
  |  Branch (778:37): [True: 0, False: 140k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   354k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 33.1k, False: 320k]
  ------------------
  785|   354k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 33.1k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   354k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 13.7k, False: 340k]
  |  Branch (791:34): [True: 3.06k, False: 10.7k]
  ------------------
  792|  3.06k|            SCN_UNLIKELY_ATTR
  793|  3.06k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  3.06k|        }
  795|       |
  796|   351k|        SCN_GCC_COMPAT_PUSH
  797|   351k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   351k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 351k, False: 0]
  ------------------
  800|   351k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 351k, False: 0]
  ------------------
  801|   351k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 10.6k, False: 340k]
  ------------------
  802|  10.6k|            SCN_UNLIKELY_ATTR
  803|  10.6k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  10.6k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   340k|            return {};
  809|   351k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   367k|{
  687|   367k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 143k, False: 224k]
  |  Branch (687:25): [True: 0, False: 224k]
  ------------------
  688|   367k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   253k|    {
  755|   253k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 247k, False: 5.30k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   247k|            auto first_space = read_until_classic_space(input.view());
  758|   247k|            input.assign(
  759|   247k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   247k|        }
  761|       |
  762|   253k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 214k, False: 39.0k]
  ------------------
  763|   214k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   214k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   214k|        }
  770|       |
  771|   253k|        return input.get_allocated_string().c_str();
  772|   253k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   253k|    {
  905|   253k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   253k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   253k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   253k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   253k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   253k|        if constexpr (std::is_same_v<T, float>) {
  838|   253k|            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   253k|#endif
  847|   253k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.18M|    {
 1061|  2.18M|        unsigned format_flags{};
 1062|  2.18M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.16M, False: 14.3k]
  ------------------
 1063|  2.16M|            format_flags |= fast_float::fixed;
 1064|  2.16M|        }
 1065|  2.18M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.84M, False: 333k]
  ------------------
 1066|  1.84M|            format_flags |= fast_float::scientific;
 1067|  1.84M|        }
 1068|       |
 1069|  2.18M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.18M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   744k|    {
 1110|   744k|        if constexpr (sizeof(CharT) == 1) {
 1111|   744k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   744k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   431k|{
 1138|   431k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 431k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   431k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 431k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   431k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 431k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   431k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 431k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   431k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   431k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 107k, False: 323k]
  ------------------
 1185|   107k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.9k, False: 94.4k]
  |  |  ------------------
  ------------------
 1186|  12.9k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.9k|                                         "Invalid floating-point digit");
 1188|  12.9k|        }
 1189|   107k|    }
 1190|   418k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.0k, False: 387k]
  |  |  ------------------
  ------------------
 1191|  31.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  31.0k|                                     "Invalid floating-point digit");
 1193|  31.0k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   387k|    else {
 1211|       |        // Default to fast_float
 1212|   387k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   387k|    }
 1214|   387k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1076|   387k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   387k|    {
 1078|   387k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|  1.51M|    {
  712|  1.51M|        return {kind, options};
  713|  1.51M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   387k|    {
 1082|   387k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 94.3k, False: 292k]
  ------------------
 1083|   387k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 749, False: 292k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  95.1k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  95.1k|                                              value);
 1087|  95.1k|        }
 1088|       |
 1089|   292k|        const auto flags = get_flags();
 1090|   292k|        const auto view = get_view();
 1091|   292k|        const auto result = fast_float::from_chars(
 1092|   292k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   292k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   292k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.81k, False: 286k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.81k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.81k|                                              value);
 1102|  5.81k|        }
 1103|       |
 1104|   286k|        return result.ptr - view.data();
 1105|   292k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   100k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   100k|    {
 1048|   100k|#if !SCN_DISABLE_STRTOD
 1049|   100k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   100k|    }
 1056|   100k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  892|   100k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   100k|    {
  894|   100k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|   100k|    {
  898|   100k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   100k|                           generic_strtod);
  900|   100k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   100k|    {
  732|   100k|        CharT* end{};
  733|   100k|        errno = 0;
  734|   100k|        value = strtod_cb(src, &end);
  735|   100k|        const auto saved_errno = errno;
  736|   100k|        auto chars_read = end - src;
  737|       |
  738|   100k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   100k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.89k, False: 95.0k]
  |  |  ------------------
  ------------------
  740|  5.89k|            return unexpected(e);
  741|  5.89k|        }
  742|       |
  743|  95.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 94.2k, False: 749]
  ------------------
  744|  95.0k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 94.2k, False: 0]
  ------------------
  745|  94.2k|            chars_read -= 2;
  746|  94.2k|        }
  747|       |
  748|  95.0k|        return chars_read;
  749|   100k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   100k|    {
  755|   100k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 97.5k, False: 3.36k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  97.5k|            auto first_space = read_until_classic_space(input.view());
  758|  97.5k|            input.assign(
  759|  97.5k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  97.5k|        }
  761|       |
  762|   100k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 94.3k, False: 6.56k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  94.3k|            else {
  767|  94.3k|                input.get_allocated_string().insert(0, L"0x");
  768|  94.3k|            }
  769|  94.3k|        }
  770|       |
  771|   100k|        return input.get_allocated_string().c_str();
  772|   100k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|   100k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|   100k|        else {
  909|   100k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   100k|        }
  911|   100k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|   100k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   100k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|   100k|        if constexpr (std::is_same_v<T, float>) {
  876|   100k|            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|   100k|#endif
  885|   100k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   292k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   292k|        else {
 1119|   292k|            return std::u32string_view{
 1120|   292k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   292k|                m_input.view().size()};
 1122|   292k|        }
 1123|   292k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.10M|{
 1138|  1.10M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 6.52k, False: 1.10M]
  ------------------
 1139|  6.52k|        value = std::numeric_limits<T>::infinity();
 1140|  6.52k|        return 3;
 1141|  6.52k|    }
 1142|  1.10M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 6.33k, False: 1.09M]
  ------------------
 1143|  6.33k|        value = std::numeric_limits<T>::infinity();
 1144|  6.33k|        return 8;
 1145|  6.33k|    }
 1146|  1.09M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 41.0k, False: 1.05M]
  ------------------
 1147|  41.0k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  41.0k|        return 3;
 1149|  41.0k|    }
 1150|  1.05M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.52k, False: 1.05M]
  ------------------
 1151|  2.52k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.52k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.52k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.52k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.52k|    }
 1182|       |
 1183|  1.05M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.05M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 224k, False: 825k]
  ------------------
 1185|   224k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.69k, False: 220k]
  |  |  ------------------
  ------------------
 1186|  4.69k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.69k|                                         "Invalid floating-point digit");
 1188|  4.69k|        }
 1189|   224k|    }
 1190|  1.04M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 1.03M]
  |  |  ------------------
  ------------------
 1191|  12.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  12.6k|                                     "Invalid floating-point digit");
 1193|  12.6k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|  1.03M|    else {
 1211|       |        // Default to fast_float
 1212|  1.03M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.03M|    }
 1214|  1.03M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1076|  1.03M|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|  1.03M|    {
 1078|  1.03M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.03M|    {
 1082|  1.03M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 219k, False: 813k]
  ------------------
 1083|  1.03M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 34.8k, False: 778k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   254k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   254k|                                              value);
 1087|   254k|        }
 1088|       |
 1089|   778k|        const auto flags = get_flags();
 1090|   778k|        const auto view = get_view();
 1091|   778k|        const auto result = fast_float::from_chars(
 1092|   778k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   778k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   778k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 778k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   778k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   778k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.05k, False: 775k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  3.05k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  3.05k|                                              value);
 1102|  3.05k|        }
 1103|       |
 1104|   775k|        return result.ptr - view.data();
 1105|   778k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   257k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   257k|    {
 1048|   257k|#if !SCN_DISABLE_STRTOD
 1049|   257k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   257k|    }
 1056|   257k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  892|   257k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   257k|    {
  894|   257k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   355k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   257k|    {
  898|   257k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   257k|                           generic_strtod);
  900|   257k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   257k|    {
  732|   257k|        CharT* end{};
  733|   257k|        errno = 0;
  734|   257k|        value = strtod_cb(src, &end);
  735|   257k|        const auto saved_errno = errno;
  736|   257k|        auto chars_read = end - src;
  737|       |
  738|   257k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   257k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.59k, False: 254k]
  |  |  ------------------
  ------------------
  740|  3.59k|            return unexpected(e);
  741|  3.59k|        }
  742|       |
  743|   254k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 219k, False: 34.7k]
  ------------------
  744|   254k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 219k, False: 0]
  ------------------
  745|   219k|            chars_read -= 2;
  746|   219k|        }
  747|       |
  748|   254k|        return chars_read;
  749|   257k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   355k|    {
  778|   355k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 139k, False: 216k]
  |  Branch (778:37): [True: 0, False: 139k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   355k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 35.5k, False: 320k]
  ------------------
  785|   355k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 35.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   355k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 6.32k, False: 349k]
  |  Branch (791:34): [True: 722, False: 5.60k]
  ------------------
  792|    722|            SCN_UNLIKELY_ATTR
  793|    722|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    722|        }
  795|       |
  796|   354k|        SCN_GCC_COMPAT_PUSH
  797|   354k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   354k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 354k, False: 0]
  ------------------
  800|   354k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 354k, False: 0]
  ------------------
  801|   354k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 5.60k, False: 349k]
  ------------------
  802|  5.60k|            SCN_UNLIKELY_ATTR
  803|  5.60k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  5.60k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   349k|            return {};
  809|   354k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   361k|{
  691|   361k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 140k, False: 221k]
  |  Branch (691:24): [True: 0, False: 221k]
  ------------------
  692|   361k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   257k|    {
  755|   257k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 254k, False: 3.83k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   254k|            auto first_space = read_until_classic_space(input.view());
  758|   254k|            input.assign(
  759|   254k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   254k|        }
  761|       |
  762|   257k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 219k, False: 37.8k]
  ------------------
  763|   219k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   219k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   219k|        }
  770|       |
  771|   257k|        return input.get_allocated_string().c_str();
  772|   257k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   257k|    {
  905|   257k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   257k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   257k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   257k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   257k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|   257k|        else if constexpr (std::is_same_v<T, double>) {
  841|   257k|            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   257k|#endif
  847|   257k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   778k|    {
 1110|   778k|        if constexpr (sizeof(CharT) == 1) {
 1111|   778k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   778k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   505k|{
 1138|   505k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 505k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   505k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 505k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   505k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 505k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   505k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 505k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   505k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   505k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   505k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   505k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 107k, False: 398k]
  ------------------
 1185|   107k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.9k, False: 94.4k]
  |  |  ------------------
  ------------------
 1186|  12.9k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.9k|                                         "Invalid floating-point digit");
 1188|  12.9k|        }
 1189|   107k|    }
 1190|   492k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.0k, False: 460k]
  |  |  ------------------
  ------------------
 1191|  32.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  32.0k|                                     "Invalid floating-point digit");
 1193|  32.0k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   460k|    else {
 1211|       |        // Default to fast_float
 1212|   460k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   460k|    }
 1214|   460k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1076|   460k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   460k|    {
 1078|   460k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   460k|    {
 1082|   460k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 94.3k, False: 366k]
  ------------------
 1083|   460k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 749, False: 365k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  95.1k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  95.1k|                                              value);
 1087|  95.1k|        }
 1088|       |
 1089|   365k|        const auto flags = get_flags();
 1090|   365k|        const auto view = get_view();
 1091|   365k|        const auto result = fast_float::from_chars(
 1092|   365k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   365k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   365k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.66k, False: 363k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.66k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.66k|                                              value);
 1102|  2.66k|        }
 1103|       |
 1104|   363k|        return result.ptr - view.data();
 1105|   365k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  97.7k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  97.7k|    {
 1048|  97.7k|#if !SCN_DISABLE_STRTOD
 1049|  97.7k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  97.7k|    }
 1056|  97.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  892|  97.7k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  97.7k|    {
  894|  97.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  97.7k|    {
  898|  97.7k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  97.7k|                           generic_strtod);
  900|  97.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  97.7k|    {
  732|  97.7k|        CharT* end{};
  733|  97.7k|        errno = 0;
  734|  97.7k|        value = strtod_cb(src, &end);
  735|  97.7k|        const auto saved_errno = errno;
  736|  97.7k|        auto chars_read = end - src;
  737|       |
  738|  97.7k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  97.7k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  97.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 95.0k]
  |  |  ------------------
  ------------------
  740|  2.73k|            return unexpected(e);
  741|  2.73k|        }
  742|       |
  743|  95.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 94.3k, False: 749]
  ------------------
  744|  95.0k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 94.3k, False: 0]
  ------------------
  745|  94.3k|            chars_read -= 2;
  746|  94.3k|        }
  747|       |
  748|  95.0k|        return chars_read;
  749|  97.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  97.7k|    {
  755|  97.7k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 95.9k, False: 1.79k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  95.9k|            auto first_space = read_until_classic_space(input.view());
  758|  95.9k|            input.assign(
  759|  95.9k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  95.9k|        }
  761|       |
  762|  97.7k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 94.3k, False: 3.41k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  94.3k|            else {
  767|  94.3k|                input.get_allocated_string().insert(0, L"0x");
  768|  94.3k|            }
  769|  94.3k|        }
  770|       |
  771|  97.7k|        return input.get_allocated_string().c_str();
  772|  97.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  97.7k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  97.7k|        else {
  909|  97.7k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  97.7k|        }
  911|  97.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  97.7k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  97.7k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|  97.7k|        else if constexpr (std::is_same_v<T, double>) {
  879|  97.7k|            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  97.7k|#endif
  885|  97.7k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   365k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   365k|        else {
 1119|   365k|            return std::u32string_view{
 1120|   365k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   365k|                m_input.view().size()};
 1122|   365k|        }
 1123|   365k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.11M|{
 1138|  1.11M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 6.68k, False: 1.11M]
  ------------------
 1139|  6.68k|        value = std::numeric_limits<T>::infinity();
 1140|  6.68k|        return 3;
 1141|  6.68k|    }
 1142|  1.11M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 6.45k, False: 1.10M]
  ------------------
 1143|  6.45k|        value = std::numeric_limits<T>::infinity();
 1144|  6.45k|        return 8;
 1145|  6.45k|    }
 1146|  1.10M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 41.3k, False: 1.06M]
  ------------------
 1147|  41.3k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  41.3k|        return 3;
 1149|  41.3k|    }
 1150|  1.06M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.56k, False: 1.06M]
  ------------------
 1151|  2.56k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.56k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.56k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.56k|    }
 1182|       |
 1183|  1.06M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.06M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 225k, False: 835k]
  ------------------
 1185|   225k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 220k]
  |  |  ------------------
  ------------------
 1186|  4.81k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.81k|                                         "Invalid floating-point digit");
 1188|  4.81k|        }
 1189|   225k|    }
 1190|  1.05M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.1k, False: 1.04M]
  |  |  ------------------
  ------------------
 1191|  13.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  13.1k|                                     "Invalid floating-point digit");
 1193|  13.1k|    }
 1194|       |
 1195|  1.04M|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|  1.04M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.04M|            return fast_float_fallback(data, value);
 1208|  1.04M|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|  1.04M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.04M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.04M|    {
 1048|  1.04M|#if !SCN_DISABLE_STRTOD
 1049|  1.04M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.04M|    }
 1056|  1.04M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  892|  1.04M|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  1.04M|    {
  894|  1.04M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.51M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.04M|    {
  898|  1.04M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.04M|                           generic_strtod);
  900|  1.04M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.04M|    {
  732|  1.04M|        CharT* end{};
  733|  1.04M|        errno = 0;
  734|  1.04M|        value = strtod_cb(src, &end);
  735|  1.04M|        const auto saved_errno = errno;
  736|  1.04M|        auto chars_read = end - src;
  737|       |
  738|  1.04M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.04M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 842, False: 1.04M]
  |  |  ------------------
  ------------------
  740|    842|            return unexpected(e);
  741|    842|        }
  742|       |
  743|  1.04M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 220k, False: 821k]
  ------------------
  744|  1.04M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 220k, False: 0]
  ------------------
  745|   220k|            chars_read -= 2;
  746|   220k|        }
  747|       |
  748|  1.04M|        return chars_read;
  749|  1.04M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.51M|    {
  778|  1.51M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 660k, False: 854k]
  |  Branch (778:37): [True: 0, False: 660k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.51M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 35.6k, False: 1.47M]
  ------------------
  785|  1.51M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 35.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.51M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.21k, False: 1.51M]
  |  Branch (791:34): [True: 184, False: 1.03k]
  ------------------
  792|    184|            SCN_UNLIKELY_ATTR
  793|    184|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    184|        }
  795|       |
  796|  1.51M|        SCN_GCC_COMPAT_PUSH
  797|  1.51M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.51M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.51M, False: 0]
  ------------------
  800|  1.51M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.51M, False: 0]
  ------------------
  801|  1.51M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.03k, False: 1.51M]
  ------------------
  802|  1.03k|            SCN_UNLIKELY_ATTR
  803|  1.03k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.03k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.51M|            return {};
  809|  1.51M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.51M|{
  695|  1.51M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 660k, False: 855k]
  |  Branch (695:26): [True: 0, False: 855k]
  ------------------
  696|  1.51M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.04M|    {
  755|  1.04M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 965k, False: 77.1k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   965k|            auto first_space = read_until_classic_space(input.view());
  758|   965k|            input.assign(
  759|   965k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   965k|        }
  761|       |
  762|  1.04M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 220k, False: 822k]
  ------------------
  763|   220k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   220k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   220k|        }
  770|       |
  771|  1.04M|        return input.get_allocated_string().c_str();
  772|  1.04M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.04M|    {
  905|  1.04M|        if constexpr (std::is_same_v<CharT, char>) {
  906|  1.04M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|  1.04M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.04M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.04M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|  1.04M|        else if constexpr (std::is_same_v<T, long double>) {
  844|  1.04M|            return std::strtold(str, str_end);
  845|  1.04M|        }
  846|  1.04M|#endif
  847|  1.04M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   517k|{
 1138|   517k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 517k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   517k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 517k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   517k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 517k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   517k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 517k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   517k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   517k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 107k, False: 409k]
  ------------------
 1185|   107k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.0k, False: 94.4k]
  |  |  ------------------
  ------------------
 1186|  13.0k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  13.0k|                                         "Invalid floating-point digit");
 1188|  13.0k|        }
 1189|   107k|    }
 1190|   504k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.7k, False: 471k]
  |  |  ------------------
  ------------------
 1191|  32.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  32.7k|                                     "Invalid floating-point digit");
 1193|  32.7k|    }
 1194|       |
 1195|   471k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   471k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   471k|            return fast_float_fallback(data, value);
 1208|   471k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   471k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   471k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   471k|    {
 1048|   471k|#if !SCN_DISABLE_STRTOD
 1049|   471k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   471k|    }
 1056|   471k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  892|   471k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   471k|    {
  894|   471k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   471k|    {
  898|   471k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   471k|                           generic_strtod);
  900|   471k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   471k|    {
  732|   471k|        CharT* end{};
  733|   471k|        errno = 0;
  734|   471k|        value = strtod_cb(src, &end);
  735|   471k|        const auto saved_errno = errno;
  736|   471k|        auto chars_read = end - src;
  737|       |
  738|   471k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   471k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   471k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 376, False: 470k]
  |  |  ------------------
  ------------------
  740|    376|            return unexpected(e);
  741|    376|        }
  742|       |
  743|   470k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 94.3k, False: 376k]
  ------------------
  744|   470k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 94.3k, False: 0]
  ------------------
  745|  94.3k|            chars_read -= 2;
  746|  94.3k|        }
  747|       |
  748|   470k|        return chars_read;
  749|   471k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   471k|    {
  755|   471k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 463k, False: 7.99k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   463k|            auto first_space = read_until_classic_space(input.view());
  758|   463k|            input.assign(
  759|   463k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   463k|        }
  761|       |
  762|   471k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 94.3k, False: 376k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  94.3k|            else {
  767|  94.3k|                input.get_allocated_string().insert(0, L"0x");
  768|  94.3k|            }
  769|  94.3k|        }
  770|       |
  771|   471k|        return input.get_allocated_string().c_str();
  772|   471k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   471k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|   471k|        else {
  909|   471k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   471k|        }
  911|   471k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   471k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   471k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|   471k|        else if constexpr (std::is_same_v<T, long double>) {
  882|   471k|            return std::wcstold(str, str_end);
  883|   471k|        }
  884|   471k|#endif
  885|   471k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.70M|{
 2073|  1.70M|    const auto argcount = args.size();
 2074|  1.70M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 346k, False: 1.35M]
  |  Branch (2074:60): [True: 346k, False: 0]
  ------------------
 2075|   346k|        auto arg = args.get(0);
 2076|   346k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   346k|    static_cast<    \
  |  |  929|   346k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   346k|    }
 2078|       |
 2079|  1.35M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.35M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.35M|    SCN_UNLIKELY_ATTR
 2087|  1.35M|    {
 2088|  1.35M|        auto handler = format_handler<false, CharT>{
 2089|  1.35M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.35M|    static_cast<    \
  |  |  929|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.35M|    static_cast<    \
  |  |  929|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.35M|        return vscan_parse_format_string(format, handler);
 2091|  1.35M|    }
 2092|  1.35M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  3.15M|{
 1625|  3.15M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 2.49M, False: 660k]
  ------------------
 1626|  2.49M|        return false;
 1627|  2.49M|    }
 1628|   660k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 660k, False: 0]
  |  Branch (1628:39): [True: 660k, False: 0]
  ------------------
 1629|  3.15M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   519k|{
 1658|   519k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 519k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   519k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   519k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 519k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   519k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   519k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   519k|    static_cast<    \
  |  |  929|   519k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   519k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   519k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   519k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   519k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.1k, False: 489k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.1k|    }                                                  \
  |  |  |  | 3667|   519k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   489k|    return it.position();
 1675|   519k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|  1.13M|        : format_handler_base{argcount},
 1900|  1.13M|          parse_ctx{format},
 1901|  1.13M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.13M|    static_cast<    \
  |  |  929|  1.13M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.13M|    static_cast<    \
  |  |  929|  1.13M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.13M|    {
 1903|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  3.83M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  3.83M|    {
 1722|  3.83M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.83M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.83M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|  1.13M|        : contiguous_ctx(source, args, loc)
 1852|  1.13M|    {
 1853|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.13M|{
 2038|  1.13M|    const auto beg = handler.get_ctx().begin();
 2039|  1.13M|    detail::parse_format_string<false>(format, handler);
 2040|  1.13M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 1.03M]
  |  |  ------------------
  ------------------
 2041|   100k|        return unexpected(handler.error);
 2042|   100k|    }
 2043|  1.03M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.13M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  7.75M|    {
 2022|  7.75M|        return ctx.get();
 2023|  7.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  7.75M|    {
 1857|  7.75M|        return contiguous_ctx;
 1858|  7.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  2.17M|    {
 1907|  2.17M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.17M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.13M|{
 1681|  1.13M|    auto arg = ctx.arg(id);
 1682|  1.13M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.13M|    return arg;
 1686|  1.13M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.83M|    {
 1797|  3.83M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.83M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.83M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.83M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.83M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.83M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.83M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.83M|            visited_args_lower64 |= (1ull << id);
 1808|  3.83M|            return;
 1809|  3.83M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.83M|    {
 1782|  3.83M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.83M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.83M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.83M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.83M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.83M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.83M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.83M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   602k|    {
 1766|   602k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 602k, False: 0]
  |  |  ------------------
  ------------------
 1767|   602k|            error = err;
 1768|   602k|        }
 1769|   602k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  1.13M|    {
 1944|  1.13M|        return parse_ctx.next_arg_id();
 1945|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  1.13M|    {
 1985|  1.13M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.13M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.13M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.13M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.13M|        auto specs = detail::format_specs{};
 1998|  1.13M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.13M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.13M|            arg.type()};
 2001|       |
 2002|  1.13M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.13M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.13M]
  |  Branch (2003:29): [True: 0, False: 1.13M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.13M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.13M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.13M|        on_visit_scan_arg(
 2014|  1.13M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.13M|                                           get_ctx().locale()},
 2016|  1.13M|            arg);
 2017|  1.13M|        return parse_ctx.begin();
 2018|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|  1.13M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.13M|    {
 1701|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  1.13M|    {
 1956|  1.13M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.13M]
  |  Branch (1956:23): [True: 0, False: 1.13M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.13M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.13M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 1.03M]
  |  |  ------------------
  ------------------
 1963|   100k|            on_error(r.error());
 1964|   100k|        }
 1965|  1.03M|        else {
 1966|  1.03M|            get_ctx().advance_to(*r);
 1967|  1.03M|        }
 1968|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.83M|    {
 1729|  3.83M|        {
 1730|  3.83M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.83M]
  ------------------
 1731|  3.83M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.83M]
  ------------------
 1732|  3.83M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.83M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.83M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.83M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.83M|        }
 1739|       |
 1740|  3.83M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.83M, False: 0]
  ------------------
 1741|  3.83M|            return;
 1742|  3.83M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.83M|    {
 1777|  3.83M|        return error;
 1778|  3.83M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  11.4M|    {
 1773|  11.4M|        return static_cast<bool>(error);
 1774|  11.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|  1.35M|        : format_handler_base{argcount},
 1900|  1.35M|          parse_ctx{format},
 1901|  1.35M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.35M|    static_cast<    \
  |  |  929|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.35M|    static_cast<    \
  |  |  929|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.35M|    {
 1903|  1.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|  1.35M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  1.35M|    static_cast<    \
  |  |  929|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  1.35M|    {
 1830|  1.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.35M|{
 2038|  1.35M|    const auto beg = handler.get_ctx().begin();
 2039|  1.35M|    detail::parse_format_string<false>(format, handler);
 2040|  1.35M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 1.25M]
  |  |  ------------------
  ------------------
 2041|   100k|        return unexpected(handler.error);
 2042|   100k|    }
 2043|  1.25M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.35M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  9.29M|    {
 2022|  9.29M|        return ctx.get();
 2023|  9.29M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  9.29M|    {
 1834|  9.29M|        return ctx;
 1835|  9.29M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  2.61M|    {
 1907|  2.61M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.61M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.35M|{
 1681|  1.35M|    auto arg = ctx.arg(id);
 1682|  1.35M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.35M|    return arg;
 1686|  1.35M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  1.35M|    {
 1944|  1.35M|        return parse_ctx.next_arg_id();
 1945|  1.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  1.35M|    {
 1985|  1.35M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.35M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.35M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.35M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.35M|        auto specs = detail::format_specs{};
 1998|  1.35M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.35M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.35M|            arg.type()};
 2001|       |
 2002|  1.35M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.35M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.35M]
  |  Branch (2003:29): [True: 0, False: 1.35M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.35M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.35M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.35M|        on_visit_scan_arg(
 2014|  1.35M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.35M|                                           get_ctx().locale()},
 2016|  1.35M|            arg);
 2017|  1.35M|        return parse_ctx.begin();
 2018|  1.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|  1.35M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.35M|    {
 1701|  1.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.35M|    {
 1956|  1.35M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.35M]
  |  Branch (1956:23): [True: 0, False: 1.35M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.35M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.35M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 1.25M]
  |  |  ------------------
  ------------------
 1963|   100k|            on_error(r.error());
 1964|   100k|        }
 1965|  1.25M|        else {
 1966|  1.25M|            get_ctx().advance_to(*r);
 1967|  1.25M|        }
 1968|  1.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  1.45M|{
 2053|  1.45M|    const auto argcount = args.size();
 2054|  1.45M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 314k, False: 1.13M]
  |  Branch (2054:60): [True: 314k, False: 0]
  ------------------
 2055|   314k|        auto arg = args.get(0);
 2056|   314k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   314k|    static_cast<    \
  |  |  929|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   314k|    }
 2058|       |
 2059|  1.13M|    auto handler = format_handler<true, CharT>{
 2060|  1.13M|        ranges::subrange<const CharT*>{source.data(),
 2061|  1.13M|                                       source.data() + source.size()},
 2062|  1.13M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.13M|    static_cast<    \
  |  |  929|  1.13M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.13M|    static_cast<    \
  |  |  929|  1.13M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  1.13M|    return vscan_parse_format_string(format, handler);
 2064|  1.45M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   471k|{
 1638|   471k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   471k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 471k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   471k|    auto reader =
 1644|   471k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   471k|            ranges::subrange<const CharT*>{source.data(),
 1646|   471k|                                           source.data() + source.size()},
 1647|   471k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   471k|    static_cast<    \
  |  |  929|   471k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   471k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   471k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   471k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   471k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   471k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.1k, False: 441k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.1k|    }                                                  \
  |  |  |  | 3667|   471k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   441k|    return ranges::distance(source.data(), it);
 1650|   471k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   834k|{
 2053|   834k|    const auto argcount = args.size();
 2054|   834k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 164k, False: 669k]
  |  Branch (2054:60): [True: 164k, False: 0]
  ------------------
 2055|   164k|        auto arg = args.get(0);
 2056|   164k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   164k|    static_cast<    \
  |  |  929|   164k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   164k|    }
 2058|       |
 2059|   669k|    auto handler = format_handler<true, CharT>{
 2060|   669k|        ranges::subrange<const CharT*>{source.data(),
 2061|   669k|                                       source.data() + source.size()},
 2062|   669k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   669k|    return vscan_parse_format_string(format, handler);
 2064|   834k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.66M|{
 1625|  1.66M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.33M, False: 329k]
  ------------------
 1626|  1.33M|        return false;
 1627|  1.33M|    }
 1628|   329k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 329k, False: 0]
  |  Branch (1628:39): [True: 329k, False: 0]
  ------------------
 1629|  1.66M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   247k|{
 1638|   247k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   247k|    auto reader =
 1644|   247k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   247k|            ranges::subrange<const CharT*>{source.data(),
 1646|   247k|                                           source.data() + source.size()},
 1647|   247k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   247k|    static_cast<    \
  |  |  929|   247k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   247k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60.2k, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  60.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  60.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  60.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  60.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  60.2k|    }                                                  \
  |  |  |  | 3667|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   186k|    return ranges::distance(source.data(), it);
 1650|   247k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   669k|        : format_handler_base{argcount},
 1900|   669k|          parse_ctx{format},
 1901|   669k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   669k|    {
 1903|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   669k|        : contiguous_ctx(source, args, loc)
 1852|   669k|    {
 1853|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   669k|{
 2038|   669k|    const auto beg = handler.get_ctx().begin();
 2039|   669k|    detail::parse_format_string<false>(format, handler);
 2040|   669k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 200k, False: 468k]
  |  |  ------------------
  ------------------
 2041|   200k|        return unexpected(handler.error);
 2042|   200k|    }
 2043|   468k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   669k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  4.28M|    {
 2022|  4.28M|        return ctx.get();
 2023|  4.28M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  4.28M|    {
 1857|  4.28M|        return contiguous_ctx;
 1858|  4.28M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  1.13M|    {
 1907|  1.13M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.13M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   669k|{
 1681|   669k|    auto arg = ctx.arg(id);
 1682|   669k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   669k|    return arg;
 1686|   669k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   669k|    {
 1944|   669k|        return parse_ctx.next_arg_id();
 1945|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   669k|    {
 1985|   669k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   669k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   669k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 669k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   669k|        auto specs = detail::format_specs{};
 1998|   669k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   669k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   669k|            arg.type()};
 2001|       |
 2002|   669k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   669k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 669k]
  |  Branch (2003:29): [True: 0, False: 669k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   669k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   669k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   669k|        on_visit_scan_arg(
 2014|   669k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   669k|                                           get_ctx().locale()},
 2016|   669k|            arg);
 2017|   669k|        return parse_ctx.begin();
 2018|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   669k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   669k|    {
 1701|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   669k|    {
 1956|   669k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 669k]
  |  Branch (1956:23): [True: 0, False: 669k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   669k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   669k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 200k, False: 468k]
  |  |  ------------------
  ------------------
 1963|   200k|            on_error(r.error());
 1964|   200k|        }
 1965|   468k|        else {
 1966|   468k|            get_ctx().advance_to(*r);
 1967|   468k|        }
 1968|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   833k|{
 2073|   833k|    const auto argcount = args.size();
 2074|   833k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 164k, False: 669k]
  |  Branch (2074:60): [True: 164k, False: 0]
  ------------------
 2075|   164k|        auto arg = args.get(0);
 2076|   164k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   164k|    static_cast<    \
  |  |  929|   164k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   164k|    }
 2078|       |
 2079|   669k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 669k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   669k|    SCN_UNLIKELY_ATTR
 2087|   669k|    {
 2088|   669k|        auto handler = format_handler<false, CharT>{
 2089|   669k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   669k|        return vscan_parse_format_string(format, handler);
 2091|   669k|    }
 2092|   669k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   246k|{
 1658|   246k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   246k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   246k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 246k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   246k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   246k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   246k|    static_cast<    \
  |  |  929|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   246k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   246k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60.2k, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  60.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  60.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  60.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  60.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  60.2k|    }                                                  \
  |  |  |  | 3667|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   186k|    return it.position();
 1675|   246k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   669k|        : format_handler_base{argcount},
 1900|   669k|          parse_ctx{format},
 1901|   669k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   669k|    {
 1903|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   669k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   669k|    {
 1830|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   669k|{
 2038|   669k|    const auto beg = handler.get_ctx().begin();
 2039|   669k|    detail::parse_format_string<false>(format, handler);
 2040|   669k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 200k, False: 468k]
  |  |  ------------------
  ------------------
 2041|   200k|        return unexpected(handler.error);
 2042|   200k|    }
 2043|   468k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   669k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  4.28M|    {
 2022|  4.28M|        return ctx.get();
 2023|  4.28M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  4.28M|    {
 1834|  4.28M|        return ctx;
 1835|  4.28M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  1.13M|    {
 1907|  1.13M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.13M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   669k|{
 1681|   669k|    auto arg = ctx.arg(id);
 1682|   669k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   669k|    return arg;
 1686|   669k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   669k|    {
 1944|   669k|        return parse_ctx.next_arg_id();
 1945|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   669k|    {
 1985|   669k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   669k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   669k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 669k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   669k|        auto specs = detail::format_specs{};
 1998|   669k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   669k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   669k|            arg.type()};
 2001|       |
 2002|   669k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   669k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 669k]
  |  Branch (2003:29): [True: 0, False: 669k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   669k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   669k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   669k|        on_visit_scan_arg(
 2014|   669k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   669k|                                           get_ctx().locale()},
 2016|   669k|            arg);
 2017|   669k|        return parse_ctx.begin();
 2018|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   669k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   669k|    {
 1701|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   669k|    {
 1956|   669k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 669k]
  |  Branch (1956:23): [True: 0, False: 669k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   669k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   669k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 200k, False: 468k]
  |  |  ------------------
  ------------------
 1963|   200k|            on_error(r.error());
 1964|   200k|        }
 1965|   468k|        else {
 1966|   468k|            get_ctx().advance_to(*r);
 1967|   468k|        }
 1968|   669k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   157k|{
 2099|   157k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   157k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   173k|{
 2099|   173k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   173k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  82.3k|{
 2099|  82.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  82.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  82.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  82.2k|{
 2099|  82.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  82.2k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  3.34k|{
 1351|  3.34k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  3.34k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  3.34k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  3.34k|            return transcode_to_string_impl_to32(src, dest);
 1362|  3.34k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  3.34k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  3.34k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  3.34k|{
 1244|  3.34k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  3.34k|    auto it = src.begin();
 1247|  1.10M|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 1.09M, False: 3.34k]
  ------------------
 1248|  1.09M|        auto res = get_next_code_point(
 1249|  1.09M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|  1.09M|                                                                 src.end()));
 1251|  1.09M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.45k, False: 1.09M]
  |  |  ------------------
  ------------------
 1252|  4.45k|            dest.push_back(DestCharT{0xfffd});
 1253|  4.45k|        }
 1254|  1.09M|        else {
 1255|  1.09M|            dest.push_back(res.value);
 1256|  1.09M|        }
 1257|  1.09M|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|  1.09M|    }
 1259|  3.34k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.54M|{
 1169|  1.54M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.54M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.54M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.6k, False: 1.50M]
  |  |  ------------------
  ------------------
 1173|  43.6k|        return {get_start_for_next_code_point(input),
 1174|  43.6k|                detail::invalid_code_point};
 1175|  43.6k|    }
 1176|  1.50M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.27k, False: 1.49M]
  |  |  ------------------
  ------------------
 1177|  5.27k|        return {input.end(), detail::invalid_code_point};
 1178|  5.27k|    }
 1179|       |
 1180|  1.49M|    return {input.begin() + len,
 1181|  1.49M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.50M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  43.6k|{
 1155|  43.6k|    auto it = input.begin();
 1156|   354k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 345k, False: 9.38k]
  ------------------
 1157|   345k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 34.3k, False: 311k]
  ------------------
 1158|  34.3k|            break;
 1159|  34.3k|        }
 1160|   345k|    }
 1161|  43.6k|    return it;
 1162|  43.6k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  42.2M|    constexpr parse_error(code c) : m_code(c)
  808|  42.2M|    {
  809|  42.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  42.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  42.2M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  15.8M|    {
  823|  15.8M|        return a.m_code == b.m_code;
  824|  15.8M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1714|  2.22M|    clocale_restorer(int cat) : m_category(cat)
 1715|  2.22M|    {
 1716|  2.22M|        const auto loc = std::setlocale(cat, nullptr);
 1717|  2.22M|        std::strcpy(m_locbuf, loc);
 1718|  2.22M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1720|  2.22M|    {
 1721|       |        // Restore locale to what it was before
 1722|  2.22M|        std::setlocale(m_category, m_locbuf);
 1723|  2.22M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1743|  2.22M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1744|  2.22M|    {
 1745|  2.22M|        std::setlocale(cat, "C");
 1746|  2.22M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  3.83M|    {
 2925|  3.83M|        return m_msg == nullptr;
 2926|  3.83M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3633|  3.79M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  26.0M|{
  458|  26.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  26.0M|        static_cast<unsigned char>(ch))];
  460|  26.0M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   234k|{
  469|   234k|    return static_cast<unsigned char>(ch) <= 127;
  470|   234k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  5.95M|{
  539|  5.95M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  5.95M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  17.8M|{
  784|  17.8M|    return e != eof_error::good;
  785|  17.8M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  49.0k|{
  798|  49.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  49.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  49.0k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  49.0k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   233k|{
  845|   233k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   233k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   233k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   233k|    return parse_error::eof;
  847|   233k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.57M|{
  854|  5.57M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.57M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.57M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 85.7k, False: 5.48M]
  ------------------
  859|  85.7k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  85.7k|    }
  861|       |
  862|  5.48M|    return scan_error{code, msg};
  863|  5.57M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.57M|{
  868|  5.57M|    return [code, msg](parse_error err) {
  869|  5.57M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.57M|    };
  871|  5.57M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|  4.19M|{
 2209|  4.19M|    unsigned char running_diff{0};
 2210|  15.7M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 11.5M, False: 4.19M]
  ------------------
 2211|  11.5M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|  11.5M|    }
 2213|  4.19M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 119k, False: 4.07M]
  |  Branch (2213:33): [True: 23.6k, False: 4.04M]
  ------------------
 2214|  4.19M|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  31.5M|{
 3112|  31.5M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  31.5M|}
_ZN3scn2v34impl11char_to_intEw:
 3115|  4.99M|{
 3116|  4.99M|#if WCHAR_MIN < 0
 3117|  4.99M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 4.97M, False: 20.8k]
  |  Branch (3117:20): [True: 3.11M, False: 1.86M]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|  3.11M|        return char_to_int(static_cast<char>(ch));
 3122|  3.11M|    }
 3123|  1.88M|    return 255;
 3124|  4.99M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  3.22M|{
 5997|  3.22M|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 3.22M]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|  3.22M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 3.22M]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|  3.22M|    return {};
 6012|  3.22M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  4.69M|    {
  304|  4.69M|        ranges::advance(x, n);
  305|  4.69M|        return x;
  306|  4.69M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  4.69M|    {
  268|  4.69M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.69M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  4.69M|    {
  151|  4.69M|        i += n;
  152|  4.69M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  5.54M|    {
  108|  5.54M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.54M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  5.54M|    {
   87|  5.54M|        return s - i;
   88|  5.54M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.01M|    {
  304|  3.01M|        ranges::advance(x, n);
  305|  3.01M|        return x;
  306|  3.01M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.01M|    {
  268|  3.01M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.01M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.01M|    {
  151|  3.01M|        i += n;
  152|  3.01M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   865k|    {
  108|   865k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   865k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   865k|    {
   87|   865k|        return s - i;
   88|   865k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.87M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  1.87M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.87M|        auto beg = r.begin();
  990|  1.87M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.87M, False: 0]
  ------------------
  991|  1.87M|            return false;
  992|  1.87M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  1.87M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  49.7M|    {
  763|  49.7M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  49.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  49.7M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|  4.94M|{
 1845|  4.94M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  4.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  4.94M|    else {
 1856|  4.94M|        auto it = range.begin();
 1857|  4.94M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 3.05M, False: 1.89M]
  ------------------
 1858|  3.05M|            return ranges::next(it, count);
 1859|  3.05M|        }
 1860|       |
 1861|  7.54M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 5.68M, False: 1.85M]
  ------------------
 1862|  5.68M|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 40.4k, False: 5.64M]
  ------------------
 1863|  40.4k|                return unexpected(eof_error::eof);
 1864|  40.4k|            }
 1865|  5.68M|        }
 1866|       |
 1867|  1.85M|        return it;
 1868|  1.89M|    }
 1869|  4.94M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  4.94M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  4.94M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  4.94M|        else {
 1106|  4.94M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 4.94M, False: 0]
  ------------------
 1107|  4.94M|                return static_cast<size_t>(
 1108|  4.94M|                    r.begin().parent()->chars_available() -
 1109|  4.94M|                    r.begin().position());
 1110|  4.94M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  4.94M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  4.94M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  4.54M|        : m_fptr([](storage fn,
  743|  4.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.54M|              cvref<T> obj = *get<T>(fn);
  745|  4.54M|              if constexpr (std::is_void_v<R>) {
  746|  4.54M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.54M|              }
  748|  4.54M|              else {
  749|  4.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.54M|              }
  751|  4.54M|          }),
  752|  4.54M|          m_storage(std::addressof(f))
  753|  4.54M|    {
  754|  4.54M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  24.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.8M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  24.8M|              else {
  749|  24.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.8M|              }
  751|  24.8M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  24.8M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  24.8M|        else if constexpr (std::is_object_v<T>) {
  688|  24.8M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  24.8M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  4.54M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.54M|        {
  662|  4.54M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  13.9M|    {
  763|  13.9M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  13.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  13.9M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.49M|        : m_fptr([](storage fn,
  743|  3.49M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.49M|              cvref<T> obj = *get<T>(fn);
  745|  3.49M|              if constexpr (std::is_void_v<R>) {
  746|  3.49M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.49M|              }
  748|  3.49M|              else {
  749|  3.49M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.49M|              }
  751|  3.49M|          }),
  752|  3.49M|          m_storage(std::addressof(f))
  753|  3.49M|    {
  754|  3.49M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  6.35M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.35M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.35M|              else {
  749|  6.35M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.35M|              }
  751|  6.35M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.35M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.35M|        else if constexpr (std::is_object_v<T>) {
  688|  6.35M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.35M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.49M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.49M|        {
  662|  3.49M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|  1.35M|    {
 6026|  1.35M|        const bool need_skipped_width =
 6027|  1.35M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 1.35M]
  |  Branch (6027:33): [True: 0, False: 1.35M]
  ------------------
 6028|  1.35M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  1.35M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 1.35M]
  ------------------
 6032|  1.35M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 1.35M]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  1.35M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 1.35M, False: 0]
  |  Branch (6036:56): [True: 1.35M, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.35M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 1.35M]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  2.69M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.35M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.35M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.35M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.5k, False: 1.33M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  17.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  17.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  17.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  17.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  17.5k|    }                                                  \
  |  |  |  | 3667|  1.35M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  2.69M|                            make_eof_scan_error));
 6047|       |
 6048|  2.69M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 1.33M]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  1.33M|            return result_type{it, 0};
 6056|  2.69M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|  1.35M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  3.62M|{
 1964|  3.62M|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  3.62M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  3.62M|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  3.62M|    else {
 1949|  3.62M|        auto first = range.begin();
 1950|  20.0M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 20.0M, False: 31.9k]
  ------------------
 1951|  20.0M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 3.59M, False: 16.4M]
  ------------------
 1952|  3.59M|                return first;
 1953|  3.59M|            }
 1954|  20.0M|        }
 1955|  31.9k|        return first;
 1956|  3.62M|    }
 1957|  3.62M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  3.24M|    {
  108|  3.24M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.24M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  3.24M|    {
   94|  3.24M|        iter_difference_t<I> counter{0};
   95|  32.6M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 29.3M, False: 3.24M]
  ------------------
   96|  29.3M|            ++i;
   97|  29.3M|            ++counter;
   98|  29.3M|        }
   99|  3.24M|        return counter;
  100|  3.24M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.57M|    return [code, msg](parse_error err) {
  869|  5.57M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.57M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|   689k|    {
 1768|   689k|        auto stdloc = loc.get<std::locale>();
 1769|   689k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   689k|        grouping = numpunct.grouping();
 1771|   689k|        thousands_sep =
 1772|   689k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 689k]
  ------------------
 1773|   689k|        decimal_point = numpunct.decimal_point();
 1774|   689k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|   689k|{
 1705|   689k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 689k, False: 0]
  ------------------
 1706|   689k|        return std::use_facet<Facet>(stdloc);
 1707|   689k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   689k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|  5.29M|{
 1834|  5.29M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.7k, False: 5.27M]
  |  |  ------------------
  ------------------
 1835|  23.7k|        return unexpected(e);
 1836|  23.7k|    }
 1837|       |
 1838|  5.27M|    return ranges::next(range.begin());
 1839|  5.29M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  7.68M|{
  950|  7.68M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  7.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.8k, False: 7.64M]
  |  |  ------------------
  ------------------
  951|  46.8k|        return eof_error::eof;
  952|  46.8k|    }
  953|  7.64M|    return eof_error::good;
  954|  7.68M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  10.8M|{
  944|  10.8M|    return is_range_eof(r.begin(), r.end());
  945|  10.8M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  10.8M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  10.8M|    {
  937|  10.8M|        return begin == end;
  938|  10.8M|    }
  939|  10.8M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  5.27M|    {
  296|  5.27M|        ++x;
  297|  5.27M|        return x;
  298|  5.27M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|  2.02M|{
 3130|  2.02M|    auto r = read_one_of_code_unit(range, "+-");
 3131|  2.02M|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 1.57M, False: 455k]
  ------------------
 3132|  1.57M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 1.57M, False: 309]
  ------------------
 3133|  1.57M|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  1.57M|        }
 3135|    309|        return unexpected(eof_error::eof);
 3136|  1.57M|    }
 3137|       |
 3138|   455k|    auto& it = *r;
 3139|   455k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 185k, False: 269k]
  ------------------
 3140|   185k|        return std::pair{it, sign_type::minus_sign};
 3141|   185k|    }
 3142|   269k|    return std::pair{it, sign_type::plus_sign};
 3143|   455k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|  3.53M|{
 2261|  3.53M|    auto it = read_code_unit(range);
 2262|  3.53M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.0k, False: 3.52M]
  |  |  ------------------
  ------------------
 2263|  14.0k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  14.0k|    }
 2265|       |
 2266|  6.67M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 6.67M, False: 2.89M]
  ------------------
 2267|  6.67M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 628k, False: 6.04M]
  ------------------
 2268|   628k|            return *it;
 2269|   628k|        }
 2270|  6.67M|    }
 2271|       |
 2272|  2.89M|    return unexpected(parse_error::error);
 2273|  3.52M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|  4.94M|{
 2220|  4.94M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  4.94M|    else {
 2233|  4.94M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  4.94M|            if (ch < 'A' || ch > 'Z') {
 2235|  4.94M|                return ch;
 2236|  4.94M|            }
 2237|  4.94M|            return static_cast<char_type>(ch +
 2238|  4.94M|                                          static_cast<char_type>('a' - 'A'));
 2239|  4.94M|        };
 2240|       |
 2241|  4.94M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  4.94M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.94M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.94M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.4k, False: 4.90M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  40.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  40.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  40.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  40.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  40.4k|    }                                                  \
  |  |  |  | 3667|  4.94M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  4.90M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  4.90M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  4.90M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75M, False: 149k]
  |  |  ------------------
  ------------------
 2246|  4.90M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  4.90M|                    return ascii_tolower(a) ==
 2248|  4.90M|                           static_cast<detail::char_t<Range>>(b);
 2249|  4.90M|                }))) {
 2250|  4.75M|            return unexpected(parse_error::error);
 2251|  4.75M|        }
 2252|       |
 2253|   149k|        return it;
 2254|  4.90M|    }
 2255|  4.94M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2233|  5.64M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  5.64M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 5.14M, False: 499k]
  |  Branch (2234:29): [True: 413k, False: 86.6k]
  ------------------
 2235|  5.55M|                return ch;
 2236|  5.55M|            }
 2237|  86.6k|            return static_cast<char_type>(ch +
 2238|  86.6k|                                          static_cast<char_type>('a' - 'A'));
 2239|  5.64M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|  1.75M|{
 2135|  1.75M|    auto it = read_code_unit(range);
 2136|  1.75M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.73k, False: 1.74M]
  |  |  ------------------
  ------------------
 2137|  9.73k|        return unexpected(make_eof_parse_error(it.error()));
 2138|  9.73k|    }
 2139|       |
 2140|  1.74M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.41M, False: 332k]
  |  |  ------------------
  ------------------
 2141|  1.74M|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  1.41M|        return unexpected(parse_error::error);
 2143|  1.41M|    }
 2144|       |
 2145|   332k|    return *it;
 2146|  1.74M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|  3.62M|{
 1984|  3.62M|    auto it = read_while_code_unit(range, pred);
 1985|  3.62M|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 1.46M, False: 2.15M]
  ------------------
 1986|  1.46M|        return unexpected(parse_error::error);
 1987|  1.46M|    }
 1988|  2.15M|    return it;
 1989|  3.62M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|  1.67M|    {
 1609|  1.67M|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  1.67M|                           ranges::common_range<Range>) {
 1626|  1.67M|            auto beg_seg = range.begin().contiguous_segment();
 1627|  1.67M|            auto end_seg = range.end().contiguous_segment();
 1628|  1.67M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 226k, False: 1.44M]
  |  |  ------------------
  ------------------
 1629|  1.67M|                             detail::to_address(end_seg.end()))) {
 1630|   226k|                auto& str = m_storage.emplace();
 1631|   226k|                str.reserve(range.end().position() - range.begin().position());
 1632|   226k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|   226k|                m_view = string_view_type{str};
 1634|   226k|                return;
 1635|   226k|            }
 1636|       |
 1637|  1.44M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|  1.44M|                                                            end_seg.data());
 1639|  1.44M|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  1.67M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|  11.3M|    {
 1570|  11.3M|        return m_view;
 1571|  11.3M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|  6.88M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  1.24M|    {
 6068|  1.24M|        const bool need_skipped_width =
 6069|  1.24M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.24M]
  |  Branch (6069:33): [True: 0, False: 1.24M]
  ------------------
 6070|  1.24M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.24M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.24M]
  ------------------
 6073|  1.24M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.24M]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.24M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.24M, False: 0]
  ------------------
 6082|  1.24M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.24M]
  ------------------
 6083|  1.24M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.24M|        return result_type{rng.begin(), 0};
 6107|  1.24M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  2.37M|{
 1834|  2.37M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.54k, False: 2.37M]
  |  |  ------------------
  ------------------
 1835|  5.54k|        return unexpected(e);
 1836|  5.54k|    }
 1837|       |
 1838|  2.37M|    return ranges::next(range.begin());
 1839|  2.37M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  4.45M|{
  950|  4.45M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.8k, False: 4.42M]
  |  |  ------------------
  ------------------
  951|  23.8k|        return eof_error::eof;
  952|  23.8k|    }
  953|  4.42M|    return eof_error::good;
  954|  4.45M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  4.45M|{
  944|  4.45M|    return is_range_eof(r.begin(), r.end());
  945|  4.45M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  4.45M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.45M|    {
  937|  4.45M|        return begin == end;
  938|  4.45M|    }
  939|  4.45M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  2.37M|    {
  296|  2.37M|        ++x;
  297|  2.37M|        return x;
  298|  2.37M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  1.62M|{
 3130|  1.62M|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.62M|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 1.26M, False: 364k]
  ------------------
 3132|  1.26M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 1.26M, False: 102]
  ------------------
 3133|  1.26M|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  1.26M|        }
 3135|    102|        return unexpected(eof_error::eof);
 3136|  1.26M|    }
 3137|       |
 3138|   364k|    auto& it = *r;
 3139|   364k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 159k, False: 205k]
  ------------------
 3140|   159k|        return std::pair{it, sign_type::minus_sign};
 3141|   159k|    }
 3142|   205k|    return std::pair{it, sign_type::plus_sign};
 3143|   364k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  1.89M|{
 2261|  1.89M|    auto it = read_code_unit(range);
 2262|  1.89M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.44k, False: 1.88M]
  |  |  ------------------
  ------------------
 2263|  2.44k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  2.44k|    }
 2265|       |
 2266|  3.54M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 3.54M, False: 1.48M]
  ------------------
 2267|  3.54M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 403k, False: 3.14M]
  ------------------
 2268|   403k|            return *it;
 2269|   403k|        }
 2270|  3.54M|    }
 2271|       |
 2272|  1.48M|    return unexpected(parse_error::error);
 2273|  1.88M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  4.23M|{
 2220|  4.23M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|  4.23M|                  std::is_same_v<char_type, char>) {
 2224|  4.23M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 38.9k, False: 4.19M]
  ------------------
 2225|  38.9k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|  38.9k|        }
 2227|  4.19M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 4.04M, False: 142k]
  ------------------
 2228|  4.04M|            return unexpected(parse_error::error);
 2229|  4.04M|        }
 2230|   142k|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|  4.23M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   487k|{
 2135|   487k|    auto it = read_code_unit(range);
 2136|   487k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.09k, False: 484k]
  |  |  ------------------
  ------------------
 2137|  3.09k|        return unexpected(make_eof_parse_error(it.error()));
 2138|  3.09k|    }
 2139|       |
 2140|   484k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 398k, False: 85.9k]
  |  |  ------------------
  ------------------
 2141|   484k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   398k|        return unexpected(parse_error::error);
 2143|   398k|    }
 2144|       |
 2145|  85.9k|    return *it;
 2146|   484k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  6.14M|    {
 1491|  6.14M|        return sv;
 1492|  6.14M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|   914k|{
 1964|   914k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   914k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|   914k|{
 1945|   914k|    if constexpr (ranges::common_range<Range>) {
 1946|   914k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|   914k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  1.60M|{
 2940|  1.60M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.60M, False: 0]
  ------------------
 2941|  1.60M|        auto it = read_while_classic_space(range);
 2942|  1.60M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.60M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.6k, False: 1.58M]
  |  |  ------------------
  ------------------
 2944|  13.6k|            return unexpected(e);
 2945|  13.6k|        }
 2946|       |
 2947|  1.58M|        return it;
 2948|  1.60M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.60M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  1.60M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  1.60M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  1.60M|        auto buf = make_contiguous_buffer(range);
 2109|  1.60M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  1.60M|        return ranges::next(range.begin(),
 2111|  1.60M|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  1.60M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  1.60M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.60M|                  ranges::sized_range<Range>) {
 1674|  1.60M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.60M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|  1.60M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.60M|    {
 1478|  1.60M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  5.00M|    {
  304|  5.00M|        ranges::advance(x, n);
  305|  5.00M|        return x;
  306|  5.00M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  6.67M|    {
  268|  6.67M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.67M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  6.67M|    {
  181|  31.8M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 25.2M, False: 6.67M]
  ------------------
  182|  25.2M|            ++i;
  183|  25.2M|        }
  184|  6.67M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   436k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   436k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   436k|            auto rd = make_reader<T, char_type>();
 6195|   436k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 436k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   436k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 436k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   436k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   436k|                return impl(rd, range, value);
 6202|   436k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   436k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  2.49M|    {
 3029|  2.49M|        reader_error_handler eh{};
 3030|  2.49M|        get_derived().check_specs_impl(specs, eh);
 3031|  2.49M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|  2.49M|        return {};
 3035|  2.49M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3039|  2.49M|    {
 3040|  2.49M|        return static_cast<Derived&>(*this);
 3041|  2.49M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  2.49M|    {
 4134|  2.49M|        detail::check_float_type_specs(specs, eh);
 4135|  2.49M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   436k|    {
 6113|   436k|        const bool need_skipped_width =
 6114|   436k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 436k]
  |  Branch (6114:33): [True: 0, False: 436k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   436k|        auto it = rng.begin();
 6118|   436k|        std::ptrdiff_t prefix_width = 0;
 6119|   436k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 436k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   436k|        else {
 6127|   436k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   436k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   436k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   436k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.25k, False: 431k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.25k|    }                                                  \
  |  |  |  | 3667|   436k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   431k|            std::tie(it, prefix_width) = prefix_result;
 6129|   431k|        }
 6130|   431k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   431k|        std::ptrdiff_t value_width = 0;
 6134|   431k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 431k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   431k|        else {
 6150|   431k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   431k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   431k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 28.2k, False: 403k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  28.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  28.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  28.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  28.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  28.2k|    }                                                  \
  |  | 3667|   431k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   403k|                                             specs, value, loc));
 6152|       |
 6153|   403k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 403k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   403k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   403k|        std::ptrdiff_t postfix_width = 0;
 6162|   403k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 399k, False: 4.27k]
  ------------------
 6163|   399k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   399k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   399k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   399k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 399k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   399k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   399k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   399k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   399k|                                 value_width));
 6167|   399k|            std::tie(it, postfix_width) = postfix_result;
 6168|   399k|        }
 6169|       |
 6170|   403k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   403k|                                                 value_width, postfix_width);
 6172|   403k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 403k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   403k|        return it;
 6177|   403k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3023|  5.74M|    {
 3024|  5.74M|        return true;
 3025|  5.74M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4205|  2.46M|    {
 4206|  2.46M|        unsigned options{};
 4207|  2.46M|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 689k, False: 1.77M]
  ------------------
 4208|   689k|            options |= float_reader_base::allow_thsep;
 4209|   689k|        }
 4210|       |
 4211|  2.46M|        SCN_GCC_COMPAT_PUSH
 4212|  2.46M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|  2.46M|        switch (specs.type) {
 4215|   372k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 372k, False: 2.08M]
  ------------------
 4216|   372k|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|  58.8k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 58.8k, False: 2.40M]
  ------------------
 4219|  58.8k|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|   749k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 749k, False: 1.71M]
  ------------------
 4222|   749k|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|   590k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 590k, False: 1.87M]
  ------------------
 4225|   590k|                return options | float_reader_base::allow_scientific |
 4226|   590k|                       float_reader_base::allow_fixed;
 4227|       |
 4228|   689k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 689k, False: 1.77M]
  ------------------
 4229|   689k|                return options | float_reader_base::allow_scientific |
 4230|   689k|                       float_reader_base::allow_fixed |
 4231|   689k|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 2.46M]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|  2.46M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|  2.46M|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|  2.46M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3648|  2.46M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1758|  3.44M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1519|  6.88M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3679|  1.06M|    {
 3680|  1.06M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|  1.06M|        const std::ptrdiff_t sign_len =
 3683|  1.06M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 242k, False: 819k]
  ------------------
 3684|       |
 3685|  1.06M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.06M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.06M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.06M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.4k, False: 1.03M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  24.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  24.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  24.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  24.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  24.4k|    }                                                  \
  |  |  |  | 3667|  1.06M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|  1.03M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|  1.06M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4045|  3.28M|    {
 4046|  3.28M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 3.28M, False: 0]
  ------------------
 4047|  3.28M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 3.28M, False: 0]
  ------------------
 4048|  3.28M|            return;
 4049|  3.28M|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|  3.76M|    {
 1575|  3.76M|        return m_storage.has_value();
 1576|  3.76M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  2.20M|    {
 1580|  2.20M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  2.20M|        return *m_storage;
 1582|  2.20M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   431k|    {
 4159|   431k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   431k|#if !SCN_DISABLE_LOCALE
 4162|   431k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 119k, False: 311k]
  ------------------
 4163|   119k|            return read_impl<Range>(
 4164|   119k|                range, rd,
 4165|   119k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   119k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   119k|                },
 4168|   119k|                value, loc);
 4169|   119k|        }
 4170|   311k|#endif
 4171|       |
 4172|   311k|        return read_impl<Range>(
 4173|   311k|            range, rd,
 4174|   311k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   311k|                return r.read_source(SCN_FWD(args)...);
 4176|   311k|            },
 4177|   311k|            value);
 4178|   431k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   596k|    {
 4195|   596k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   596k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.3k, False: 564k]
  |  |  ------------------
  ------------------
 4197|  32.3k|            return unexpected(r.error());
 4198|  32.3k|        }
 4199|       |
 4200|   564k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   564k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   564k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   564k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.34k, False: 559k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.34k|    }                                                  \
  |  |  |  | 3667|   564k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   559k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   559k|        return ranges::next(range.begin(), n);
 4202|   564k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.85M|    {
  763|  1.85M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.85M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   119k|        : m_fptr([](storage fn,
  743|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   119k|              cvref<T> obj = *get<T>(fn);
  745|   119k|              if constexpr (std::is_void_v<R>) {
  746|   119k|                  obj(static_cast<decltype(args)>(args)...);
  747|   119k|              }
  748|   119k|              else {
  749|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   119k|              }
  751|   119k|          }),
  752|   119k|          m_storage(std::addressof(f))
  753|   119k|    {
  754|   119k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   119k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   119k|              else {
  749|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   119k|              }
  751|   119k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   119k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   119k|        else if constexpr (std::is_object_v<T>) {
  688|   119k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   119k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|   119k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   119k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   119k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3667|   378k|    {
 3668|   378k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   378k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   378k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 378k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   378k|        return read_source_impl(range);
 3674|   378k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3693|  1.85M|    {
 3694|  1.85M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  1.85M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.85M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.85M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.85M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.85M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|  1.85M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|  1.85M|        auto it = sign_result.first;
 3697|  1.85M|        m_sign = sign_result.second;
 3698|       |
 3699|  1.85M|        auto digits_begin = it;
 3700|  1.85M|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|  1.85M|        else {
 3727|  1.85M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|  1.85M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.85M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 100k, False: 1.75M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   100k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   100k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   100k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   100k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   100k|    }                                                  \
  |  | 3667|  1.85M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|  1.75M|                it,
 3729|  1.75M|                do_read_source_impl(
 3730|  1.75M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|  1.75M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|  1.75M|        }
 3733|       |
 3734|  1.85M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|  1.75M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 1.74M, False: 9.68k]
  |  Branch (3736:48): [True: 1.73M, False: 9.72k]
  ------------------
 3737|  1.75M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 1.67M, False: 61.9k]
  ------------------
 3738|  1.75M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 1.66M, False: 3.93k]
  ------------------
 3739|  1.66M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|  1.66M|        }
 3741|       |
 3742|  1.75M|        handle_separators();
 3743|       |
 3744|  1.75M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 1.75M]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|  1.75M|        return it;
 3757|  1.75M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3988|  1.85M|    {
 3989|  1.85M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|  1.85M|        const bool allowed_nonhex =
 3991|  1.85M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|  1.85M|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|  1.85M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 1.83M, False: 19.4k]
  |  Branch (3994:45): [True: 0, False: 1.83M]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|  1.85M|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 19.4k, False: 1.83M]
  ------------------
 4000|  19.4k|            return *r;
 4001|  19.4k|        }
 4002|       |
 4003|  1.83M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 1.76M, False: 65.8k]
  |  Branch (4003:45): [True: 1.91k, False: 1.76M]
  ------------------
 4004|  1.91k|            return unexpected(r.error());
 4005|  1.91k|        }
 4006|  1.83M|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 65.8k, False: 1.76M]
  ------------------
 4007|  65.8k|            return *r;
 4008|  65.8k|        }
 4009|       |
 4010|  1.76M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 1.24M, False: 522k]
  |  Branch (4010:28): [True: 394k, False: 848k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   394k|            auto it = range.begin();
 4014|       |
 4015|   394k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 16.4k, False: 378k]
  ------------------
 4016|  16.4k|                m_kind = float_kind::hex_with_prefix;
 4017|  16.4k|                it = *r;
 4018|  16.4k|            }
 4019|   378k|            else {
 4020|   378k|                m_kind = float_kind::hex_without_prefix;
 4021|   378k|            }
 4022|       |
 4023|   394k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   394k|        }
 4025|  1.37M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 522k, False: 848k]
  |  Branch (4025:29): [True: 522k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   522k|            m_kind = float_kind::generic;
 4029|   522k|            return read_regular_float(range);
 4030|   522k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   848k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   848k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.3k, False: 811k]
  |  |  ------------------
  ------------------
 4036|  36.3k|            m_kind = float_kind::hex_with_prefix;
 4037|  36.3k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  36.3k|        }
 4039|       |
 4040|   811k|        m_kind = float_kind::generic;
 4041|   811k|        return read_regular(range);
 4042|   848k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3799|  1.85M|    {
 3800|  1.85M|        auto it = range.begin();
 3801|  1.85M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 1.83M, False: 19.4k]
  ------------------
 3802|  1.83M|            return unexpected(r.error());
 3803|  1.83M|        }
 3804|  19.4k|        else {
 3805|  19.4k|            it = *r;
 3806|  19.4k|        }
 3807|       |
 3808|  19.4k|        if (auto r = read_matching_string_classic_nocase(
 3809|  19.4k|                ranges::subrange{it, range.end()}, "inity");
 3810|  19.4k|            !r) {
  ------------------
  |  Branch (3810:13): [True: 9.68k, False: 9.72k]
  ------------------
 3811|  9.68k|            m_kind = float_kind::inf_short;
 3812|  9.68k|            return it;
 3813|  9.68k|        }
 3814|  9.72k|        else {
 3815|  9.72k|            m_kind = float_kind::inf_long;
 3816|  9.72k|            return *r;
 3817|  9.72k|        }
 3818|  19.4k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|  1.83M|    {
 3823|  1.83M|        auto it = range.begin();
 3824|  1.83M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 1.76M, False: 67.7k]
  ------------------
 3825|  1.76M|            return r.transform_error(map_parse_error_to_scan_error(
 3826|  1.76M|                scan_error::invalid_scanned_value,
 3827|  1.76M|                "Invalid floating-point NaN value"));
 3828|  1.76M|        }
 3829|  67.7k|        else {
 3830|  67.7k|            it = *r;
 3831|  67.7k|        }
 3832|       |
 3833|  67.7k|        if (auto r =
 3834|  67.7k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|  67.7k|            !r) {
  ------------------
  |  Branch (3835:13): [True: 61.9k, False: 5.84k]
  ------------------
 3836|  61.9k|            m_kind = float_kind::nan_simple;
 3837|  61.9k|            return it;
 3838|  61.9k|        }
 3839|  5.84k|        else {
 3840|  5.84k|            it = *r;
 3841|  5.84k|        }
 3842|       |
 3843|  5.84k|        auto payload_beg_it = it;
 3844|  5.84k|        it = read_while_code_unit(
 3845|  5.84k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  5.84k|                return is_ascii_char(ch) &&
 3847|  5.84k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|  5.84k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|  5.84k|            });
 3850|  5.84k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|  5.84k|        m_kind = float_kind::nan_with_payload;
 3853|  5.84k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 3.93k, False: 1.91k]
  ------------------
 3854|  5.84k|                                             ')')) {
 3855|  3.93k|            return *r;
 3856|  3.93k|        }
 3857|  1.91k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|  1.91k|                                     "Invalid floating-point NaN payload");
 3859|  5.84k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  5.84k|        : m_fptr([](storage fn,
  743|  5.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.84k|              cvref<T> obj = *get<T>(fn);
  745|  5.84k|              if constexpr (std::is_void_v<R>) {
  746|  5.84k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.84k|              }
  748|  5.84k|              else {
  749|  5.84k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.84k|              }
  751|  5.84k|          }),
  752|  5.84k|          m_storage(std::addressof(f))
  753|  5.84k|    {
  754|  5.84k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|   133k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   133k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   133k|              else {
  749|   133k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   133k|              }
  751|   133k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|   133k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   133k|        else if constexpr (std::is_object_v<T>) {
  688|   133k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   133k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3845|   133k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|   133k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3846:24): [True: 133k, False: 122]
  ------------------
 3847|   133k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3847:26): [True: 128k, False: 4.63k]
  |  Branch (3847:39): [True: 118k, False: 9.80k]
  |  Branch (3847:54): [True: 2.99k, False: 11.4k]
  |  Branch (3847:67): [True: 2.90k, False: 83]
  ------------------
 3848|   133k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3848:26): [True: 6.90k, False: 4.63k]
  |  Branch (3848:39): [True: 2.55k, False: 4.34k]
  |  Branch (3848:53): [True: 4.26k, False: 4.71k]
  ------------------
 3849|   133k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  5.84k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.84k|        {
  662|  5.84k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3792|  1.24M|    {
 3793|  1.24M|        return read_matching_string_classic_nocase(range, "0x");
 3794|  1.24M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3892|   431k|    {
 3893|   431k|        auto it = range.begin();
 3894|       |
 3895|   431k|        std::ptrdiff_t digits_count = 0;
 3896|   431k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|   431k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.7k, False: 418k]
  |  |  ------------------
  ------------------
 3898|  12.7k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  12.7k|                scan_error::invalid_scanned_value,
 3900|  12.7k|                "Invalid hexadecimal floating-point value"));
 3901|  12.7k|        }
 3902|   418k|        else {
 3903|   418k|            digits_count += ranges::distance(it, *r);
 3904|   418k|            it = *r;
 3905|   418k|        }
 3906|       |
 3907|   418k|        m_integral_part_length = digits_count;
 3908|   418k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 68.9k, False: 349k]
  ------------------
 3909|   418k|                                             m_locale_options.decimal_point)) {
 3910|  68.9k|            it = *r;
 3911|  68.9k|        }
 3912|       |
 3913|   418k|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 63.4k, False: 355k]
  ------------------
 3914|   418k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|  63.4k|            digits_count += ranges::distance(it, *r);
 3916|  63.4k|            it = *r;
 3917|  63.4k|        }
 3918|       |
 3919|   418k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 418k]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|   418k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|   418k|        return it;
 3927|   418k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3777|   849k|    {
 3778|   849k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 849k]
  |  |  |  Branch (859:45): [True: 0, False: 849k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|   849k|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|   849k|        return read_while1_code_unit(
 3787|   849k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|   849k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   849k|        : m_fptr([](storage fn,
  743|   849k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   849k|              cvref<T> obj = *get<T>(fn);
  745|   849k|              if constexpr (std::is_void_v<R>) {
  746|   849k|                  obj(static_cast<decltype(args)>(args)...);
  747|   849k|              }
  748|   849k|              else {
  749|   849k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   849k|              }
  751|   849k|          }),
  752|   849k|          m_storage(std::addressof(f))
  753|   849k|    {
  754|   849k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  4.57M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.57M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.57M|              else {
  749|  4.57M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.57M|              }
  751|  4.57M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  4.57M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.57M|        else if constexpr (std::is_object_v<T>) {
  688|  4.57M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.57M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3787|  4.57M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   849k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   849k|        {
  662|   849k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3864|  1.51M|    {
 3865|  1.51M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 173k, False: 1.34M]
  ------------------
 3866|   173k|            auto beg_exp_it = range.begin();
 3867|   173k|            auto it = *r;
 3868|       |
 3869|   173k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 172k, False: 309]
  ------------------
 3870|   173k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|   172k|                it = r_sign->first;
 3872|   172k|            }
 3873|       |
 3874|   173k|            if (auto r_exp = read_while1_code_unit(
 3875|   173k|                    ranges::subrange{it, range.end()},
 3876|   173k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|   173k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.48k, False: 170k]
  |  |  ------------------
  ------------------
 3878|  2.48k|                it = beg_exp_it;
 3879|  2.48k|            }
 3880|   170k|            else {
 3881|   170k|                it = *r_exp;
 3882|   170k|            }
 3883|       |
 3884|   173k|            return it;
 3885|   173k|        }
 3886|  1.34M|        return range.begin();
 3887|  1.51M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   173k|        : m_fptr([](storage fn,
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|   173k|              if constexpr (std::is_void_v<R>) {
  746|   173k|                  obj(static_cast<decltype(args)>(args)...);
  747|   173k|              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
  752|   173k|          m_storage(std::addressof(f))
  753|   173k|    {
  754|   173k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   557k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   557k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   557k|              else {
  749|   557k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   557k|              }
  751|   557k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   557k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   557k|        else if constexpr (std::is_object_v<T>) {
  688|   557k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   557k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3876|   557k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   173k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   173k|        {
  662|   173k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3932|  1.33M|    {
 3933|  1.33M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|  1.33M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 1.14M, False: 189k]
  |  Branch (3934:50): [True: 29.3k, False: 1.11M]
  ------------------
 3935|       |
 3936|  1.33M|        auto it = ranges::begin(range);
 3937|  1.33M|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|  1.33M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|  1.33M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68.4k, False: 1.26M]
  |  |  ------------------
  ------------------
 3941|  68.4k|            return r.transform_error(
 3942|  68.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  68.4k|                                              "Invalid floating-point value"));
 3944|  68.4k|        }
 3945|  1.26M|        else {
 3946|  1.26M|            digits_count += ranges::distance(it, *r);
 3947|  1.26M|            it = *r;
 3948|  1.26M|        }
 3949|       |
 3950|  1.26M|        m_integral_part_length = digits_count;
 3951|  1.26M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 254k, False: 1.01M]
  ------------------
 3952|  1.26M|                                             m_locale_options.decimal_point)) {
 3953|   254k|            it = *r;
 3954|   254k|        }
 3955|       |
 3956|  1.26M|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 236k, False: 1.02M]
  ------------------
 3957|  1.26M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|   236k|            digits_count += ranges::distance(it, *r);
 3959|   236k|            it = *r;
 3960|   236k|        }
 3961|       |
 3962|  1.26M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.26M]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|  1.26M|        auto beg_exp_it = it;
 3968|  1.26M|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 1.09M, False: 171k]
  ------------------
 3969|  1.09M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|  1.09M|        }
 3971|  1.26M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 28.2k, False: 1.23M]
  |  Branch (3971:29): [True: 17.4k, False: 10.8k]
  ------------------
 3972|  17.4k|            return unexpected_scan_error(
 3973|  17.4k|                scan_error::invalid_scanned_value,
 3974|  17.4k|                "No exponent given to scientific float");
 3975|  17.4k|        }
 3976|       |
 3977|  1.24M|        m_kind =
 3978|  1.24M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 1.07M, False: 169k]
  ------------------
 3979|       |
 3980|  1.24M|        return it;
 3981|  1.26M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3762|  2.60M|    {
 3763|  2.60M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.60M]
  |  |  |  Branch (859:45): [True: 0, False: 2.60M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|  2.60M|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|  2.60M|        return read_while1_code_unit(
 3772|  2.60M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|  2.60M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  2.60M|        : m_fptr([](storage fn,
  743|  2.60M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.60M|              cvref<T> obj = *get<T>(fn);
  745|  2.60M|              if constexpr (std::is_void_v<R>) {
  746|  2.60M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.60M|              }
  748|  2.60M|              else {
  749|  2.60M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.60M|              }
  751|  2.60M|          }),
  752|  2.60M|          m_storage(std::addressof(f))
  753|  2.60M|    {
  754|  2.60M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  14.7M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.7M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.7M|              else {
  749|  14.7M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.7M|              }
  751|  14.7M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  14.7M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.7M|        else if constexpr (std::is_object_v<T>) {
  688|  14.7M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.7M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3772|  14.7M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  2.60M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.60M|        {
  662|  2.60M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1564|  1.67M|    {
 1565|  1.67M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|  1.67M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   119k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   119k|        {
  662|   119k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   311k|        : m_fptr([](storage fn,
  743|   311k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   311k|              cvref<T> obj = *get<T>(fn);
  745|   311k|              if constexpr (std::is_void_v<R>) {
  746|   311k|                  obj(static_cast<decltype(args)>(args)...);
  747|   311k|              }
  748|   311k|              else {
  749|   311k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   311k|              }
  751|   311k|          }),
  752|   311k|          m_storage(std::addressof(f))
  753|   311k|    {
  754|   311k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   311k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   311k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   311k|              else {
  749|   311k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   311k|              }
  751|   311k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   311k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   311k|        else if constexpr (std::is_object_v<T>) {
  688|   311k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   311k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   311k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   311k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   311k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3653|  1.47M|    {
 3654|  1.47M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.47M]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|  1.47M|        return read_source_impl(range);
 3660|  1.47M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   311k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   311k|        {
  662|   311k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   365k|    {
 4159|   365k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   365k|#if !SCN_DISABLE_LOCALE
 4162|   365k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 100k, False: 264k]
  ------------------
 4163|   100k|            return read_impl<Range>(
 4164|   100k|                range, rd,
 4165|   100k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   100k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   100k|                },
 4168|   100k|                value, loc);
 4169|   100k|        }
 4170|   264k|#endif
 4171|       |
 4172|   264k|        return read_impl<Range>(
 4173|   264k|            range, rd,
 4174|   264k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   264k|                return r.read_source(SCN_FWD(args)...);
 4176|   264k|            },
 4177|   264k|            value);
 4178|   365k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   515k|    {
 4195|   515k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   515k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 497k]
  |  |  ------------------
  ------------------
 4197|  17.9k|            return unexpected(r.error());
 4198|  17.9k|        }
 4199|       |
 4200|   497k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   497k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   497k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   497k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.0k, False: 477k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  20.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  20.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  20.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  20.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  20.0k|    }                                                  \
  |  |  |  | 3667|   497k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   477k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   477k|        return ranges::next(range.begin(), n);
 4202|   497k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.58M|    {
  763|  1.58M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.58M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|   100k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   100k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   100k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|   311k|    {
 3668|   311k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   311k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   311k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 311k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   311k|        return read_source_impl(range);
 3674|   311k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|  1.58M|    {
 3694|  1.58M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  1.58M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.58M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.58M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.58M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.58M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|  1.58M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|  1.58M|        auto it = sign_result.first;
 3697|  1.58M|        m_sign = sign_result.second;
 3698|       |
 3699|  1.58M|        auto digits_begin = it;
 3700|  1.58M|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|  1.58M|                      ranges::sized_range<Range>) {
 3703|  1.58M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  3.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.58M]
  |  |  |  Branch (859:45): [True: 0, False: 1.58M]
  |  |  |  Branch (859:45): [True: 0, False: 1.58M]
  |  |  ------------------
  ------------------
 3704|  1.58M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|  1.58M|            else {
 3713|  1.58M|                auto cb = [&](const auto& rr)
 3714|  1.58M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|  1.58M|                    auto res = read_all(rr);
 3716|  1.58M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|  1.58M|                        return unexpected_scan_error(
 3718|  1.58M|                            scan_error::invalid_scanned_value,
 3719|  1.58M|                            "Invalid float value");
 3720|  1.58M|                    }
 3721|  1.58M|                    return res;
 3722|  1.58M|                };
 3723|  1.58M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|  1.58M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.58M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 55.0k, False: 1.53M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  55.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  55.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  55.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  55.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  55.0k|    }                                                  \
  |  | 3667|  1.58M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|  1.53M|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|  1.58M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|  1.53M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 1.52M, False: 9.36k]
  |  Branch (3736:48): [True: 1.51M, False: 8.97k]
  ------------------
 3737|  1.53M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 1.45M, False: 60.4k]
  ------------------
 3738|  1.53M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 1.45M, False: 3.41k]
  ------------------
 3739|  1.45M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|  1.45M|        }
 3741|       |
 3742|  1.53M|        handle_separators();
 3743|       |
 3744|  1.53M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 1.53M]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|  1.53M|        return it;
 3757|  1.53M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|  1.58M|    {
 3800|  1.58M|        auto it = range.begin();
 3801|  1.58M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 1.57M, False: 18.3k]
  ------------------
 3802|  1.57M|            return unexpected(r.error());
 3803|  1.57M|        }
 3804|  18.3k|        else {
 3805|  18.3k|            it = *r;
 3806|  18.3k|        }
 3807|       |
 3808|  18.3k|        if (auto r = read_matching_string_classic_nocase(
 3809|  18.3k|                ranges::subrange{it, range.end()}, "inity");
 3810|  18.3k|            !r) {
  ------------------
  |  Branch (3810:13): [True: 9.36k, False: 8.97k]
  ------------------
 3811|  9.36k|            m_kind = float_kind::inf_short;
 3812|  9.36k|            return it;
 3813|  9.36k|        }
 3814|  8.97k|        else {
 3815|  8.97k|            m_kind = float_kind::inf_long;
 3816|  8.97k|            return *r;
 3817|  8.97k|        }
 3818|  18.3k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|  1.57M|    {
 3823|  1.57M|        auto it = range.begin();
 3824|  1.57M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 1.50M, False: 65.3k]
  ------------------
 3825|  1.50M|            return r.transform_error(map_parse_error_to_scan_error(
 3826|  1.50M|                scan_error::invalid_scanned_value,
 3827|  1.50M|                "Invalid floating-point NaN value"));
 3828|  1.50M|        }
 3829|  65.3k|        else {
 3830|  65.3k|            it = *r;
 3831|  65.3k|        }
 3832|       |
 3833|  65.3k|        if (auto r =
 3834|  65.3k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|  65.3k|            !r) {
  ------------------
  |  Branch (3835:13): [True: 60.4k, False: 4.95k]
  ------------------
 3836|  60.4k|            m_kind = float_kind::nan_simple;
 3837|  60.4k|            return it;
 3838|  60.4k|        }
 3839|  4.95k|        else {
 3840|  4.95k|            it = *r;
 3841|  4.95k|        }
 3842|       |
 3843|  4.95k|        auto payload_beg_it = it;
 3844|  4.95k|        it = read_while_code_unit(
 3845|  4.95k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  4.95k|                return is_ascii_char(ch) &&
 3847|  4.95k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|  4.95k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|  4.95k|            });
 3850|  4.95k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|  4.95k|        m_kind = float_kind::nan_with_payload;
 3853|  4.95k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 3.41k, False: 1.53k]
  ------------------
 3854|  4.95k|                                             ')')) {
 3855|  3.41k|            return *r;
 3856|  3.41k|        }
 3857|  1.53k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|  1.53k|                                     "Invalid floating-point NaN payload");
 3859|  4.95k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  4.95k|        : m_fptr([](storage fn,
  743|  4.95k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.95k|              cvref<T> obj = *get<T>(fn);
  745|  4.95k|              if constexpr (std::is_void_v<R>) {
  746|  4.95k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.95k|              }
  748|  4.95k|              else {
  749|  4.95k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.95k|              }
  751|  4.95k|          }),
  752|  4.95k|          m_storage(std::addressof(f))
  753|  4.95k|    {
  754|  4.95k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|   101k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   101k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   101k|              else {
  749|   101k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   101k|              }
  751|   101k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|   101k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   101k|        else if constexpr (std::is_object_v<T>) {
  688|   101k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   101k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3845|   101k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|   101k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3846:24): [True: 101k, False: 116]
  ------------------
 3847|   101k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3847:26): [True: 97.7k, False: 3.76k]
  |  Branch (3847:39): [True: 88.0k, False: 9.65k]
  |  Branch (3847:54): [True: 2.84k, False: 10.5k]
  |  Branch (3847:67): [True: 2.75k, False: 83]
  ------------------
 3848|   101k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3848:26): [True: 6.90k, False: 3.76k]
  |  Branch (3848:39): [True: 2.55k, False: 4.34k]
  |  Branch (3848:53): [True: 4.26k, False: 3.84k]
  ------------------
 3849|   101k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  4.95k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.95k|        {
  662|  4.95k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|  1.05M|    {
 3793|  1.05M|        return read_matching_string_classic_nocase(range, "0x");
 3794|  1.05M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|   909k|{
 1984|   909k|    auto it = read_while_code_unit(range, pred);
 1985|   909k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 382k, False: 527k]
  ------------------
 1986|   382k|        return unexpected(parse_error::error);
 1987|   382k|    }
 1988|   527k|    return it;
 1989|   909k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3864|   262k|    {
 3865|   262k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 39.0k, False: 223k]
  ------------------
 3866|  39.0k|            auto beg_exp_it = range.begin();
 3867|  39.0k|            auto it = *r;
 3868|       |
 3869|  39.0k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 38.9k, False: 102]
  ------------------
 3870|  39.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  38.9k|                it = r_sign->first;
 3872|  38.9k|            }
 3873|       |
 3874|  39.0k|            if (auto r_exp = read_while1_code_unit(
 3875|  39.0k|                    ranges::subrange{it, range.end()},
 3876|  39.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  39.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 848, False: 38.1k]
  |  |  ------------------
  ------------------
 3878|    848|                it = beg_exp_it;
 3879|    848|            }
 3880|  38.1k|            else {
 3881|  38.1k|                it = *r_exp;
 3882|  38.1k|            }
 3883|       |
 3884|  39.0k|            return it;
 3885|  39.0k|        }
 3886|   223k|        return range.begin();
 3887|   262k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  39.0k|        : m_fptr([](storage fn,
  743|  39.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.0k|              cvref<T> obj = *get<T>(fn);
  745|  39.0k|              if constexpr (std::is_void_v<R>) {
  746|  39.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.0k|              }
  748|  39.0k|              else {
  749|  39.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.0k|              }
  751|  39.0k|          }),
  752|  39.0k|          m_storage(std::addressof(f))
  753|  39.0k|    {
  754|  39.0k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   115k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   115k|        else if constexpr (std::is_object_v<T>) {
  688|   115k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   115k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3876|   115k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  39.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.0k|        {
  662|  39.0k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|   453k|    {
 3933|   453k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   453k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 279k, False: 173k]
  |  Branch (3934:50): [True: 26.8k, False: 253k]
  ------------------
 3935|       |
 3936|   453k|        auto it = ranges::begin(range);
 3937|   453k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   453k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   453k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.5k, False: 417k]
  |  |  ------------------
  ------------------
 3941|  35.5k|            return r.transform_error(
 3942|  35.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  35.5k|                                              "Invalid floating-point value"));
 3944|  35.5k|        }
 3945|   417k|        else {
 3946|   417k|            digits_count += ranges::distance(it, *r);
 3947|   417k|            it = *r;
 3948|   417k|        }
 3949|       |
 3950|   417k|        m_integral_part_length = digits_count;
 3951|   417k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 77.5k, False: 339k]
  ------------------
 3952|   417k|                                             m_locale_options.decimal_point)) {
 3953|  77.5k|            it = *r;
 3954|  77.5k|        }
 3955|       |
 3956|   417k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 71.3k, False: 346k]
  ------------------
 3957|   417k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  71.3k|            digits_count += ranges::distance(it, *r);
 3959|  71.3k|            it = *r;
 3960|  71.3k|        }
 3961|       |
 3962|   417k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 417k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   417k|        auto beg_exp_it = it;
 3968|   417k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 262k, False: 155k]
  ------------------
 3969|   262k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   262k|        }
 3971|   417k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 25.1k, False: 392k]
  |  Branch (3971:29): [True: 17.0k, False: 8.09k]
  ------------------
 3972|  17.0k|            return unexpected_scan_error(
 3973|  17.0k|                scan_error::invalid_scanned_value,
 3974|  17.0k|                "No exponent given to scientific float");
 3975|  17.0k|        }
 3976|       |
 3977|   400k|        m_kind =
 3978|   400k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 362k, False: 38.1k]
  ------------------
 3979|       |
 3980|   400k|        return it;
 3981|   417k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|   870k|    {
 3763|   870k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   870k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 870k]
  |  |  |  Branch (859:45): [True: 0, False: 870k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   870k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   870k|        return read_while1_code_unit(
 3772|   870k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   870k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   870k|        : m_fptr([](storage fn,
  743|   870k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   870k|              cvref<T> obj = *get<T>(fn);
  745|   870k|              if constexpr (std::is_void_v<R>) {
  746|   870k|                  obj(static_cast<decltype(args)>(args)...);
  747|   870k|              }
  748|   870k|              else {
  749|   870k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   870k|              }
  751|   870k|          }),
  752|   870k|          m_storage(std::addressof(f))
  753|   870k|    {
  754|   870k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  4.63M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.63M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.63M|              else {
  749|  4.63M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.63M|              }
  751|  4.63M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  4.63M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.63M|        else if constexpr (std::is_object_v<T>) {
  688|  4.63M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.63M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3772|  4.63M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   870k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   870k|        {
  662|   870k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|  1.58M|    {
 3989|  1.58M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|  1.58M|        const bool allowed_nonhex =
 3991|  1.58M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|  1.58M|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|  1.58M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 1.57M, False: 18.3k]
  |  Branch (3994:45): [True: 0, False: 1.57M]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|  1.58M|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 18.3k, False: 1.57M]
  ------------------
 4000|  18.3k|            return *r;
 4001|  18.3k|        }
 4002|       |
 4003|  1.57M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 1.50M, False: 63.8k]
  |  Branch (4003:45): [True: 1.53k, False: 1.50M]
  ------------------
 4004|  1.53k|            return unexpected(r.error());
 4005|  1.53k|        }
 4006|  1.56M|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 63.8k, False: 1.50M]
  ------------------
 4007|  63.8k|            return *r;
 4008|  63.8k|        }
 4009|       |
 4010|  1.50M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 1.05M, False: 453k]
  |  Branch (4010:28): [True: 317k, False: 734k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   317k|            auto it = range.begin();
 4014|       |
 4015|   317k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 14.6k, False: 303k]
  ------------------
 4016|  14.6k|                m_kind = float_kind::hex_with_prefix;
 4017|  14.6k|                it = *r;
 4018|  14.6k|            }
 4019|   303k|            else {
 4020|   303k|                m_kind = float_kind::hex_without_prefix;
 4021|   303k|            }
 4022|       |
 4023|   317k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   317k|        }
 4025|  1.18M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 453k, False: 734k]
  |  Branch (4025:29): [True: 453k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   453k|            m_kind = float_kind::generic;
 4029|   453k|            return read_regular_float(range);
 4030|   453k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   734k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.5k, False: 699k]
  |  |  ------------------
  ------------------
 4036|  35.5k|            m_kind = float_kind::hex_with_prefix;
 4037|  35.5k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  35.5k|        }
 4039|       |
 4040|   699k|        m_kind = float_kind::generic;
 4041|   699k|        return read_regular(range);
 4042|   734k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|  1.05M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|  1.05M|                    auto res = read_all(rr);
 3716|  1.05M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 921, False: 1.05M]
  |  |  ------------------
  ------------------
 3717|    921|                        return unexpected_scan_error(
 3718|    921|                            scan_error::invalid_scanned_value,
 3719|    921|                            "Invalid float value");
 3720|    921|                    }
 3721|  1.05M|                    return res;
 3722|  1.05M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|  1.05M|{
 1827|  1.05M|    return ranges::next(range.begin(), range.end());
 1828|  1.05M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.05M|    {
  313|  1.05M|        ranges::advance(x, bound);
  314|  1.05M|        return x;
  315|  1.05M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.05M|    {
  275|  1.05M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.05M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.05M|    {
  190|  1.05M|        i = std::move(bound);
  191|  1.05M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|  1.45M|    {
 1565|  1.45M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|  1.45M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1608|  1.45M|    {
 1609|  1.45M|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|  1.45M|                      ranges::sized_range<Range>) {
 1614|  1.45M|            m_storage.reset();
 1615|  1.45M|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  1.45M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   264k|        : m_fptr([](storage fn,
  743|   264k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   264k|              cvref<T> obj = *get<T>(fn);
  745|   264k|              if constexpr (std::is_void_v<R>) {
  746|   264k|                  obj(static_cast<decltype(args)>(args)...);
  747|   264k|              }
  748|   264k|              else {
  749|   264k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   264k|              }
  751|   264k|          }),
  752|   264k|          m_storage(std::addressof(f))
  753|   264k|    {
  754|   264k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   264k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   264k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   264k|              else {
  749|   264k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   264k|              }
  751|   264k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   264k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   264k|        else if constexpr (std::is_object_v<T>) {
  688|   264k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   264k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   264k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   264k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   264k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|  1.27M|    {
 3654|  1.27M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.27M]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|  1.27M|        return read_source_impl(range);
 3660|  1.27M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   264k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   264k|        {
  662|   264k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   457k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   457k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   457k|            auto rd = make_reader<T, char_type>();
 6195|   457k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   457k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 457k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   457k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   457k|                return impl(rd, range, value);
 6202|   457k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   457k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   457k|    {
 6113|   457k|        const bool need_skipped_width =
 6114|   457k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 457k]
  |  Branch (6114:33): [True: 0, False: 457k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   457k|        auto it = rng.begin();
 6118|   457k|        std::ptrdiff_t prefix_width = 0;
 6119|   457k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 457k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   457k|        else {
 6127|   457k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   457k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   457k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   457k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.94k, False: 451k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.94k|    }                                                  \
  |  |  |  | 3667|   457k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   451k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   451k|            std::tie(it, prefix_width) = prefix_result;
 6129|   451k|        }
 6130|   451k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   451k|        std::ptrdiff_t value_width = 0;
 6134|   451k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 451k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   451k|        else {
 6150|   451k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   451k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   451k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 27.5k, False: 424k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  27.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  27.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  27.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  27.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  27.5k|    }                                                  \
  |  | 3667|   451k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   451k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   424k|                                             specs, value, loc));
 6152|       |
 6153|   424k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 424k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   424k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   424k|        std::ptrdiff_t postfix_width = 0;
 6162|   424k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 419k, False: 4.84k]
  ------------------
 6163|   419k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   419k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   419k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   419k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 419k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   419k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   419k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   419k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   419k|                                 value_width));
 6167|   419k|            std::tie(it, postfix_width) = postfix_result;
 6168|   419k|        }
 6169|       |
 6170|   424k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   424k|                                                 value_width, postfix_width);
 6172|   424k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 424k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   424k|        return it;
 6177|   424k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|  1.10M|    {
 3680|  1.10M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|  1.10M|        const std::ptrdiff_t sign_len =
 3683|  1.10M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 252k, False: 854k]
  ------------------
 3684|       |
 3685|  1.10M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.10M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.10M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.10M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.9k, False: 1.08M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  20.9k|    }                                                  \
  |  |  |  | 3667|  1.10M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|  1.08M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|  1.10M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   451k|    {
 4159|   451k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   451k|#if !SCN_DISABLE_LOCALE
 4162|   451k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 128k, False: 323k]
  ------------------
 4163|   128k|            return read_impl<Range>(
 4164|   128k|                range, rd,
 4165|   128k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   128k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   128k|                },
 4168|   128k|                value, loc);
 4169|   128k|        }
 4170|   323k|#endif
 4171|       |
 4172|   323k|        return read_impl<Range>(
 4173|   323k|            range, rd,
 4174|   323k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   323k|                return r.read_source(SCN_FWD(args)...);
 4176|   323k|            },
 4177|   323k|            value);
 4178|   451k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   625k|    {
 4195|   625k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   625k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.6k, False: 591k]
  |  |  ------------------
  ------------------
 4197|  33.6k|            return unexpected(r.error());
 4198|  33.6k|        }
 4199|       |
 4200|   591k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   591k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   591k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   591k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.01k, False: 589k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.01k|    }                                                  \
  |  |  |  | 3667|   591k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   589k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   589k|        return ranges::next(range.begin(), n);
 4202|   591k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   128k|        : m_fptr([](storage fn,
  743|   128k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   128k|              cvref<T> obj = *get<T>(fn);
  745|   128k|              if constexpr (std::is_void_v<R>) {
  746|   128k|                  obj(static_cast<decltype(args)>(args)...);
  747|   128k|              }
  748|   128k|              else {
  749|   128k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   128k|              }
  751|   128k|          }),
  752|   128k|          m_storage(std::addressof(f))
  753|   128k|    {
  754|   128k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   128k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   128k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   128k|              else {
  749|   128k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   128k|              }
  751|   128k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   128k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   128k|        else if constexpr (std::is_object_v<T>) {
  688|   128k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   128k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|   128k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   128k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   128k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   128k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   128k|        {
  662|   128k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   323k|        : m_fptr([](storage fn,
  743|   323k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   323k|              cvref<T> obj = *get<T>(fn);
  745|   323k|              if constexpr (std::is_void_v<R>) {
  746|   323k|                  obj(static_cast<decltype(args)>(args)...);
  747|   323k|              }
  748|   323k|              else {
  749|   323k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   323k|              }
  751|   323k|          }),
  752|   323k|          m_storage(std::addressof(f))
  753|   323k|    {
  754|   323k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   323k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   323k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   323k|              else {
  749|   323k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   323k|              }
  751|   323k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   323k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   323k|        else if constexpr (std::is_object_v<T>) {
  688|   323k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   323k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   323k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   323k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   323k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   323k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   323k|        {
  662|   323k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   376k|    {
 4159|   376k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   376k|#if !SCN_DISABLE_LOCALE
 4162|   376k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 104k, False: 272k]
  ------------------
 4163|   104k|            return read_impl<Range>(
 4164|   104k|                range, rd,
 4165|   104k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   104k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   104k|                },
 4168|   104k|                value, loc);
 4169|   104k|        }
 4170|   272k|#endif
 4171|       |
 4172|   272k|        return read_impl<Range>(
 4173|   272k|            range, rd,
 4174|   272k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   272k|                return r.read_source(SCN_FWD(args)...);
 4176|   272k|            },
 4177|   272k|            value);
 4178|   376k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   533k|    {
 4195|   533k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   533k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   533k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3k, False: 515k]
  |  |  ------------------
  ------------------
 4197|  18.3k|            return unexpected(r.error());
 4198|  18.3k|        }
 4199|       |
 4200|   515k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   515k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   515k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   515k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.9k, False: 496k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.9k|    }                                                  \
  |  |  |  | 3667|   515k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   496k|        return ranges::next(range.begin(), n);
 4202|   515k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   104k|        : m_fptr([](storage fn,
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
  752|   104k|          m_storage(std::addressof(f))
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   104k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  688|   104k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   104k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|   104k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   104k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   104k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   104k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   272k|        : m_fptr([](storage fn,
  743|   272k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   272k|              cvref<T> obj = *get<T>(fn);
  745|   272k|              if constexpr (std::is_void_v<R>) {
  746|   272k|                  obj(static_cast<decltype(args)>(args)...);
  747|   272k|              }
  748|   272k|              else {
  749|   272k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   272k|              }
  751|   272k|          }),
  752|   272k|          m_storage(std::addressof(f))
  753|   272k|    {
  754|   272k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   272k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   272k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   272k|              else {
  749|   272k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   272k|              }
  751|   272k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   272k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   272k|        else if constexpr (std::is_object_v<T>) {
  688|   272k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   272k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   272k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   272k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   272k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   272k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   272k|        {
  662|   272k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   462k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   462k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   462k|            auto rd = make_reader<T, char_type>();
 6195|   462k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   462k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 462k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   462k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 462k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   462k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   462k|                return impl(rd, range, value);
 6202|   462k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   462k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   462k|    {
 6113|   462k|        const bool need_skipped_width =
 6114|   462k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 462k]
  |  Branch (6114:33): [True: 0, False: 462k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   462k|        auto it = rng.begin();
 6118|   462k|        std::ptrdiff_t prefix_width = 0;
 6119|   462k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 462k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   462k|        else {
 6127|   462k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   462k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   462k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   462k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   462k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.33k, False: 455k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.33k|    }                                                  \
  |  |  |  | 3667|   462k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   455k|            std::tie(it, prefix_width) = prefix_result;
 6129|   455k|        }
 6130|   455k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   455k|        std::ptrdiff_t value_width = 0;
 6134|   455k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 455k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   455k|        else {
 6150|   455k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   455k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   455k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 27.1k, False: 428k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  27.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  27.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  27.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  27.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  27.1k|    }                                                  \
  |  | 3667|   455k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   428k|                                             specs, value, loc));
 6152|       |
 6153|   428k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 428k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   428k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   428k|        std::ptrdiff_t postfix_width = 0;
 6162|   428k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 423k, False: 5.13k]
  ------------------
 6163|   423k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   423k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   423k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   423k|                                 value_width));
 6167|   423k|            std::tie(it, postfix_width) = postfix_result;
 6168|   423k|        }
 6169|       |
 6170|   428k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   428k|                                                 value_width, postfix_width);
 6172|   428k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 428k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   428k|        return it;
 6177|   428k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3679|  1.11M|    {
 3680|  1.11M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|  1.11M|        const std::ptrdiff_t sign_len =
 3683|  1.11M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 258k, False: 859k]
  ------------------
 3684|       |
 3685|  1.11M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.11M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.11M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.11M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.7k, False: 1.09M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.7k|    }                                                  \
  |  |  |  | 3667|  1.11M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|  1.09M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|  1.11M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   455k|    {
 4159|   455k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   455k|#if !SCN_DISABLE_LOCALE
 4162|   455k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 130k, False: 325k]
  ------------------
 4163|   130k|            return read_impl<Range>(
 4164|   130k|                range, rd,
 4165|   130k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   130k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   130k|                },
 4168|   130k|                value, loc);
 4169|   130k|        }
 4170|   325k|#endif
 4171|       |
 4172|   325k|        return read_impl<Range>(
 4173|   325k|            range, rd,
 4174|   325k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   325k|                return r.read_source(SCN_FWD(args)...);
 4176|   325k|            },
 4177|   325k|            value);
 4178|   455k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   631k|    {
 4195|   631k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   631k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 596k]
  |  |  ------------------
  ------------------
 4197|  34.5k|            return unexpected(r.error());
 4198|  34.5k|        }
 4199|       |
 4200|   596k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   596k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   596k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   596k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 610, False: 596k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    610|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    610|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    610|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    610|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    610|    }                                                  \
  |  |  |  | 3667|   596k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   596k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   596k|        return ranges::next(range.begin(), n);
 4202|   596k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   130k|        : m_fptr([](storage fn,
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|   130k|              if constexpr (std::is_void_v<R>) {
  746|   130k|                  obj(static_cast<decltype(args)>(args)...);
  747|   130k|              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
  752|   130k|          m_storage(std::addressof(f))
  753|   130k|    {
  754|   130k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   130k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   130k|        else if constexpr (std::is_object_v<T>) {
  688|   130k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   130k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|   130k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   130k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   130k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   130k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   130k|        {
  662|   130k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   325k|        : m_fptr([](storage fn,
  743|   325k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   325k|              cvref<T> obj = *get<T>(fn);
  745|   325k|              if constexpr (std::is_void_v<R>) {
  746|   325k|                  obj(static_cast<decltype(args)>(args)...);
  747|   325k|              }
  748|   325k|              else {
  749|   325k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   325k|              }
  751|   325k|          }),
  752|   325k|          m_storage(std::addressof(f))
  753|   325k|    {
  754|   325k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   325k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   325k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   325k|              else {
  749|   325k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   325k|              }
  751|   325k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   325k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   325k|        else if constexpr (std::is_object_v<T>) {
  688|   325k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   325k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   325k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   325k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   325k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   325k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   325k|        {
  662|   325k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   380k|    {
 4159|   380k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   380k|#if !SCN_DISABLE_LOCALE
 4162|   380k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 106k, False: 274k]
  ------------------
 4163|   106k|            return read_impl<Range>(
 4164|   106k|                range, rd,
 4165|   106k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   106k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   106k|                },
 4168|   106k|                value, loc);
 4169|   106k|        }
 4170|   274k|#endif
 4171|       |
 4172|   274k|        return read_impl<Range>(
 4173|   274k|            range, rd,
 4174|   274k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   274k|                return r.read_source(SCN_FWD(args)...);
 4176|   274k|            },
 4177|   274k|            value);
 4178|   380k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   540k|    {
 4195|   540k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   540k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   540k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.7k, False: 521k]
  |  |  ------------------
  ------------------
 4197|  18.7k|            return unexpected(r.error());
 4198|  18.7k|        }
 4199|       |
 4200|   521k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   521k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   521k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   521k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.1k, False: 503k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.1k|    }                                                  \
  |  |  |  | 3667|   521k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   503k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   503k|        return ranges::next(range.begin(), n);
 4202|   521k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   106k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  688|   106k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   106k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|   106k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   106k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   106k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   274k|        : m_fptr([](storage fn,
  743|   274k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   274k|              cvref<T> obj = *get<T>(fn);
  745|   274k|              if constexpr (std::is_void_v<R>) {
  746|   274k|                  obj(static_cast<decltype(args)>(args)...);
  747|   274k|              }
  748|   274k|              else {
  749|   274k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   274k|              }
  751|   274k|          }),
  752|   274k|          m_storage(std::addressof(f))
  753|   274k|    {
  754|   274k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   274k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   274k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   274k|              else {
  749|   274k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   274k|              }
  751|   274k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   274k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   274k|        else if constexpr (std::is_object_v<T>) {
  688|   274k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   274k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   274k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   274k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   274k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   274k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   274k|        {
  662|   274k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.87M|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|  1.87M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|  1.87M|        else {
 1054|  1.87M|            return r.begin().contiguous_segment();
 1055|  1.87M|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|  1.87M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.66M|{
 2049|  1.66M|    auto it = range.begin();
 2050|  3.21M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 3.19M, False: 18.1k]
  ------------------
 2051|  3.19M|        const auto val =
 2052|  3.19M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  3.19M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.19M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.17M, False: 21.3k]
  |  |  ------------------
  ------------------
 2054|  3.17M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  3.17M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  3.17M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.65M, False: 1.52M]
  ------------------
 2057|  1.65M|                return it;
 2058|  1.65M|            }
 2059|  3.17M|        }
 2060|  1.54M|        it = val.iterator;
 2061|  1.54M|    }
 2062|       |
 2063|  18.1k|    return it;
 2064|  1.66M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  3.19M|{
 1887|  3.19M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  3.19M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  3.19M|    auto it = range.begin();
 1891|  3.19M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  3.19M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 3.17M]
  |  |  ------------------
  ------------------
 1894|  21.3k|        ++it;
 1895|  21.3k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  21.3k|        return {it, {}};
 1897|  21.3k|    }
 1898|       |
 1899|  3.17M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 3.14M, False: 27.2k]
  ------------------
 1900|  3.14M|        ++it;
 1901|  3.14M|        return {it, string_type(1, *range.begin())};
 1902|  3.14M|    }
 1903|       |
 1904|  27.2k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  27.2k|    return {it, string_type{range.begin(), it}};
 1906|  3.17M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  21.3k|{
 1155|  21.3k|    auto it = input.begin();
 1156|   211k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 210k, False: 1.53k]
  ------------------
 1157|   210k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 19.8k, False: 190k]
  ------------------
 1158|  19.8k|            break;
 1159|  19.8k|        }
 1160|   210k|    }
 1161|  21.3k|    return it;
 1162|  21.3k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  27.2k|    {
  283|  27.2k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  27.2k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  27.2k|    {
  252|  27.2k|        constexpr iter_difference_t<I> zero{0};
  253|  27.2k|        iter_difference_t<I> counter{0};
  254|       |
  255|  82.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 56.3k, False: 26.1k]
  |  Branch (255:30): [True: 55.2k, False: 1.10k]
  ------------------
  256|  55.2k|            ++i;
  257|  55.2k|            ++counter;
  258|  55.2k|        }
  259|       |
  260|  27.2k|        return counter;
  261|  27.2k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|  3.19M|    {
 1878|  3.19M|        return !codepoint.empty();
 1879|  3.19M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  1.66M|{
 2070|  1.66M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.66M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  1.87M|{
 2940|  1.87M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.87M, False: 0]
  ------------------
 2941|  1.87M|        auto it = read_while_classic_space(range);
 2942|  1.87M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.87M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 1.85M]
  |  |  ------------------
  ------------------
 2944|  18.1k|            return unexpected(e);
 2945|  18.1k|        }
 2946|       |
 2947|  1.85M|        return it;
 2948|  1.87M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.87M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  1.87M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.87M|    else {
 2114|  1.87M|        auto it = range.begin();
 2115|       |
 2116|  1.87M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|  1.87M|            auto seg = get_contiguous_beginning(range);
 2118|  1.87M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|  1.87M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 202k, False: 1.66M]
  ------------------
 2120|   202k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|   202k|            }
 2122|  1.66M|            ranges::advance(it, seg.size());
 2123|  1.66M|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.87M|            return detail::is_cp_space(cp);
 2127|  1.87M|        });
 2128|  1.87M|    }
 2129|  1.87M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.66M|        : m_fptr([](storage fn,
  743|  1.66M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66M|              cvref<T> obj = *get<T>(fn);
  745|  1.66M|              if constexpr (std::is_void_v<R>) {
  746|  1.66M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.66M|              }
  748|  1.66M|              else {
  749|  1.66M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66M|              }
  751|  1.66M|          }),
  752|  1.66M|          m_storage(std::addressof(f))
  753|  1.66M|    {
  754|  1.66M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.17M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.17M|              else {
  749|  3.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.17M|              }
  751|  3.17M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.17M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.17M|        else if constexpr (std::is_object_v<T>) {
  688|  3.17M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.17M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  3.17M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  3.17M|            return detail::is_cp_space(cp);
 2127|  3.17M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.66M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.66M|        {
  662|  1.66M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   915k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   915k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   915k|        auto beg = r.begin();
  990|   915k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 915k, False: 0]
  ------------------
  991|   915k|            return false;
  992|   915k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   915k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  6.51M|    {
  763|  6.51M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  6.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.51M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|  2.41M|{
 1845|  2.41M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  2.41M|    else {
 1856|  2.41M|        auto it = range.begin();
 1857|  2.41M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 1.46M, False: 946k]
  ------------------
 1858|  1.46M|            return ranges::next(it, count);
 1859|  1.46M|        }
 1860|       |
 1861|  3.68M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 2.80M, False: 885k]
  ------------------
 1862|  2.80M|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 60.9k, False: 2.74M]
  ------------------
 1863|  60.9k|                return unexpected(eof_error::eof);
 1864|  60.9k|            }
 1865|  2.80M|        }
 1866|       |
 1867|   885k|        return it;
 1868|   946k|    }
 1869|  2.41M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  2.41M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  2.41M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  2.41M|        else {
 1106|  2.41M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 2.41M, False: 0]
  ------------------
 1107|  2.41M|                return static_cast<size_t>(
 1108|  2.41M|                    r.begin().parent()->chars_available() -
 1109|  2.41M|                    r.begin().position());
 1110|  2.41M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  2.41M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  2.41M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.13M|        : m_fptr([](storage fn,
  743|  2.13M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.13M|              cvref<T> obj = *get<T>(fn);
  745|  2.13M|              if constexpr (std::is_void_v<R>) {
  746|  2.13M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.13M|              }
  748|  2.13M|              else {
  749|  2.13M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.13M|              }
  751|  2.13M|          }),
  752|  2.13M|          m_storage(std::addressof(f))
  753|  2.13M|    {
  754|  2.13M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  3.25M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.25M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.25M|              else {
  749|  3.25M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.25M|              }
  751|  3.25M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.25M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.25M|        else if constexpr (std::is_object_v<T>) {
  688|  3.25M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.25M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.13M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.13M|        {
  662|  2.13M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   669k|    {
 6026|   669k|        const bool need_skipped_width =
 6027|   669k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 669k]
  |  Branch (6027:33): [True: 0, False: 669k]
  ------------------
 6028|   669k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   669k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 669k]
  ------------------
 6032|   669k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 669k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   669k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 669k, False: 0]
  |  Branch (6036:56): [True: 669k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   669k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 669k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.33M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   669k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   669k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   669k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 666k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.87k|    }                                                  \
  |  |  |  | 3667|   669k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   666k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.33M|                            make_eof_scan_error));
 6047|       |
 6048|  1.33M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 666k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   666k|            return result_type{it, 0};
 6056|  1.33M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   669k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  1.59M|{
 1964|  1.59M|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  1.59M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  1.59M|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  1.59M|    else {
 1949|  1.59M|        auto first = range.begin();
 1950|  2.45M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 2.45M, False: 3.37k]
  ------------------
 1951|  2.45M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 1.59M, False: 857k]
  ------------------
 1952|  1.59M|                return first;
 1953|  1.59M|            }
 1954|  2.45M|        }
 1955|  3.37k|        return first;
 1956|  1.59M|    }
 1957|  1.59M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.13M|    {
  108|  1.13M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.13M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.13M|    {
   94|  1.13M|        iter_difference_t<I> counter{0};
   95|  3.02M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.88M, False: 1.13M]
  ------------------
   96|  1.88M|            ++i;
   97|  1.88M|            ++counter;
   98|  1.88M|        }
   99|  1.13M|        return counter;
  100|  1.13M|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|   327k|    {
 1768|   327k|        auto stdloc = loc.get<std::locale>();
 1769|   327k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   327k|        grouping = numpunct.grouping();
 1771|   327k|        thousands_sep =
 1772|   327k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 327k]
  ------------------
 1773|   327k|        decimal_point = numpunct.decimal_point();
 1774|   327k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|   327k|{
 1705|   327k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 327k, False: 0]
  ------------------
 1706|   327k|        return std::use_facet<Facet>(stdloc);
 1707|   327k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   327k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|  2.17M|{
 1834|  2.17M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.16k, False: 2.17M]
  |  |  ------------------
  ------------------
 1835|  2.16k|        return unexpected(e);
 1836|  2.16k|    }
 1837|       |
 1838|  2.17M|    return ranges::next(range.begin());
 1839|  2.17M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  3.33M|{
  950|  3.33M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.02k, False: 3.33M]
  |  |  ------------------
  ------------------
  951|  6.02k|        return eof_error::eof;
  952|  6.02k|    }
  953|  3.33M|    return eof_error::good;
  954|  3.33M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  4.92M|{
  944|  4.92M|    return is_range_eof(r.begin(), r.end());
  945|  4.92M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  4.92M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.92M|    {
  937|  4.92M|        return begin == end;
  938|  4.92M|    }
  939|  4.92M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  2.17M|    {
  296|  2.17M|        ++x;
  297|  2.17M|        return x;
  298|  2.17M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   931k|{
 3130|   931k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   931k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 921k, False: 9.73k]
  ------------------
 3132|   921k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 921k, False: 91]
  ------------------
 3133|   921k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   921k|        }
 3135|     91|        return unexpected(eof_error::eof);
 3136|   921k|    }
 3137|       |
 3138|  9.73k|    auto& it = *r;
 3139|  9.73k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 8.21k, False: 1.52k]
  ------------------
 3140|  8.21k|        return std::pair{it, sign_type::minus_sign};
 3141|  8.21k|    }
 3142|  1.52k|    return std::pair{it, sign_type::plus_sign};
 3143|  9.73k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|  1.50M|{
 2261|  1.50M|    auto it = read_code_unit(range);
 2262|  1.50M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.20k, False: 1.50M]
  |  |  ------------------
  ------------------
 2263|  1.20k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  1.20k|    }
 2265|       |
 2266|  3.01M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 3.01M, False: 1.47M]
  ------------------
 2267|  3.01M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 29.3k, False: 2.98M]
  ------------------
 2268|  29.3k|            return *it;
 2269|  29.3k|        }
 2270|  3.01M|    }
 2271|       |
 2272|  1.47M|    return unexpected(parse_error::error);
 2273|  1.50M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|  2.41M|{
 2220|  2.41M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  2.41M|    else {
 2233|  2.41M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  2.41M|            if (ch < 'A' || ch > 'Z') {
 2235|  2.41M|                return ch;
 2236|  2.41M|            }
 2237|  2.41M|            return static_cast<char_type>(ch +
 2238|  2.41M|                                          static_cast<char_type>('a' - 'A'));
 2239|  2.41M|        };
 2240|       |
 2241|  2.41M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  2.41M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.41M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.41M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60.9k, False: 2.35M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  60.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  60.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  60.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  60.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  60.9k|    }                                                  \
  |  |  |  | 3667|  2.41M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  2.35M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  2.35M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  2.35M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.35M, False: 1.53k]
  |  |  ------------------
  ------------------
 2246|  2.35M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  2.35M|                    return ascii_tolower(a) ==
 2248|  2.35M|                           static_cast<detail::char_t<Range>>(b);
 2249|  2.35M|                }))) {
 2250|  2.35M|            return unexpected(parse_error::error);
 2251|  2.35M|        }
 2252|       |
 2253|  1.53k|        return it;
 2254|  2.35M|    }
 2255|  2.41M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  2.75M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  2.75M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 2.16M, False: 595k]
  |  Branch (2234:29): [True: 577k, False: 17.9k]
  ------------------
 2235|  2.74M|                return ch;
 2236|  2.74M|            }
 2237|  17.9k|            return static_cast<char_type>(ch +
 2238|  17.9k|                                          static_cast<char_type>('a' - 'A'));
 2239|  2.75M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|   664k|{
 2135|   664k|    auto it = read_code_unit(range);
 2136|   664k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 958, False: 663k]
  |  |  ------------------
  ------------------
 2137|    958|        return unexpected(make_eof_parse_error(it.error()));
 2138|    958|    }
 2139|       |
 2140|   663k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   663k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 660k, False: 3.31k]
  |  |  ------------------
  ------------------
 2141|   663k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   660k|        return unexpected(parse_error::error);
 2143|   660k|    }
 2144|       |
 2145|  3.31k|    return *it;
 2146|   663k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|  1.59M|{
 1984|  1.59M|    auto it = read_while_code_unit(range, pred);
 1985|  1.59M|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 910k, False: 685k]
  ------------------
 1986|   910k|        return unexpected(parse_error::error);
 1987|   910k|    }
 1988|   685k|    return it;
 1989|  1.59M|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|   659k|    {
 1609|   659k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   659k|                           ranges::common_range<Range>) {
 1626|   659k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   659k|            auto end_seg = range.end().contiguous_segment();
 1628|   659k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   659k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.8k, False: 637k]
  |  |  ------------------
  ------------------
 1629|   659k|                             detail::to_address(end_seg.end()))) {
 1630|  21.8k|                auto& str = m_storage.emplace();
 1631|  21.8k|                str.reserve(range.end().position() - range.begin().position());
 1632|  21.8k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  21.8k|                m_view = string_view_type{str};
 1634|  21.8k|                return;
 1635|  21.8k|            }
 1636|       |
 1637|   637k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   637k|                                                            end_seg.data());
 1639|   637k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   659k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  5.82M|    {
 1570|  5.82M|        return m_view;
 1571|  5.82M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  3.64M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   467k|    {
 6068|   467k|        const bool need_skipped_width =
 6069|   467k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 467k]
  |  Branch (6069:33): [True: 0, False: 467k]
  ------------------
 6070|   467k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   467k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 467k]
  ------------------
 6073|   467k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 467k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   467k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 467k, False: 0]
  ------------------
 6082|   467k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 467k]
  ------------------
 6083|   467k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   467k|        return result_type{rng.begin(), 0};
 6107|   467k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  2.41M|{
 1845|  2.41M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  2.41M|    if constexpr (ranges::sized_range<Range>) {
 1848|  2.41M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  2.41M|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 61.0k, False: 2.35M]
  ------------------
 1850|  61.0k|            return unexpected(eof_error::eof);
 1851|  61.0k|        }
 1852|       |
 1853|  2.35M|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  2.41M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  2.84M|{
 1887|  2.84M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  2.84M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  2.84M|    auto it = range.begin();
 1891|  2.84M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  2.84M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.84M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  2.84M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 2.84M, False: 0]
  ------------------
 1900|  2.84M|        ++it;
 1901|  2.84M|        return {it, string_type(1, *range.begin())};
 1902|  2.84M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  2.84M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  5.25M|{
  944|  5.25M|    return is_range_eof(r.begin(), r.end());
  945|  5.25M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  5.25M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  5.25M|    {
  937|  5.25M|        return begin == end;
  938|  5.25M|    }
  939|  5.25M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   591k|    {
  190|   591k|        i = std::move(bound);
  191|   591k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  2.84M|    {
 1878|  2.84M|        return !codepoint.empty();
 1879|  2.84M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.41M|{
  950|  2.41M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.38k, False: 2.40M]
  |  |  ------------------
  ------------------
  951|  4.38k|        return eof_error::eof;
  952|  4.38k|    }
  953|  2.40M|    return eof_error::good;
  954|  2.41M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  1.25M|{
 1834|  1.25M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 524, False: 1.25M]
  |  |  ------------------
  ------------------
 1835|    524|        return unexpected(e);
 1836|    524|    }
 1837|       |
 1838|  1.25M|    return ranges::next(range.begin());
 1839|  1.25M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.25M|    {
  296|  1.25M|        ++x;
  297|  1.25M|        return x;
  298|  1.25M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   919k|{
 3130|   919k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   919k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 913k, False: 5.83k]
  ------------------
 3132|   913k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 913k, False: 30]
  ------------------
 3133|   913k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   913k|        }
 3135|     30|        return unexpected(eof_error::eof);
 3136|   913k|    }
 3137|       |
 3138|  5.83k|    auto& it = *r;
 3139|  5.83k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 4.56k, False: 1.26k]
  ------------------
 3140|  4.56k|        return std::pair{it, sign_type::minus_sign};
 3141|  4.56k|    }
 3142|  1.26k|    return std::pair{it, sign_type::plus_sign};
 3143|  5.83k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  1.04M|{
 2261|  1.04M|    auto it = read_code_unit(range);
 2262|  1.04M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264, False: 1.04M]
  |  |  ------------------
  ------------------
 2263|    264|        return unexpected(make_eof_parse_error(it.error()));
 2264|    264|    }
 2265|       |
 2266|  2.08M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 2.08M, False: 1.02M]
  ------------------
 2267|  2.08M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 12.5k, False: 2.06M]
  ------------------
 2268|  12.5k|            return *it;
 2269|  12.5k|        }
 2270|  2.08M|    }
 2271|       |
 2272|  1.02M|    return unexpected(parse_error::error);
 2273|  1.04M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  2.41M|{
 2220|  2.41M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  2.41M|    else {
 2233|  2.41M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  2.41M|            if (ch < 'A' || ch > 'Z') {
 2235|  2.41M|                return ch;
 2236|  2.41M|            }
 2237|  2.41M|            return static_cast<char_type>(ch +
 2238|  2.41M|                                          static_cast<char_type>('a' - 'A'));
 2239|  2.41M|        };
 2240|       |
 2241|  2.41M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  2.41M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.41M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.41M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 61.0k, False: 2.35M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  61.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  61.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  61.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  61.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  61.0k|    }                                                  \
  |  |  |  | 3667|  2.41M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  2.35M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  2.35M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  2.35M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.35M, False: 1.53k]
  |  |  ------------------
  ------------------
 2246|  2.35M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  2.35M|                    return ascii_tolower(a) ==
 2248|  2.35M|                           static_cast<detail::char_t<Range>>(b);
 2249|  2.35M|                }))) {
 2250|  2.35M|            return unexpected(parse_error::error);
 2251|  2.35M|        }
 2252|       |
 2253|  1.53k|        return it;
 2254|  2.35M|    }
 2255|  2.41M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  2.76M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  2.76M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 2.16M, False: 597k]
  |  Branch (2234:29): [True: 579k, False: 18.0k]
  ------------------
 2235|  2.74M|                return ch;
 2236|  2.74M|            }
 2237|  18.0k|            return static_cast<char_type>(ch +
 2238|  18.0k|                                          static_cast<char_type>('a' - 'A'));
 2239|  2.76M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   209k|{
 2135|   209k|    auto it = read_code_unit(range);
 2136|   209k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 260, False: 209k]
  |  |  ------------------
  ------------------
 2137|    260|        return unexpected(make_eof_parse_error(it.error()));
 2138|    260|    }
 2139|       |
 2140|   209k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 207k, False: 1.32k]
  |  |  ------------------
  ------------------
 2141|   209k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   207k|        return unexpected(parse_error::error);
 2143|   207k|    }
 2144|       |
 2145|  1.32k|    return *it;
 2146|   209k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|   537k|{
 1964|   537k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   537k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|   537k|{
 1945|   537k|    if constexpr (ranges::common_range<Range>) {
 1946|   537k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|   537k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   916k|{
 2940|   916k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 916k, False: 0]
  ------------------
 2941|   916k|        auto it = read_while_classic_space(range);
 2942|   916k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   916k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   916k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.38k, False: 912k]
  |  |  ------------------
  ------------------
 2944|  3.38k|            return unexpected(e);
 2945|  3.38k|        }
 2946|       |
 2947|   912k|        return it;
 2948|   916k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   916k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   916k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   916k|    else {
 2114|   916k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   916k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   916k|            return detail::is_cp_space(cp);
 2127|   916k|        });
 2128|   916k|    }
 2129|   916k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|   916k|{
 2070|   916k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   916k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  1.57M|{
 2049|  1.57M|    auto it = range.begin();
 2050|  3.24M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 2.84M, False: 406k]
  ------------------
 2051|  2.84M|        const auto val =
 2052|  2.84M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  2.84M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.84M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.84M, False: 0]
  |  |  ------------------
  ------------------
 2054|  2.84M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  2.84M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  2.84M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.16M, False: 1.67M]
  ------------------
 2057|  1.16M|                return it;
 2058|  1.16M|            }
 2059|  2.84M|        }
 2060|  1.67M|        it = val.iterator;
 2061|  1.67M|    }
 2062|       |
 2063|   406k|    return it;
 2064|  1.57M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   916k|        : m_fptr([](storage fn,
  743|   916k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   916k|              cvref<T> obj = *get<T>(fn);
  745|   916k|              if constexpr (std::is_void_v<R>) {
  746|   916k|                  obj(static_cast<decltype(args)>(args)...);
  747|   916k|              }
  748|   916k|              else {
  749|   916k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   916k|              }
  751|   916k|          }),
  752|   916k|          m_storage(std::addressof(f))
  753|   916k|    {
  754|   916k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.59M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.59M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.59M|              else {
  749|  1.59M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.59M|              }
  751|  1.59M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.59M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.59M|        else if constexpr (std::is_object_v<T>) {
  688|  1.59M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.59M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  1.59M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.59M|            return detail::is_cp_space(cp);
 2127|  1.59M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   916k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   916k|        {
  662|   916k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  2.12M|    {
  304|  2.12M|        ranges::advance(x, n);
  305|  2.12M|        return x;
  306|  2.12M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  2.12M|    {
  268|  2.12M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.12M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  2.12M|    {
  181|  6.78M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 4.66M, False: 2.12M]
  ------------------
  182|  4.66M|            ++i;
  183|  4.66M|        }
  184|  2.12M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   207k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   207k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   207k|            auto rd = make_reader<T, char_type>();
 6195|   207k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 207k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   207k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 207k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   207k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   207k|                return impl(rd, range, value);
 6202|   207k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   207k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  1.33M|    {
 3029|  1.33M|        reader_error_handler eh{};
 3030|  1.33M|        get_derived().check_specs_impl(specs, eh);
 3031|  1.33M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.33M]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|  1.33M|        return {};
 3035|  1.33M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3039|  1.33M|    {
 3040|  1.33M|        return static_cast<Derived&>(*this);
 3041|  1.33M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  1.33M|    {
 4134|  1.33M|        detail::check_float_type_specs(specs, eh);
 4135|  1.33M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   207k|    {
 6113|   207k|        const bool need_skipped_width =
 6114|   207k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 207k]
  |  Branch (6114:33): [True: 0, False: 207k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   207k|        auto it = rng.begin();
 6118|   207k|        std::ptrdiff_t prefix_width = 0;
 6119|   207k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 207k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   207k|        else {
 6127|   207k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 898, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    898|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    898|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    898|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    898|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    898|    }                                                  \
  |  |  |  | 3667|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   206k|            std::tie(it, prefix_width) = prefix_result;
 6129|   206k|        }
 6130|   206k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   206k|        std::ptrdiff_t value_width = 0;
 6134|   206k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 206k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   206k|        else {
 6150|   206k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 66.0k, False: 140k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  66.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  66.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  66.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  66.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  66.0k|    }                                                  \
  |  | 3667|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   140k|                                             specs, value, loc));
 6152|       |
 6153|   140k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 140k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   140k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   140k|        std::ptrdiff_t postfix_width = 0;
 6162|   140k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 139k, False: 398]
  ------------------
 6163|   139k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 139k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   139k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   139k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   139k|                                 value_width));
 6167|   139k|            std::tie(it, postfix_width) = postfix_result;
 6168|   139k|        }
 6169|       |
 6170|   140k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   140k|                                                 value_width, postfix_width);
 6172|   140k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 140k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   140k|        return it;
 6177|   140k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3023|  2.76M|    {
 3024|  2.76M|        return true;
 3025|  2.76M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4205|  1.33M|    {
 4206|  1.33M|        unsigned options{};
 4207|  1.33M|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 327k, False: 1.00M]
  ------------------
 4208|   327k|            options |= float_reader_base::allow_thsep;
 4209|   327k|        }
 4210|       |
 4211|  1.33M|        SCN_GCC_COMPAT_PUSH
 4212|  1.33M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|  1.33M|        switch (specs.type) {
 4215|   253k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 253k, False: 1.07M]
  ------------------
 4216|   253k|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|  82.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 82.1k, False: 1.25M]
  ------------------
 4219|  82.1k|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|   362k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 362k, False: 971k]
  ------------------
 4222|   362k|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|   307k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 307k, False: 1.02M]
  ------------------
 4225|   307k|                return options | float_reader_base::allow_scientific |
 4226|   307k|                       float_reader_base::allow_fixed;
 4227|       |
 4228|   327k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 327k, False: 1.00M]
  ------------------
 4229|   327k|                return options | float_reader_base::allow_scientific |
 4230|   327k|                       float_reader_base::allow_fixed |
 4231|   327k|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 1.33M]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|  1.33M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|  1.33M|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|  1.33M|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3648|  1.33M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1758|  1.82M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1519|  3.64M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3679|   431k|    {
 3680|   431k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   431k|        const std::ptrdiff_t sign_len =
 3683|   431k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 2.32k, False: 428k]
  ------------------
 3684|       |
 3685|   431k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   431k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   431k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   431k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.9k, False: 381k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  49.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  49.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  49.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  49.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  49.9k|    }                                                  \
  |  |  |  | 3667|   431k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   381k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   431k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4045|  1.45M|    {
 4046|  1.45M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 1.45M, False: 0]
  ------------------
 4047|  1.45M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 1.45M, False: 0]
  ------------------
 4048|  1.45M|            return;
 4049|  1.45M|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|  1.62M|    {
 1575|  1.62M|        return m_storage.has_value();
 1576|  1.62M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|   953k|    {
 1580|   953k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   953k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   953k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|   953k|        return *m_storage;
 1582|   953k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   206k|    {
 4159|   206k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   206k|#if !SCN_DISABLE_LOCALE
 4162|   206k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 46.7k, False: 159k]
  ------------------
 4163|  46.7k|            return read_impl<Range>(
 4164|  46.7k|                range, rd,
 4165|  46.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  46.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  46.7k|                },
 4168|  46.7k|                value, loc);
 4169|  46.7k|        }
 4170|   159k|#endif
 4171|       |
 4172|   159k|        return read_impl<Range>(
 4173|   159k|            range, rd,
 4174|   159k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   159k|                return r.read_source(SCN_FWD(args)...);
 4176|   159k|            },
 4177|   159k|            value);
 4178|   206k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   276k|    {
 4195|   276k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   276k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82.8k, False: 193k]
  |  |  ------------------
  ------------------
 4197|  82.8k|            return unexpected(r.error());
 4198|  82.8k|        }
 4199|       |
 4200|   193k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.97k, False: 190k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.97k|    }                                                  \
  |  |  |  | 3667|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   190k|        return ranges::next(range.begin(), n);
 4202|   193k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   912k|    {
  763|   912k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   912k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   912k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  46.7k|        : m_fptr([](storage fn,
  743|  46.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.7k|              cvref<T> obj = *get<T>(fn);
  745|  46.7k|              if constexpr (std::is_void_v<R>) {
  746|  46.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.7k|              }
  748|  46.7k|              else {
  749|  46.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.7k|              }
  751|  46.7k|          }),
  752|  46.7k|          m_storage(std::addressof(f))
  753|  46.7k|    {
  754|  46.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  46.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  46.7k|              else {
  749|  46.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.7k|              }
  751|  46.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  46.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  46.7k|        else if constexpr (std::is_object_v<T>) {
  688|  46.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  46.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  46.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  46.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  46.7k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3667|   163k|    {
 3668|   163k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   163k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   163k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   163k|        return read_source_impl(range);
 3674|   163k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3693|   912k|    {
 3694|   912k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   912k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   912k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   912k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   912k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 912k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   912k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   912k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   912k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   912k|        auto it = sign_result.first;
 3697|   912k|        m_sign = sign_result.second;
 3698|       |
 3699|   912k|        auto digits_begin = it;
 3700|   912k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|   912k|        else {
 3727|   912k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|   912k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   912k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   912k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 252k, False: 659k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   252k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   252k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   252k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   252k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   252k|    }                                                  \
  |  | 3667|   912k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   912k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|   659k|                it,
 3729|   659k|                do_read_source_impl(
 3730|   659k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|   659k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|   659k|        }
 3733|       |
 3734|   912k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   912k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   912k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   659k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 659k, False: 0]
  |  Branch (3736:48): [True: 659k, False: 0]
  ------------------
 3737|   659k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 659k, False: 0]
  ------------------
 3738|   659k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 659k, False: 0]
  ------------------
 3739|   659k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   659k|        }
 3741|       |
 3742|   659k|        handle_separators();
 3743|       |
 3744|   659k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 659k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   659k|        return it;
 3757|   659k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3988|   912k|    {
 3989|   912k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   912k|        const bool allowed_nonhex =
 3991|   912k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   912k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   912k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 912k, False: 0]
  |  Branch (3994:45): [True: 0, False: 912k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   912k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 912k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|   912k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 912k, False: 0]
  |  Branch (4003:45): [True: 0, False: 912k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|   912k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 912k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|   912k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 590k, False: 321k]
  |  Branch (4010:28): [True: 180k, False: 409k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   180k|            auto it = range.begin();
 4014|       |
 4015|   180k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 462, False: 180k]
  ------------------
 4016|    462|                m_kind = float_kind::hex_with_prefix;
 4017|    462|                it = *r;
 4018|    462|            }
 4019|   180k|            else {
 4020|   180k|                m_kind = float_kind::hex_without_prefix;
 4021|   180k|            }
 4022|       |
 4023|   180k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   180k|        }
 4025|   731k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 321k, False: 409k]
  |  Branch (4025:29): [True: 321k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   321k|            m_kind = float_kind::generic;
 4029|   321k|            return read_regular_float(range);
 4030|   321k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   409k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07k, False: 408k]
  |  |  ------------------
  ------------------
 4036|  1.07k|            m_kind = float_kind::hex_with_prefix;
 4037|  1.07k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  1.07k|        }
 4039|       |
 4040|   408k|        m_kind = float_kind::generic;
 4041|   408k|        return read_regular(range);
 4042|   409k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3799|   912k|    {
 3800|   912k|        auto it = range.begin();
 3801|   912k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 912k, False: 0]
  ------------------
 3802|   912k|            return unexpected(r.error());
 3803|   912k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|   912k|    {
 3823|   912k|        auto it = range.begin();
 3824|   912k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 912k, False: 0]
  ------------------
 3825|   912k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   912k|                scan_error::invalid_scanned_value,
 3827|   912k|                "Invalid floating-point NaN value"));
 3828|   912k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3792|   590k|    {
 3793|   590k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   590k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3892|   181k|    {
 3893|   181k|        auto it = range.begin();
 3894|       |
 3895|   181k|        std::ptrdiff_t digits_count = 0;
 3896|   181k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|   181k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.5k, False: 142k]
  |  |  ------------------
  ------------------
 3898|  39.5k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  39.5k|                scan_error::invalid_scanned_value,
 3900|  39.5k|                "Invalid hexadecimal floating-point value"));
 3901|  39.5k|        }
 3902|   142k|        else {
 3903|   142k|            digits_count += ranges::distance(it, *r);
 3904|   142k|            it = *r;
 3905|   142k|        }
 3906|       |
 3907|   142k|        m_integral_part_length = digits_count;
 3908|   142k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 606, False: 141k]
  ------------------
 3909|   142k|                                             m_locale_options.decimal_point)) {
 3910|    606|            it = *r;
 3911|    606|        }
 3912|       |
 3913|   142k|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 504, False: 141k]
  ------------------
 3914|   142k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|    504|            digits_count += ranges::distance(it, *r);
 3916|    504|            it = *r;
 3917|    504|        }
 3918|       |
 3919|   142k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|   142k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|   142k|        return it;
 3927|   142k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3777|   324k|    {
 3778|   324k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 324k]
  |  |  |  Branch (859:45): [True: 0, False: 324k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|   324k|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|   324k|        return read_while1_code_unit(
 3787|   324k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|   324k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   324k|        : m_fptr([](storage fn,
  743|   324k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   324k|              cvref<T> obj = *get<T>(fn);
  745|   324k|              if constexpr (std::is_void_v<R>) {
  746|   324k|                  obj(static_cast<decltype(args)>(args)...);
  747|   324k|              }
  748|   324k|              else {
  749|   324k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   324k|              }
  751|   324k|          }),
  752|   324k|          m_storage(std::addressof(f))
  753|   324k|    {
  754|   324k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   508k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   508k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   508k|              else {
  749|   508k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   508k|              }
  751|   508k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   508k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   508k|        else if constexpr (std::is_object_v<T>) {
  688|   508k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   508k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3787|   508k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   324k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   324k|        {
  662|   324k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3864|   577k|    {
 3865|   577k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 19.6k, False: 558k]
  ------------------
 3866|  19.6k|            auto beg_exp_it = range.begin();
 3867|  19.6k|            auto it = *r;
 3868|       |
 3869|  19.6k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 19.5k, False: 91]
  ------------------
 3870|  19.6k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  19.5k|                it = r_sign->first;
 3872|  19.5k|            }
 3873|       |
 3874|  19.6k|            if (auto r_exp = read_while1_code_unit(
 3875|  19.6k|                    ranges::subrange{it, range.end()},
 3876|  19.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  19.6k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.67k, False: 17.9k]
  |  |  ------------------
  ------------------
 3878|  1.67k|                it = beg_exp_it;
 3879|  1.67k|            }
 3880|  17.9k|            else {
 3881|  17.9k|                it = *r_exp;
 3882|  17.9k|            }
 3883|       |
 3884|  19.6k|            return it;
 3885|  19.6k|        }
 3886|   558k|        return range.begin();
 3887|   577k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  19.6k|        : m_fptr([](storage fn,
  743|  19.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.6k|              cvref<T> obj = *get<T>(fn);
  745|  19.6k|              if constexpr (std::is_void_v<R>) {
  746|  19.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.6k|              }
  748|  19.6k|              else {
  749|  19.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.6k|              }
  751|  19.6k|          }),
  752|  19.6k|          m_storage(std::addressof(f))
  753|  19.6k|    {
  754|  19.6k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  67.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  67.3k|              else {
  749|  67.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.3k|              }
  751|  67.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  67.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  67.3k|        else if constexpr (std::is_object_v<T>) {
  688|  67.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  67.3k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3876|  67.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  19.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  19.6k|        {
  662|  19.6k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3932|   730k|    {
 3933|   730k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   730k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 603k, False: 126k]
  |  Branch (3934:50): [True: 41.0k, False: 562k]
  ------------------
 3935|       |
 3936|   730k|        auto it = ranges::begin(range);
 3937|   730k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   730k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   730k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 207k, False: 522k]
  |  |  ------------------
  ------------------
 3941|   207k|            return r.transform_error(
 3942|   207k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|   207k|                                              "Invalid floating-point value"));
 3944|   207k|        }
 3945|   522k|        else {
 3946|   522k|            digits_count += ranges::distance(it, *r);
 3947|   522k|            it = *r;
 3948|   522k|        }
 3949|       |
 3950|   522k|        m_integral_part_length = digits_count;
 3951|   522k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 2.70k, False: 519k]
  ------------------
 3952|   522k|                                             m_locale_options.decimal_point)) {
 3953|  2.70k|            it = *r;
 3954|  2.70k|        }
 3955|       |
 3956|   522k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 2.28k, False: 520k]
  ------------------
 3957|   522k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  2.28k|            digits_count += ranges::distance(it, *r);
 3959|  2.28k|            it = *r;
 3960|  2.28k|        }
 3961|       |
 3962|   522k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 522k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   522k|        auto beg_exp_it = it;
 3968|   522k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 435k, False: 86.9k]
  ------------------
 3969|   435k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   435k|        }
 3971|   522k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 6.81k, False: 515k]
  |  Branch (3971:29): [True: 5.45k, False: 1.36k]
  ------------------
 3972|  5.45k|            return unexpected_scan_error(
 3973|  5.45k|                scan_error::invalid_scanned_value,
 3974|  5.45k|                "No exponent given to scientific float");
 3975|  5.45k|        }
 3976|       |
 3977|   516k|        m_kind =
 3978|   516k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 499k, False: 17.8k]
  ------------------
 3979|       |
 3980|   516k|        return it;
 3981|   522k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3762|  1.25M|    {
 3763|  1.25M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.25M]
  |  |  |  Branch (859:45): [True: 0, False: 1.25M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|  1.25M|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|  1.25M|        return read_while1_code_unit(
 3772|  1.25M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|  1.25M|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.25M|        : m_fptr([](storage fn,
  743|  1.25M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.25M|              cvref<T> obj = *get<T>(fn);
  745|  1.25M|              if constexpr (std::is_void_v<R>) {
  746|  1.25M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.25M|              }
  748|  1.25M|              else {
  749|  1.25M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.25M|              }
  751|  1.25M|          }),
  752|  1.25M|          m_storage(std::addressof(f))
  753|  1.25M|    {
  754|  1.25M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.87M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.87M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.87M|              else {
  749|  1.87M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.87M|              }
  751|  1.87M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.87M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.87M|        else if constexpr (std::is_object_v<T>) {
  688|  1.87M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.87M|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3772|  1.87M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.25M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.25M|        {
  662|  1.25M|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1564|   659k|    {
 1565|   659k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   659k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   659k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  46.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  46.7k|        {
  662|  46.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   159k|        : m_fptr([](storage fn,
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|   159k|              if constexpr (std::is_void_v<R>) {
  746|   159k|                  obj(static_cast<decltype(args)>(args)...);
  747|   159k|              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
  752|   159k|          m_storage(std::addressof(f))
  753|   159k|    {
  754|   159k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   159k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   159k|        else if constexpr (std::is_object_v<T>) {
  688|   159k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   159k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   159k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   159k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   159k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3653|   748k|    {
 3654|   748k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 748k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   748k|        return read_source_impl(range);
 3660|   748k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   159k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   159k|        {
  662|   159k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   206k|    {
 4159|   206k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   206k|#if !SCN_DISABLE_LOCALE
 4162|   206k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 46.7k, False: 159k]
  ------------------
 4163|  46.7k|            return read_impl<Range>(
 4164|  46.7k|                range, rd,
 4165|  46.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  46.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  46.7k|                },
 4168|  46.7k|                value, loc);
 4169|  46.7k|        }
 4170|   159k|#endif
 4171|       |
 4172|   159k|        return read_impl<Range>(
 4173|   159k|            range, rd,
 4174|   159k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   159k|                return r.read_source(SCN_FWD(args)...);
 4176|   159k|            },
 4177|   159k|            value);
 4178|   206k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   276k|    {
 4195|   276k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   276k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 237k]
  |  |  ------------------
  ------------------
 4197|  38.9k|            return unexpected(r.error());
 4198|  38.9k|        }
 4199|       |
 4200|   237k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46.9k, False: 190k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  46.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  46.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  46.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  46.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  46.9k|    }                                                  \
  |  |  |  | 3667|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   190k|        return ranges::next(range.begin(), n);
 4202|   237k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   912k|    {
  763|   912k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   912k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   912k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  46.7k|        : m_fptr([](storage fn,
  743|  46.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.7k|              cvref<T> obj = *get<T>(fn);
  745|  46.7k|              if constexpr (std::is_void_v<R>) {
  746|  46.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.7k|              }
  748|  46.7k|              else {
  749|  46.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.7k|              }
  751|  46.7k|          }),
  752|  46.7k|          m_storage(std::addressof(f))
  753|  46.7k|    {
  754|  46.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  46.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  46.7k|              else {
  749|  46.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.7k|              }
  751|  46.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  46.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  46.7k|        else if constexpr (std::is_object_v<T>) {
  688|  46.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  46.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  46.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  46.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  46.7k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|   164k|    {
 3668|   164k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   164k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   164k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   164k|        return read_source_impl(range);
 3674|   164k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|   912k|    {
 3694|   912k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   912k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   912k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   912k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   912k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 912k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   912k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   912k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   912k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   912k|        auto it = sign_result.first;
 3697|   912k|        m_sign = sign_result.second;
 3698|       |
 3699|   912k|        auto digits_begin = it;
 3700|   912k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|   912k|                      ranges::sized_range<Range>) {
 3703|   912k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 912k]
  |  |  |  Branch (859:45): [True: 0, False: 912k]
  |  |  |  Branch (859:45): [True: 0, False: 912k]
  |  |  ------------------
  ------------------
 3704|   912k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|   912k|            else {
 3713|   912k|                auto cb = [&](const auto& rr)
 3714|   912k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   912k|                    auto res = read_all(rr);
 3716|   912k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|   912k|                        return unexpected_scan_error(
 3718|   912k|                            scan_error::invalid_scanned_value,
 3719|   912k|                            "Invalid float value");
 3720|   912k|                    }
 3721|   912k|                    return res;
 3722|   912k|                };
 3723|   912k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   912k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   912k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   912k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 118k, False: 794k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   118k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   118k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   118k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   118k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   118k|    }                                                  \
  |  | 3667|   912k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   912k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|   794k|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|   912k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   912k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   912k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   794k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 794k, False: 0]
  |  Branch (3736:48): [True: 794k, False: 0]
  ------------------
 3737|   794k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 794k, False: 0]
  ------------------
 3738|   794k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 794k, False: 0]
  ------------------
 3739|   794k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   794k|        }
 3741|       |
 3742|   794k|        handle_separators();
 3743|       |
 3744|   794k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 794k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   794k|        return it;
 3757|   794k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|   912k|    {
 3800|   912k|        auto it = range.begin();
 3801|   912k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 912k, False: 0]
  ------------------
 3802|   912k|            return unexpected(r.error());
 3803|   912k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|   912k|    {
 3823|   912k|        auto it = range.begin();
 3824|   912k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 912k, False: 0]
  ------------------
 3825|   912k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   912k|                scan_error::invalid_scanned_value,
 3827|   912k|                "Invalid floating-point NaN value"));
 3828|   912k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|   591k|    {
 3793|   591k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   591k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|   537k|{
 1984|   537k|    auto it = read_while_code_unit(range, pred);
 1985|   537k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 321k, False: 216k]
  ------------------
 1986|   321k|        return unexpected(parse_error::error);
 1987|   321k|    }
 1988|   216k|    return it;
 1989|   537k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3864|   122k|    {
 3865|   122k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 6.69k, False: 115k]
  ------------------
 3866|  6.69k|            auto beg_exp_it = range.begin();
 3867|  6.69k|            auto it = *r;
 3868|       |
 3869|  6.69k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 6.66k, False: 30]
  ------------------
 3870|  6.69k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  6.66k|                it = r_sign->first;
 3872|  6.66k|            }
 3873|       |
 3874|  6.69k|            if (auto r_exp = read_while1_code_unit(
 3875|  6.69k|                    ranges::subrange{it, range.end()},
 3876|  6.69k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  6.69k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  6.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 632, False: 6.05k]
  |  |  ------------------
  ------------------
 3878|    632|                it = beg_exp_it;
 3879|    632|            }
 3880|  6.05k|            else {
 3881|  6.05k|                it = *r_exp;
 3882|  6.05k|            }
 3883|       |
 3884|  6.69k|            return it;
 3885|  6.69k|        }
 3886|   115k|        return range.begin();
 3887|   122k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  6.69k|        : m_fptr([](storage fn,
  743|  6.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.69k|              cvref<T> obj = *get<T>(fn);
  745|  6.69k|              if constexpr (std::is_void_v<R>) {
  746|  6.69k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.69k|              }
  748|  6.69k|              else {
  749|  6.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.69k|              }
  751|  6.69k|          }),
  752|  6.69k|          m_storage(std::addressof(f))
  753|  6.69k|    {
  754|  6.69k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  22.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  22.8k|              else {
  749|  22.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.8k|              }
  751|  22.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  22.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  22.8k|        else if constexpr (std::is_object_v<T>) {
  688|  22.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  22.8k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3876|  22.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  6.69k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.69k|        {
  662|  6.69k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|   321k|    {
 3933|   321k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   321k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 194k, False: 126k]
  |  Branch (3934:50): [True: 41.0k, False: 153k]
  ------------------
 3935|       |
 3936|   321k|        auto it = ranges::begin(range);
 3937|   321k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   321k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   321k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112k, False: 209k]
  |  |  ------------------
  ------------------
 3941|   112k|            return r.transform_error(
 3942|   112k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|   112k|                                              "Invalid floating-point value"));
 3944|   112k|        }
 3945|   209k|        else {
 3946|   209k|            digits_count += ranges::distance(it, *r);
 3947|   209k|            it = *r;
 3948|   209k|        }
 3949|       |
 3950|   209k|        m_integral_part_length = digits_count;
 3951|   209k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 1.32k, False: 207k]
  ------------------
 3952|   209k|                                             m_locale_options.decimal_point)) {
 3953|  1.32k|            it = *r;
 3954|  1.32k|        }
 3955|       |
 3956|   209k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 1.11k, False: 208k]
  ------------------
 3957|   209k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  1.11k|            digits_count += ranges::distance(it, *r);
 3959|  1.11k|            it = *r;
 3960|  1.11k|        }
 3961|       |
 3962|   209k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 209k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   209k|        auto beg_exp_it = it;
 3968|   209k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 122k, False: 86.9k]
  ------------------
 3969|   122k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   122k|        }
 3971|   209k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 6.81k, False: 202k]
  |  Branch (3971:29): [True: 5.45k, False: 1.36k]
  ------------------
 3972|  5.45k|            return unexpected_scan_error(
 3973|  5.45k|                scan_error::invalid_scanned_value,
 3974|  5.45k|                "No exponent given to scientific float");
 3975|  5.45k|        }
 3976|       |
 3977|   203k|        m_kind =
 3978|   203k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 197k, False: 6.05k]
  ------------------
 3979|       |
 3980|   203k|        return it;
 3981|   209k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|   530k|    {
 3763|   530k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   530k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 530k]
  |  |  |  Branch (859:45): [True: 0, False: 530k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   530k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   530k|        return read_while1_code_unit(
 3772|   530k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   530k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   530k|        : m_fptr([](storage fn,
  743|   530k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   530k|              cvref<T> obj = *get<T>(fn);
  745|   530k|              if constexpr (std::is_void_v<R>) {
  746|   530k|                  obj(static_cast<decltype(args)>(args)...);
  747|   530k|              }
  748|   530k|              else {
  749|   530k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   530k|              }
  751|   530k|          }),
  752|   530k|          m_storage(std::addressof(f))
  753|   530k|    {
  754|   530k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   785k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   785k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   785k|              else {
  749|   785k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   785k|              }
  751|   785k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   785k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   785k|        else if constexpr (std::is_object_v<T>) {
  688|   785k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   785k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3772|   785k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   530k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   530k|        {
  662|   530k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|   912k|    {
 3989|   912k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   912k|        const bool allowed_nonhex =
 3991|   912k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   912k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   912k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 912k, False: 0]
  |  Branch (3994:45): [True: 0, False: 912k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   912k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 912k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|   912k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 912k, False: 0]
  |  Branch (4003:45): [True: 0, False: 912k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|   912k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 912k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|   912k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 591k, False: 321k]
  |  Branch (4010:28): [True: 181k, False: 410k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   181k|            auto it = range.begin();
 4014|       |
 4015|   181k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 462, False: 180k]
  ------------------
 4016|    462|                m_kind = float_kind::hex_with_prefix;
 4017|    462|                it = *r;
 4018|    462|            }
 4019|   180k|            else {
 4020|   180k|                m_kind = float_kind::hex_without_prefix;
 4021|   180k|            }
 4022|       |
 4023|   181k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   181k|        }
 4025|   731k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 321k, False: 410k]
  |  Branch (4025:29): [True: 321k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   321k|            m_kind = float_kind::generic;
 4029|   321k|            return read_regular_float(range);
 4030|   321k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   410k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07k, False: 408k]
  |  |  ------------------
  ------------------
 4036|  1.07k|            m_kind = float_kind::hex_with_prefix;
 4037|  1.07k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  1.07k|        }
 4039|       |
 4040|   408k|        m_kind = float_kind::generic;
 4041|   408k|        return read_regular(range);
 4042|   410k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|   591k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   591k|                    auto res = read_all(rr);
 3716|   591k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178, False: 591k]
  |  |  ------------------
  ------------------
 3717|    178|                        return unexpected_scan_error(
 3718|    178|                            scan_error::invalid_scanned_value,
 3719|    178|                            "Invalid float value");
 3720|    178|                    }
 3721|   591k|                    return res;
 3722|   591k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|   591k|{
 1827|   591k|    return ranges::next(range.begin(), range.end());
 1828|   591k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   591k|    {
  313|   591k|        ranges::advance(x, bound);
  314|   591k|        return x;
  315|   591k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   591k|    {
  275|   591k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   591k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|   794k|    {
 1565|   794k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   794k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   794k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1608|   794k|    {
 1609|   794k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|   794k|                      ranges::sized_range<Range>) {
 1614|   794k|            m_storage.reset();
 1615|   794k|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   794k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  46.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  46.7k|        {
  662|  46.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   159k|        : m_fptr([](storage fn,
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|   159k|              if constexpr (std::is_void_v<R>) {
  746|   159k|                  obj(static_cast<decltype(args)>(args)...);
  747|   159k|              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
  752|   159k|          m_storage(std::addressof(f))
  753|   159k|    {
  754|   159k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   159k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   159k|        else if constexpr (std::is_object_v<T>) {
  688|   159k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   159k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   159k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   159k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   159k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|   748k|    {
 3654|   748k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 748k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   748k|        return read_source_impl(range);
 3660|   748k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   159k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   159k|        {
  662|   159k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   229k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   229k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   229k|            auto rd = make_reader<T, char_type>();
 6195|   229k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 229k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   229k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 229k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   229k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   229k|                return impl(rd, range, value);
 6202|   229k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   229k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   229k|    {
 6113|   229k|        const bool need_skipped_width =
 6114|   229k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 229k]
  |  Branch (6114:33): [True: 0, False: 229k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   229k|        auto it = rng.begin();
 6118|   229k|        std::ptrdiff_t prefix_width = 0;
 6119|   229k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 229k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   229k|        else {
 6127|   229k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 966, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    966|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    966|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    966|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    966|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    966|    }                                                  \
  |  |  |  | 3667|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   228k|            std::tie(it, prefix_width) = prefix_result;
 6129|   228k|        }
 6130|   228k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   228k|        std::ptrdiff_t value_width = 0;
 6134|   228k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 228k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   228k|        else {
 6150|   228k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 65.9k, False: 162k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  65.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  65.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  65.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  65.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  65.9k|    }                                                  \
  |  | 3667|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   162k|                                             specs, value, loc));
 6152|       |
 6153|   162k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 162k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   162k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   162k|        std::ptrdiff_t postfix_width = 0;
 6162|   162k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 161k, False: 430]
  ------------------
 6163|   161k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 161k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   161k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   161k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   161k|                                 value_width));
 6167|   161k|            std::tie(it, postfix_width) = postfix_result;
 6168|   161k|        }
 6169|       |
 6170|   162k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   162k|                                                 value_width, postfix_width);
 6172|   162k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 162k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   162k|        return it;
 6177|   162k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|   505k|    {
 3680|   505k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   505k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   505k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   505k|        const std::ptrdiff_t sign_len =
 3683|   505k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 2.39k, False: 503k]
  ------------------
 3684|       |
 3685|   505k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   505k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   505k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   505k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   505k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 47.7k, False: 458k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  47.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  47.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  47.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  47.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  47.7k|    }                                                  \
  |  |  |  | 3667|   505k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   458k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   505k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   228k|    {
 4159|   228k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   228k|#if !SCN_DISABLE_LOCALE
 4162|   228k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 57.6k, False: 170k]
  ------------------
 4163|  57.6k|            return read_impl<Range>(
 4164|  57.6k|                range, rd,
 4165|  57.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  57.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  57.6k|                },
 4168|  57.6k|                value, loc);
 4169|  57.6k|        }
 4170|   170k|#endif
 4171|       |
 4172|   170k|        return read_impl<Range>(
 4173|   170k|            range, rd,
 4174|   170k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   170k|                return r.read_source(SCN_FWD(args)...);
 4176|   170k|            },
 4177|   170k|            value);
 4178|   228k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   314k|    {
 4195|   314k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   314k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.3k, False: 230k]
  |  |  ------------------
  ------------------
 4197|  84.3k|            return unexpected(r.error());
 4198|  84.3k|        }
 4199|       |
 4200|   230k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.39k, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.39k|    }                                                  \
  |  |  |  | 3667|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   228k|        return ranges::next(range.begin(), n);
 4202|   230k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  57.6k|        : m_fptr([](storage fn,
  743|  57.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.6k|              cvref<T> obj = *get<T>(fn);
  745|  57.6k|              if constexpr (std::is_void_v<R>) {
  746|  57.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.6k|              }
  748|  57.6k|              else {
  749|  57.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.6k|              }
  751|  57.6k|          }),
  752|  57.6k|          m_storage(std::addressof(f))
  753|  57.6k|    {
  754|  57.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  57.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.6k|              else {
  749|  57.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.6k|              }
  751|  57.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  57.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.6k|        else if constexpr (std::is_object_v<T>) {
  688|  57.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  57.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  57.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  57.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  57.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  57.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.6k|        {
  662|  57.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   170k|        : m_fptr([](storage fn,
  743|   170k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   170k|              cvref<T> obj = *get<T>(fn);
  745|   170k|              if constexpr (std::is_void_v<R>) {
  746|   170k|                  obj(static_cast<decltype(args)>(args)...);
  747|   170k|              }
  748|   170k|              else {
  749|   170k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   170k|              }
  751|   170k|          }),
  752|   170k|          m_storage(std::addressof(f))
  753|   170k|    {
  754|   170k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   170k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   170k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   170k|              else {
  749|   170k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   170k|              }
  751|   170k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   170k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   170k|        else if constexpr (std::is_object_v<T>) {
  688|   170k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   170k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   170k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   170k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   170k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   170k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   170k|        {
  662|   170k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   228k|    {
 4159|   228k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   228k|#if !SCN_DISABLE_LOCALE
 4162|   228k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 57.7k, False: 170k]
  ------------------
 4163|  57.7k|            return read_impl<Range>(
 4164|  57.7k|                range, rd,
 4165|  57.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  57.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  57.7k|                },
 4168|  57.7k|                value, loc);
 4169|  57.7k|        }
 4170|   170k|#endif
 4171|       |
 4172|   170k|        return read_impl<Range>(
 4173|   170k|            range, rd,
 4174|   170k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   170k|                return r.read_source(SCN_FWD(args)...);
 4176|   170k|            },
 4177|   170k|            value);
 4178|   228k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   314k|    {
 4195|   314k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   314k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.3k, False: 275k]
  |  |  ------------------
  ------------------
 4197|  39.3k|            return unexpected(r.error());
 4198|  39.3k|        }
 4199|       |
 4200|   275k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   275k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   275k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   275k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46.3k, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  46.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  46.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  46.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  46.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  46.3k|    }                                                  \
  |  |  |  | 3667|   275k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   229k|        return ranges::next(range.begin(), n);
 4202|   275k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  57.7k|        : m_fptr([](storage fn,
  743|  57.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.7k|              cvref<T> obj = *get<T>(fn);
  745|  57.7k|              if constexpr (std::is_void_v<R>) {
  746|  57.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.7k|              }
  748|  57.7k|              else {
  749|  57.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.7k|              }
  751|  57.7k|          }),
  752|  57.7k|          m_storage(std::addressof(f))
  753|  57.7k|    {
  754|  57.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  57.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.7k|              else {
  749|  57.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.7k|              }
  751|  57.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  57.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.7k|        else if constexpr (std::is_object_v<T>) {
  688|  57.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  57.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  57.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  57.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  57.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.7k|        {
  662|  57.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   170k|        : m_fptr([](storage fn,
  743|   170k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   170k|              cvref<T> obj = *get<T>(fn);
  745|   170k|              if constexpr (std::is_void_v<R>) {
  746|   170k|                  obj(static_cast<decltype(args)>(args)...);
  747|   170k|              }
  748|   170k|              else {
  749|   170k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   170k|              }
  751|   170k|          }),
  752|   170k|          m_storage(std::addressof(f))
  753|   170k|    {
  754|   170k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   170k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   170k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   170k|              else {
  749|   170k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   170k|              }
  751|   170k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   170k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   170k|        else if constexpr (std::is_object_v<T>) {
  688|   170k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   170k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   170k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   170k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   170k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   170k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   170k|        {
  662|   170k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   232k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   232k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   232k|            auto rd = make_reader<T, char_type>();
 6195|   232k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   232k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 232k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   232k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   232k|                return impl(rd, range, value);
 6202|   232k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   232k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   232k|    {
 6113|   232k|        const bool need_skipped_width =
 6114|   232k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 232k]
  |  Branch (6114:33): [True: 0, False: 232k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   232k|        auto it = rng.begin();
 6118|   232k|        std::ptrdiff_t prefix_width = 0;
 6119|   232k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 232k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   232k|        else {
 6127|   232k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   232k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.01k|    }                                                  \
  |  |  |  | 3667|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   231k|            std::tie(it, prefix_width) = prefix_result;
 6129|   231k|        }
 6130|   231k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   231k|        std::ptrdiff_t value_width = 0;
 6134|   231k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 231k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   231k|        else {
 6150|   231k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 65.9k, False: 165k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  65.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  65.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  65.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  65.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  65.9k|    }                                                  \
  |  | 3667|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   165k|                                             specs, value, loc));
 6152|       |
 6153|   165k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 165k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   165k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   165k|        std::ptrdiff_t postfix_width = 0;
 6162|   165k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 165k, False: 452]
  ------------------
 6163|   165k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   165k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   165k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   165k|                                 value_width));
 6167|   165k|            std::tie(it, postfix_width) = postfix_result;
 6168|   165k|        }
 6169|       |
 6170|   165k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   165k|                                                 value_width, postfix_width);
 6172|   165k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 165k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   165k|        return it;
 6177|   165k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3679|   517k|    {
 3680|   517k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   517k|        const std::ptrdiff_t sign_len =
 3683|   517k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 2.41k, False: 514k]
  ------------------
 3684|       |
 3685|   517k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   517k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   517k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   517k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46.1k, False: 470k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  46.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  46.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  46.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  46.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  46.1k|    }                                                  \
  |  |  |  | 3667|   517k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   470k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   470k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   517k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   231k|    {
 4159|   231k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   231k|#if !SCN_DISABLE_LOCALE
 4162|   231k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 59.4k, False: 172k]
  ------------------
 4163|  59.4k|            return read_impl<Range>(
 4164|  59.4k|                range, rd,
 4165|  59.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  59.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  59.4k|                },
 4168|  59.4k|                value, loc);
 4169|  59.4k|        }
 4170|   172k|#endif
 4171|       |
 4172|   172k|        return read_impl<Range>(
 4173|   172k|            range, rd,
 4174|   172k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   172k|                return r.read_source(SCN_FWD(args)...);
 4176|   172k|            },
 4177|   172k|            value);
 4178|   231k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   320k|    {
 4195|   320k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   320k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.4k, False: 235k]
  |  |  ------------------
  ------------------
 4197|  85.4k|            return unexpected(r.error());
 4198|  85.4k|        }
 4199|       |
 4200|   235k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 216, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    216|    }                                                  \
  |  |  |  | 3667|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   235k|        return ranges::next(range.begin(), n);
 4202|   235k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  59.4k|        : m_fptr([](storage fn,
  743|  59.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.4k|              cvref<T> obj = *get<T>(fn);
  745|  59.4k|              if constexpr (std::is_void_v<R>) {
  746|  59.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.4k|              }
  748|  59.4k|              else {
  749|  59.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.4k|              }
  751|  59.4k|          }),
  752|  59.4k|          m_storage(std::addressof(f))
  753|  59.4k|    {
  754|  59.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  59.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.4k|              else {
  749|  59.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.4k|              }
  751|  59.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  59.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.4k|        else if constexpr (std::is_object_v<T>) {
  688|  59.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  59.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  59.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  59.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  59.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.4k|        {
  662|  59.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   172k|        : m_fptr([](storage fn,
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|   172k|              if constexpr (std::is_void_v<R>) {
  746|   172k|                  obj(static_cast<decltype(args)>(args)...);
  747|   172k|              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
  752|   172k|          m_storage(std::addressof(f))
  753|   172k|    {
  754|   172k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   172k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   172k|        else if constexpr (std::is_object_v<T>) {
  688|   172k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   172k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   172k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   172k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   172k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   172k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   172k|        {
  662|   172k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   232k|    {
 4159|   232k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   232k|#if !SCN_DISABLE_LOCALE
 4162|   232k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 59.4k, False: 172k]
  ------------------
 4163|  59.4k|            return read_impl<Range>(
 4164|  59.4k|                range, rd,
 4165|  59.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  59.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  59.4k|                },
 4168|  59.4k|                value, loc);
 4169|  59.4k|        }
 4170|   172k|#endif
 4171|       |
 4172|   172k|        return read_impl<Range>(
 4173|   172k|            range, rd,
 4174|   172k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   172k|                return r.read_source(SCN_FWD(args)...);
 4176|   172k|            },
 4177|   172k|            value);
 4178|   232k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   321k|    {
 4195|   321k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   321k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.7k, False: 281k]
  |  |  ------------------
  ------------------
 4197|  39.7k|            return unexpected(r.error());
 4198|  39.7k|        }
 4199|       |
 4200|   281k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.9k, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.9k|    }                                                  \
  |  |  |  | 3667|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   235k|        return ranges::next(range.begin(), n);
 4202|   281k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  59.4k|        : m_fptr([](storage fn,
  743|  59.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.4k|              cvref<T> obj = *get<T>(fn);
  745|  59.4k|              if constexpr (std::is_void_v<R>) {
  746|  59.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.4k|              }
  748|  59.4k|              else {
  749|  59.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.4k|              }
  751|  59.4k|          }),
  752|  59.4k|          m_storage(std::addressof(f))
  753|  59.4k|    {
  754|  59.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  59.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.4k|              else {
  749|  59.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.4k|              }
  751|  59.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  59.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.4k|        else if constexpr (std::is_object_v<T>) {
  688|  59.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  59.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  59.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  59.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  59.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.4k|        {
  662|  59.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   172k|        : m_fptr([](storage fn,
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|   172k|              if constexpr (std::is_void_v<R>) {
  746|   172k|                  obj(static_cast<decltype(args)>(args)...);
  747|   172k|              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
  752|   172k|          m_storage(std::addressof(f))
  753|   172k|    {
  754|   172k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   172k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   172k|        else if constexpr (std::is_object_v<T>) {
  688|   172k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   172k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   172k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   172k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   172k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   172k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   172k|        {
  662|   172k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   915k|{
 2049|   915k|    auto it = range.begin();
 2050|  1.59M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.59M, False: 3.38k]
  ------------------
 2051|  1.59M|        const auto val =
 2052|  1.59M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.59M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.59M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.59M, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.59M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.59M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.59M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 912k, False: 678k]
  ------------------
 2057|   912k|                return it;
 2058|   912k|            }
 2059|  1.59M|        }
 2060|   678k|        it = val.iterator;
 2061|   678k|    }
 2062|       |
 2063|  3.38k|    return it;
 2064|   915k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  1.59M|{
 1887|  1.59M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.59M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.59M|    auto it = range.begin();
 1891|  1.59M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.59M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  1.59M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.59M, False: 0]
  ------------------
 1900|  1.59M|        ++it;
 1901|  1.59M|        return {it, string_type(1, *range.begin())};
 1902|  1.59M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  1.59M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|  1.59M|    {
 1878|  1.59M|        return !codepoint.empty();
 1879|  1.59M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   915k|{
 2070|   915k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   915k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   915k|{
 2940|   915k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 915k, False: 0]
  ------------------
 2941|   915k|        auto it = read_while_classic_space(range);
 2942|   915k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   915k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.38k, False: 912k]
  |  |  ------------------
  ------------------
 2944|  3.38k|            return unexpected(e);
 2945|  3.38k|        }
 2946|       |
 2947|   912k|        return it;
 2948|   915k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   915k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   915k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   915k|    else {
 2114|   915k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   915k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   915k|            return detail::is_cp_space(cp);
 2127|   915k|        });
 2128|   915k|    }
 2129|   915k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   915k|        : m_fptr([](storage fn,
  743|   915k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   915k|              cvref<T> obj = *get<T>(fn);
  745|   915k|              if constexpr (std::is_void_v<R>) {
  746|   915k|                  obj(static_cast<decltype(args)>(args)...);
  747|   915k|              }
  748|   915k|              else {
  749|   915k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   915k|              }
  751|   915k|          }),
  752|   915k|          m_storage(std::addressof(f))
  753|   915k|    {
  754|   915k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.59M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.59M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.59M|              else {
  749|  1.59M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.59M|              }
  751|  1.59M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.59M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.59M|        else if constexpr (std::is_object_v<T>) {
  688|  1.59M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.59M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.59M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.59M|            return detail::is_cp_space(cp);
 2127|  1.59M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   915k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   915k|        {
  662|   915k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2075|  1.46M|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|  1.46M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|  1.46M|        auto buf = make_contiguous_buffer(range);
 2080|  1.46M|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|  1.46M|        return ranges::next(range.begin(),
 2082|  1.46M|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|  1.46M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1670|  1.46M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.46M|                  ranges::sized_range<Range>) {
 1674|  1.46M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.46M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1476|  1.46M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.46M|    {
 1478|  1.46M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1564|  1.46M|    {
 1565|  1.46M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|  1.46M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1608|  1.46M|    {
 1609|  1.46M|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|  1.46M|                                          std::basic_string<CharT>>) {
 1619|  1.46M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1620|  1.46M|            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  1.46M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4088|  1.06M|    {
 4089|  1.06M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 103k, False: 958k]
  ------------------
 4090|   103k|            return std::copysign(value, T{-1.0});
 4091|   103k|        }
 4092|   958k|        return std::copysign(value, T{1.0});
 4093|  1.06M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2075|   656k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   656k|    else {
 2085|   656k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|   656k|        return read_until_code_point(
 2097|   656k|            ranges::subrange{it, range.end()},
 2098|   656k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   656k|    }
 2100|   656k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   656k|        : m_fptr([](storage fn,
  743|   656k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   656k|              cvref<T> obj = *get<T>(fn);
  745|   656k|              if constexpr (std::is_void_v<R>) {
  746|   656k|                  obj(static_cast<decltype(args)>(args)...);
  747|   656k|              }
  748|   656k|              else {
  749|   656k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   656k|              }
  751|   656k|          }),
  752|   656k|          m_storage(std::addressof(f))
  753|   656k|    {
  754|   656k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.24M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.24M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.24M|              else {
  749|  1.24M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.24M|              }
  751|  1.24M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.24M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.24M|        else if constexpr (std::is_object_v<T>) {
  688|  1.24M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.24M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2098|  1.24M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   656k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   656k|        {
  662|   656k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1564|   656k|    {
 1565|   656k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   656k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   656k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1608|   656k|    {
 1609|   656k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|   656k|                                          std::basic_string<CharT>>) {
 1619|   656k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   656k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1620|   656k|            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   656k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4088|   431k|    {
 4089|   431k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 1.78k, False: 429k]
  ------------------
 4090|  1.78k|            return std::copysign(value, T{-1.0});
 4091|  1.78k|        }
 4092|   429k|        return std::copysign(value, T{1.0});
 4093|   431k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4088|  1.10M|    {
 4089|  1.10M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 107k, False: 999k]
  ------------------
 4090|   107k|            return std::copysign(value, T{-1.0});
 4091|   107k|        }
 4092|   999k|        return std::copysign(value, T{1.0});
 4093|  1.10M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4088|   505k|    {
 4089|   505k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 1.81k, False: 504k]
  ------------------
 4090|  1.81k|            return std::copysign(value, T{-1.0});
 4091|  1.81k|        }
 4092|   504k|        return std::copysign(value, T{1.0});
 4093|   505k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4088|  1.11M|    {
 4089|  1.11M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 110k, False: 1.00M]
  ------------------
 4090|   110k|            return std::copysign(value, T{-1.0});
 4091|   110k|        }
 4092|  1.00M|        return std::copysign(value, T{1.0});
 4093|  1.11M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4088|   517k|    {
 4089|   517k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 1.82k, False: 515k]
  ------------------
 4090|  1.82k|            return std::copysign(value, T{-1.0});
 4091|  1.82k|        }
 4092|   515k|        return std::copysign(value, T{1.0});
 4093|   517k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   471k|{
 5784|   471k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   471k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.66k, False: 467k]
  |  |  ------------------
  ------------------
 5785|  4.66k|        return unexpected(e);
 5786|  4.66k|    }
 5787|       |
 5788|   467k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 467k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   467k|    return skip_classic_whitespace(range);
 5793|   467k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5859|   151k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   151k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   151k|            auto rd = make_reader<T, char_type>();
 5865|   151k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   151k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|   151k|    {
 5852|   151k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.52k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.52k|    }                                                  \
  |  |  |  | 3667|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   150k|                        .transform_error(make_eof_scan_error));
 5854|   150k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   151k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|   150k|    {
 4141|   150k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   150k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   150k|        float_reader<CharT> rd{};
 4144|   150k|        return read_impl<Range>(
 4145|   150k|            range, rd,
 4146|   150k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   150k|                return r.read_source(SCN_FWD(args)...);
 4148|   150k|            },
 4149|   150k|            value);
 4150|   150k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3646|   980k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3632|  1.47M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   150k|        : m_fptr([](storage fn,
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|   150k|              if constexpr (std::is_void_v<R>) {
  746|   150k|                  obj(static_cast<decltype(args)>(args)...);
  747|   150k|              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
  752|   150k|          m_storage(std::addressof(f))
  753|   150k|    {
  754|   150k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   150k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   150k|        else if constexpr (std::is_object_v<T>) {
  688|   150k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   150k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|   150k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   150k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   150k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   150k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   150k|        {
  662|   150k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5859|   158k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   158k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   158k|            auto rd = make_reader<T, char_type>();
 5865|   158k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   158k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|   158k|    {
 5852|   158k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.75k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.75k|    }                                                  \
  |  |  |  | 3667|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   156k|                        .transform_error(make_eof_scan_error));
 5854|   156k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   158k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|   156k|    {
 4141|   156k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   156k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   156k|        float_reader<CharT> rd{};
 4144|   156k|        return read_impl<Range>(
 4145|   156k|            range, rd,
 4146|   156k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   156k|                return r.read_source(SCN_FWD(args)...);
 4148|   156k|            },
 4149|   156k|            value);
 4150|   156k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   156k|        : m_fptr([](storage fn,
  743|   156k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   156k|              cvref<T> obj = *get<T>(fn);
  745|   156k|              if constexpr (std::is_void_v<R>) {
  746|   156k|                  obj(static_cast<decltype(args)>(args)...);
  747|   156k|              }
  748|   156k|              else {
  749|   156k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   156k|              }
  751|   156k|          }),
  752|   156k|          m_storage(std::addressof(f))
  753|   156k|    {
  754|   156k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   156k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   156k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   156k|              else {
  749|   156k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   156k|              }
  751|   156k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   156k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   156k|        else if constexpr (std::is_object_v<T>) {
  688|   156k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   156k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|   156k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   156k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   156k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   156k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   156k|        {
  662|   156k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5859|   161k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   161k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   161k|            auto rd = make_reader<T, char_type>();
 5865|   161k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   161k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|   161k|    {
 5852|   161k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.89k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.89k|    }                                                  \
  |  |  |  | 3667|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   159k|                        .transform_error(make_eof_scan_error));
 5854|   159k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   161k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|   159k|    {
 4141|   159k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   159k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   159k|        float_reader<CharT> rd{};
 4144|   159k|        return read_impl<Range>(
 4145|   159k|            range, rd,
 4146|   159k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   159k|                return r.read_source(SCN_FWD(args)...);
 4148|   159k|            },
 4149|   159k|            value);
 4150|   159k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   159k|        : m_fptr([](storage fn,
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|   159k|              if constexpr (std::is_void_v<R>) {
  746|   159k|                  obj(static_cast<decltype(args)>(args)...);
  747|   159k|              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
  752|   159k|          m_storage(std::addressof(f))
  753|   159k|    {
  754|   159k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   159k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   159k|        else if constexpr (std::is_object_v<T>) {
  688|   159k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   159k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|   159k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   159k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   159k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   159k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   159k|        {
  662|   159k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   519k|{
 5784|   519k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.90k, False: 514k]
  |  |  ------------------
  ------------------
 5785|  4.90k|        return unexpected(e);
 5786|  4.90k|    }
 5787|       |
 5788|   514k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 514k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   514k|    return skip_classic_whitespace(range);
 5793|   514k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   166k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   166k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   166k|            auto rd = make_reader<T, char_type>();
 5869|   166k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 166k, False: 0]
  ------------------
 5870|   166k|                return impl(rd, range, value);
 5871|   166k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   166k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   166k|    {
 5852|   166k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.61k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.61k|    }                                                  \
  |  |  |  | 3667|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   164k|                        .transform_error(make_eof_scan_error));
 5854|   164k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   166k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   164k|    {
 4141|   164k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   164k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   164k|        float_reader<CharT> rd{};
 4144|   164k|        return read_impl<Range>(
 4145|   164k|            range, rd,
 4146|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   164k|                return r.read_source(SCN_FWD(args)...);
 4148|   164k|            },
 4149|   164k|            value);
 4150|   164k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   164k|        : m_fptr([](storage fn,
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|   164k|              if constexpr (std::is_void_v<R>) {
  746|   164k|                  obj(static_cast<decltype(args)>(args)...);
  747|   164k|              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
  752|   164k|          m_storage(std::addressof(f))
  753|   164k|    {
  754|   164k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   164k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   164k|        else if constexpr (std::is_object_v<T>) {
  688|   164k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   164k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   164k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   164k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   164k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   164k|        {
  662|   164k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   175k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   175k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   175k|            auto rd = make_reader<T, char_type>();
 5869|   175k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 175k, False: 0]
  ------------------
 5870|   175k|                return impl(rd, range, value);
 5871|   175k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   175k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   175k|    {
 5852|   175k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   175k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   175k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   175k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.86k, False: 173k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.86k|    }                                                  \
  |  |  |  | 3667|   175k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   173k|                        .transform_error(make_eof_scan_error));
 5854|   173k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   175k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   173k|    {
 4141|   173k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   173k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   173k|        float_reader<CharT> rd{};
 4144|   173k|        return read_impl<Range>(
 4145|   173k|            range, rd,
 4146|   173k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   173k|                return r.read_source(SCN_FWD(args)...);
 4148|   173k|            },
 4149|   173k|            value);
 4150|   173k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   173k|        : m_fptr([](storage fn,
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|   173k|              if constexpr (std::is_void_v<R>) {
  746|   173k|                  obj(static_cast<decltype(args)>(args)...);
  747|   173k|              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
  752|   173k|          m_storage(std::addressof(f))
  753|   173k|    {
  754|   173k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   173k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   173k|        else if constexpr (std::is_object_v<T>) {
  688|   173k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   173k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   173k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   173k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   173k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   173k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   173k|        {
  662|   173k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   177k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   177k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   177k|            auto rd = make_reader<T, char_type>();
 5869|   177k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 177k, False: 0]
  ------------------
 5870|   177k|                return impl(rd, range, value);
 5871|   177k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   177k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   177k|    {
 5852|   177k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   177k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   177k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   177k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.99k, False: 175k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.99k|    }                                                  \
  |  |  |  | 3667|   177k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   175k|                        .transform_error(make_eof_scan_error));
 5854|   175k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   177k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   175k|    {
 4141|   175k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   175k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   175k|        float_reader<CharT> rd{};
 4144|   175k|        return read_impl<Range>(
 4145|   175k|            range, rd,
 4146|   175k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   175k|                return r.read_source(SCN_FWD(args)...);
 4148|   175k|            },
 4149|   175k|            value);
 4150|   175k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   175k|        : m_fptr([](storage fn,
  743|   175k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   175k|              cvref<T> obj = *get<T>(fn);
  745|   175k|              if constexpr (std::is_void_v<R>) {
  746|   175k|                  obj(static_cast<decltype(args)>(args)...);
  747|   175k|              }
  748|   175k|              else {
  749|   175k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   175k|              }
  751|   175k|          }),
  752|   175k|          m_storage(std::addressof(f))
  753|   175k|    {
  754|   175k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   175k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   175k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   175k|              else {
  749|   175k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   175k|              }
  751|   175k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   175k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   175k|        else if constexpr (std::is_object_v<T>) {
  688|   175k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   175k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   175k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   175k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   175k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   175k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   175k|        {
  662|   175k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|  1.13M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|  1.13M|    static_cast<    \
  |  |  929|  1.13M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|  1.13M|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|  1.13M|          m_current(m_range.begin())
 2867|  1.13M|    {
 2868|  1.13M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|  3.30M|    {
 2872|  3.30M|        return m_current;
 2873|  3.30M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|  2.17M|    {
 2877|  2.17M|        return m_range.end();
 2878|  2.17M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|  1.03M|    {
 2892|  1.03M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  1.03M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  1.03M|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 1.03M]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  1.03M|        }
 2898|  1.03M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  1.03M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|  1.13M|    {
 2882|  1.13M|        return ranges::subrange{begin(), end()};
 2883|  1.13M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  1.13M|    {
 6026|  1.13M|        const bool need_skipped_width =
 6027|  1.13M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 1.13M]
  |  Branch (6027:33): [True: 0, False: 1.13M]
  ------------------
 6028|  1.13M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  1.13M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 1.13M]
  ------------------
 6032|  1.13M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 1.13M]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  1.13M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 1.13M, False: 0]
  |  Branch (6036:56): [True: 1.13M, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.13M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 1.13M]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  2.25M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.13M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.1k, False: 1.12M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.1k|    }                                                  \
  |  |  |  | 3667|  1.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  2.25M|                            make_eof_scan_error));
 6047|       |
 6048|  2.25M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 1.12M]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  1.12M|            return result_type{it, 0};
 6056|  2.25M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|  1.13M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  1.02M|    {
 6068|  1.02M|        const bool need_skipped_width =
 6069|  1.02M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.02M]
  |  Branch (6069:33): [True: 0, False: 1.02M]
  ------------------
 6070|  1.02M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.02M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.02M]
  ------------------
 6073|  1.02M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.02M]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.02M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.02M, False: 0]
  ------------------
 6082|  1.02M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.02M]
  ------------------
 6083|  1.02M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.02M|        return result_type{rng.begin(), 0};
 6107|  1.02M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6181|   369k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   369k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   369k|            auto rd = make_reader<T, char_type>();
 6187|   369k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 369k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   369k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   369k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   369k|    {
 6113|   369k|        const bool need_skipped_width =
 6114|   369k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 369k]
  |  Branch (6114:33): [True: 0, False: 369k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   369k|        auto it = rng.begin();
 6118|   369k|        std::ptrdiff_t prefix_width = 0;
 6119|   369k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 369k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   369k|        else {
 6127|   369k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   369k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   369k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   369k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.98k, False: 365k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.98k|    }                                                  \
  |  |  |  | 3667|   369k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   365k|            std::tie(it, prefix_width) = prefix_result;
 6129|   365k|        }
 6130|   365k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   365k|        std::ptrdiff_t value_width = 0;
 6134|   365k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 365k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   365k|        else {
 6150|   365k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   365k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   365k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 29.5k, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  29.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  29.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  29.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  29.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  29.5k|    }                                                  \
  |  | 3667|   365k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   335k|                                             specs, value, loc));
 6152|       |
 6153|   335k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 335k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   335k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   335k|        std::ptrdiff_t postfix_width = 0;
 6162|   335k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 332k, False: 3.55k]
  ------------------
 6163|   332k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   332k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   332k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   332k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 332k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   332k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   332k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   332k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   332k|                                 value_width));
 6167|   332k|            std::tie(it, postfix_width) = postfix_result;
 6168|   332k|        }
 6169|       |
 6170|   335k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   335k|                                                 value_width, postfix_width);
 6172|   335k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 335k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   335k|        return it;
 6177|   335k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6181|   381k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   381k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   381k|            auto rd = make_reader<T, char_type>();
 6187|   381k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   381k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 381k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   381k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   381k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   381k|    {
 6113|   381k|        const bool need_skipped_width =
 6114|   381k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 381k]
  |  Branch (6114:33): [True: 0, False: 381k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   381k|        auto it = rng.begin();
 6118|   381k|        std::ptrdiff_t prefix_width = 0;
 6119|   381k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 381k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   381k|        else {
 6127|   381k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   381k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   381k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   381k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   381k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.45k, False: 376k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.45k|    }                                                  \
  |  |  |  | 3667|   381k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   376k|            std::tie(it, prefix_width) = prefix_result;
 6129|   376k|        }
 6130|   376k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   376k|        std::ptrdiff_t value_width = 0;
 6134|   376k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 376k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   376k|        else {
 6150|   376k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   376k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   376k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 29.0k, False: 347k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  29.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  29.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  29.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  29.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  29.0k|    }                                                  \
  |  | 3667|   376k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   347k|                                             specs, value, loc));
 6152|       |
 6153|   347k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 347k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   347k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   347k|        std::ptrdiff_t postfix_width = 0;
 6162|   347k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 343k, False: 3.97k]
  ------------------
 6163|   343k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 343k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   343k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   343k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   343k|                                 value_width));
 6167|   343k|            std::tie(it, postfix_width) = postfix_result;
 6168|   343k|        }
 6169|       |
 6170|   347k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   347k|                                                 value_width, postfix_width);
 6172|   347k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 347k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   347k|        return it;
 6177|   347k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6181|   385k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   385k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   385k|            auto rd = make_reader<T, char_type>();
 6187|   385k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   385k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   385k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   385k|    {
 6113|   385k|        const bool need_skipped_width =
 6114|   385k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 385k]
  |  Branch (6114:33): [True: 0, False: 385k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   385k|        auto it = rng.begin();
 6118|   385k|        std::ptrdiff_t prefix_width = 0;
 6119|   385k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 385k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   385k|        else {
 6127|   385k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   385k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   385k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   385k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.72k, False: 380k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.72k|    }                                                  \
  |  |  |  | 3667|   385k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   380k|            std::tie(it, prefix_width) = prefix_result;
 6129|   380k|        }
 6130|   380k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   380k|        std::ptrdiff_t value_width = 0;
 6134|   380k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 380k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   380k|        else {
 6150|   380k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   380k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   380k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 28.7k, False: 351k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  28.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  28.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  28.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  28.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  28.7k|    }                                                  \
  |  | 3667|   380k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   351k|                                             specs, value, loc));
 6152|       |
 6153|   351k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 351k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   351k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   351k|        std::ptrdiff_t postfix_width = 0;
 6162|   351k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 347k, False: 4.21k]
  ------------------
 6163|   347k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   347k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   347k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   347k|                                 value_width));
 6167|   347k|            std::tie(it, postfix_width) = postfix_result;
 6168|   347k|        }
 6169|       |
 6170|   351k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   351k|                                                 value_width, postfix_width);
 6172|   351k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 351k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   351k|        return it;
 6177|   351k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   247k|{
 5784|   247k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 474, False: 246k]
  |  |  ------------------
  ------------------
 5785|    474|        return unexpected(e);
 5786|    474|    }
 5787|       |
 5788|   246k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 246k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   246k|    return skip_classic_whitespace(range);
 5793|   246k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5859|  70.4k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  70.4k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  70.4k|            auto rd = make_reader<T, char_type>();
 5865|  70.4k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  70.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  70.4k|    {
 5852|  70.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  70.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 291, False: 70.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    291|    }                                                  \
  |  |  |  | 3667|  70.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  70.1k|                        .transform_error(make_eof_scan_error));
 5854|  70.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  70.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  70.1k|    {
 4141|  70.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  70.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  70.1k|        float_reader<CharT> rd{};
 4144|  70.1k|        return read_impl<Range>(
 4145|  70.1k|            range, rd,
 4146|  70.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  70.1k|                return r.read_source(SCN_FWD(args)...);
 4148|  70.1k|            },
 4149|  70.1k|            value);
 4150|  70.1k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3646|   491k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  70.1k|        : m_fptr([](storage fn,
  743|  70.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.1k|              cvref<T> obj = *get<T>(fn);
  745|  70.1k|              if constexpr (std::is_void_v<R>) {
  746|  70.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  70.1k|              }
  748|  70.1k|              else {
  749|  70.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.1k|              }
  751|  70.1k|          }),
  752|  70.1k|          m_storage(std::addressof(f))
  753|  70.1k|    {
  754|  70.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  70.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  70.1k|              else {
  749|  70.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.1k|              }
  751|  70.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  70.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  70.1k|        else if constexpr (std::is_object_v<T>) {
  688|  70.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  70.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  70.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  70.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  70.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  70.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  70.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  70.1k|        {
  662|  70.1k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5859|  86.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  86.9k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  86.9k|            auto rd = make_reader<T, char_type>();
 5865|  86.9k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  86.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  86.9k|    {
 5852|  86.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  86.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  86.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  86.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  86.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 86.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    330|    }                                                  \
  |  |  |  | 3667|  86.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  86.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  86.5k|                        .transform_error(make_eof_scan_error));
 5854|  86.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  86.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  86.5k|    {
 4141|  86.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  86.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  86.5k|        float_reader<CharT> rd{};
 4144|  86.5k|        return read_impl<Range>(
 4145|  86.5k|            range, rd,
 4146|  86.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  86.5k|                return r.read_source(SCN_FWD(args)...);
 4148|  86.5k|            },
 4149|  86.5k|            value);
 4150|  86.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  86.5k|        : m_fptr([](storage fn,
  743|  86.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.5k|              cvref<T> obj = *get<T>(fn);
  745|  86.5k|              if constexpr (std::is_void_v<R>) {
  746|  86.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.5k|              }
  748|  86.5k|              else {
  749|  86.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.5k|              }
  751|  86.5k|          }),
  752|  86.5k|          m_storage(std::addressof(f))
  753|  86.5k|    {
  754|  86.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  86.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  86.5k|              else {
  749|  86.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.5k|              }
  751|  86.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  86.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  86.5k|        else if constexpr (std::is_object_v<T>) {
  688|  86.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  86.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  86.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  86.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  86.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  86.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  86.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  86.5k|        {
  662|  86.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5859|  89.6k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  89.6k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  89.6k|            auto rd = make_reader<T, char_type>();
 5865|  89.6k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  89.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  89.6k|    {
 5852|  89.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  89.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  89.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  89.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 363, False: 89.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    363|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    363|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    363|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    363|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    363|    }                                                  \
  |  |  |  | 3667|  89.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  89.2k|                        .transform_error(make_eof_scan_error));
 5854|  89.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  89.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  89.2k|    {
 4141|  89.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  89.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  89.2k|        float_reader<CharT> rd{};
 4144|  89.2k|        return read_impl<Range>(
 4145|  89.2k|            range, rd,
 4146|  89.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  89.2k|                return r.read_source(SCN_FWD(args)...);
 4148|  89.2k|            },
 4149|  89.2k|            value);
 4150|  89.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  89.2k|        : m_fptr([](storage fn,
  743|  89.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.2k|              cvref<T> obj = *get<T>(fn);
  745|  89.2k|              if constexpr (std::is_void_v<R>) {
  746|  89.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.2k|              }
  748|  89.2k|              else {
  749|  89.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.2k|              }
  751|  89.2k|          }),
  752|  89.2k|          m_storage(std::addressof(f))
  753|  89.2k|    {
  754|  89.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  89.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.2k|              else {
  749|  89.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.2k|              }
  751|  89.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  89.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.2k|        else if constexpr (std::is_object_v<T>) {
  688|  89.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  89.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  89.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  89.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  89.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  89.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.2k|        {
  662|  89.2k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   669k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   669k|    static_cast<    \
  |  |  929|   669k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   669k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   669k|          m_current(m_range.begin())
 2867|   669k|    {
 2868|   669k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  1.80M|    {
 2872|  1.80M|        return m_current;
 2873|  1.80M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|  1.13M|    {
 2877|  1.13M|        return m_range.end();
 2878|  1.13M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   468k|    {
 2892|   468k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   468k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   468k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   468k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   468k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 468k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   468k|        }
 2898|   468k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   468k|    static_cast<    \
  |  |  929|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   468k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   669k|    {
 2882|   669k|        return ranges::subrange{begin(), end()};
 2883|   669k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   669k|    {
 6026|   669k|        const bool need_skipped_width =
 6027|   669k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 669k]
  |  Branch (6027:33): [True: 0, False: 669k]
  ------------------
 6028|   669k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   669k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 669k]
  ------------------
 6032|   669k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 669k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   669k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 669k, False: 0]
  |  Branch (6036:56): [True: 669k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   669k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 669k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.33M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   669k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   669k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   669k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 666k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.87k|    }                                                  \
  |  |  |  | 3667|   669k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   666k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.33M|                            make_eof_scan_error));
 6047|       |
 6048|  1.33M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 666k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   666k|            return result_type{it, 0};
 6056|  1.33M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   669k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   467k|    {
 6068|   467k|        const bool need_skipped_width =
 6069|   467k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 467k]
  |  Branch (6069:33): [True: 0, False: 467k]
  ------------------
 6070|   467k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   467k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 467k]
  ------------------
 6073|   467k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 467k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   467k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 467k, False: 0]
  ------------------
 6082|   467k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 467k]
  ------------------
 6083|   467k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   467k|        return result_type{rng.begin(), 0};
 6107|   467k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6181|   207k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   207k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   207k|            auto rd = make_reader<T, char_type>();
 6187|   207k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 207k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   207k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   207k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   207k|    {
 6113|   207k|        const bool need_skipped_width =
 6114|   207k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 207k]
  |  Branch (6114:33): [True: 0, False: 207k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   207k|        auto it = rng.begin();
 6118|   207k|        std::ptrdiff_t prefix_width = 0;
 6119|   207k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 207k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   207k|        else {
 6127|   207k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 898, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    898|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    898|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    898|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    898|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    898|    }                                                  \
  |  |  |  | 3667|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   206k|            std::tie(it, prefix_width) = prefix_result;
 6129|   206k|        }
 6130|   206k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   206k|        std::ptrdiff_t value_width = 0;
 6134|   206k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 206k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   206k|        else {
 6150|   206k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 66.0k, False: 140k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  66.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  66.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  66.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  66.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  66.0k|    }                                                  \
  |  | 3667|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   140k|                                             specs, value, loc));
 6152|       |
 6153|   140k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 140k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   140k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   140k|        std::ptrdiff_t postfix_width = 0;
 6162|   140k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 139k, False: 398]
  ------------------
 6163|   139k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 139k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   139k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   139k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   139k|                                 value_width));
 6167|   139k|            std::tie(it, postfix_width) = postfix_result;
 6168|   139k|        }
 6169|       |
 6170|   140k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   140k|                                                 value_width, postfix_width);
 6172|   140k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 140k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   140k|        return it;
 6177|   140k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6181|   229k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   229k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   229k|            auto rd = make_reader<T, char_type>();
 6187|   229k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 229k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   229k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   229k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   229k|    {
 6113|   229k|        const bool need_skipped_width =
 6114|   229k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 229k]
  |  Branch (6114:33): [True: 0, False: 229k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   229k|        auto it = rng.begin();
 6118|   229k|        std::ptrdiff_t prefix_width = 0;
 6119|   229k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 229k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   229k|        else {
 6127|   229k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 966, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    966|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    966|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    966|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    966|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    966|    }                                                  \
  |  |  |  | 3667|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   228k|            std::tie(it, prefix_width) = prefix_result;
 6129|   228k|        }
 6130|   228k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   228k|        std::ptrdiff_t value_width = 0;
 6134|   228k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 228k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   228k|        else {
 6150|   228k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 65.9k, False: 162k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  65.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  65.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  65.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  65.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  65.9k|    }                                                  \
  |  | 3667|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   162k|                                             specs, value, loc));
 6152|       |
 6153|   162k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 162k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   162k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   162k|        std::ptrdiff_t postfix_width = 0;
 6162|   162k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 161k, False: 430]
  ------------------
 6163|   161k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 161k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   161k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   161k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   161k|                                 value_width));
 6167|   161k|            std::tie(it, postfix_width) = postfix_result;
 6168|   161k|        }
 6169|       |
 6170|   162k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   162k|                                                 value_width, postfix_width);
 6172|   162k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 162k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   162k|        return it;
 6177|   162k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6181|   233k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   233k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   233k|            auto rd = make_reader<T, char_type>();
 6187|   233k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 233k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   233k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   233k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   233k|    {
 6113|   233k|        const bool need_skipped_width =
 6114|   233k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 233k]
  |  Branch (6114:33): [True: 0, False: 233k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   233k|        auto it = rng.begin();
 6118|   233k|        std::ptrdiff_t prefix_width = 0;
 6119|   233k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 233k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   233k|        else {
 6127|   233k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.01k|    }                                                  \
  |  |  |  | 3667|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   232k|            std::tie(it, prefix_width) = prefix_result;
 6129|   232k|        }
 6130|   232k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   232k|        std::ptrdiff_t value_width = 0;
 6134|   232k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 232k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   232k|        else {
 6150|   232k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 65.9k, False: 166k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  65.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  65.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  65.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  65.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  65.9k|    }                                                  \
  |  | 3667|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   166k|                                             specs, value, loc));
 6152|       |
 6153|   166k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 166k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   166k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   166k|        std::ptrdiff_t postfix_width = 0;
 6162|   166k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 165k, False: 452]
  ------------------
 6163|   165k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   165k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   165k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   165k|                                 value_width));
 6167|   165k|            std::tie(it, postfix_width) = postfix_result;
 6168|   165k|        }
 6169|       |
 6170|   166k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   166k|                                                 value_width, postfix_width);
 6172|   166k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 166k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   166k|        return it;
 6177|   166k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   246k|{
 5784|   246k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 474, False: 246k]
  |  |  ------------------
  ------------------
 5785|    474|        return unexpected(e);
 5786|    474|    }
 5787|       |
 5788|   246k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 246k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   246k|    return skip_classic_whitespace(range);
 5793|   246k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  70.3k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  70.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  70.3k|            auto rd = make_reader<T, char_type>();
 5869|  70.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 70.3k, False: 0]
  ------------------
 5870|  70.3k|                return impl(rd, range, value);
 5871|  70.3k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  70.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  70.3k|    {
 5852|  70.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  70.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 291, False: 70.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    291|    }                                                  \
  |  |  |  | 3667|  70.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  70.0k|                        .transform_error(make_eof_scan_error));
 5854|  70.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  70.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  70.0k|    {
 4141|  70.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  70.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  70.0k|        float_reader<CharT> rd{};
 4144|  70.0k|        return read_impl<Range>(
 4145|  70.0k|            range, rd,
 4146|  70.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  70.0k|                return r.read_source(SCN_FWD(args)...);
 4148|  70.0k|            },
 4149|  70.0k|            value);
 4150|  70.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  70.0k|        : m_fptr([](storage fn,
  743|  70.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.0k|              cvref<T> obj = *get<T>(fn);
  745|  70.0k|              if constexpr (std::is_void_v<R>) {
  746|  70.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  70.0k|              }
  748|  70.0k|              else {
  749|  70.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.0k|              }
  751|  70.0k|          }),
  752|  70.0k|          m_storage(std::addressof(f))
  753|  70.0k|    {
  754|  70.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  70.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  70.0k|              else {
  749|  70.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.0k|              }
  751|  70.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  70.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  70.0k|        else if constexpr (std::is_object_v<T>) {
  688|  70.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  70.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  70.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  70.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  70.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  70.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  70.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  70.0k|        {
  662|  70.0k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  86.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  86.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  86.8k|            auto rd = make_reader<T, char_type>();
 5869|  86.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 86.8k, False: 0]
  ------------------
 5870|  86.8k|                return impl(rd, range, value);
 5871|  86.8k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  86.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  86.8k|    {
 5852|  86.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  86.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  86.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  86.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 86.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    330|    }                                                  \
  |  |  |  | 3667|  86.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  86.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  86.4k|                        .transform_error(make_eof_scan_error));
 5854|  86.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  86.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  86.4k|    {
 4141|  86.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  86.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  86.4k|        float_reader<CharT> rd{};
 4144|  86.4k|        return read_impl<Range>(
 4145|  86.4k|            range, rd,
 4146|  86.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  86.4k|                return r.read_source(SCN_FWD(args)...);
 4148|  86.4k|            },
 4149|  86.4k|            value);
 4150|  86.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  86.4k|        : m_fptr([](storage fn,
  743|  86.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.4k|              cvref<T> obj = *get<T>(fn);
  745|  86.4k|              if constexpr (std::is_void_v<R>) {
  746|  86.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.4k|              }
  748|  86.4k|              else {
  749|  86.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.4k|              }
  751|  86.4k|          }),
  752|  86.4k|          m_storage(std::addressof(f))
  753|  86.4k|    {
  754|  86.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  86.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  86.4k|              else {
  749|  86.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.4k|              }
  751|  86.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  86.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  86.4k|        else if constexpr (std::is_object_v<T>) {
  688|  86.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  86.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  86.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  86.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  86.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  86.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  86.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  86.4k|        {
  662|  86.4k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  89.4k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  89.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  89.4k|            auto rd = make_reader<T, char_type>();
 5869|  89.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 89.4k, False: 0]
  ------------------
 5870|  89.4k|                return impl(rd, range, value);
 5871|  89.4k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  89.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  89.4k|    {
 5852|  89.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  89.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  89.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  89.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 363, False: 89.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    363|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    363|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    363|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    363|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    363|    }                                                  \
  |  |  |  | 3667|  89.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  89.1k|                        .transform_error(make_eof_scan_error));
 5854|  89.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  89.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  89.1k|    {
 4141|  89.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  89.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  89.1k|        float_reader<CharT> rd{};
 4144|  89.1k|        return read_impl<Range>(
 4145|  89.1k|            range, rd,
 4146|  89.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  89.1k|                return r.read_source(SCN_FWD(args)...);
 4148|  89.1k|            },
 4149|  89.1k|            value);
 4150|  89.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  89.1k|        : m_fptr([](storage fn,
  743|  89.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.1k|              cvref<T> obj = *get<T>(fn);
  745|  89.1k|              if constexpr (std::is_void_v<R>) {
  746|  89.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.1k|              }
  748|  89.1k|              else {
  749|  89.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.1k|              }
  751|  89.1k|          }),
  752|  89.1k|          m_storage(std::addressof(f))
  753|  89.1k|    {
  754|  89.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  89.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.1k|              else {
  749|  89.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.1k|              }
  751|  89.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  89.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.1k|        else if constexpr (std::is_object_v<T>) {
  688|  89.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  89.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  89.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  89.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  89.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  89.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.1k|        {
  662|  89.1k|        }

LLVMFuzzerTestOneInput:
   54|  3.34k|{
   55|  3.34k|    scn::fuzz::run(data, size);
   56|  3.34k|    return 0;
   57|  3.34k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.34k|{
   33|  3.34k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.34k]
  |  Branch (33:35): [True: 0, False: 3.34k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.34k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.34k|    const auto& f =
   40|  3.34k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.34k|    do_basic_run(sv, f);
   42|       |
   43|  3.34k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.34k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.34k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.34k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.34k, False: 0]
  ------------------
   47|  3.34k|        do_basic_run(wsv_transcode, wf);
   48|  3.34k|    }
   49|  3.34k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.34k|{
   25|  3.34k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.34k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.34k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.34k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.34k|{
   25|  3.34k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.34k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.34k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.34k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  6.69k|{
   25|  6.69k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.69k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.69k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.69k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  6.69k|{
   25|  6.69k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.69k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.69k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.69k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.34k|{
   52|  3.34k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.34k|    string_buffer.resize(size);
   56|  3.34k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.34k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.34k|    const auto wsv_reinterpret_size =
   61|  3.34k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 74, False: 3.27k]
  ------------------
   62|  3.34k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.34k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.34k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.34k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.34k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.34k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.34k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.34k|{
  122|  3.34k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.34k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.34k|    buf.resize(sizeof...(Args));
  125|  3.34k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.34k|    return buf;
  127|  3.34k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.34k|{
  108|  3.34k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  3.34k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  3.34k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.34k|{
  185|  3.34k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.34k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.34k|                                   format_strings);
  188|  3.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.34k|{
  133|       |    // Regular scan
  134|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.0k, False: 3.34k]
  ------------------
  135|  20.0k|        auto it = scn::ranges::begin(source);
  136|   235k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   235k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   235k|            auto result = scn::scan<T>(
  139|   235k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   235k|                scn::runtime_format(f));
  141|   235k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.0k, False: 215k]
  ------------------
  142|  20.0k|                break;
  143|  20.0k|            }
  144|   215k|            it = result->begin();
  145|   215k|        }
  146|  20.0k|    }
  147|       |
  148|       |    // scan localized
  149|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.0k, False: 3.34k]
  ------------------
  150|  20.0k|        auto it = scn::ranges::begin(source);
  151|   235k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   235k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   235k|            auto result = scn::scan<T>(
  154|   235k|                global_locale,
  155|   235k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   235k|                scn::runtime_format(f));
  157|   235k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.0k, False: 215k]
  ------------------
  158|  20.0k|                break;
  159|  20.0k|            }
  160|   215k|            it = result->begin();
  161|   215k|        }
  162|  20.0k|    }
  163|       |
  164|       |    // scan_value
  165|  3.34k|    {
  166|  3.34k|        auto it = scn::ranges::begin(source);
  167|  50.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  50.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  50.6k|            auto result = scn::scan_value<T>(
  170|  50.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  50.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.34k, False: 47.2k]
  ------------------
  172|  3.34k|                break;
  173|  3.34k|            }
  174|  47.2k|            it = result->begin();
  175|  47.2k|        }
  176|  3.34k|    }
  177|  3.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.34k|{
  133|       |    // Regular scan
  134|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.0k, False: 3.34k]
  ------------------
  135|  20.0k|        auto it = scn::ranges::begin(source);
  136|   243k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   243k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   243k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   243k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   243k|            auto result = scn::scan<T>(
  139|   243k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   243k|                scn::runtime_format(f));
  141|   243k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.0k, False: 223k]
  ------------------
  142|  20.0k|                break;
  143|  20.0k|            }
  144|   223k|            it = result->begin();
  145|   223k|        }
  146|  20.0k|    }
  147|       |
  148|       |    // scan localized
  149|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.0k, False: 3.34k]
  ------------------
  150|  20.0k|        auto it = scn::ranges::begin(source);
  151|   243k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   243k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   243k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   243k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   243k|            auto result = scn::scan<T>(
  154|   243k|                global_locale,
  155|   243k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   243k|                scn::runtime_format(f));
  157|   243k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.0k, False: 223k]
  ------------------
  158|  20.0k|                break;
  159|  20.0k|            }
  160|   223k|            it = result->begin();
  161|   223k|        }
  162|  20.0k|    }
  163|       |
  164|       |    // scan_value
  165|  3.34k|    {
  166|  3.34k|        auto it = scn::ranges::begin(source);
  167|  52.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  52.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  52.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  52.8k|            auto result = scn::scan_value<T>(
  170|  52.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  52.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.34k, False: 49.4k]
  ------------------
  172|  3.34k|                break;
  173|  3.34k|            }
  174|  49.4k|            it = result->begin();
  175|  49.4k|        }
  176|  3.34k|    }
  177|  3.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.34k|{
  133|       |    // Regular scan
  134|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.0k, False: 3.34k]
  ------------------
  135|  20.0k|        auto it = scn::ranges::begin(source);
  136|   246k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   246k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   246k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   246k|            auto result = scn::scan<T>(
  139|   246k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   246k|                scn::runtime_format(f));
  141|   246k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.0k, False: 226k]
  ------------------
  142|  20.0k|                break;
  143|  20.0k|            }
  144|   226k|            it = result->begin();
  145|   226k|        }
  146|  20.0k|    }
  147|       |
  148|       |    // scan localized
  149|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.0k, False: 3.34k]
  ------------------
  150|  20.0k|        auto it = scn::ranges::begin(source);
  151|   246k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   246k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   246k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   246k|            auto result = scn::scan<T>(
  154|   246k|                global_locale,
  155|   246k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   246k|                scn::runtime_format(f));
  157|   246k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.0k, False: 226k]
  ------------------
  158|  20.0k|                break;
  159|  20.0k|            }
  160|   226k|            it = result->begin();
  161|   226k|        }
  162|  20.0k|    }
  163|       |
  164|       |    // scan_value
  165|  3.34k|    {
  166|  3.34k|        auto it = scn::ranges::begin(source);
  167|  53.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  53.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  53.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  53.7k|            auto result = scn::scan_value<T>(
  170|  53.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  53.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.34k, False: 50.4k]
  ------------------
  172|  3.34k|                break;
  173|  3.34k|            }
  174|  50.4k|            it = result->begin();
  175|  50.4k|        }
  176|  3.34k|    }
  177|  3.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.34k|{
  133|       |    // Regular scan
  134|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.0k, False: 3.34k]
  ------------------
  135|  20.0k|        auto it = scn::ranges::begin(source);
  136|   273k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   273k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   273k|            auto result = scn::scan<T>(
  139|   273k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   273k|                scn::runtime_format(f));
  141|   273k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.0k, False: 253k]
  ------------------
  142|  20.0k|                break;
  143|  20.0k|            }
  144|   253k|            it = result->begin();
  145|   253k|        }
  146|  20.0k|    }
  147|       |
  148|       |    // scan localized
  149|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.0k, False: 3.34k]
  ------------------
  150|  20.0k|        auto it = scn::ranges::begin(source);
  151|   273k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   273k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   273k|            auto result = scn::scan<T>(
  154|   273k|                global_locale,
  155|   273k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   273k|                scn::runtime_format(f));
  157|   273k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.0k, False: 253k]
  ------------------
  158|  20.0k|                break;
  159|  20.0k|            }
  160|   253k|            it = result->begin();
  161|   253k|        }
  162|  20.0k|    }
  163|       |
  164|       |    // scan_value
  165|  3.34k|    {
  166|  3.34k|        auto it = scn::ranges::begin(source);
  167|  55.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  55.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  55.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  55.4k|            auto result = scn::scan_value<T>(
  170|  55.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  55.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.34k, False: 52.1k]
  ------------------
  172|  3.34k|                break;
  173|  3.34k|            }
  174|  52.1k|            it = result->begin();
  175|  52.1k|        }
  176|  3.34k|    }
  177|  3.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.34k|{
  133|       |    // Regular scan
  134|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.0k, False: 3.34k]
  ------------------
  135|  20.0k|        auto it = scn::ranges::begin(source);
  136|   287k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   287k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   287k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   287k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   287k|            auto result = scn::scan<T>(
  139|   287k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   287k|                scn::runtime_format(f));
  141|   287k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.0k, False: 267k]
  ------------------
  142|  20.0k|                break;
  143|  20.0k|            }
  144|   267k|            it = result->begin();
  145|   267k|        }
  146|  20.0k|    }
  147|       |
  148|       |    // scan localized
  149|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.0k, False: 3.34k]
  ------------------
  150|  20.0k|        auto it = scn::ranges::begin(source);
  151|   287k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   287k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   287k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   287k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   287k|            auto result = scn::scan<T>(
  154|   287k|                global_locale,
  155|   287k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   287k|                scn::runtime_format(f));
  157|   287k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.0k, False: 267k]
  ------------------
  158|  20.0k|                break;
  159|  20.0k|            }
  160|   267k|            it = result->begin();
  161|   267k|        }
  162|  20.0k|    }
  163|       |
  164|       |    // scan_value
  165|  3.34k|    {
  166|  3.34k|        auto it = scn::ranges::begin(source);
  167|  58.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  58.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  58.5k|            auto result = scn::scan_value<T>(
  170|  58.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  58.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.34k, False: 55.1k]
  ------------------
  172|  3.34k|                break;
  173|  3.34k|            }
  174|  55.1k|            it = result->begin();
  175|  55.1k|        }
  176|  3.34k|    }
  177|  3.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.34k|{
  133|       |    // Regular scan
  134|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.0k, False: 3.34k]
  ------------------
  135|  20.0k|        auto it = scn::ranges::begin(source);
  136|   290k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   290k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   290k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   290k|            auto result = scn::scan<T>(
  139|   290k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   290k|                scn::runtime_format(f));
  141|   290k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.0k, False: 270k]
  ------------------
  142|  20.0k|                break;
  143|  20.0k|            }
  144|   270k|            it = result->begin();
  145|   270k|        }
  146|  20.0k|    }
  147|       |
  148|       |    // scan localized
  149|  20.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.0k, False: 3.34k]
  ------------------
  150|  20.0k|        auto it = scn::ranges::begin(source);
  151|   290k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   290k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   290k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   290k|            auto result = scn::scan<T>(
  154|   290k|                global_locale,
  155|   290k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   290k|                scn::runtime_format(f));
  157|   290k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.0k, False: 270k]
  ------------------
  158|  20.0k|                break;
  159|  20.0k|            }
  160|   270k|            it = result->begin();
  161|   270k|        }
  162|  20.0k|    }
  163|       |
  164|       |    // scan_value
  165|  3.34k|    {
  166|  3.34k|        auto it = scn::ranges::begin(source);
  167|  59.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  59.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  59.1k|            auto result = scn::scan_value<T>(
  170|  59.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  59.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.34k, False: 55.7k]
  ------------------
  172|  3.34k|                break;
  173|  3.34k|            }
  174|  55.7k|            it = result->begin();
  175|  55.7k|        }
  176|  3.34k|    }
  177|  3.34k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.34k|{
   90|  3.34k|    using char_type = ranges::range_value_t<Source>;
   91|  3.34k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.34k|    deque.clear();
   93|  3.34k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.34k|              std::back_inserter(deque));
   95|  3.34k|    return deque;
   96|  3.34k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.34k|{
   79|  3.34k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  3.34k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  3.34k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.34k|{
  122|  3.34k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.34k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.34k|    buf.resize(sizeof...(Args));
  125|  3.34k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.34k|    return buf;
  127|  3.34k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.34k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  3.34k|    else {
  112|  3.34k|        return wformat_string_view_buffer;
  113|  3.34k|    }
  114|  3.34k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  6.69k|{
  185|  6.69k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  6.69k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  6.69k|                                   format_strings);
  188|  6.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.69k|{
  133|       |    // Regular scan
  134|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.1k, False: 6.69k]
  ------------------
  135|  40.1k|        auto it = scn::ranges::begin(source);
  136|   127k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   127k|            auto result = scn::scan<T>(
  139|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   127k|                scn::runtime_format(f));
  141|   127k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.1k, False: 86.9k]
  ------------------
  142|  40.1k|                break;
  143|  40.1k|            }
  144|  86.9k|            it = result->begin();
  145|  86.9k|        }
  146|  40.1k|    }
  147|       |
  148|       |    // scan localized
  149|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.1k, False: 6.69k]
  ------------------
  150|  40.1k|        auto it = scn::ranges::begin(source);
  151|   127k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   127k|            auto result = scn::scan<T>(
  154|   127k|                global_locale,
  155|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   127k|                scn::runtime_format(f));
  157|   127k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.1k, False: 86.9k]
  ------------------
  158|  40.1k|                break;
  159|  40.1k|            }
  160|  86.9k|            it = result->begin();
  161|  86.9k|        }
  162|  40.1k|    }
  163|       |
  164|       |    // scan_value
  165|  6.69k|    {
  166|  6.69k|        auto it = scn::ranges::begin(source);
  167|  23.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.4k|            auto result = scn::scan_value<T>(
  170|  23.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.69k, False: 16.7k]
  ------------------
  172|  6.69k|                break;
  173|  6.69k|            }
  174|  16.7k|            it = result->begin();
  175|  16.7k|        }
  176|  6.69k|    }
  177|  6.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.69k|{
  133|       |    // Regular scan
  134|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.1k, False: 6.69k]
  ------------------
  135|  40.1k|        auto it = scn::ranges::begin(source);
  136|   143k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   143k|            auto result = scn::scan<T>(
  139|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   143k|                scn::runtime_format(f));
  141|   143k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.1k, False: 103k]
  ------------------
  142|  40.1k|                break;
  143|  40.1k|            }
  144|   103k|            it = result->begin();
  145|   103k|        }
  146|  40.1k|    }
  147|       |
  148|       |    // scan localized
  149|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.1k, False: 6.69k]
  ------------------
  150|  40.1k|        auto it = scn::ranges::begin(source);
  151|   143k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   143k|            auto result = scn::scan<T>(
  154|   143k|                global_locale,
  155|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   143k|                scn::runtime_format(f));
  157|   143k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.1k, False: 103k]
  ------------------
  158|  40.1k|                break;
  159|  40.1k|            }
  160|   103k|            it = result->begin();
  161|   103k|        }
  162|  40.1k|    }
  163|       |
  164|       |    // scan_value
  165|  6.69k|    {
  166|  6.69k|        auto it = scn::ranges::begin(source);
  167|  28.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  28.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  28.9k|            auto result = scn::scan_value<T>(
  170|  28.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  28.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.69k, False: 22.2k]
  ------------------
  172|  6.69k|                break;
  173|  6.69k|            }
  174|  22.2k|            it = result->begin();
  175|  22.2k|        }
  176|  6.69k|    }
  177|  6.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.69k|{
  133|       |    // Regular scan
  134|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.1k, False: 6.69k]
  ------------------
  135|  40.1k|        auto it = scn::ranges::begin(source);
  136|   146k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   146k|            auto result = scn::scan<T>(
  139|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   146k|                scn::runtime_format(f));
  141|   146k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.1k, False: 106k]
  ------------------
  142|  40.1k|                break;
  143|  40.1k|            }
  144|   106k|            it = result->begin();
  145|   106k|        }
  146|  40.1k|    }
  147|       |
  148|       |    // scan localized
  149|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.1k, False: 6.69k]
  ------------------
  150|  40.1k|        auto it = scn::ranges::begin(source);
  151|   146k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   146k|            auto result = scn::scan<T>(
  154|   146k|                global_locale,
  155|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   146k|                scn::runtime_format(f));
  157|   146k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.1k, False: 106k]
  ------------------
  158|  40.1k|                break;
  159|  40.1k|            }
  160|   106k|            it = result->begin();
  161|   106k|        }
  162|  40.1k|    }
  163|       |
  164|       |    // scan_value
  165|  6.69k|    {
  166|  6.69k|        auto it = scn::ranges::begin(source);
  167|  29.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  29.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  29.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  29.8k|            auto result = scn::scan_value<T>(
  170|  29.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  29.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.69k, False: 23.1k]
  ------------------
  172|  6.69k|                break;
  173|  6.69k|            }
  174|  23.1k|            it = result->begin();
  175|  23.1k|        }
  176|  6.69k|    }
  177|  6.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.69k|{
  133|       |    // Regular scan
  134|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.1k, False: 6.69k]
  ------------------
  135|  40.1k|        auto it = scn::ranges::begin(source);
  136|   127k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   127k|            auto result = scn::scan<T>(
  139|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   127k|                scn::runtime_format(f));
  141|   127k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.1k, False: 86.8k]
  ------------------
  142|  40.1k|                break;
  143|  40.1k|            }
  144|  86.8k|            it = result->begin();
  145|  86.8k|        }
  146|  40.1k|    }
  147|       |
  148|       |    // scan localized
  149|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.1k, False: 6.69k]
  ------------------
  150|  40.1k|        auto it = scn::ranges::begin(source);
  151|   127k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   127k|            auto result = scn::scan<T>(
  154|   127k|                global_locale,
  155|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   127k|                scn::runtime_format(f));
  157|   127k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.1k, False: 86.8k]
  ------------------
  158|  40.1k|                break;
  159|  40.1k|            }
  160|  86.8k|            it = result->begin();
  161|  86.8k|        }
  162|  40.1k|    }
  163|       |
  164|       |    // scan_value
  165|  6.69k|    {
  166|  6.69k|        auto it = scn::ranges::begin(source);
  167|  23.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.4k|            auto result = scn::scan_value<T>(
  170|  23.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.69k, False: 16.7k]
  ------------------
  172|  6.69k|                break;
  173|  6.69k|            }
  174|  16.7k|            it = result->begin();
  175|  16.7k|        }
  176|  6.69k|    }
  177|  6.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.69k|{
  133|       |    // Regular scan
  134|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.1k, False: 6.69k]
  ------------------
  135|  40.1k|        auto it = scn::ranges::begin(source);
  136|   143k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   143k|            auto result = scn::scan<T>(
  139|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   143k|                scn::runtime_format(f));
  141|   143k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.1k, False: 103k]
  ------------------
  142|  40.1k|                break;
  143|  40.1k|            }
  144|   103k|            it = result->begin();
  145|   103k|        }
  146|  40.1k|    }
  147|       |
  148|       |    // scan localized
  149|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.1k, False: 6.69k]
  ------------------
  150|  40.1k|        auto it = scn::ranges::begin(source);
  151|   143k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   143k|            auto result = scn::scan<T>(
  154|   143k|                global_locale,
  155|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   143k|                scn::runtime_format(f));
  157|   143k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.1k, False: 103k]
  ------------------
  158|  40.1k|                break;
  159|  40.1k|            }
  160|   103k|            it = result->begin();
  161|   103k|        }
  162|  40.1k|    }
  163|       |
  164|       |    // scan_value
  165|  6.69k|    {
  166|  6.69k|        auto it = scn::ranges::begin(source);
  167|  28.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  28.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  28.9k|            auto result = scn::scan_value<T>(
  170|  28.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  28.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.69k, False: 22.2k]
  ------------------
  172|  6.69k|                break;
  173|  6.69k|            }
  174|  22.2k|            it = result->begin();
  175|  22.2k|        }
  176|  6.69k|    }
  177|  6.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.69k|{
  133|       |    // Regular scan
  134|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.1k, False: 6.69k]
  ------------------
  135|  40.1k|        auto it = scn::ranges::begin(source);
  136|   146k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   146k|            auto result = scn::scan<T>(
  139|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   146k|                scn::runtime_format(f));
  141|   146k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.1k, False: 106k]
  ------------------
  142|  40.1k|                break;
  143|  40.1k|            }
  144|   106k|            it = result->begin();
  145|   106k|        }
  146|  40.1k|    }
  147|       |
  148|       |    // scan localized
  149|  40.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.1k, False: 6.69k]
  ------------------
  150|  40.1k|        auto it = scn::ranges::begin(source);
  151|   146k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   146k|            auto result = scn::scan<T>(
  154|   146k|                global_locale,
  155|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   146k|                scn::runtime_format(f));
  157|   146k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.1k, False: 106k]
  ------------------
  158|  40.1k|                break;
  159|  40.1k|            }
  160|   106k|            it = result->begin();
  161|   106k|        }
  162|  40.1k|    }
  163|       |
  164|       |    // scan_value
  165|  6.69k|    {
  166|  6.69k|        auto it = scn::ranges::begin(source);
  167|  29.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  29.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  29.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  29.8k|            auto result = scn::scan_value<T>(
  170|  29.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  29.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.69k, False: 23.1k]
  ------------------
  172|  6.69k|                break;
  173|  6.69k|            }
  174|  23.1k|            it = result->begin();
  175|  23.1k|        }
  176|  6.69k|    }
  177|  6.69k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  6.69k|{
   90|  6.69k|    using char_type = ranges::range_value_t<Source>;
   91|  6.69k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  6.69k|    deque.clear();
   93|  6.69k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  6.69k|              std::back_inserter(deque));
   95|  6.69k|    return deque;
   96|  6.69k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  6.69k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  6.69k|    else {
   83|  6.69k|        return wnoncontiguous_buffer;
   84|  6.69k|    }
   85|  6.69k|}

